
build/enclave_stage1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be0  080000f0  080000f0  000080f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000488  20000000  08007cd0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000012c  20000488  08008158  00010488  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  200005b4  08008284  00010488  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  200005b8  08008288  00010488  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  200005bc  0800828c  00010488  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000dbc  08008a8c  00010488  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000dbe  08008a8e  00010488  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000dc0  08008a90  00010488  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000dc4  08008a94  00010488  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000dc5  08008a95  00010488  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000dcb  08008a9b  00010488  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000dcc  08008a9c  00010488  2**0
                  ALLOC
 14 .bss.__malloc_sbrk_start 00000004  20000dd0  08008aa0  00010488  2**2
                  ALLOC
 15 .bss.__malloc_free_list 00000004  20000dd4  08008aa4  00010488  2**2
                  ALLOC
 16 .bss.heap_end.4246 00000004  20000dd8  08008aa8  00010488  2**2
                  ALLOC
 17 ._usrstack    00000100  20000ddc  08008aac  00010488  2**0
                  ALLOC
 18 .comment      00000070  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY
 19 .ARM.attributes 0000002f  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY
 20 .debug_aranges 000008f8  00000000  00000000  00010528  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   0000c058  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 00002c86  00000000  00000000  0001ce78  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line   00003fea  00000000  00000000  0001fafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_frame  000019f4  00000000  00000000  00023ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000025c5  00000000  00000000  000254dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_loc    0000a2cb  00000000  00000000  00027aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00000f30  00000000  00000000  00031d70  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	08000b4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, fp}
 8000008:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800000c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000010:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000014:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000018:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
	...
 800002c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000030:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800003c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000040:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000044:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000048:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800004c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000050:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000054:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000058:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800005c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000060:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000064:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000068:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800006c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000070:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000074:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000078:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800007c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000080:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000084:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000088:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800008c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000090:	08000f81 	stmdaeq	r0, {r0, r7, r8, r9, sl, fp}
 8000094:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 8000098:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 800009c:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000a8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ac:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000b8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000bc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000c8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000cc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000d8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000dc:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e0:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e4:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000e8:	08000b95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <GPIO_DeInit>:
 80000f0:	b508      	push	{r3, lr}
 80000f2:	4b2f      	ldr	r3, [pc, #188]	; (80001b0 <GPIO_DeInit+0xc0>)
 80000f4:	4298      	cmp	r0, r3
 80000f6:	d01e      	beq.n	8000136 <GPIO_DeInit+0x46>
 80000f8:	4b2e      	ldr	r3, [pc, #184]	; (80001b4 <GPIO_DeInit+0xc4>)
 80000fa:	4298      	cmp	r0, r3
 80000fc:	d025      	beq.n	800014a <GPIO_DeInit+0x5a>
 80000fe:	4b2e      	ldr	r3, [pc, #184]	; (80001b8 <GPIO_DeInit+0xc8>)
 8000100:	4298      	cmp	r0, r3
 8000102:	d02c      	beq.n	800015e <GPIO_DeInit+0x6e>
 8000104:	4b2d      	ldr	r3, [pc, #180]	; (80001bc <GPIO_DeInit+0xcc>)
 8000106:	4298      	cmp	r0, r3
 8000108:	d033      	beq.n	8000172 <GPIO_DeInit+0x82>
 800010a:	4b2d      	ldr	r3, [pc, #180]	; (80001c0 <GPIO_DeInit+0xd0>)
 800010c:	4298      	cmp	r0, r3
 800010e:	d03a      	beq.n	8000186 <GPIO_DeInit+0x96>
 8000110:	4b2c      	ldr	r3, [pc, #176]	; (80001c4 <GPIO_DeInit+0xd4>)
 8000112:	4298      	cmp	r0, r3
 8000114:	d041      	beq.n	800019a <GPIO_DeInit+0xaa>
 8000116:	4b2c      	ldr	r3, [pc, #176]	; (80001c8 <GPIO_DeInit+0xd8>)
 8000118:	4298      	cmp	r0, r3
 800011a:	d000      	beq.n	800011e <GPIO_DeInit+0x2e>
 800011c:	bd08      	pop	{r3, pc}
 800011e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000122:	2101      	movs	r1, #1
 8000124:	f000 faac 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000128:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800012c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000130:	2100      	movs	r1, #0
 8000132:	f000 baa5 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000136:	2004      	movs	r0, #4
 8000138:	2101      	movs	r1, #1
 800013a:	f000 faa1 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000142:	2004      	movs	r0, #4
 8000144:	2100      	movs	r1, #0
 8000146:	f000 ba9b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800014a:	2008      	movs	r0, #8
 800014c:	2101      	movs	r1, #1
 800014e:	f000 fa97 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000156:	2008      	movs	r0, #8
 8000158:	2100      	movs	r1, #0
 800015a:	f000 ba91 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800015e:	2010      	movs	r0, #16
 8000160:	2101      	movs	r1, #1
 8000162:	f000 fa8d 	bl	8000680 <RCC_APB2PeriphResetCmd>
 8000166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800016a:	2010      	movs	r0, #16
 800016c:	2100      	movs	r1, #0
 800016e:	f000 ba87 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000172:	2020      	movs	r0, #32
 8000174:	2101      	movs	r1, #1
 8000176:	f000 fa83 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800017a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800017e:	2020      	movs	r0, #32
 8000180:	2100      	movs	r1, #0
 8000182:	f000 ba7d 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 8000186:	2040      	movs	r0, #64	; 0x40
 8000188:	2101      	movs	r1, #1
 800018a:	f000 fa79 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800018e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000192:	2040      	movs	r0, #64	; 0x40
 8000194:	2100      	movs	r1, #0
 8000196:	f000 ba73 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800019a:	2080      	movs	r0, #128	; 0x80
 800019c:	2101      	movs	r1, #1
 800019e:	f000 fa6f 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001a6:	2080      	movs	r0, #128	; 0x80
 80001a8:	2100      	movs	r1, #0
 80001aa:	f000 ba69 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001ae:	bf00      	nop
 80001b0:	40010800 	andmi	r0, r1, r0, lsl #16
 80001b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80001b8:	40011000 	andmi	r1, r1, r0
 80001bc:	40011400 	andmi	r1, r1, r0, lsl #8
 80001c0:	40011800 	andmi	r1, r1, r0, lsl #16
 80001c4:	40011c00 	andmi	r1, r1, r0, lsl #24
 80001c8:	40012000 	andmi	r2, r1, r0

080001cc <GPIO_AFIODeInit>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	2001      	movs	r0, #1
 80001d0:	4601      	mov	r1, r0
 80001d2:	f000 fa55 	bl	8000680 <RCC_APB2PeriphResetCmd>
 80001d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80001da:	2001      	movs	r0, #1
 80001dc:	2100      	movs	r1, #0
 80001de:	f000 ba4f 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 80001e2:	bf00      	nop

080001e4 <GPIO_Init>:
 80001e4:	78cb      	ldrb	r3, [r1, #3]
 80001e6:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ea:	f003 060f 	and.w	r6, r3, #15
 80001ee:	06db      	lsls	r3, r3, #27
 80001f0:	bf48      	it	mi
 80001f2:	788b      	ldrbmi	r3, [r1, #2]
 80001f4:	880a      	ldrh	r2, [r1, #0]
 80001f6:	bf48      	it	mi
 80001f8:	431e      	orrmi	r6, r3
 80001fa:	f012 0fff 	tst.w	r2, #255	; 0xff
 80001fe:	d026      	beq.n	800024e <GPIO_Init+0x6a>
 8000200:	6807      	ldr	r7, [r0, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2501      	movs	r5, #1
 8000206:	f04f 080f 	mov.w	r8, #15
 800020a:	e003      	b.n	8000214 <GPIO_Init+0x30>
 800020c:	3301      	adds	r3, #1
 800020e:	2b08      	cmp	r3, #8
 8000210:	d01b      	beq.n	800024a <GPIO_Init+0x66>
 8000212:	880a      	ldrh	r2, [r1, #0]
 8000214:	fa05 f403 	lsl.w	r4, r5, r3
 8000218:	4022      	ands	r2, r4
 800021a:	42a2      	cmp	r2, r4
 800021c:	d1f6      	bne.n	800020c <GPIO_Init+0x28>
 800021e:	009c      	lsls	r4, r3, #2
 8000220:	fa08 f904 	lsl.w	r9, r8, r4
 8000224:	fa06 f404 	lsl.w	r4, r6, r4
 8000228:	f891 c003 	ldrb.w	ip, [r1, #3]
 800022c:	ea27 0709 	bic.w	r7, r7, r9
 8000230:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8000234:	ea47 0704 	orr.w	r7, r7, r4
 8000238:	d034      	beq.n	80002a4 <GPIO_Init+0xc0>
 800023a:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 800023e:	f103 0301 	add.w	r3, r3, #1
 8000242:	bf08      	it	eq
 8000244:	6102      	streq	r2, [r0, #16]
 8000246:	2b08      	cmp	r3, #8
 8000248:	d1e3      	bne.n	8000212 <GPIO_Init+0x2e>
 800024a:	6007      	str	r7, [r0, #0]
 800024c:	880a      	ldrh	r2, [r1, #0]
 800024e:	2aff      	cmp	r2, #255	; 0xff
 8000250:	d925      	bls.n	800029e <GPIO_Init+0xba>
 8000252:	6847      	ldr	r7, [r0, #4]
 8000254:	2300      	movs	r3, #0
 8000256:	2501      	movs	r5, #1
 8000258:	f04f 0c0f 	mov.w	ip, #15
 800025c:	e003      	b.n	8000266 <GPIO_Init+0x82>
 800025e:	3301      	adds	r3, #1
 8000260:	2b08      	cmp	r3, #8
 8000262:	d01b      	beq.n	800029c <GPIO_Init+0xb8>
 8000264:	880a      	ldrh	r2, [r1, #0]
 8000266:	f103 0408 	add.w	r4, r3, #8
 800026a:	fa05 f404 	lsl.w	r4, r5, r4
 800026e:	4022      	ands	r2, r4
 8000270:	42a2      	cmp	r2, r4
 8000272:	d1f4      	bne.n	800025e <GPIO_Init+0x7a>
 8000274:	009c      	lsls	r4, r3, #2
 8000276:	fa0c f904 	lsl.w	r9, ip, r4
 800027a:	fa06 f804 	lsl.w	r8, r6, r4
 800027e:	78cc      	ldrb	r4, [r1, #3]
 8000280:	3301      	adds	r3, #1
 8000282:	2c28      	cmp	r4, #40	; 0x28
 8000284:	bf04      	itt	eq
 8000286:	6142      	streq	r2, [r0, #20]
 8000288:	78cc      	ldrbeq	r4, [r1, #3]
 800028a:	ea27 0709 	bic.w	r7, r7, r9
 800028e:	2c48      	cmp	r4, #72	; 0x48
 8000290:	bf08      	it	eq
 8000292:	6102      	streq	r2, [r0, #16]
 8000294:	2b08      	cmp	r3, #8
 8000296:	ea47 0708 	orr.w	r7, r7, r8
 800029a:	d1e3      	bne.n	8000264 <GPIO_Init+0x80>
 800029c:	6047      	str	r7, [r0, #4]
 800029e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a2:	4770      	bx	lr
 80002a4:	6142      	str	r2, [r0, #20]
 80002a6:	e7b1      	b.n	800020c <GPIO_Init+0x28>

080002a8 <GPIO_StructInit>:
 80002a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002ac:	2202      	movs	r2, #2
 80002ae:	2304      	movs	r3, #4
 80002b0:	8001      	strh	r1, [r0, #0]
 80002b2:	7082      	strb	r2, [r0, #2]
 80002b4:	70c3      	strb	r3, [r0, #3]
 80002b6:	4770      	bx	lr

080002b8 <GPIO_ReadInputDataBit>:
 80002b8:	6883      	ldr	r3, [r0, #8]
 80002ba:	4219      	tst	r1, r3
 80002bc:	bf0c      	ite	eq
 80002be:	2000      	moveq	r0, #0
 80002c0:	2001      	movne	r0, #1
 80002c2:	4770      	bx	lr

080002c4 <GPIO_ReadInputData>:
 80002c4:	6880      	ldr	r0, [r0, #8]
 80002c6:	b280      	uxth	r0, r0
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <GPIO_ReadOutputDataBit>:
 80002cc:	68c3      	ldr	r3, [r0, #12]
 80002ce:	4219      	tst	r1, r3
 80002d0:	bf0c      	ite	eq
 80002d2:	2000      	moveq	r0, #0
 80002d4:	2001      	movne	r0, #1
 80002d6:	4770      	bx	lr

080002d8 <GPIO_ReadOutputData>:
 80002d8:	68c0      	ldr	r0, [r0, #12]
 80002da:	b280      	uxth	r0, r0
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <GPIO_SetBits>:
 80002e0:	6101      	str	r1, [r0, #16]
 80002e2:	4770      	bx	lr

080002e4 <GPIO_ResetBits>:
 80002e4:	6141      	str	r1, [r0, #20]
 80002e6:	4770      	bx	lr

080002e8 <GPIO_WriteBit>:
 80002e8:	b90a      	cbnz	r2, 80002ee <GPIO_WriteBit+0x6>
 80002ea:	6141      	str	r1, [r0, #20]
 80002ec:	4770      	bx	lr
 80002ee:	6101      	str	r1, [r0, #16]
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <GPIO_Write>:
 80002f4:	60c1      	str	r1, [r0, #12]
 80002f6:	4770      	bx	lr

080002f8 <GPIO_PinLockConfig>:
 80002f8:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 80002fc:	6183      	str	r3, [r0, #24]
 80002fe:	6181      	str	r1, [r0, #24]
 8000300:	6183      	str	r3, [r0, #24]
 8000302:	6983      	ldr	r3, [r0, #24]
 8000304:	6983      	ldr	r3, [r0, #24]
 8000306:	4770      	bx	lr

08000308 <GPIO_EventOutputConfig>:
 8000308:	b410      	push	{r4}
 800030a:	4b06      	ldr	r3, [pc, #24]	; (8000324 <GPIO_EventOutputConfig+0x1c>)
 800030c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8000310:	681c      	ldr	r4, [r3, #0]
 8000312:	4022      	ands	r2, r4
 8000314:	4311      	orrs	r1, r2
 8000316:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800031a:	6018      	str	r0, [r3, #0]
 800031c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40010000 	andmi	r0, r1, r0

08000328 <GPIO_EventOutputCmd>:
 8000328:	4b01      	ldr	r3, [pc, #4]	; (8000330 <GPIO_EventOutputCmd+0x8>)
 800032a:	6018      	str	r0, [r3, #0]
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	4220001c 	eormi	r0, r0, #28

08000334 <GPIO_PinRemapConfig>:
 8000334:	b430      	push	{r4, r5}
 8000336:	2800      	cmp	r0, #0
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800033a:	f400 1240 	and.w	r2, r0, #3145728	; 0x300000
 800033e:	bfb4      	ite	lt
 8000340:	69db      	ldrlt	r3, [r3, #28]
 8000342:	685b      	ldrge	r3, [r3, #4]
 8000344:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8000348:	b284      	uxth	r4, r0
 800034a:	d01f      	beq.n	800038c <GPIO_PinRemapConfig+0x58>
 800034c:	02c2      	lsls	r2, r0, #11
 800034e:	d514      	bpl.n	800037a <GPIO_PinRemapConfig+0x46>
 8000350:	f3c0 4203 	ubfx	r2, r0, #16, #4
 8000354:	2503      	movs	r5, #3
 8000356:	fa05 f202 	lsl.w	r2, r5, r2
 800035a:	ea23 0302 	bic.w	r3, r3, r2
 800035e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000362:	b119      	cbz	r1, 800036c <GPIO_PinRemapConfig+0x38>
 8000364:	0d42      	lsrs	r2, r0, #21
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	4094      	lsls	r4, r2
 800036a:	4323      	orrs	r3, r4
 800036c:	4a0b      	ldr	r2, [pc, #44]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800036e:	2800      	cmp	r0, #0
 8000370:	bfb4      	ite	lt
 8000372:	61d3      	strlt	r3, [r2, #28]
 8000374:	6053      	strge	r3, [r2, #4]
 8000376:	bc30      	pop	{r4, r5}
 8000378:	4770      	bx	lr
 800037a:	0d42      	lsrs	r2, r0, #21
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	fa04 f202 	lsl.w	r2, r4, r2
 8000382:	ea23 0302 	bic.w	r3, r3, r2
 8000386:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800038a:	e7ea      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <GPIO_PinRemapConfig+0x68>)
 800038e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000392:	6855      	ldr	r5, [r2, #4]
 8000394:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8000398:	6055      	str	r5, [r2, #4]
 800039a:	e7e2      	b.n	8000362 <GPIO_PinRemapConfig+0x2e>
 800039c:	40010000 	andmi	r0, r1, r0

080003a0 <GPIO_EXTILineConfig>:
 80003a0:	f001 0303 	and.w	r3, r1, #3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	220f      	movs	r2, #15
 80003a8:	409a      	lsls	r2, r3
 80003aa:	fa00 f303 	lsl.w	r3, r0, r3
 80003ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80003b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80003b6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80003ba:	6888      	ldr	r0, [r1, #8]
 80003bc:	ea20 0202 	bic.w	r2, r0, r2
 80003c0:	608a      	str	r2, [r1, #8]
 80003c2:	688a      	ldr	r2, [r1, #8]
 80003c4:	4313      	orrs	r3, r2
 80003c6:	608b      	str	r3, [r1, #8]
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <GPIO_ETH_MediaInterfaceConfig>:
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 80003ce:	6018      	str	r0, [r3, #0]
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	422000dc 	eormi	r0, r0, #220	; 0xdc

080003d8 <RCC_DeInit>:
 80003d8:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <RCC_DeInit+0x38>)
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <RCC_DeInit+0x3c>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	f44f 011f 	mov.w	r1, #10420224	; 0x9f0000
 80003e2:	f040 0001 	orr.w	r0, r0, #1
 80003e6:	6018      	str	r0, [r3, #0]
 80003e8:	6858      	ldr	r0, [r3, #4]
 80003ea:	4002      	ands	r2, r0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	685a      	ldr	r2, [r3, #4]
 8000404:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	6099      	str	r1, [r3, #8]
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	andmi	r1, r2, r0
 8000414:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000

08000418 <RCC_HSEConfig>:
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <RCC_HSEConfig+0x34>)
 800041a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	d008      	beq.n	8000442 <RCC_HSEConfig+0x2a>
 8000430:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8000434:	d104      	bne.n	8000440 <RCC_HSEConfig+0x28>
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	4770      	bx	lr
 8000440:	4770      	bx	lr
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	4770      	bx	lr
 800044c:	40021000 	andmi	r1, r2, r0

08000450 <RCC_WaitForHSEStartUp>:
 8000450:	b082      	sub	sp, #8
 8000452:	2300      	movs	r3, #0
 8000454:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 8000456:	9301      	str	r3, [sp, #4]
 8000458:	6813      	ldr	r3, [r2, #0]
 800045a:	039b      	lsls	r3, r3, #14
 800045c:	d40c      	bmi.n	8000478 <RCC_WaitForHSEStartUp+0x28>
 800045e:	9b01      	ldr	r3, [sp, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	9b01      	ldr	r3, [sp, #4]
 8000466:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800046a:	d1f5      	bne.n	8000458 <RCC_WaitForHSEStartUp+0x8>
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_WaitForHSEStartUp+0x34>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8000474:	b002      	add	sp, #8
 8000476:	4770      	bx	lr
 8000478:	9b01      	ldr	r3, [sp, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9b01      	ldr	r3, [sp, #4]
 8000480:	e7f4      	b.n	800046c <RCC_WaitForHSEStartUp+0x1c>
 8000482:	bf00      	nop
 8000484:	40021000 	andmi	r1, r2, r0

08000488 <RCC_AdjustHSICalibrationValue>:
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <RCC_AdjustHSICalibrationValue+0x10>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000490:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000494:	6018      	str	r0, [r3, #0]
 8000496:	4770      	bx	lr
 8000498:	40021000 	andmi	r1, r2, r0

0800049c <RCC_HSICmd>:
 800049c:	4b01      	ldr	r3, [pc, #4]	; (80004a4 <RCC_HSICmd+0x8>)
 800049e:	6018      	str	r0, [r3, #0]
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	42420000 	submi	r0, r2, #0

080004a8 <RCC_PLLConfig>:
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <RCC_PLLConfig+0x10>)
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004b0:	4311      	orrs	r1, r2
 80004b2:	4308      	orrs	r0, r1
 80004b4:	6058      	str	r0, [r3, #4]
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	andmi	r1, r2, r0

080004bc <RCC_PLLCmd>:
 80004bc:	4b01      	ldr	r3, [pc, #4]	; (80004c4 <RCC_PLLCmd+0x8>)
 80004be:	6018      	str	r0, [r3, #0]
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	42420060 	submi	r0, r2, #96	; 0x60

080004c8 <RCC_SYSCLKConfig>:
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <RCC_SYSCLKConfig+0x10>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	f022 0203 	bic.w	r2, r2, #3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	6058      	str	r0, [r3, #4]
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40021000 	andmi	r1, r2, r0

080004dc <RCC_GetSYSCLKSource>:
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <RCC_GetSYSCLKSource+0xc>)
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	f000 000c 	and.w	r0, r0, #12
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	andmi	r1, r2, r0

080004ec <RCC_HCLKConfig>:
 80004ec:	4b03      	ldr	r3, [pc, #12]	; (80004fc <RCC_HCLKConfig+0x10>)
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80004f4:	4310      	orrs	r0, r2
 80004f6:	6058      	str	r0, [r3, #4]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	andmi	r1, r2, r0

08000500 <RCC_PCLK1Config>:
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <RCC_PCLK1Config+0x10>)
 8000502:	685a      	ldr	r2, [r3, #4]
 8000504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000508:	4310      	orrs	r0, r2
 800050a:	6058      	str	r0, [r3, #4]
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	andmi	r1, r2, r0

08000514 <RCC_PCLK2Config>:
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <RCC_PCLK2Config+0x10>)
 8000516:	685a      	ldr	r2, [r3, #4]
 8000518:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800051c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000520:	6058      	str	r0, [r3, #4]
 8000522:	4770      	bx	lr
 8000524:	40021000 	andmi	r1, r2, r0

08000528 <RCC_ITConfig>:
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <RCC_ITConfig+0x14>)
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	b919      	cbnz	r1, 8000536 <RCC_ITConfig+0xe>
 800052e:	ea22 0000 	bic.w	r0, r2, r0
 8000532:	7018      	strb	r0, [r3, #0]
 8000534:	4770      	bx	lr
 8000536:	4310      	orrs	r0, r2
 8000538:	7018      	strb	r0, [r3, #0]
 800053a:	4770      	bx	lr
 800053c:	40021009 	andmi	r1, r2, r9

08000540 <RCC_USBCLKConfig>:
 8000540:	4b01      	ldr	r3, [pc, #4]	; (8000548 <RCC_USBCLKConfig+0x8>)
 8000542:	6018      	str	r0, [r3, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	424200d8 	submi	r0, r2, #216	; 0xd8

0800054c <RCC_ADCCLKConfig>:
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <RCC_ADCCLKConfig+0x10>)
 800054e:	685a      	ldr	r2, [r3, #4]
 8000550:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000554:	4310      	orrs	r0, r2
 8000556:	6058      	str	r0, [r3, #4]
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	andmi	r1, r2, r0

08000560 <RCC_LSEConfig>:
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <RCC_LSEConfig+0x1c>)
 8000562:	2200      	movs	r2, #0
 8000564:	2801      	cmp	r0, #1
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	d005      	beq.n	8000578 <RCC_LSEConfig+0x18>
 800056c:	2804      	cmp	r0, #4
 800056e:	d102      	bne.n	8000576 <RCC_LSEConfig+0x16>
 8000570:	2205      	movs	r2, #5
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	4770      	bx	lr
 8000576:	4770      	bx	lr
 8000578:	7018      	strb	r0, [r3, #0]
 800057a:	4770      	bx	lr
 800057c:	40021020 	andmi	r1, r2, r0, lsr #32

08000580 <RCC_LSICmd>:
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <RCC_LSICmd+0x8>)
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	42420480 	submi	r0, r2, #128, 8	; 0x80000000

0800058c <RCC_RTCCLKConfig>:
 800058c:	4b02      	ldr	r3, [pc, #8]	; (8000598 <RCC_RTCCLKConfig+0xc>)
 800058e:	6a1a      	ldr	r2, [r3, #32]
 8000590:	4310      	orrs	r0, r2
 8000592:	6218      	str	r0, [r3, #32]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	andmi	r1, r2, r0

0800059c <RCC_RTCCLKCmd>:
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <RCC_RTCCLKCmd+0x8>)
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	4242043c 	submi	r0, r2, #60, 8	; 0x3c000000

080005a8 <RCC_GetClocksFreq>:
 80005a8:	b410      	push	{r4}
 80005aa:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005ac:	6853      	ldr	r3, [r2, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d001      	beq.n	80005ba <RCC_GetClocksFreq+0x12>
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d021      	beq.n	80005fe <RCC_GetClocksFreq+0x56>
 80005ba:	491c      	ldr	r1, [pc, #112]	; (800062c <RCC_GetClocksFreq+0x84>)
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <RCC_GetClocksFreq+0x80>)
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <RCC_GetClocksFreq+0x88>)
 80005c2:	6854      	ldr	r4, [r2, #4]
 80005c4:	f3c4 1403 	ubfx	r4, r4, #4, #4
 80005c8:	5d1c      	ldrb	r4, [r3, r4]
 80005ca:	40e1      	lsrs	r1, r4
 80005cc:	6041      	str	r1, [r0, #4]
 80005ce:	6854      	ldr	r4, [r2, #4]
 80005d0:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80005d4:	5d1c      	ldrb	r4, [r3, r4]
 80005d6:	fa21 f404 	lsr.w	r4, r1, r4
 80005da:	6084      	str	r4, [r0, #8]
 80005dc:	6854      	ldr	r4, [r2, #4]
 80005de:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 80005e2:	5d1c      	ldrb	r4, [r3, r4]
 80005e4:	40e1      	lsrs	r1, r4
 80005e6:	60c1      	str	r1, [r0, #12]
 80005e8:	6852      	ldr	r2, [r2, #4]
 80005ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005ee:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80005f2:	4413      	add	r3, r2
 80005f4:	7c1b      	ldrb	r3, [r3, #16]
 80005f6:	fbb1 f1f3 	udiv	r1, r1, r3
 80005fa:	6101      	str	r1, [r0, #16]
 80005fc:	4770      	bx	lr
 80005fe:	6851      	ldr	r1, [r2, #4]
 8000600:	6853      	ldr	r3, [r2, #4]
 8000602:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8000606:	03dc      	lsls	r4, r3, #15
 8000608:	f101 0102 	add.w	r1, r1, #2
 800060c:	d507      	bpl.n	800061e <RCC_GetClocksFreq+0x76>
 800060e:	6853      	ldr	r3, [r2, #4]
 8000610:	039b      	lsls	r3, r3, #14
 8000612:	d404      	bmi.n	800061e <RCC_GetClocksFreq+0x76>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <RCC_GetClocksFreq+0x84>)
 8000616:	fb03 f101 	mul.w	r1, r3, r1
 800061a:	6001      	str	r1, [r0, #0]
 800061c:	e7cf      	b.n	80005be <RCC_GetClocksFreq+0x16>
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <RCC_GetClocksFreq+0x8c>)
 8000620:	fb03 f101 	mul.w	r1, r3, r1
 8000624:	6001      	str	r1, [r0, #0]
 8000626:	e7ca      	b.n	80005be <RCC_GetClocksFreq+0x16>
 8000628:	40021000 	andmi	r1, r2, r0
 800062c:	007a1200 	rsbseq	r1, sl, r0, lsl #4
 8000630:	20000000 	andcs	r0, r0, r0
 8000634:	003d0900 	eorseq	r0, sp, r0, lsl #18

08000638 <RCC_AHBPeriphClockCmd>:
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <RCC_AHBPeriphClockCmd+0x14>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	b919      	cbnz	r1, 8000646 <RCC_AHBPeriphClockCmd+0xe>
 800063e:	ea22 0000 	bic.w	r0, r2, r0
 8000642:	6158      	str	r0, [r3, #20]
 8000644:	4770      	bx	lr
 8000646:	4310      	orrs	r0, r2
 8000648:	6158      	str	r0, [r3, #20]
 800064a:	4770      	bx	lr
 800064c:	40021000 	andmi	r1, r2, r0

08000650 <RCC_APB2PeriphClockCmd>:
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <RCC_APB2PeriphClockCmd+0x14>)
 8000652:	699a      	ldr	r2, [r3, #24]
 8000654:	b919      	cbnz	r1, 800065e <RCC_APB2PeriphClockCmd+0xe>
 8000656:	ea22 0000 	bic.w	r0, r2, r0
 800065a:	6198      	str	r0, [r3, #24]
 800065c:	4770      	bx	lr
 800065e:	4310      	orrs	r0, r2
 8000660:	6198      	str	r0, [r3, #24]
 8000662:	4770      	bx	lr
 8000664:	40021000 	andmi	r1, r2, r0

08000668 <RCC_APB1PeriphClockCmd>:
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <RCC_APB1PeriphClockCmd+0x14>)
 800066a:	69da      	ldr	r2, [r3, #28]
 800066c:	b919      	cbnz	r1, 8000676 <RCC_APB1PeriphClockCmd+0xe>
 800066e:	ea22 0000 	bic.w	r0, r2, r0
 8000672:	61d8      	str	r0, [r3, #28]
 8000674:	4770      	bx	lr
 8000676:	4310      	orrs	r0, r2
 8000678:	61d8      	str	r0, [r3, #28]
 800067a:	4770      	bx	lr
 800067c:	40021000 	andmi	r1, r2, r0

08000680 <RCC_APB2PeriphResetCmd>:
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <RCC_APB2PeriphResetCmd+0x14>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	b919      	cbnz	r1, 800068e <RCC_APB2PeriphResetCmd+0xe>
 8000686:	ea22 0000 	bic.w	r0, r2, r0
 800068a:	60d8      	str	r0, [r3, #12]
 800068c:	4770      	bx	lr
 800068e:	4310      	orrs	r0, r2
 8000690:	60d8      	str	r0, [r3, #12]
 8000692:	4770      	bx	lr
 8000694:	40021000 	andmi	r1, r2, r0

08000698 <RCC_APB1PeriphResetCmd>:
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <RCC_APB1PeriphResetCmd+0x14>)
 800069a:	691a      	ldr	r2, [r3, #16]
 800069c:	b919      	cbnz	r1, 80006a6 <RCC_APB1PeriphResetCmd+0xe>
 800069e:	ea22 0000 	bic.w	r0, r2, r0
 80006a2:	6118      	str	r0, [r3, #16]
 80006a4:	4770      	bx	lr
 80006a6:	4310      	orrs	r0, r2
 80006a8:	6118      	str	r0, [r3, #16]
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	andmi	r1, r2, r0

080006b0 <RCC_BackupResetCmd>:
 80006b0:	4b01      	ldr	r3, [pc, #4]	; (80006b8 <RCC_BackupResetCmd+0x8>)
 80006b2:	6018      	str	r0, [r3, #0]
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	42420440 	submi	r0, r2, #64, 8	; 0x40000000

080006bc <RCC_ClockSecuritySystemCmd>:
 80006bc:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <RCC_ClockSecuritySystemCmd+0x8>)
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	4242004c 	submi	r0, r2, #76	; 0x4c

080006c8 <RCC_MCOConfig>:
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <RCC_MCOConfig+0x8>)
 80006ca:	7018      	strb	r0, [r3, #0]
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021007 	andmi	r1, r2, r7

080006d4 <RCC_GetFlagStatus>:
 80006d4:	0943      	lsrs	r3, r0, #5
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d00b      	beq.n	80006f2 <RCC_GetFlagStatus+0x1e>
 80006da:	2b02      	cmp	r3, #2
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006de:	f000 001f 	and.w	r0, r0, #31
 80006e2:	bf0c      	ite	eq
 80006e4:	6a1b      	ldreq	r3, [r3, #32]
 80006e6:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80006e8:	fa23 f000 	lsr.w	r0, r3, r0
 80006ec:	f000 0001 	and.w	r0, r0, #1
 80006f0:	4770      	bx	lr
 80006f2:	4b04      	ldr	r3, [pc, #16]	; (8000704 <RCC_GetFlagStatus+0x30>)
 80006f4:	f000 001f 	and.w	r0, r0, #31
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	fa23 f000 	lsr.w	r0, r3, r0
 80006fe:	f000 0001 	and.w	r0, r0, #1
 8000702:	4770      	bx	lr
 8000704:	40021000 	andmi	r1, r2, r0

08000708 <RCC_ClearFlag>:
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <RCC_ClearFlag+0xc>)
 800070a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
 8000712:	4770      	bx	lr
 8000714:	40021000 	andmi	r1, r2, r0

08000718 <RCC_GetITStatus>:
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <RCC_GetITStatus+0x10>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4218      	tst	r0, r3
 800071e:	bf0c      	ite	eq
 8000720:	2000      	moveq	r0, #0
 8000722:	2001      	movne	r0, #1
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	andmi	r1, r2, r0

0800072c <RCC_ClearITPendingBit>:
 800072c:	4b01      	ldr	r3, [pc, #4]	; (8000734 <RCC_ClearITPendingBit+0x8>)
 800072e:	7018      	strb	r0, [r3, #0]
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	4002100a 	andmi	r1, r2, sl

08000738 <USART_DeInit>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <USART_DeInit+0x9c>)
 800073c:	4298      	cmp	r0, r3
 800073e:	d018      	beq.n	8000772 <USART_DeInit+0x3a>
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <USART_DeInit+0xa0>)
 8000742:	4298      	cmp	r0, r3
 8000744:	d021      	beq.n	800078a <USART_DeInit+0x52>
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <USART_DeInit+0xa4>)
 8000748:	4298      	cmp	r0, r3
 800074a:	d02a      	beq.n	80007a2 <USART_DeInit+0x6a>
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <USART_DeInit+0xa8>)
 800074e:	4298      	cmp	r0, r3
 8000750:	d033      	beq.n	80007ba <USART_DeInit+0x82>
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <USART_DeInit+0xac>)
 8000754:	4298      	cmp	r0, r3
 8000756:	d000      	beq.n	800075a <USART_DeInit+0x22>
 8000758:	bd08      	pop	{r3, pc}
 800075a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800075e:	2101      	movs	r1, #1
 8000760:	f7ff ff9a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000764:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800076c:	2100      	movs	r1, #0
 800076e:	f7ff bf93 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 8000772:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000776:	2101      	movs	r1, #1
 8000778:	f7ff ff82 	bl	8000680 <RCC_APB2PeriphResetCmd>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000784:	2100      	movs	r1, #0
 8000786:	f7ff bf7b 	b.w	8000680 <RCC_APB2PeriphResetCmd>
 800078a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800078e:	2101      	movs	r1, #1
 8000790:	f7ff ff82 	bl	8000698 <RCC_APB1PeriphResetCmd>
 8000794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000798:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800079c:	2100      	movs	r1, #0
 800079e:	f7ff bf7b 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007a6:	2101      	movs	r1, #1
 80007a8:	f7ff ff76 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007b0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007b4:	2100      	movs	r1, #0
 80007b6:	f7ff bf6f 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007be:	2101      	movs	r1, #1
 80007c0:	f7ff ff6a 	bl	8000698 <RCC_APB1PeriphResetCmd>
 80007c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007cc:	2100      	movs	r1, #0
 80007ce:	f7ff bf63 	b.w	8000698 <RCC_APB1PeriphResetCmd>
 80007d2:	bf00      	nop
 80007d4:	40013800 	andmi	r3, r1, r0, lsl #16
 80007d8:	40004400 	andmi	r4, r0, r0, lsl #8
 80007dc:	40004800 	andmi	r4, r0, r0, lsl #16
 80007e0:	40004c00 	andmi	r4, r0, r0, lsl #24
 80007e4:	40005000 	andmi	r5, r0, r0

080007e8 <USART_Init>:
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	8a03      	ldrh	r3, [r0, #16]
 80007ec:	88ca      	ldrh	r2, [r1, #6]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	4313      	orrs	r3, r2
 80007f6:	8203      	strh	r3, [r0, #16]
 80007f8:	8982      	ldrh	r2, [r0, #12]
 80007fa:	4604      	mov	r4, r0
 80007fc:	890b      	ldrh	r3, [r1, #8]
 80007fe:	8888      	ldrh	r0, [r1, #4]
 8000800:	460d      	mov	r5, r1
 8000802:	b292      	uxth	r2, r2
 8000804:	8949      	ldrh	r1, [r1, #10]
 8000806:	4303      	orrs	r3, r0
 8000808:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800080c:	430b      	orrs	r3, r1
 800080e:	f022 020c 	bic.w	r2, r2, #12
 8000812:	4313      	orrs	r3, r2
 8000814:	b29b      	uxth	r3, r3
 8000816:	81a3      	strh	r3, [r4, #12]
 8000818:	8aa3      	ldrh	r3, [r4, #20]
 800081a:	89aa      	ldrh	r2, [r5, #12]
 800081c:	b29b      	uxth	r3, r3
 800081e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000822:	b087      	sub	sp, #28
 8000824:	4313      	orrs	r3, r2
 8000826:	82a3      	strh	r3, [r4, #20]
 8000828:	a801      	add	r0, sp, #4
 800082a:	f7ff febd 	bl	80005a8 <RCC_GetClocksFreq>
 800082e:	89a1      	ldrh	r1, [r4, #12]
 8000830:	9a04      	ldr	r2, [sp, #16]
 8000832:	481a      	ldr	r0, [pc, #104]	; (800089c <USART_Init+0xb4>)
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	b209      	sxth	r1, r1
 8000838:	4284      	cmp	r4, r0
 800083a:	bf08      	it	eq
 800083c:	4613      	moveq	r3, r2
 800083e:	682a      	ldr	r2, [r5, #0]
 8000840:	2900      	cmp	r1, #0
 8000842:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000846:	bfb4      	ite	lt
 8000848:	0052      	lsllt	r2, r2, #1
 800084a:	0092      	lslge	r2, r2, #2
 800084c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000850:	4913      	ldr	r1, [pc, #76]	; (80008a0 <USART_Init+0xb8>)
 8000852:	fbb3 f3f2 	udiv	r3, r3, r2
 8000856:	fba1 5203 	umull	r5, r2, r1, r3
 800085a:	89a0      	ldrh	r0, [r4, #12]
 800085c:	0952      	lsrs	r2, r2, #5
 800085e:	b200      	sxth	r0, r0
 8000860:	2564      	movs	r5, #100	; 0x64
 8000862:	2800      	cmp	r0, #0
 8000864:	fb02 3315 	mls	r3, r2, r5, r3
 8000868:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800086c:	db0a      	blt.n	8000884 <USART_Init+0x9c>
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	3332      	adds	r3, #50	; 0x32
 8000872:	fba1 5103 	umull	r5, r1, r1, r3
 8000876:	f3c1 1143 	ubfx	r1, r1, #5, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	b292      	uxth	r2, r2
 800087e:	8122      	strh	r2, [r4, #8]
 8000880:	b007      	add	sp, #28
 8000882:	bd30      	pop	{r4, r5, pc}
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	3332      	adds	r3, #50	; 0x32
 8000888:	fba1 0103 	umull	r0, r1, r1, r3
 800088c:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000890:	430a      	orrs	r2, r1
 8000892:	b292      	uxth	r2, r2
 8000894:	8122      	strh	r2, [r4, #8]
 8000896:	b007      	add	sp, #28
 8000898:	bd30      	pop	{r4, r5, pc}
 800089a:	bf00      	nop
 800089c:	40013800 	andmi	r3, r1, r0, lsl #16
 80008a0:	51eb851f 	mvnpl	r8, pc, lsl r5

080008a4 <USART_StructInit>:
 80008a4:	2300      	movs	r3, #0
 80008a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80008aa:	220c      	movs	r2, #12
 80008ac:	6001      	str	r1, [r0, #0]
 80008ae:	8142      	strh	r2, [r0, #10]
 80008b0:	8083      	strh	r3, [r0, #4]
 80008b2:	80c3      	strh	r3, [r0, #6]
 80008b4:	8103      	strh	r3, [r0, #8]
 80008b6:	8183      	strh	r3, [r0, #12]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <USART_ClockInit>:
 80008bc:	b430      	push	{r4, r5}
 80008be:	884d      	ldrh	r5, [r1, #2]
 80008c0:	880b      	ldrh	r3, [r1, #0]
 80008c2:	888c      	ldrh	r4, [r1, #4]
 80008c4:	8a02      	ldrh	r2, [r0, #16]
 80008c6:	432b      	orrs	r3, r5
 80008c8:	88c9      	ldrh	r1, [r1, #6]
 80008ca:	4323      	orrs	r3, r4
 80008cc:	b292      	uxth	r2, r2
 80008ce:	430b      	orrs	r3, r1
 80008d0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	8203      	strh	r3, [r0, #16]
 80008da:	bc30      	pop	{r4, r5}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <USART_ClockStructInit>:
 80008e0:	2300      	movs	r3, #0
 80008e2:	8003      	strh	r3, [r0, #0]
 80008e4:	8043      	strh	r3, [r0, #2]
 80008e6:	8083      	strh	r3, [r0, #4]
 80008e8:	80c3      	strh	r3, [r0, #6]
 80008ea:	4770      	bx	lr

080008ec <USART_Cmd>:
 80008ec:	8983      	ldrh	r3, [r0, #12]
 80008ee:	b929      	cbnz	r1, 80008fc <USART_Cmd+0x10>
 80008f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f4:	041b      	lsls	r3, r3, #16
 80008f6:	0c1b      	lsrs	r3, r3, #16
 80008f8:	8183      	strh	r3, [r0, #12]
 80008fa:	4770      	bx	lr
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000902:	8183      	strh	r3, [r0, #12]
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <USART_ITConfig>:
 8000908:	f001 031f 	and.w	r3, r1, #31
 800090c:	b410      	push	{r4}
 800090e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8000912:	2401      	movs	r4, #1
 8000914:	42a1      	cmp	r1, r4
 8000916:	fa04 f303 	lsl.w	r3, r4, r3
 800091a:	d010      	beq.n	800093e <USART_ITConfig+0x36>
 800091c:	2902      	cmp	r1, #2
 800091e:	bf0c      	ite	eq
 8000920:	3010      	addeq	r0, #16
 8000922:	3014      	addne	r0, #20
 8000924:	6804      	ldr	r4, [r0, #0]
 8000926:	b92a      	cbnz	r2, 8000934 <USART_ITConfig+0x2c>
 8000928:	ea24 0303 	bic.w	r3, r4, r3
 800092c:	6003      	str	r3, [r0, #0]
 800092e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	4323      	orrs	r3, r4
 8000936:	6003      	str	r3, [r0, #0]
 8000938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	300c      	adds	r0, #12
 8000940:	e7f0      	b.n	8000924 <USART_ITConfig+0x1c>
 8000942:	bf00      	nop

08000944 <USART_DMACmd>:
 8000944:	8a83      	ldrh	r3, [r0, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	b91a      	cbnz	r2, 8000952 <USART_DMACmd+0xe>
 800094a:	ea23 0101 	bic.w	r1, r3, r1
 800094e:	8281      	strh	r1, [r0, #20]
 8000950:	4770      	bx	lr
 8000952:	4319      	orrs	r1, r3
 8000954:	8281      	strh	r1, [r0, #20]
 8000956:	4770      	bx	lr

08000958 <USART_SetAddress>:
 8000958:	8a03      	ldrh	r3, [r0, #16]
 800095a:	f023 030f 	bic.w	r3, r3, #15
 800095e:	041b      	lsls	r3, r3, #16
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	8203      	strh	r3, [r0, #16]
 8000964:	8a03      	ldrh	r3, [r0, #16]
 8000966:	b29b      	uxth	r3, r3
 8000968:	4319      	orrs	r1, r3
 800096a:	8201      	strh	r1, [r0, #16]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <USART_WakeUpConfig>:
 8000970:	8983      	ldrh	r3, [r0, #12]
 8000972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	8183      	strh	r3, [r0, #12]
 800097c:	8983      	ldrh	r3, [r0, #12]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4319      	orrs	r1, r3
 8000982:	8181      	strh	r1, [r0, #12]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <USART_ReceiverWakeUpCmd>:
 8000988:	8983      	ldrh	r3, [r0, #12]
 800098a:	b929      	cbnz	r1, 8000998 <USART_ReceiverWakeUpCmd+0x10>
 800098c:	f023 0302 	bic.w	r3, r3, #2
 8000990:	041b      	lsls	r3, r3, #16
 8000992:	0c1b      	lsrs	r3, r3, #16
 8000994:	8183      	strh	r3, [r0, #12]
 8000996:	4770      	bx	lr
 8000998:	b29b      	uxth	r3, r3
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	8183      	strh	r3, [r0, #12]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <USART_LINBreakDetectLengthConfig>:
 80009a4:	8a03      	ldrh	r3, [r0, #16]
 80009a6:	f023 0320 	bic.w	r3, r3, #32
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	8203      	strh	r3, [r0, #16]
 80009b0:	8a03      	ldrh	r3, [r0, #16]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4319      	orrs	r1, r3
 80009b6:	8201      	strh	r1, [r0, #16]
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <USART_LINCmd>:
 80009bc:	8a03      	ldrh	r3, [r0, #16]
 80009be:	b929      	cbnz	r1, 80009cc <USART_LINCmd+0x10>
 80009c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	8203      	strh	r3, [r0, #16]
 80009ca:	4770      	bx	lr
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	8203      	strh	r3, [r0, #16]
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <USART_SendData>:
 80009d8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80009dc:	8081      	strh	r1, [r0, #4]
 80009de:	4770      	bx	lr

080009e0 <USART_ReceiveData>:
 80009e0:	8880      	ldrh	r0, [r0, #4]
 80009e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80009e6:	4770      	bx	lr

080009e8 <USART_SendBreak>:
 80009e8:	8983      	ldrh	r3, [r0, #12]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	8183      	strh	r3, [r0, #12]
 80009f2:	4770      	bx	lr

080009f4 <USART_SetGuardTime>:
 80009f4:	8b03      	ldrh	r3, [r0, #24]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	8303      	strh	r3, [r0, #24]
 80009fa:	8b03      	ldrh	r3, [r0, #24]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8000a02:	8301      	strh	r1, [r0, #24]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <USART_SetPrescaler>:
 8000a08:	8b03      	ldrh	r3, [r0, #24]
 8000a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000a0e:	8303      	strh	r3, [r0, #24]
 8000a10:	8b03      	ldrh	r3, [r0, #24]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	4319      	orrs	r1, r3
 8000a16:	8301      	strh	r1, [r0, #24]
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <USART_SmartCardCmd>:
 8000a1c:	8a83      	ldrh	r3, [r0, #20]
 8000a1e:	b929      	cbnz	r1, 8000a2c <USART_SmartCardCmd+0x10>
 8000a20:	f023 0320 	bic.w	r3, r3, #32
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c1b      	lsrs	r3, r3, #16
 8000a28:	8283      	strh	r3, [r0, #20]
 8000a2a:	4770      	bx	lr
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	8283      	strh	r3, [r0, #20]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <USART_SmartCardNACKCmd>:
 8000a38:	8a83      	ldrh	r3, [r0, #20]
 8000a3a:	b929      	cbnz	r1, 8000a48 <USART_SmartCardNACKCmd+0x10>
 8000a3c:	f023 0310 	bic.w	r3, r3, #16
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1b      	lsrs	r3, r3, #16
 8000a44:	8283      	strh	r3, [r0, #20]
 8000a46:	4770      	bx	lr
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	8283      	strh	r3, [r0, #20]
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <USART_HalfDuplexCmd>:
 8000a54:	8a83      	ldrh	r3, [r0, #20]
 8000a56:	b929      	cbnz	r1, 8000a64 <USART_HalfDuplexCmd+0x10>
 8000a58:	f023 0308 	bic.w	r3, r3, #8
 8000a5c:	041b      	lsls	r3, r3, #16
 8000a5e:	0c1b      	lsrs	r3, r3, #16
 8000a60:	8283      	strh	r3, [r0, #20]
 8000a62:	4770      	bx	lr
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	8283      	strh	r3, [r0, #20]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <USART_OverSampling8Cmd>:
 8000a70:	8983      	ldrh	r3, [r0, #12]
 8000a72:	b919      	cbnz	r1, 8000a7c <USART_OverSampling8Cmd+0xc>
 8000a74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a78:	8183      	strh	r3, [r0, #12]
 8000a7a:	4770      	bx	lr
 8000a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	8183      	strh	r3, [r0, #12]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <USART_OneBitMethodCmd>:
 8000a8c:	8a83      	ldrh	r3, [r0, #20]
 8000a8e:	b929      	cbnz	r1, 8000a9c <USART_OneBitMethodCmd+0x10>
 8000a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	8283      	strh	r3, [r0, #20]
 8000a9a:	4770      	bx	lr
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa2:	8283      	strh	r3, [r0, #20]
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <USART_IrDAConfig>:
 8000aa8:	8a83      	ldrh	r3, [r0, #20]
 8000aaa:	f023 0304 	bic.w	r3, r3, #4
 8000aae:	041b      	lsls	r3, r3, #16
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	8283      	strh	r3, [r0, #20]
 8000ab4:	8a83      	ldrh	r3, [r0, #20]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4319      	orrs	r1, r3
 8000aba:	8281      	strh	r1, [r0, #20]
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <USART_IrDACmd>:
 8000ac0:	8a83      	ldrh	r3, [r0, #20]
 8000ac2:	b929      	cbnz	r1, 8000ad0 <USART_IrDACmd+0x10>
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	0c1b      	lsrs	r3, r3, #16
 8000acc:	8283      	strh	r3, [r0, #20]
 8000ace:	4770      	bx	lr
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	8283      	strh	r3, [r0, #20]
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <USART_GetFlagStatus>:
 8000adc:	8803      	ldrh	r3, [r0, #0]
 8000ade:	4219      	tst	r1, r3
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	2001      	movne	r0, #1
 8000ae6:	4770      	bx	lr

08000ae8 <USART_ClearFlag>:
 8000ae8:	43c9      	mvns	r1, r1
 8000aea:	b289      	uxth	r1, r1
 8000aec:	8001      	strh	r1, [r0, #0]
 8000aee:	4770      	bx	lr

08000af0 <USART_GetITStatus>:
 8000af0:	b410      	push	{r4}
 8000af2:	f3c1 1342 	ubfx	r3, r1, #5, #3
 8000af6:	2401      	movs	r4, #1
 8000af8:	f001 021f 	and.w	r2, r1, #31
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	fa04 f202 	lsl.w	r2, r4, r2
 8000b02:	d017      	beq.n	8000b34 <USART_GetITStatus+0x44>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	bf0c      	ite	eq
 8000b08:	8a03      	ldrheq	r3, [r0, #16]
 8000b0a:	8a83      	ldrhne	r3, [r0, #20]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4013      	ands	r3, r2
 8000b10:	8802      	ldrh	r2, [r0, #0]
 8000b12:	b292      	uxth	r2, r2
 8000b14:	b153      	cbz	r3, 8000b2c <USART_GetITStatus+0x3c>
 8000b16:	0a09      	lsrs	r1, r1, #8
 8000b18:	2301      	movs	r3, #1
 8000b1a:	fa03 f101 	lsl.w	r1, r3, r1
 8000b1e:	4211      	tst	r1, r2
 8000b20:	bf0c      	ite	eq
 8000b22:	2000      	moveq	r0, #0
 8000b24:	2001      	movne	r0, #1
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	8983      	ldrh	r3, [r0, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	e7e9      	b.n	8000b10 <USART_GetITStatus+0x20>

08000b3c <USART_ClearITPendingBit>:
 8000b3c:	0a09      	lsrs	r1, r1, #8
 8000b3e:	2301      	movs	r3, #1
 8000b40:	408b      	lsls	r3, r1
 8000b42:	43db      	mvns	r3, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8003      	strh	r3, [r0, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4e:	f000 b804 	b.w	8000b5a <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000b54:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b56:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b58:	3104      	adds	r1, #4

08000b5a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b5a:	480a      	ldr	r0, [pc, #40]	; (8000b84 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 8000b5e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b60:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b62:	f4ff aff6 	bcc.w	8000b52 <CopyDataInit>
	ldr	r2, =_sbss
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000b68:	f000 b803 	b.w	8000b72 <LoopFillZerobss>

08000b6c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b6c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b6e:	f842 3b04 	str.w	r3, [r2], #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b72:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000b74:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b76:	f4ff aff9 	bcc.w	8000b6c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f000 facf 	bl	800111c <main>
	bx	lr
 8000b7e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000b80:	08007cd0 	stmdaeq	r0, {r4, r6, r7, sl, fp, ip, sp, lr}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 8000b88:	20000488 	andcs	r0, r0, r8, lsl #9
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000b8c:	20000488 	andcs	r0, r0, r8, lsl #9
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b90:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

08000b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b94:	f7ff bffe 	b.w	8000b94 <ADC1_2_IRQHandler>

08000b98 <nothingProc>:
}


/* dummy proc */
void nothingProc(void)
{
 8000b98:	4770      	bx	lr

08000b9a <usbStatusIn>:
    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void)
{
 8000b9a:	4770      	bx	lr

08000b9c <usbStatusOut>:
    return;
}

void usbStatusOut(void)
{
 8000b9c:	4770      	bx	lr

08000b9e <usbGetInterfaceSetting>:

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting)
{
    // alt setting 0 -> program RAM, alt setting 1 or higher -> FLASH
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 8000b9e:	2803      	cmp	r0, #3
    }

    return USB_SUCCESS;
}
 8000ba0:	bf8c      	ite	hi
 8000ba2:	2002      	movhi	r0, #2
 8000ba4:	2000      	movls	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <usbGetConfiguration>:
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void)
{
 8000ba8:	4770      	bx	lr
	...

08000bac <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void)
{
    if (pInformation->Current_Configuration != 0) {
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <usbSetConfiguration+0x10>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	7a9b      	ldrb	r3, [r3, #10]
 8000bb2:	b113      	cbz	r3, 8000bba <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <usbSetConfiguration+0x14>)
 8000bb6:	2205      	movs	r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	4770      	bx	lr
 8000bbc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000bc0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000bc4 <usbGetInterface>:
    }
}

void usbGetInterface(void)
{
 8000bc4:	4770      	bx	lr

08000bc6 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void)
{
 8000bc6:	4770      	bx	lr

08000bc8 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void)
{
 8000bc8:	4770      	bx	lr

08000bca <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void)
{
 8000bca:	4770      	bx	lr

08000bcc <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void)
{
 8000bcc:	4770      	bx	lr

08000bce <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void)
{
 8000bce:	4770      	bx	lr

08000bd0 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void)
{
    bDeviceState = ADDRESSED;
 8000bd0:	4b01      	ldr	r3, [pc, #4]	; (8000bd8 <usbSetDeviceAddress+0x8>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	4770      	bx	lr
 8000bd8:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000bdc <usbReset>:
    usbEnbISR();
    bDeviceState = UNCONNECTED;
}

void usbReset(void)
{    
 8000bdc:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 8000bde:	f000 fdd3 	bl	8001788 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000be4:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <usbReset+0x90>)

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bea:	6812      	ldr	r2, [r2, #0]

void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000bec:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bee:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000bf0:	4620      	mov	r0, r4
void usbReset(void)
{    
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000bf2:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000bf4:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <usbReset+0x94>)

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 8000bf8:	6014      	str	r4, [r2, #0]

    // set up the ctrl endpoint
    _SetEPType(ENDP0, EP_CONTROL);
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 8000c00:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8000c04:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000c08:	b289      	uxth	r1, r1
 8000c0a:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8000c12:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000c16:	b289      	uxth	r1, r1
 8000c18:	f081 0110 	eor.w	r1, r1, #16
 8000c1c:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8000c1e:	6811      	ldr	r1, [r2, #0]
 8000c20:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <usbReset+0x9c>)
 8000c22:	b289      	uxth	r1, r1
 8000c24:	440b      	add	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8000c2c:	6813      	ldr	r3, [r2, #0]
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000c36:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 8000c3e:	f005 faef 	bl	8006220 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <usbReset+0xa0>)
 8000c44:	4620      	mov	r0, r4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8000c4c:	f005 fb40 	bl	80062d0 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000c50:	4620      	mov	r0, r4
 8000c52:	f005 fad6 	bl	8006202 <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <usbReset+0xa4>)
 8000c58:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c5a:	4620      	mov	r0, r4
}
 8000c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000c60:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000c62:	f005 bfd7 	b.w	8006c14 <SetDeviceAddress>
 8000c66:	bf00      	nop
 8000c68:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000c6c:	200002b4 			; <UNDEFINED> instruction: 0x200002b4
 8000c70:	40005c50 	andmi	r5, r0, r0, asr ip
 8000c74:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000c78:	20003004 	andcs	r3, r0, r4
 8000c7c:	20000580 	andcs	r0, r0, r0, lsl #11
 8000c80:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000c84 <usbDataSetup>:
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c84:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <usbDataSetup+0x4c>)
void usbStatusOut(void)
{
    return;
}

RESULT usbDataSetup(u8 request) {
 8000c88:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    // handle dfu class requests
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	461c      	mov	r4, r3
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c94:	2a21      	cmp	r2, #33	; 0x21
 8000c96:	d119      	bne.n	8000ccc <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 8000c98:	f000 fe0a 	bl	80018b0 <dfuUpdateByRequest>
 8000c9c:	b1b0      	cbz	r0, 8000ccc <usbDataSetup+0x48>
            // successfull state transition, handle the request
            switch (request) {
 8000c9e:	1e68      	subs	r0, r5, #1
 8000ca0:	2804      	cmp	r0, #4
 8000ca2:	d813      	bhi.n	8000ccc <usbDataSetup+0x48>
 8000ca4:	e8df f000 	tbb	[pc, r0]
 8000ca8:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 8000cac:	4b090009 	blmi	8240cd8 <_etext+0x239008>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 8000cb0:	e004      	b.n	8000cbc <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <usbDataSetup+0x54>)
                break;
 8000cb4:	e002      	b.n	8000cbc <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            // successfull state transition, handle the request
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <usbDataSetup+0x58>)
 8000cb8:	e000      	b.n	8000cbc <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cbc:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cbe:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 8000cc0:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8000cc2:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 8000cc4:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 8000cc6:	4798      	blx	r3

        return USB_SUCCESS;
 8000cc8:	4620      	mov	r0, r4
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 8000ccc:	2002      	movs	r0, #2
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000cd4:	080017fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 8000cd8:	08001825 	stmdaeq	r0, {r0, r2, r5, fp, ip}
 8000cdc:	080017e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, ip}
 8000ce0:	080017cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, sl, ip}

08000ce4 <usbGetDeviceDescriptor>:
    return USB_SUCCESS;
}

u8 *usbGetDeviceDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000ce4:	4901      	ldr	r1, [pc, #4]	; (8000cec <usbGetDeviceDescriptor+0x8>)
 8000ce6:	f005 bd95 	b.w	8006814 <Standard_GetDescriptorData>
 8000cea:	bf00      	nop
 8000cec:	20000158 	andcs	r0, r0, r8, asr r1

08000cf0 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000cf0:	4901      	ldr	r1, [pc, #4]	; (8000cf8 <usbGetConfigDescriptor+0x8>)
 8000cf2:	f005 bd8f 	b.w	8006814 <Standard_GetDescriptorData>
 8000cf6:	bf00      	nop
 8000cf8:	200002b4 			; <UNDEFINED> instruction: 0x200002b4

08000cfc <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len)
{
    u8 strIndex = pInformation->USBwValue0;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <usbGetStringDescriptor+0x18>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000d02:	2b07      	cmp	r3, #7
 8000d04:	d804      	bhi.n	8000d10 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000d06:	4904      	ldr	r1, [pc, #16]	; (8000d18 <usbGetStringDescriptor+0x1c>)
 8000d08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8000d0c:	f005 bd82 	b.w	8006814 <Standard_GetDescriptorData>
    }
}
 8000d10:	2000      	movs	r0, #0
 8000d12:	4770      	bx	lr
 8000d14:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000d18:	200000a8 	andcs	r0, r0, r8, lsr #1

08000d1c <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len)
{
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 8000d1c:	4901      	ldr	r1, [pc, #4]	; (8000d24 <usbGetFunctionalDescriptor+0x8>)
 8000d1e:	f005 bd79 	b.w	8006814 <Standard_GetDescriptorData>
 8000d22:	bf00      	nop
 8000d24:	200000f4 	strdcs	r0, [r0], -r4

08000d28 <usbNoDataSetup>:

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request)
{
 8000d28:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <usbNoDataSetup+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d34:	2b21      	cmp	r3, #33	; 0x21
 8000d36:	d106      	bne.n	8000d46 <usbNoDataSetup+0x1e>
        // todo, keep track of the destination interface, often stored in wIndex
        if (dfuUpdateByRequest()) {
 8000d38:	f000 fdba 	bl	80018b0 <dfuUpdateByRequest>
 8000d3c:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 8000d3e:	bf0c      	ite	eq
 8000d40:	2002      	moveq	r0, #2
 8000d42:	2000      	movne	r0, #0
 8000d44:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 8000d46:	2002      	movs	r0, #2
}
 8000d48:	bd08      	pop	{r3, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200005a8 	andcs	r0, r0, r8, lsr #11

08000d50 <setupUSB>:

static RCC_TypeDef *RCC_Blot = (RCC_TypeDef *)RCC;


void setupUSB (void)
{
 8000d50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <setupUSB+0x54>)
 8000d54:	210c      	movs	r1, #12
 8000d56:	2200      	movs	r2, #0
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000d58:	4c13      	ldr	r4, [pc, #76]	; (8000da8 <setupUSB+0x58>)
    #ifndef USB_DISC_PIN  
    #define USB_DISC_PIN    12
    #endif

    // set up pin in host disconnected state
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000d5a:	f000 fa5d 	bl	8001218 <gpio_write_bit>
    SET_REG(GPIO_CR(USB_DISC_BANK, USB_DISC_PIN),
 8000d5e:	200c      	movs	r0, #12
 8000d60:	6825      	ldr	r5, [r4, #0]
 8000d62:	f000 fcaf 	bl	80016c4 <crMask>
 8000d66:	4028      	ands	r0, r5
 8000d68:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000d6c:	6025      	str	r5, [r4, #0]
            | CR_OUTPUT_PP << CR_SHITF(USB_DISC_PIN)
        );

    // wait a while to make sure host disconnects us
    volatile u32 delay;
    for(delay = 256; delay; delay--);
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	9b01      	ldr	r3, [sp, #4]
 8000d76:	b113      	cbz	r3, 8000d7e <setupUSB+0x2e>
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	e7f9      	b.n	8000d72 <setupUSB+0x22>
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000d7e:	f000 fcb3 	bl	80016e8 <getFlashPageSize>
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <setupUSB+0x5c>)
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d84:	b2c2      	uxtb	r2, r0
    #endif
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
 8000d86:	6018      	str	r0, [r3, #0]
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <setupUSB+0x60>)
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000d8a:	f3c0 2007 	ubfx	r0, r0, #8, #8
#endif
#endif

  // initialize the usb application  
  wTransferSize = getFlashPageSize();
  u8_usbConfigDescriptorDFU[41] = (wTransferSize & 0x00FF);
 8000d8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42] = (wTransferSize & 0xFF00) >> 8;
 8000d92:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <setupUSB+0x64>)
 8000d98:	715a      	strb	r2, [r3, #5]
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
 8000d9a:	7198      	strb	r0, [r3, #6]

/* application function definitions */
void usbAppInit(void)
{
    // hook in to usb_core, depends on all those damn non encapsulated externs!
    USB_Init();
 8000d9c:	f005 fb62 	bl	8006464 <USB_Init>
  
  u8_usbFunctionalDescriptor[5] = (wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6] = (wTransferSize & 0xFF00) >> 8;  
  
  usbAppInit();
}
 8000da0:	b003      	add	sp, #12
 8000da2:	bd30      	pop	{r4, r5, pc}
 8000da4:	40010800 	andmi	r0, r1, r0, lsl #16
 8000da8:	40010804 	andmi	r0, r1, r4, lsl #16
 8000dac:	20000488 	andcs	r0, r0, r8, lsl #9
 8000db0:	20000100 	andcs	r0, r0, r0, lsl #2
 8000db4:	2000013d 	andcs	r0, r0, sp, lsr r1

08000db8 <usbSuspend>:
}

void usbSuspend(void)
{
    u16 wCNTR;
    wCNTR = _GetCNTR();
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <usbSuspend+0x14>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 8000dbe:	f042 020c 	orr.w	r2, r2, #12
 8000dc2:	601a      	str	r2, [r3, #0]

    // run any power reduction handlers
    bDeviceState = SUSPENDED;
 8000dc4:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <usbSuspend+0x18>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	4770      	bx	lr
 8000dcc:	40005c40 	andmi	r5, r0, r0, asr #24
 8000dd0:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000dd4 <usbResumeInit>:
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000dd6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void)
{
    u16 wCNTR;

    // restart any clocks that had been stopped
    wCNTR = _GetCNTR();
 8000dda:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000ddc:	400a      	ands	r2, r1
 8000dde:	601a      	str	r2, [r3, #0]

    // undo power reduction handlers here
    _SetCNTR(ISR_MSK);
 8000de0:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	4770      	bx	lr
 8000de8:	40005c40 	andmi	r5, r0, r0, asr #24

08000dec <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal)
{
 8000dec:	b510      	push	{r4, lr}
 8000dee:	4c1e      	ldr	r4, [pc, #120]	; (8000e68 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000df0:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 8000df2:	bf18      	it	ne
 8000df4:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 8000df6:	7823      	ldrb	r3, [r4, #0]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d832      	bhi.n	8000e62 <usbResume+0x76>
 8000dfc:	e8df f003 	tbb	[pc, r3]
 8000e00:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 8000e04:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 8000e08:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 8000e0c:	f7ff ffe2 	bl	8000dd4 <usbResumeInit>
        ResumeS.eState = RESUME_START;
 8000e10:	2304      	movs	r3, #4
 8000e12:	e027      	b.n	8000e64 <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e023      	b.n	8000e64 <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 8000e1c:	7863      	ldrb	r3, [r4, #1]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 8000e24:	7863      	ldrb	r3, [r4, #1]
 8000e26:	b9f3      	cbnz	r3, 8000e66 <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 8000e28:	2204      	movs	r2, #4
 8000e2a:	e017      	b.n	8000e5c <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <usbResume+0x80>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000e32:	f042 0210 	orr.w	r2, r2, #16
 8000e36:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	7063      	strb	r3, [r4, #1]
        break;
 8000e40:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000e42:	7863      	ldrb	r3, [r4, #1]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 8000e4a:	7863      	ldrb	r3, [r4, #1]
 8000e4c:	b95b      	cbnz	r3, 8000e66 <usbResume+0x7a>
            wCNTR = _GetCNTR();
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000e50:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000e54:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000e56:	400b      	ands	r3, r1
 8000e58:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 8000e5a:	2206      	movs	r2, #6
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <usbResume+0x7c>)
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000e62:	2306      	movs	r3, #6
 8000e64:	7023      	strb	r3, [r4, #0]
 8000e66:	bd10      	pop	{r4, pc}
 8000e68:	2000048e 	andcs	r0, r0, lr, lsl #9
 8000e6c:	40005c40 	andmi	r5, r0, r0, asr #24

08000e70 <usbPowerOn>:
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <usbPowerOn+0x38>)
        break;
    }
}

RESULT usbPowerOn(void)
{
 8000e72:	b510      	push	{r4, lr}
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e74:	69da      	ldr	r2, [r3, #28]

    _SetCNTR(CNTR_FRES);
    _SetCNTR(0);
    _SetISTR(0);
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <usbPowerOn+0x3c>)
}

RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;
 8000e78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e7c:	61da      	str	r2, [r3, #28]

    _SetCNTR(CNTR_FRES);
 8000e7e:	f5a3 33d9 	sub.w	r3, r3, #111104	; 0x1b200
 8000e82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
    _SetCNTR(0);
 8000e86:	2400      	movs	r4, #0
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000e88:	2201      	movs	r2, #1
    _SetCNTR(0);
    _SetISTR(0);

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <usbPowerOn+0x40>)
RESULT usbPowerOn(void)
{
    // Enable USB clock
    RCC_Blot->APB1ENR |= RCC_APB1ENR_USB_CLK;

    _SetCNTR(CNTR_FRES);
 8000e8c:	601a      	str	r2, [r3, #0]
    _SetCNTR(0);
 8000e8e:	601c      	str	r4, [r3, #0]
    _SetISTR(0);
 8000e90:	600c      	str	r4, [r1, #0]

    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 8000e92:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000e96:	8001      	strh	r1, [r0, #0]
    _SetCNTR(wInterrupt_Mask);
 8000e98:	6019      	str	r1, [r3, #0]
    // present to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <usbPowerOn+0x44>)
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	f000 f9bb 	bl	8001218 <gpio_write_bit>
#endif
#endif

    return USB_SUCCESS;
}
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	bd10      	pop	{r4, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	andmi	r1, r2, r0
 8000eac:	40005c44 	andmi	r5, r0, r4, asr #24
 8000eb0:	200005ac 	andcs	r0, r0, ip, lsr #11
 8000eb4:	40010800 	andmi	r0, r1, r0, lsl #16

08000eb8 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <usbPowerOff+0x2c>)
 8000eba:	2201      	movs	r2, #1
#endif

    return USB_SUCCESS;
}

RESULT usbPowerOff(void) {
 8000ebc:	b510      	push	{r4, lr}
    _SetCNTR(CNTR_FRES);
 8000ebe:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <usbPowerOff+0x30>)
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	6014      	str	r4, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	601a      	str	r2, [r3, #0]
    // act unplugged to host
#ifndef USB_DISC_HARDWIRED
#ifdef HAS_MAPLE_HARDWARE
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 1);
#else
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <usbPowerOff+0x34>)
 8000ecc:	4622      	mov	r2, r4
 8000ece:	210c      	movs	r1, #12
 8000ed0:	f000 f9a2 	bl	8001218 <gpio_write_bit>
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <usbPowerOff+0x38>)

    return USB_SUCCESS;
}
 8000ed6:	4620      	mov	r0, r4
    gpio_write_bit(USB_DISC_BANK, USB_DISC_PIN, 0);
#endif
#endif

    // Disable USB clock
    RCC_Blot->APB1ENR &= ~RCC_APB1ENR_USB_CLK;
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ede:	61da      	str	r2, [r3, #28]

    return USB_SUCCESS;
}
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005c40 	andmi	r5, r0, r0, asr #24
 8000ee8:	40005c44 	andmi	r5, r0, r4, asr #24
 8000eec:	40010800 	andmi	r0, r1, r0, lsl #16
 8000ef0:	40021000 	andmi	r1, r2, r0

08000ef4 <usbDsbBus>:
}


void usbDsbBus(void)
{
    usbPowerOff();
 8000ef4:	f7ff bfe0 	b.w	8000eb8 <usbPowerOff>

08000ef8 <usbEnbISR>:
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void)
{
 8000ef8:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000efa:	2314      	movs	r3, #20
 8000efc:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f06:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 8000f0a:	a801      	add	r0, sp, #4
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000f12:	f000 fb23 	bl	800155c <nvicInit>
}
 8000f16:	b003      	add	sp, #12
 8000f18:	f85d fb04 	ldr.w	pc, [sp], #4

08000f1c <usbInit>:

    return USB_SUCCESS;
}

void usbInit(void)
{
 8000f1c:	b510      	push	{r4, lr}
    dfuInit();
 8000f1e:	f000 fbef 	bl	8001700 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <usbInit+0x2c>)
 8000f24:	2400      	movs	r4, #0
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 8000f2a:	f7ff ffa1 	bl	8000e70 <usbPowerOn>

    _SetISTR(0);
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000f32:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 8000f34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000f38:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <usbInit+0x38>)
 8000f3c:	6013      	str	r3, [r2, #0]

    // configure the cortex M3 private peripheral NVIC
    usbEnbISR();
 8000f3e:	f7ff ffdb 	bl	8000ef8 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <usbInit+0x3c>)
 8000f44:	601c      	str	r4, [r3, #0]
 8000f46:	bd10      	pop	{r4, pc}
 8000f48:	200005a8 	andcs	r0, r0, r8, lsr #11
 8000f4c:	40005c44 	andmi	r5, r0, r4, asr #24
 8000f50:	200005ac 	andcs	r0, r0, ip, lsr #11
 8000f54:	40005c40 	andmi	r5, r0, r0, asr #24
 8000f58:	200005b8 			; <UNDEFINED> instruction: 0x200005b8

08000f5c <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void)
{
 8000f5c:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 8000f5e:	2314      	movs	r3, #20
 8000f60:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000f64:	a801      	add	r0, sp, #4

void usbDsbISR(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000f6c:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 8000f70:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000f74:	f000 faf2 	bl	800155c <nvicInit>
}
 8000f78:	b003      	add	sp, #12
 8000f7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f80 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 8000f82:	4c27      	ldr	r4, [pc, #156]	; (8001020 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 8000f84:	4d27      	ldr	r5, [pc, #156]	; (8001024 <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 8000f86:	6823      	ldr	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000f88:	4e27      	ldr	r6, [pc, #156]	; (8001028 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
    wIstr = _GetISTR();
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	802b      	strh	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 8000f8e:	882a      	ldrh	r2, [r5, #0]
 8000f90:	8833      	ldrh	r3, [r6, #0]
 8000f92:	4013      	ands	r3, r2
 8000f94:	0418      	lsls	r0, r3, #16
 8000f96:	d501      	bpl.n	8000f9c <USB_LP_CAN1_RX0_IRQHandler+0x1c>
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000f98:	f005 f9ba 	bl	8006310 <CTR_LP>
    }
#endif

#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000f9c:	882a      	ldrh	r2, [r5, #0]
 8000f9e:	8833      	ldrh	r3, [r6, #0]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	0559      	lsls	r1, r3, #21
 8000fa4:	d505      	bpl.n	8000fb2 <USB_LP_CAN1_RX0_IRQHandler+0x32>
        _SetISTR((u16)CLR_RESET);
 8000fa6:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000faa:	6023      	str	r3, [r4, #0]
        Device_Property.Reset();
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000fb2:	882a      	ldrh	r2, [r5, #0]
 8000fb4:	8833      	ldrh	r3, [r6, #0]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 8000fba:	bf44      	itt	mi
 8000fbc:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8000fc0:	6022      	strmi	r2, [r4, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 8000fc2:	882a      	ldrh	r2, [r5, #0]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	04d8      	lsls	r0, r3, #19
 8000fc8:	d505      	bpl.n	8000fd6 <USB_LP_CAN1_RX0_IRQHandler+0x56>
        _SetISTR((u16)CLR_WKUP);
 8000fca:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000fce:	6023      	str	r3, [r4, #0]
        usbResume(RESUME_EXTERNAL);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff ff0b 	bl	8000dec <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 8000fd6:	882a      	ldrh	r2, [r5, #0]
 8000fd8:	8833      	ldrh	r3, [r6, #0]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	0519      	lsls	r1, r3, #20
 8000fde:	d504      	bpl.n	8000fea <USB_LP_CAN1_RX0_IRQHandler+0x6a>

        // check if SUSPEND is possible
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 8000fe0:	f7ff feea 	bl	8000db8 <usbSuspend>
        } else {
            // if not possible then resume after xx ms
            usbResume(RESUME_LATER);
        }
        // clear of the ISTR bit must be done after setting of CNTR_FSUSP
        _SetISTR((u16)CLR_SUSP);
 8000fe4:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000fe8:	6023      	str	r3, [r4, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 8000fea:	882a      	ldrh	r2, [r5, #0]
 8000fec:	8833      	ldrh	r3, [r6, #0]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	0592      	lsls	r2, r2, #22
 8000ff2:	d507      	bpl.n	8001004 <USB_LP_CAN1_RX0_IRQHandler+0x84>
        _SetISTR((u16)CLR_SOF);
 8000ff4:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8000ff8:	6022      	str	r2, [r4, #0]
        bIntPackSOF++;
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 8000ffc:	7811      	ldrb	r1, [r2, #0]
 8000ffe:	3101      	adds	r1, #1
 8001000:	b2c9      	uxtb	r1, r1
 8001002:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 8001004:	882a      	ldrh	r2, [r5, #0]
 8001006:	4013      	ands	r3, r2
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	d507      	bpl.n	800101c <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        _SetISTR((u16)CLR_ESOF);
 800100c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001010:	6023      	str	r3, [r4, #0]
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001012:	2007      	movs	r0, #7
    }
#endif

}
 8001014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
        _SetISTR((u16)CLR_ESOF);
        // resume handling timing is made with ESOFs
        // request without change of the machine state
        usbResume(RESUME_ESOF); 
 8001018:	f7ff bee8 	b.w	8000dec <usbResume>
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	bf00      	nop
 8001020:	40005c44 	andmi	r5, r0, r4, asr #24
 8001024:	2000048c 	andcs	r0, r0, ip, lsl #9
 8001028:	200005ac 	andcs	r0, r0, ip, lsr #11
 800102c:	20000014 	andcs	r0, r0, r4, lsl r0
 8001030:	200005b4 			; <UNDEFINED> instruction: 0x200005b4

08001034 <encode_b64>:

    return cnt;
}

size_t encode_b64(const char* input, char* output, int blocksize)
{
 8001034:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001036:	460c      	mov	r4, r1
 8001038:	4616      	mov	r6, r2
 800103a:	4605      	mov	r5, r0
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
 800103c:	4668      	mov	r0, sp
 800103e:	f004 ff21 	bl	8005e84 <base64_init_encodestate>
    cnt = base64_encode_block(input, blocksize, output, &s);
 8001042:	466b      	mov	r3, sp
 8001044:	4631      	mov	r1, r6
 8001046:	4622      	mov	r2, r4
 8001048:	4628      	mov	r0, r5
 800104a:	f004 ff29 	bl	8005ea0 <base64_encode_block>
    cnt += base64_encode_blockend(output + cnt, &s);
 800104e:	4669      	mov	r1, sp
{
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
    cnt = base64_encode_block(input, blocksize, output, &s);
 8001050:	4605      	mov	r5, r0
    cnt += base64_encode_blockend(output + cnt, &s);
 8001052:	1820      	adds	r0, r4, r0
 8001054:	f004 ff8f 	bl	8005f76 <base64_encode_blockend>
    output[cnt] = 0;
 8001058:	2300      	movs	r3, #0
    base64_encodestate s;
    size_t cnt;

    base64_init_encodestate(&s);
    cnt = base64_encode_block(input, blocksize, output, &s);
    cnt += base64_encode_blockend(output + cnt, &s);
 800105a:	4428      	add	r0, r5
    output[cnt] = 0;
 800105c:	5423      	strb	r3, [r4, r0]

    return cnt;
}
 800105e:	b002      	add	sp, #8
 8001060:	bd70      	pop	{r4, r5, r6, pc}
	...

08001064 <transmit_publickey_data>:

/*
  Print the device's public key + signature (ed25519 between the device and the root ca)
  the device is probably in DFU when this is needed -- the restore tool should use this to request a signed firmware from the signing server.
*/
void transmit_publickey_data() {
 8001064:	b510      	push	{r4, lr}
 8001066:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
  char publickey[EDSIGN_PUBLIC_KEY_SIZE];
  char base64_pub[256];
  char base64_signature[256];

  // read our unique id
  uid_read(&id);
 800106a:	a803      	add	r0, sp, #12
 800106c:	f000 fa54 	bl	8001518 <uid_read>
  sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 8001070:	9904      	ldr	r1, [sp, #16]
 8001072:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001076:	9100      	str	r1, [sp, #0]
 8001078:	9905      	ldr	r1, [sp, #20]
 800107a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800107e:	9101      	str	r1, [sp, #4]
 8001080:	a806      	add	r0, sp, #24
 8001082:	4920      	ldr	r1, [pc, #128]	; (8001104 <transmit_publickey_data+0xa0>)
 8001084:	f005 fe4c 	bl	8006d20 <siprintf>
  // start sha256 context
  sha256_context ctx;
  sha256_starts(&ctx);
 8001088:	a82c      	add	r0, sp, #176	; 0xb0
 800108a:	f002 f9ef 	bl	800346c <sha256_starts>
  // hash in our unique id
  sha256_update(&ctx, uniqueID, 0x17);
 800108e:	a82c      	add	r0, sp, #176	; 0xb0
 8001090:	a906      	add	r1, sp, #24
 8001092:	2217      	movs	r2, #23
 8001094:	f004 f9c8 	bl	8005428 <sha256_update>
  sha256_finish(&ctx, sha256sum);
  // get our public key
  memset(publickey, 0, EDSIGN_PUBLIC_KEY_SIZE);
 8001098:	2420      	movs	r4, #32
  // start sha256 context
  sha256_context ctx;
  sha256_starts(&ctx);
  // hash in our unique id
  sha256_update(&ctx, uniqueID, 0x17);
  sha256_finish(&ctx, sha256sum);
 800109a:	a82c      	add	r0, sp, #176	; 0xb0
 800109c:	a90c      	add	r1, sp, #48	; 0x30
 800109e:	f004 fa0b 	bl	80054b8 <sha256_finish>
  // get our public key
  memset(publickey, 0, EDSIGN_PUBLIC_KEY_SIZE);
 80010a2:	4622      	mov	r2, r4
 80010a4:	a814      	add	r0, sp, #80	; 0x50
 80010a6:	2100      	movs	r1, #0
 80010a8:	f005 fe31 	bl	8006d0e <memset>
  edsign_sec_to_pub((unsigned char*)publickey, sha256sum);
 80010ac:	a814      	add	r0, sp, #80	; 0x50
 80010ae:	a90c      	add	r1, sp, #48	; 0x30
 80010b0:	f000 ffba 	bl	8002028 <edsign_sec_to_pub>
  encode_b64(publickey, base64_pub, 0x20);
 80010b4:	a946      	add	r1, sp, #280	; 0x118
 80010b6:	4622      	mov	r2, r4
 80010b8:	a814      	add	r0, sp, #80	; 0x50
 80010ba:	f7ff ffbb 	bl	8001034 <encode_b64>

  memset(signature, 0, EDSIGN_SIGNATURE_SIZE);
 80010be:	a81c      	add	r0, sp, #112	; 0x70
 80010c0:	2100      	movs	r1, #0
 80010c2:	2240      	movs	r2, #64	; 0x40
 80010c4:	f005 fe23 	bl	8006d0e <memset>
  // sign the pub
  edsign_sign((uint8_t*)signature, rootCA, sha256sum, (uint8_t*)publickey, EDSIGN_PUBLIC_KEY_SIZE);
 80010c8:	ab14      	add	r3, sp, #80	; 0x50
 80010ca:	a81c      	add	r0, sp, #112	; 0x70
 80010cc:	aa0c      	add	r2, sp, #48	; 0x30
 80010ce:	9400      	str	r4, [sp, #0]
 80010d0:	490d      	ldr	r1, [pc, #52]	; (8001108 <transmit_publickey_data+0xa4>)
 80010d2:	f000 ffb5 	bl	8002040 <edsign_sign>
  
  encode_b64(signature, base64_signature, 0x64);
 80010d6:	2264      	movs	r2, #100	; 0x64
 80010d8:	a986      	add	r1, sp, #536	; 0x218
 80010da:	a81c      	add	r0, sp, #112	; 0x70
 80010dc:	f7ff ffaa 	bl	8001034 <encode_b64>

  debug_print("[BEGIN_PUB_DATA][BEGIN_PUB]%s[END_PUB][END_PUB_DATA]", base64_pub);
 80010e0:	a946      	add	r1, sp, #280	; 0x118
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <transmit_publickey_data+0xa8>)
 80010e4:	f000 f8f8 	bl	80012d8 <uart_printf>
  debug_print("[BEGIN_SIGNATURE_DATA][BEGIN_SIGNATURE]");
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <transmit_publickey_data+0xac>)
 80010ea:	f000 f8f5 	bl	80012d8 <uart_printf>
  debug_print("%s", base64_signature);
 80010ee:	a986      	add	r1, sp, #536	; 0x218
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <transmit_publickey_data+0xb0>)
 80010f2:	f000 f8f1 	bl	80012d8 <uart_printf>
  debug_print("[END_SIGNATURE][END_SIGNATURE_DATA]");
 80010f6:	4808      	ldr	r0, [pc, #32]	; (8001118 <transmit_publickey_data+0xb4>)
 80010f8:	f000 f8ee 	bl	80012d8 <uart_printf>
}
 80010fc:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
 8001100:	bd10      	pop	{r4, pc}
 8001102:	bf00      	nop
 8001104:	08007598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, sp, lr}
 8001108:	20000404 	andcs	r0, r0, r4, lsl #8
 800110c:	080075a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, ip, sp, lr}
 8001110:	080075d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp, lr}
 8001114:	080075fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 8001118:	08007601 	stmdaeq	r0, {r0, r9, sl, ip, sp, lr}

0800111c <main>:

/*
	Bootloader main
*/
int main() 
{
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	b085      	sub	sp, #20
	bool no_user_jump = FALSE;

	// low level hardware init	
    systemReset(); // peripherals but not PC
 8001120:	f000 f98e 	bl	8001440 <systemReset>
    setupCLK();
 8001124:	f000 f9b0 	bl	8001488 <setupCLK>
    setupLEDAndButton();
 8001128:	f000 f9de 	bl	80014e8 <setupLEDAndButton>
    setupFLASH();
 800112c:	f000 f9e6 	bl	80014fc <setupFLASH>
    uartInit();
 8001130:	f000 f942 	bl	80013b8 <uartInit>
	setupUSB();
 8001134:	f7ff fe0c 	bl	8000d50 <setupUSB>

	uart_printf("\nBootloader init...\n");
 8001138:	482a      	ldr	r0, [pc, #168]	; (80011e4 <main+0xc8>)
 800113a:	f000 f8cd 	bl	80012d8 <uart_printf>
    if (readPin(GPIOB, 15) == 0x0) // force dfu
 800113e:	210f      	movs	r1, #15
 8001140:	4829      	ldr	r0, [pc, #164]	; (80011e8 <main+0xcc>)
 8001142:	f000 f874 	bl	800122e <readPin>
 8001146:	4604      	mov	r4, r0
	{
		no_user_jump = TRUE;
	} 

	// verify chain
	debug_print("checking chain...\n");
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <main+0xd0>)
 800114a:	f000 f8c5 	bl	80012d8 <uart_printf>
	ImageObjectHandle imageHandle;
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 800114e:	4928      	ldr	r1, [pc, #160]	; (80011f0 <main+0xd4>)
 8001150:	2200      	movs	r2, #0
 8001152:	a803      	add	r0, sp, #12
 8001154:	f004 ff52 	bl	8005ffc <imageCheckFromAddress>
 8001158:	4605      	mov	r5, r0
    debug_print("image check ret: %X\n", ret);
 800115a:	4629      	mov	r1, r5
 800115c:	4825      	ldr	r0, [pc, #148]	; (80011f4 <main+0xd8>)
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
 800115e:	3d02      	subs	r5, #2

	// verify chain
	debug_print("checking chain...\n");
	ImageObjectHandle imageHandle;
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
    debug_print("image check ret: %X\n", ret);
 8001160:	f000 f8ba 	bl	80012d8 <uart_printf>
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
 8001164:	2d03      	cmp	r5, #3
 8001166:	d803      	bhi.n	8001170 <main+0x54>
 8001168:	e8df f005 	tbb	[pc, r5]
 800116c:	120c0710 	andne	r0, ip, #16, 14	; 0x400000
	setupUSB();

	uart_printf("\nBootloader init...\n");
    if (readPin(GPIOB, 15) == 0x0) // force dfu
	{
		no_user_jump = TRUE;
 8001170:	f1d4 0401 	rsbs	r4, r4, #1
 8001174:	bf38      	it	cc
 8001176:	2400      	movcc	r4, #0
 8001178:	e00e      	b.n	8001198 <main+0x7c>
    int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
    debug_print("image check ret: %X\n", ret);
	switch (ret) // if anything fails to verify we need to kick ourselves into the DFU loop
	{
		case kImageImageIsTrusted:
			debug_print("Boot OK\n");
 800117a:	481f      	ldr	r0, [pc, #124]	; (80011f8 <main+0xdc>)
 800117c:	f000 f8ac 	bl	80012d8 <uart_printf>
			no_user_jump = FALSE;
 8001180:	2400      	movs	r4, #0
			break;
 8001182:	e009      	b.n	8001198 <main+0x7c>

		case kImageImageMissingMagic:
			transmit_publickey_data();
 8001184:	f7ff ff6e 	bl	8001064 <transmit_publickey_data>
			debug_print("\nFirmware missing... waiting in DFU\n");
 8001188:	481c      	ldr	r0, [pc, #112]	; (80011fc <main+0xe0>)
 800118a:	e002      	b.n	8001192 <main+0x76>
			no_user_jump = TRUE;
			break;

		case kImageImageRejectSignature:
			debug_print("\nSignature unverified... waiting in DFU\n");
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <main+0xe4>)
 800118e:	e000      	b.n	8001192 <main+0x76>
			no_user_jump = TRUE;
			break;

		case kImageImageHashCalcFailed:
			debug_print("\nHash calculation failed... waiting in DFU\n");
 8001190:	481c      	ldr	r0, [pc, #112]	; (8001204 <main+0xe8>)
 8001192:	f000 f8a1 	bl	80012d8 <uart_printf>
			no_user_jump = TRUE;
 8001196:	2401      	movs	r4, #1
			
		default:
			break;
	}

	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 8001198:	2300      	movs	r3, #0
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <main+0xec>)
 800119e:	210d      	movs	r1, #13
 80011a0:	2205      	movs	r2, #5
 80011a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011a6:	f000 f84b 	bl	8001240 <strobePin>
	while (no_user_jump)
 80011aa:	b194      	cbz	r4, 80011d2 <main+0xb6>
	{
		// we're spinning in DFU waiting for an upload...
		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 80011ac:	2300      	movs	r3, #0
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <main+0xec>)
 80011b2:	210d      	movs	r1, #13
 80011b4:	2201      	movs	r2, #1
 80011b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011ba:	f000 f841 	bl	8001240 <strobePin>
		if (dfuUploadStarted()) 
 80011be:	f000 fca7 	bl	8001b10 <dfuUploadStarted>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d0f2      	beq.n	80011ac <main+0x90>
		{
			debug_print("DFU finished upload\n");
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <main+0xf0>)
 80011c8:	f000 f886 	bl	80012d8 <uart_printf>
			dfuFinishUpload(); // systemHardReset from DFU once done
 80011cc:	f000 fca6 	bl	8001b1c <dfuFinishUpload>
 80011d0:	e7ec      	b.n	80011ac <main+0x90>
	}

	// we have the OS verified so lets jump to it. 
	if (no_user_jump == FALSE)
	{
		debug_print("Jumping to OS.\n");
 80011d2:	480f      	ldr	r0, [pc, #60]	; (8001210 <main+0xf4>)
 80011d4:	f000 f880 	bl	80012d8 <uart_printf>
		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 80011d8:	480e      	ldr	r0, [pc, #56]	; (8001214 <main+0xf8>)
 80011da:	f000 fa07 	bl	80015ec <jumpToUser>
	}
	
	return 0;// Added to please the compiler
 80011de:	4620      	mov	r0, r4
 80011e0:	b005      	add	sp, #20
 80011e2:	bd30      	pop	{r4, r5, pc}
 80011e4:	08007625 	stmdaeq	r0, {r0, r2, r5, r9, sl, ip, sp, lr}
 80011e8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80011ec:	0800763a 	stmdaeq	r0, {r1, r3, r4, r5, r9, sl, ip, sp, lr}
 80011f0:	08009000 	stmdaeq	r0, {ip, pc}
 80011f4:	0800764d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, sp, lr}
 80011f8:	08007662 	stmdaeq	r0, {r1, r5, r6, r9, sl, ip, sp, lr}
 80011fc:	0800766b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r9, sl, ip, sp, lr}
 8001200:	08007690 	stmdaeq	r0, {r4, r7, r9, sl, ip, sp, lr}
 8001204:	080076b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, ip, sp, lr}
 8001208:	40011000 	andmi	r1, r1, r0
 800120c:	080076e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, ip, sp, lr}
 8001210:	080076fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r9, sl, ip, sp, lr}
 8001214:	08009084 	stmdaeq	r0, {r2, r7, ip, pc}

08001218 <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001218:	2301      	movs	r3, #1
 800121a:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 800121e:	f1d2 0201 	rsbs	r2, r2, #1
 8001222:	bf38      	it	cc
 8001224:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8001226:	0113      	lsls	r3, r2, #4
 8001228:	4099      	lsls	r1, r3
 800122a:	6101      	str	r1, [r0, #16]
 800122c:	4770      	bx	lr

0800122e <readPin>:
}

bool readPin(u32 bank, u8 pin) {
    // todo, implement read
    if (GET_REG(GPIO_IDR(bank)) & (0x01 << pin)) {
 800122e:	2201      	movs	r2, #1
 8001230:	fa02 f101 	lsl.w	r1, r2, r1
 8001234:	6883      	ldr	r3, [r0, #8]
 8001236:	420b      	tst	r3, r1
        return TRUE;
    } else {
        return FALSE;
    }
}
 8001238:	bf0c      	ite	eq
 800123a:	2000      	moveq	r0, #0
 800123c:	2001      	movne	r0, #1
 800123e:	4770      	bx	lr

08001240 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001244:	f89d a020 	ldrb.w	sl, [sp, #32]
 8001248:	4614      	mov	r4, r2
    gpio_write_bit( bank,pin,1-onState);
 800124a:	f1ca 0701 	rsb	r7, sl, #1
 800124e:	b2ff      	uxtb	r7, r7
 8001250:	463a      	mov	r2, r7
        return FALSE;
    }
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8001252:	4680      	mov	r8, r0
 8001254:	4689      	mov	r9, r1
 8001256:	461e      	mov	r6, r3
    gpio_write_bit( bank,pin,1-onState);
 8001258:	f7ff ffde 	bl	8001218 <gpio_write_bit>

    u32 c;
    while (count-- > 0) 
 800125c:	b1b4      	cbz	r4, 800128c <strobePin+0x4c>
 800125e:	4635      	mov	r5, r6
	{
        for (c = rate; c > 0; c--)
 8001260:	b115      	cbz	r5, 8001268 <strobePin+0x28>
		{
            asm volatile("nop");
 8001262:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 8001264:	3d01      	subs	r5, #1
 8001266:	e7fb      	b.n	8001260 <strobePin+0x20>
		{
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
 8001268:	4640      	mov	r0, r8
 800126a:	4649      	mov	r1, r9
 800126c:	4652      	mov	r2, sl
 800126e:	f7ff ffd3 	bl	8001218 <gpio_write_bit>
		
        for (c = rate; c > 0; c--)
 8001272:	4635      	mov	r5, r6
 8001274:	b115      	cbz	r5, 800127c <strobePin+0x3c>
		{
            asm volatile("nop");
 8001276:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 8001278:	3d01      	subs	r5, #1
 800127a:	e7fb      	b.n	8001274 <strobePin+0x34>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
 800127c:	4640      	mov	r0, r8
 800127e:	4649      	mov	r1, r9
 8001280:	463a      	mov	r2, r7
 8001282:	3c01      	subs	r4, #1
 8001284:	f7ff ffc8 	bl	8001218 <gpio_write_bit>
 8001288:	b2e4      	uxtb	r4, r4
 800128a:	e7e7      	b.n	800125c <strobePin+0x1c>
 800128c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001290 <UU_PutChar>:

//DebugLog
#ifdef DEBUG
void UU_PutChar(USART_TypeDef* USARTx, uint8_t ch)
{
  while(!(USARTx->SR & USART_SR_TXE));
 8001290:	8803      	ldrh	r3, [r0, #0]
 8001292:	061b      	lsls	r3, r3, #24
 8001294:	d5fc      	bpl.n	8001290 <UU_PutChar>
  USARTx->DR = ch;  
 8001296:	8081      	strh	r1, [r0, #4]
 8001298:	4770      	bx	lr

0800129a <UU_PutString>:
}

void UU_PutString(USART_TypeDef* USARTx, uint8_t * str)
{
 800129a:	b538      	push	{r3, r4, r5, lr}
 800129c:	4605      	mov	r5, r0
 800129e:	1e4c      	subs	r4, r1, #1
  while(*str != 0)
 80012a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80012a4:	b119      	cbz	r1, 80012ae <UU_PutString+0x14>
  {
    UU_PutChar(USARTx, *str);
 80012a6:	4628      	mov	r0, r5
 80012a8:	f7ff fff2 	bl	8001290 <UU_PutChar>
 80012ac:	e7f8      	b.n	80012a0 <UU_PutString+0x6>
    str++;
  }
}
 80012ae:	bd38      	pop	{r3, r4, r5, pc}

080012b0 <vprint>:

void vprint(const char *fmt, va_list argp)
{
 80012b0:	b500      	push	{lr}
 80012b2:	4603      	mov	r3, r0
 80012b4:	b0b3      	sub	sp, #204	; 0xcc
 80012b6:	460a      	mov	r2, r1
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80012b8:	4668      	mov	r0, sp
 80012ba:	4619      	mov	r1, r3
 80012bc:	f006 f842 	bl	8007344 <vsiprintf>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	dd03      	ble.n	80012cc <vprint+0x1c>
    {
        UU_PutString(USART1, (uint8_t*)string); // send message via UART
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <vprint+0x24>)
 80012c6:	4669      	mov	r1, sp
 80012c8:	f7ff ffe7 	bl	800129a <UU_PutString>

    }
}
 80012cc:	b033      	add	sp, #204	; 0xcc
 80012ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d2:	bf00      	nop
 80012d4:	40013800 	andmi	r3, r1, r0, lsl #16

080012d8 <uart_printf>:

void uart_printf(const char *fmt, ...) // custom printf() function
{
 80012d8:	b40f      	push	{r0, r1, r2, r3}
 80012da:	b507      	push	{r0, r1, r2, lr}
 80012dc:	a904      	add	r1, sp, #16
 80012de:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list argp;
    va_start(argp, fmt);
 80012e2:	9101      	str	r1, [sp, #4]
    vprint(fmt, argp);
 80012e4:	f7ff ffe4 	bl	80012b0 <vprint>
    va_end(argp);
}
 80012e8:	b003      	add	sp, #12
 80012ea:	f85d eb04 	ldr.w	lr, [sp], #4
 80012ee:	b004      	add	sp, #16
 80012f0:	4770      	bx	lr
	...

080012f4 <hexdump>:

void hexdump(unsigned char *data, size_t size)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	4606      	mov	r6, r0
 80012fa:	460f      	mov	r7, r1
    int i;
    char cs[17];
    memset(cs, 0, 17);
 80012fc:	a801      	add	r0, sp, #4
 80012fe:	2100      	movs	r1, #0
 8001300:	2211      	movs	r2, #17
 8001302:	f005 fd04 	bl	8006d0e <memset>

    for(i = 0; i < size; i++)
 8001306:	2400      	movs	r4, #0
 8001308:	42bc      	cmp	r4, r7
 800130a:	f004 050f 	and.w	r5, r4, #15
 800130e:	d021      	beq.n	8001354 <hexdump+0x60>
    {
        if(i != 0 && i % 0x10 == 0)
 8001310:	b184      	cbz	r4, 8001334 <hexdump+0x40>
 8001312:	b94d      	cbnz	r5, 8001328 <hexdump+0x34>
        {
            debug_print(" |%s|\n", cs);
 8001314:	a901      	add	r1, sp, #4
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <hexdump+0x8c>)
 8001318:	f7ff ffde 	bl	80012d8 <uart_printf>
            memset(cs, 0, 17);
 800131c:	a801      	add	r0, sp, #4
 800131e:	4629      	mov	r1, r5
 8001320:	2211      	movs	r2, #17
 8001322:	f005 fcf4 	bl	8006d0e <memset>
 8001326:	e005      	b.n	8001334 <hexdump+0x40>
        }
        else if(i != 0 && i % 0x8 == 0)
 8001328:	f014 0107 	ands.w	r1, r4, #7
 800132c:	d102      	bne.n	8001334 <hexdump+0x40>
        {
            debug_print(" ",0);
 800132e:	4815      	ldr	r0, [pc, #84]	; (8001384 <hexdump+0x90>)
 8001330:	f7ff ffd2 	bl	80012d8 <uart_printf>
        }
        debug_print("%02X ", data[i]);
 8001334:	5d31      	ldrb	r1, [r6, r4]
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <hexdump+0x94>)
 8001338:	f7ff ffce 	bl	80012d8 <uart_printf>
        cs[(i % 0x10)] = (data[i] >= 0x20 && data[i] <= 0x7e) ? data[i] : '.';
 800133c:	5d33      	ldrb	r3, [r6, r4]
{
    int i;
    char cs[17];
    memset(cs, 0, 17);

    for(i = 0; i < size; i++)
 800133e:	3401      	adds	r4, #1
        else if(i != 0 && i % 0x8 == 0)
        {
            debug_print(" ",0);
        }
        debug_print("%02X ", data[i]);
        cs[(i % 0x10)] = (data[i] >= 0x20 && data[i] <= 0x7e) ? data[i] : '.';
 8001340:	f1a3 0220 	sub.w	r2, r3, #32
 8001344:	2a5e      	cmp	r2, #94	; 0x5e
 8001346:	aa06      	add	r2, sp, #24
 8001348:	bf88      	it	hi
 800134a:	232e      	movhi	r3, #46	; 0x2e
 800134c:	4415      	add	r5, r2
 800134e:	f805 3c14 	strb.w	r3, [r5, #-20]
 8001352:	e7d9      	b.n	8001308 <hexdump+0x14>
    }

    i = i % 0x10;
    if(i != 0)
 8001354:	b92d      	cbnz	r5, 8001362 <hexdump+0x6e>
        while(i++ < 0x10)
        {
            debug_print("   ",0);
        }
    }
    debug_print(" |%s|\n", cs);
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <hexdump+0x8c>)
 8001358:	a901      	add	r1, sp, #4
 800135a:	f7ff ffbd 	bl	80012d8 <uart_printf>
}
 800135e:	b007      	add	sp, #28
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }

    i = i % 0x10;
    if(i != 0)
    {
        if(i <= 0x8)
 8001362:	2d08      	cmp	r5, #8
 8001364:	dc03      	bgt.n	800136e <hexdump+0x7a>
        {
            debug_print(" ",0);
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <hexdump+0x90>)
 8001368:	2100      	movs	r1, #0
 800136a:	f7ff ffb5 	bl	80012d8 <uart_printf>
        }
        while(i++ < 0x10)
 800136e:	2d10      	cmp	r5, #16
 8001370:	d0f1      	beq.n	8001356 <hexdump+0x62>
        {
            debug_print("   ",0);
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <hexdump+0x98>)
 8001374:	2100      	movs	r1, #0
 8001376:	f7ff ffaf 	bl	80012d8 <uart_printf>
 800137a:	3501      	adds	r5, #1
 800137c:	e7f7      	b.n	800136e <hexdump+0x7a>
 800137e:	bf00      	nop
 8001380:	0800770a 	stmdaeq	r0, {r1, r3, r8, r9, sl, ip, sp, lr}
 8001384:	08007719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, ip, sp, lr}
 8001388:	08007711 	stmdaeq	r0, {r0, r4, r8, r9, sl, ip, sp, lr}
 800138c:	08007717 	stmdaeq	r0, {r0, r1, r2, r4, r8, r9, sl, ip, sp, lr}

08001390 <print_hash>:
    }
    debug_print(" |%s|\n", cs);
}

void print_hash(unsigned char hash[])
{
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4605      	mov	r5, r0
   int idx;
   for (idx=0; idx < 32; idx++)
 8001394:	2400      	movs	r4, #0
      debug_print("%02x",hash[idx]);
 8001396:	5d29      	ldrb	r1, [r5, r4]
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <print_hash+0x20>)
}

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 800139a:	3401      	adds	r4, #1
      debug_print("%02x",hash[idx]);
 800139c:	f7ff ff9c 	bl	80012d8 <uart_printf>
}

void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
 80013a0:	2c20      	cmp	r4, #32
 80013a2:	d1f8      	bne.n	8001396 <print_hash+0x6>
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <print_hash+0x24>)
 80013a6:	2100      	movs	r1, #0
}
 80013a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void print_hash(unsigned char hash[])
{
   int idx;
   for (idx=0; idx < 32; idx++)
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
 80013ac:	f7ff bf94 	b.w	80012d8 <uart_printf>
 80013b0:	0800771b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, sl, ip, sp, lr}
 80013b4:	0800773c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}

080013b8 <uartInit>:
}

#endif
void uartInit(void) {
 80013b8:	b510      	push	{r4, lr}
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80013ba:	4c20      	ldr	r4, [pc, #128]	; (800143c <uartInit+0x84>)
      debug_print("%02x",hash[idx]);
   debug_print("\n", 0);
}

#endif
void uartInit(void) {
 80013bc:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    
    /* Enable peripheral clocks for USART1 on GPIOA */
    //RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80013be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013c2:	2101      	movs	r1, #1
 80013c4:	f7ff f944 	bl	8000650 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(GPIOA, ENABLE);
 80013c8:	4620      	mov	r0, r4
 80013ca:	2101      	movs	r1, #1
 80013cc:	f7ff f940 	bl	8000650 <RCC_APB2PeriphClockCmd>
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80013d8:	2303      	movs	r3, #3
 80013da:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013de:	4620      	mov	r0, r4
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80013e0:	2318      	movs	r3, #24
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013e2:	a901      	add	r1, sp, #4
    /* Configure PA9 and PA10 as USART1 TX/RX */
    
    /* PA9 = alternate function push/pull output */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80013e4:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013e8:	f7fe fefc 	bl	80001e4 <GPIO_Init>
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80013ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f0:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80013f4:	2304      	movs	r3, #4
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 80013f6:	eb0d 0103 	add.w	r1, sp, r3
 80013fa:	4620      	mov	r0, r4
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* PA10 = floating input */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80013fc:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
 8001400:	f7fe fef0 	bl	80001e4 <GPIO_Init>
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
 8001404:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001408:	9302      	str	r3, [sp, #8]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 800140a:	f504 5440 	add.w	r4, r4, #12288	; 0x3000
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init((GPIO_TypeDef*)GPIOA, &GPIO_InitStructure);
    
    /* Configure and initialize usart... */
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800140e:	2300      	movs	r3, #0
 8001410:	f8ad 300c 	strh.w	r3, [sp, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001414:	f8ad 300e 	strh.w	r3, [sp, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8001418:	f8ad 3010 	strh.w	r3, [sp, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800141c:	f8ad 3014 	strh.w	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
    USART_Init(USART1, &USART_InitStructure);
 8001420:	a902      	add	r1, sp, #8
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001422:	230c      	movs	r3, #12
        
    USART_Init(USART1, &USART_InitStructure);
 8001424:	4620      	mov	r0, r4
    USART_InitStructure.USART_BaudRate = 115200;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001426:	f8ad 3012 	strh.w	r3, [sp, #18]
        
    USART_Init(USART1, &USART_InitStructure);
 800142a:	f7ff f9dd 	bl	80007e8 <USART_Init>
    
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
 800142e:	4620      	mov	r0, r4
 8001430:	2101      	movs	r1, #1
 8001432:	f7ff fa5b 	bl	80008ec <USART_Cmd>
}
 8001436:	b006      	add	sp, #24
 8001438:	bd10      	pop	{r4, pc}
 800143a:	bf00      	nop
 800143c:	40010800 	andmi	r0, r1, r0, lsl #16

08001440 <systemReset>:

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <systemReset+0x3c>)
    /* Enable USART1 */
    USART_Cmd(USART1, ENABLE);   
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <systemReset+0x40>)
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	4001      	ands	r1, r0
 8001452:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800145a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800145e:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001466:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8001468:	6813      	ldr	r3, [r2, #0]
 800146a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800146e:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <systemReset+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	4770      	bx	lr
 8001478:	40021000 	andmi	r1, r2, r0
 800147c:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8001480:	40021004 	andmi	r1, r2, r4
 8001484:	40021008 	andmi	r1, r2, r8

08001488 <setupCLK>:
}

void setupCLK(void) {
	unsigned int StartUpCounter=0;
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <setupCLK+0x58>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8001490:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4812      	ldr	r0, [pc, #72]	; (80014e0 <setupCLK+0x58>)
 8001496:	0392      	lsls	r2, r2, #14
 8001498:	d5fb      	bpl.n	8001492 <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <setupCLK+0x5c>)
 800149c:	2112      	movs	r1, #18
 800149e:	6011      	str	r1, [r2, #0]
	
     /* Configure PLL */
#ifdef XTAL12M
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00110400); /* pll=72Mhz(x6),APB1=36Mhz,AHB=72Mhz */
#else
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x001D0400); /* pll=72Mhz(x9),APB1=36Mhz,AHB=72Mhz */
 80014a0:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	f441 11e8 	orr.w	r1, r1, #1900544	; 0x1d0000
 80014aa:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80014ae:	6011      	str	r1, [r2, #0]
#endif	

    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80014b0:	6801      	ldr	r1, [r0, #0]
 80014b2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80014b6:	6001      	str	r1, [r0, #0]

#if !defined  (HSE_STARTUP_TIMEOUT) 
  #define HSE_STARTUP_TIMEOUT    ((unsigned int)0x0500)   /*!< Time out for HSE start up */
#endif /* HSE_STARTUP_TIMEOUT */   

    while ((GET_REG(RCC_CR) & 0x03000000) == 0 && StartUpCounter < HSE_STARTUP_TIMEOUT)
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80014be:	d0fb      	beq.n	80014b8 <setupCLK+0x30>
	{
		// HSE has not started. Try restarting the processor
		systemHardReset(); 
	}
    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	f041 0102 	orr.w	r1, r1, #2
 80014c6:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	0709      	lsls	r1, r1, #28
 80014cc:	d5fc      	bpl.n	80014c8 <setupCLK+0x40>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80014d4:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014dc:	61da      	str	r2, [r3, #28]
 80014de:	4770      	bx	lr
 80014e0:	40021000 	andmi	r1, r2, r0
 80014e4:	40022000 	andmi	r2, r2, r0

080014e8 <setupLEDAndButton>:

}

void setupLEDAndButton (void) { 
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <setupLEDAndButton+0x10>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	4770      	bx	lr
 80014f8:	40011004 	andmi	r1, r1, r4

080014fc <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <setupFLASH+0x18>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	07d1      	lsls	r1, r2, #31
 8001502:	d403      	bmi.n	800150c <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 8001504:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 8001506:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 800150a:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	0792      	lsls	r2, r2, #30
 8001510:	d5fc      	bpl.n	800150c <setupFLASH+0x10>
}   
 8001512:	4770      	bx	lr
 8001514:	40021000 	andmi	r1, r2, r0

08001518 <uid_read>:
{
  if (QEMU_BUILD) // put an arbitrary ECID in qemu
  {
    memcpy(&id, (unsigned char*)0xFF, 23);
  } else {
    id->off0 = MMIO16(U_ID + 0x0);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <uid_read+0x1c>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	8003      	strh	r3, [r0, #0]
    id->off2 = MMIO16(U_ID + 0x2);
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <uid_read+0x20>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	8043      	strh	r3, [r0, #2]
    id->off4 = MMIO32(U_ID + 0x4);
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <uid_read+0x24>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6043      	str	r3, [r0, #4]
    id->off8 = MMIO32(U_ID + 0x8);
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <uid_read+0x28>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6083      	str	r3, [r0, #8]
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	1ffff7e8 	svcne	0x00fff7e8
 8001538:	1ffff7ea 	svcne	0x00fff7ea
 800153c:	1ffff7ec 	svcne	0x00fff7ec
 8001540:	1ffff7f0 	svcne	0x00fff7f0

08001544 <setMspAndJump>:
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <setMspAndJump+0x14>)
    id->off4 = MMIO32(U_ID + 0x4);
    id->off8 = MMIO32(U_ID + 0x8);
  }
}

void setMspAndJump(u32 usrAddr) {
 8001546:	b508      	push	{r3, lr}
  // Dedicated function with no call to any function (appart the last call)
  // This way, there is no manipulation of the stack here, ensuring that GGC
  // didn't insert any pop from the SP after having set the MSP.
  typedef void (*funcPtr)(void);
  u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 8001548:	6843      	ldr	r3, [r0, #4]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));
 800154a:	6010      	str	r0, [r2, #0]

  asm volatile("msr msp, %0"::"g"
               (*(volatile u32 *)usrAddr));
 800154c:	6802      	ldr	r2, [r0, #0]

  funcPtr usrMain = (funcPtr) jumpAddr;

  SET_REG(SCB_VTOR, (vu32) (usrAddr));

  asm volatile("msr msp, %0"::"g"
 800154e:	f382 8808 	msr	MSP, r2
               (*(volatile u32 *)usrAddr));

  usrMain();                                /* go! */
 8001552:	4798      	blx	r3
 8001554:	bd08      	pop	{r3, pc}
 8001556:	bf00      	nop
 8001558:	e000ed08 	and	lr, r0, r8, lsl #26

0800155c <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <nvicInit+0x64>)
		pRCC->APB1ENR &= ~(RCC_APB1ENR_PWR_CLK | RCC_APB1ENR_BKP_CLK);
	}
    return flagSet;
}

void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 800155e:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001560:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001562:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8001564:	43db      	mvns	r3, r3
 8001566:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 800156a:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800156e:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001572:	240f      	movs	r4, #15
 8001574:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001576:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001578:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800157a:	400c      	ands	r4, r1
 800157c:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800157e:	f003 0103 	and.w	r1, r3, #3
 8001582:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 8001584:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001586:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8001588:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800158a:	408a      	lsls	r2, r1
 800158c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001590:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001594:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8001598:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 800159c:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 80015a0:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 80015a2:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80015a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80015a8:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80015aa:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80015ac:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80015b6:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <nvicInit+0x68>)
 80015b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80015bc:	bd30      	pop	{r4, r5, pc}
 80015be:	bf00      	nop
 80015c0:	e000ed00 	and	lr, r0, r0, lsl #26
 80015c4:	e000e100 	and	lr, r0, r0, lsl #2

080015c8 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <nvicDisableInterrupts+0x20>)
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80015d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80015d6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 80015da:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80015de:	2204      	movs	r2, #4
 80015e0:	f843 2cf0 	str.w	r2, [r3, #-240]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	and	lr, r0, r0, lsl #2

080015ec <jumpToUser>:

  usrMain();                                /* go! */
}


void jumpToUser(u32 usrAddr) {
 80015ec:	b510      	push	{r4, lr}
 80015ee:	4604      	mov	r4, r0
    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative

    //flashLock();
    usbDsbISR();
 80015f0:	f7ff fcb4 	bl	8000f5c <usbDsbISR>
    nvicDisableInterrupts();
 80015f4:	f7ff ffe8 	bl	80015c8 <nvicDisableInterrupts>
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 80015f8:	f7ff fc7c 	bl	8000ef4 <usbDsbBus>
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 80015fc:	f7ff ff20 	bl	8001440 <systemReset>
    //SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
    setMspAndJump(usrAddr);
 8001600:	4620      	mov	r0, r4
}
 8001602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
    //SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
    setMspAndJump(usrAddr);
 8001606:	f7ff bf9d 	b.w	8001544 <setMspAndJump>
	...

0800160c <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <systemHardReset+0xc>)
 800160e:	4b03      	ldr	r3, [pc, #12]	; (800161c <systemHardReset+0x10>)
 8001610:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8001612:	bf00      	nop
 8001614:	e7fd      	b.n	8001612 <systemHardReset+0x6>
 8001616:	bf00      	nop
 8001618:	05fa0004 	ldrbeq	r0, [sl, #4]!
 800161c:	e000ed00 	and	lr, r0, r0, lsl #26

08001620 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8001622:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8001624:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 8001626:	2202      	movs	r2, #2
 8001628:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <flashErasePage+0x30>)
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	4614      	mov	r4, r2
 8001630:	f011 0f01 	tst.w	r1, #1
 8001634:	d1f9      	bne.n	800162a <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 8001636:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 8001638:	2242      	movs	r2, #66	; 0x42
 800163a:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	f012 0101 	ands.w	r1, r2, #1
 8001642:	d1fb      	bne.n	800163c <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8001644:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 8001646:	2001      	movs	r0, #1
 8001648:	bd10      	pop	{r4, pc}
 800164a:	bf00      	nop
 800164c:	40022010 	andmi	r2, r2, r0, lsl r0
 8001650:	4002200c 	andmi	r2, r2, ip

08001654 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 8001654:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 8001656:	b28b      	uxth	r3, r1
 8001658:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 800165a:	0c0b      	lsrs	r3, r1, #16
 800165c:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8001660:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 8001662:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8001664:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001666:	4a0d      	ldr	r2, [pc, #52]	; (800169c <flashWriteWord+0x48>)
 8001668:	6815      	ldr	r5, [r2, #0]
 800166a:	07ed      	lsls	r5, r5, #31
 800166c:	d4fb      	bmi.n	8001666 <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 800166e:	9d01      	ldr	r5, [sp, #4]
 8001670:	b2ad      	uxth	r5, r5
 8001672:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001674:	6815      	ldr	r5, [r2, #0]
 8001676:	07ed      	lsls	r5, r5, #31
 8001678:	d4fc      	bmi.n	8001674 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 800167a:	9d00      	ldr	r5, [sp, #0]
 800167c:	b2ad      	uxth	r5, r5
 800167e:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8001680:	6815      	ldr	r5, [r2, #0]
 8001682:	07ed      	lsls	r5, r5, #31
 8001684:	d4fc      	bmi.n	8001680 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 8001686:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 800168a:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 800168c:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 800168e:	1a43      	subs	r3, r0, r1
 8001690:	4258      	negs	r0, r3
 8001692:	4158      	adcs	r0, r3
 8001694:	b003      	add	sp, #12
 8001696:	bd30      	pop	{r4, r5, pc}
 8001698:	40022010 	andmi	r2, r2, r0, lsl r0
 800169c:	4002200c 	andmi	r2, r2, ip

080016a0 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80016a0:	4b01      	ldr	r3, [pc, #4]	; (80016a8 <flashLock+0x8>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	4770      	bx	lr
 80016a8:	40022010 	andmi	r2, r2, r0, lsl r0

080016ac <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <flashUnlock+0x10>)
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <flashUnlock+0x14>)
 80016b0:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 80016b2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40022004 	andmi	r2, r2, r4
 80016c0:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080016c4 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 80016c4:	2807      	cmp	r0, #7
	{
		pin-=8;
 80016c6:	bfc8      	it	gt
 80016c8:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 80016ca:	230f      	movs	r3, #15
 80016cc:	0080      	lsls	r0, r0, #2
 80016ce:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 80016d2:	43c0      	mvns	r0, r0
 80016d4:	4770      	bx	lr
	...

080016d8 <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <getFlashEnd+0xc>)
 80016da:	8818      	ldrh	r0, [r3, #0]
 80016dc:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 80016e0:	0280      	lsls	r0, r0, #10
 80016e2:	4770      	bx	lr
 80016e4:	1ffff7e0 	svcne	0x00fff7e0

080016e8 <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <getFlashPageSize+0x14>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 80016ec:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 80016ee:	bf34      	ite	cc
 80016f0:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 80016f4:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	1ffff7e0 	svcne	0x00fff7e0

08001700 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8001700:	4a15      	ldr	r2, [pc, #84]	; (8001758 <dfuInit+0x58>)


volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
 8001702:	b508      	push	{r3, lr}
    dfuAppStatus.bStatus = OK;
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8001704:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8001706:	2300      	movs	r3, #0
 8001708:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 800170a:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 800170c:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 800170e:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8001710:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8001712:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <dfuInit+0x5c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8001716:	4912      	ldr	r1, [pc, #72]	; (8001760 <dfuInit+0x60>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 8001718:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <dfuInit+0x64>)
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800171c:	4812      	ldr	r0, [pc, #72]	; (8001768 <dfuInit+0x68>)
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
 800171e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <dfuInit+0x6c>)
 8001722:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <dfuInit+0x70>)
 8001726:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 800172a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <dfuInit+0x74>)
    code_copy_lock = WAIT;
 800172e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8001730:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <dfuInit+0x78>)
 8001734:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 8001736:	4a11      	ldr	r2, [pc, #68]	; (800177c <dfuInit+0x7c>)
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8001738:	21ff      	movs	r1, #255	; 0xff
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
 800173a:	7013      	strb	r3, [r2, #0]
    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800173c:	2220      	movs	r2, #32
 800173e:	f005 fae6 	bl	8006d0e <memset>
    memset(input, 0xFF, sizeof(input));
 8001742:	480f      	ldr	r0, [pc, #60]	; (8001780 <dfuInit+0x80>)
 8001744:	21ff      	movs	r1, #255	; 0xff
 8001746:	225c      	movs	r2, #92	; 0x5c
 8001748:	f005 fae1 	bl	8006d0e <memset>

    sha256_starts(&ctx);
}
 800174c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    code_copy_lock = WAIT;
    dfuBusy = FALSE;
    memset(sha256sum, 0xFF, sizeof(sha256sum));
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <dfuInit+0x84>)
 8001752:	f001 be8b 	b.w	800346c <sha256_starts>
 8001756:	bf00      	nop
 8001758:	20000dc5 	andcs	r0, r0, r5, asr #27
 800175c:	20000dc0 	andcs	r0, r0, r0, asr #27
 8001760:	20000c00 	andcs	r0, r0, r0, lsl #24
 8001764:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001768:	200004ec 	andcs	r0, r0, ip, ror #9
 800176c:	200002c0 	andcs	r0, r0, r0, asr #5
 8001770:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8001774:	20000dc4 	andcs	r0, r0, r4, asr #27
 8001778:	20000574 	andcs	r0, r0, r4, ror r5
 800177c:	20000dcb 	andcs	r0, r0, fp, asr #27
 8001780:	20000490 	mulcs	r0, r0, r4
 8001784:	2000050c 	andcs	r0, r0, ip, lsl #10

08001788 <dfuUpdateByReset>:
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
 8001788:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 800178c:	480e      	ldr	r0, [pc, #56]	; (80017c8 <dfuUpdateByReset+0x40>)

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 800178e:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 8001790:	2200      	movs	r2, #0

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8001792:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8001794:	2901      	cmp	r1, #1
    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 8001796:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 8001798:	d108      	bne.n	80017ac <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 800179a:	2102      	movs	r1, #2
 800179c:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 800179e:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 80017a0:	f7ff ff12 	bl	80015c8 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 80017a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 80017a8:	f7ff bba6 	b.w	8000ef8 <usbEnbISR>
    } else if (startState == appIDLE || startState == dfuIDLE) {
 80017ac:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80017b0:	d006      	beq.n	80017c0 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 80017b2:	2102      	movs	r1, #2
 80017b4:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 80017b6:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 80017b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 80017bc:	f7ff bf26 	b.w	800160c <systemHardReset>
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop
 80017c4:	20000dc5 	andcs	r0, r0, r5, asr #27
 80017c8:	20000dc0 	andcs	r0, r0, r0, asr #27

080017cc <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 80017cc:	b920      	cbnz	r0, 80017d8 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <dfuCopyState+0x10>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	821a      	strh	r2, [r3, #16]
        return NULL;
 80017d6:	4770      	bx	lr
    } else {
        return (u8 *)(&(dfuAppStatus.bState));
 80017d8:	4801      	ldr	r0, [pc, #4]	; (80017e0 <dfuCopyState+0x14>)
    }
}
 80017da:	4770      	bx	lr
 80017dc:	200005a8 	andcs	r0, r0, r8, lsr #11
 80017e0:	20000dc9 	andcs	r0, r0, r9, asr #27

080017e4 <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 80017e4:	b920      	cbnz	r0, 80017f0 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <dfuCopyStatus+0x10>)
 80017e8:	2206      	movs	r2, #6
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	821a      	strh	r2, [r3, #16]
        return NULL;
 80017ee:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 80017f0:	4801      	ldr	r0, [pc, #4]	; (80017f8 <dfuCopyStatus+0x14>)
    }
}
 80017f2:	4770      	bx	lr
 80017f4:	200005a8 	andcs	r0, r0, r8, lsr #11
 80017f8:	20000dc5 	andcs	r0, r0, r5, asr #27

080017fc <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 80017fe:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8001800:	b930      	cbnz	r0, 8001810 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8001802:	88da      	ldrh	r2, [r3, #6]
 8001804:	8a59      	ldrh	r1, [r3, #18]
 8001806:	1a51      	subs	r1, r2, r1
 8001808:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <dfuCopyDNLOAD+0x20>)
 800180c:	801a      	strh	r2, [r3, #0]
        return NULL;
 800180e:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8001810:	8a5b      	ldrh	r3, [r3, #18]
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <dfuCopyDNLOAD+0x24>)
 8001814:	4418      	add	r0, r3
    }
}
 8001816:	4770      	bx	lr
 8001818:	200005a8 	andcs	r0, r0, r8, lsr #11
 800181c:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001820:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

08001824 <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8001826:	b930      	cbnz	r0, 8001836 <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <dfuCopyUPLOAD+0x28>)
 800182c:	8811      	ldrh	r1, [r2, #0]
 800182e:	8a5a      	ldrh	r2, [r3, #18]
 8001830:	1a8a      	subs	r2, r1, r2
 8001832:	821a      	strh	r2, [r3, #16]
        return NULL;
 8001834:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8001836:	4906      	ldr	r1, [pc, #24]	; (8001850 <dfuCopyUPLOAD+0x2c>)
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <dfuCopyUPLOAD+0x30>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	6808      	ldr	r0, [r1, #0]
 8001840:	8a5b      	ldrh	r3, [r3, #18]
 8001842:	4410      	add	r0, r2
 8001844:	4418      	add	r0, r3
    }
}
 8001846:	4770      	bx	lr
 8001848:	200005a8 	andcs	r0, r0, r8, lsr #11
 800184c:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001850:	200002c0 	andcs	r0, r0, r0, asr #5
 8001854:	20000dc0 	andcs	r0, r0, r0, asr #27

08001858 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8001858:	b538      	push	{r3, r4, r5, lr}
        }
    } 
	else 
*/
	
	if (userUploadType == DFU_UPLOAD_FLASH_0X8008000) {
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <dfuCopyBufferToExec+0x48>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d105      	bne.n	800186e <dfuCopyBufferToExec+0x16>
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <dfuCopyBufferToExec+0x4c>)
 8001864:	681d      	ldr	r5, [r3, #0]
 8001866:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 800186a:	f505 4510 	add.w	r5, r5, #36864	; 0x9000
	}

    flashErasePage((u32)(userSpace));
 800186e:	4628      	mov	r0, r5
 8001870:	f7ff fed6 	bl	8001620 <flashErasePage>

    for (i = 0; i < thisBlockLen; i = i + 4) {
 8001874:	2400      	movs	r4, #0
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <dfuCopyBufferToExec+0x50>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	b292      	uxth	r2, r2
 800187c:	4294      	cmp	r4, r2
 800187e:	da06      	bge.n	800188e <dfuCopyBufferToExec+0x36>
        /*if ((u32)(userSpace) >= 0x8008074)
        {
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <dfuCopyBufferToExec+0x54>)
 8001882:	1928      	adds	r0, r5, r4
 8001884:	58e1      	ldr	r1, [r4, r3]
 8001886:	f7ff fee5 	bl	8001654 <flashWriteWord>
		userSpace = (u32 *)(USER_CODE_FLASH0X8008000 + userFirmwareLen);
	}

    flashErasePage((u32)(userSpace));

    for (i = 0; i < thisBlockLen; i = i + 4) {
 800188a:	3404      	adds	r4, #4
 800188c:	e7f3      	b.n	8001876 <dfuCopyBufferToExec+0x1e>
            sha256_update(&ctx, recvBuffer +i, sizeof(u32));
        }*/
        flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
    }
    
    userFirmwareLen += thisBlockLen;
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <dfuCopyBufferToExec+0x4c>)
 8001890:	6810      	ldr	r0, [r2, #0]
 8001892:	8819      	ldrh	r1, [r3, #0]
 8001894:	b289      	uxth	r1, r1
 8001896:	4401      	add	r1, r0
 8001898:	6011      	str	r1, [r2, #0]
    thisBlockLen = 0;
 800189a:	2200      	movs	r2, #0
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	20000dc4 	andcs	r0, r0, r4, asr #27
 80018a4:	20000dc0 	andcs	r0, r0, r0, asr #27
 80018a8:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 80018ac:	200005bc 			; <UNDEFINED> instruction: 0x200005bc

080018b0 <dfuUpdateByRequest>:
    memset(input, 0xFF, sizeof(input));

    sha256_starts(&ctx);
}

bool dfuUpdateByRequest(void) {
 80018b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 80018b4:	4987      	ldr	r1, [pc, #540]	; (8001ad4 <dfuUpdateByRequest+0x224>)

    u8 startState = dfuAppStatus.bState;
 80018b6:	4c88      	ldr	r4, [pc, #544]	; (8001ad8 <dfuUpdateByRequest+0x228>)
}

bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 80018b8:	2001      	movs	r0, #1
 80018ba:	7008      	strb	r0, [r1, #0]

    u8 startState = dfuAppStatus.bState;
 80018bc:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 80018be:	2200      	movs	r2, #0
bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
 80018c0:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018c2:	2b02      	cmp	r3, #2
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;

    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 80018c4:	7022      	strb	r2, [r4, #0]
    
    /* often leaner to nest if's then embed a switch/case */
    /* but who the fuck cares? use a better compiler. we have space */
    if (startState == dfuIDLE)  {
 80018c6:	d151      	bne.n	800196c <dfuUpdateByRequest+0xbc>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 80018c8:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 80018ca:	4984      	ldr	r1, [pc, #528]	; (8001adc <dfuUpdateByRequest+0x22c>)
 80018cc:	6809      	ldr	r1, [r1, #0]
 80018ce:	7848      	ldrb	r0, [r1, #1]
 80018d0:	2801      	cmp	r0, #1
 80018d2:	d121      	bne.n	8001918 <dfuUpdateByRequest+0x68>
            if (pInformation->USBwLengths.w > 0) {
 80018d4:	88cb      	ldrh	r3, [r1, #6]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80d1 	beq.w	8001a7e <dfuUpdateByRequest+0x1ce>
                userFirmwareLen = 0;
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <dfuUpdateByRequest+0x230>)
 80018de:	601a      	str	r2, [r3, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting) {
 80018e0:	7b0a      	ldrb	r2, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018e2:	2303      	movs	r3, #3
				switch(pInformation->Current_AlternateSetting) {
 80018e4:	2a01      	cmp	r2, #1
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80018e6:	7123      	strb	r3, [r4, #4]
				switch(pInformation->Current_AlternateSetting) {
 80018e8:	d008      	beq.n	80018fc <dfuUpdateByRequest+0x4c>
 80018ea:	2a02      	cmp	r2, #2
 80018ec:	d111      	bne.n	8001912 <dfuUpdateByRequest+0x62>
						//flashErasePage((u32)USER_CODE_FLASH0X8002000);

						break;

					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <dfuUpdateByRequest+0x234>)
 80018f0:	2206      	movs	r2, #6
 80018f2:	701a      	strb	r2, [r3, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 80018f4:	4a7c      	ldr	r2, [pc, #496]	; (8001ae8 <dfuUpdateByRequest+0x238>)
 80018f6:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <dfuUpdateByRequest+0x23c>)
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e005      	b.n	8001908 <dfuUpdateByRequest+0x58>
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/

					case 1:
					    userAppAddr = USER_CODE_FLASH0X8008000;
 80018fc:	4a7c      	ldr	r2, [pc, #496]	; (8001af0 <dfuUpdateByRequest+0x240>)
 80018fe:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <dfuUpdateByRequest+0x23c>)
 8001900:	601a      	str	r2, [r3, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8008000;
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <dfuUpdateByRequest+0x234>)
 8001904:	2204      	movs	r2, #4
 8001906:	701a      	strb	r2, [r3, #0]
					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
						userAppAddr = USER_CODE_FLASH0X8002000;
						
                        /* make sure the flash is setup properly, unlock it */
                        setupFLASH();
 8001908:	f7ff fdf8 	bl	80014fc <setupFLASH>
						flashUnlock();
 800190c:	f7ff fece 	bl	80016ac <flashUnlock>

						break;
 8001910:	e0d8      	b.n	8001ac4 <dfuUpdateByRequest+0x214>

					default:
					    // Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 8001912:	220a      	movs	r2, #10
 8001914:	7122      	strb	r2, [r4, #4]
 8001916:	e0d4      	b.n	8001ac2 <dfuUpdateByRequest+0x212>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8001918:	2802      	cmp	r0, #2
 800191a:	d121      	bne.n	8001960 <dfuUpdateByRequest+0xb0>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 800191c:	2309      	movs	r3, #9
 800191e:	7123      	strb	r3, [r4, #4]
            
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8001920:	88ca      	ldrh	r2, [r1, #6]
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <dfuUpdateByRequest+0x244>)
 8001924:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8001926:	8818      	ldrh	r0, [r3, #0]
 8001928:	4a73      	ldr	r2, [pc, #460]	; (8001af8 <dfuUpdateByRequest+0x248>)
 800192a:	b280      	uxth	r0, r0
 800192c:	8010      	strh	r0, [r2, #0]
            
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	884b      	ldrh	r3, [r1, #2]
 8001932:	b292      	uxth	r2, r2
 8001934:	435a      	muls	r2, r3
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <dfuUpdateByRequest+0x230>)
 8001938:	601a      	str	r2, [r3, #0]
			
            switch(pInformation->Current_AlternateSetting) {
 800193a:	7b0b      	ldrb	r3, [r1, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d003      	beq.n	8001948 <dfuUpdateByRequest+0x98>
 8001940:	2b02      	cmp	r3, #2
 8001942:	d109      	bne.n	8001958 <dfuUpdateByRequest+0xa8>
				    userAppAddr = USER_CODE_FLASH0X8008000;
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8001944:	4a68      	ldr	r2, [pc, #416]	; (8001ae8 <dfuUpdateByRequest+0x238>)
 8001946:	e000      	b.n	800194a <dfuUpdateByRequest+0x9a>
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/

				case 1:
				    userAppAddr = USER_CODE_FLASH0X8008000;
 8001948:	4a69      	ldr	r2, [pc, #420]	; (8001af0 <dfuUpdateByRequest+0x240>)
					userAppEnd = getFlashEnd();
					break;

				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 800194a:	4b68      	ldr	r3, [pc, #416]	; (8001aec <dfuUpdateByRequest+0x23c>)
 800194c:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 800194e:	f7ff fec3 	bl	80016d8 <getFlashEnd>
 8001952:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <dfuUpdateByRequest+0x24c>)
 8001954:	6018      	str	r0, [r3, #0]
					break;
 8001956:	e0b5      	b.n	8001ac4 <dfuUpdateByRequest+0x214>

				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8001958:	230a      	movs	r3, #10
 800195a:	7123      	strb	r3, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 800195c:	2303      	movs	r3, #3
 800195e:	e0b0      	b.n	8001ac2 <dfuUpdateByRequest+0x212>
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001960:	2806      	cmp	r0, #6
 8001962:	d051      	beq.n	8001a08 <dfuUpdateByRequest+0x158>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001964:	2803      	cmp	r0, #3
 8001966:	d019      	beq.n	800199c <dfuUpdateByRequest+0xec>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001968:	2805      	cmp	r0, #5
 800196a:	e051      	b.n	8001a10 <dfuUpdateByRequest+0x160>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 800196c:	2b03      	cmp	r3, #3
 800196e:	d10b      	bne.n	8001988 <dfuUpdateByRequest+0xd8>
        /* device received block, waiting for DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001970:	4a5a      	ldr	r2, [pc, #360]	; (8001adc <dfuUpdateByRequest+0x22c>)
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	7852      	ldrb	r2, [r2, #1]
 8001976:	2a03      	cmp	r2, #3
 8001978:	d104      	bne.n	8001984 <dfuUpdateByRequest+0xd4>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800197a:	2305      	movs	r3, #5
 800197c:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 800197e:	f7ff ff6b 	bl	8001858 <dfuCopyBufferToExec>
 8001982:	e09f      	b.n	8001ac4 <dfuUpdateByRequest+0x214>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001984:	2a05      	cmp	r2, #5
 8001986:	e043      	b.n	8001a10 <dfuUpdateByRequest+0x160>
            dfuAppStatus.bState  = dfuDNLOAD_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuDNBUSY)              {
 8001988:	2b04      	cmp	r3, #4
 800198a:	d109      	bne.n	80019a0 <dfuUpdateByRequest+0xf0>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 800198c:	495c      	ldr	r1, [pc, #368]	; (8001b00 <dfuUpdateByRequest+0x250>)
 800198e:	7808      	ldrb	r0, [r1, #0]
 8001990:	2802      	cmp	r0, #2
 8001992:	d103      	bne.n	800199c <dfuUpdateByRequest+0xec>

            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8001994:	2303      	movs	r3, #3
        }
    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {

            dfuAppStatus.bwPollTimeout0 = 0x00;
 8001996:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8001998:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 800199a:	2305      	movs	r3, #5
 800199c:	7123      	strb	r3, [r4, #4]
 800199e:	e091      	b.n	8001ac4 <dfuUpdateByRequest+0x214>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }
    } else if (startState == dfuDNLOAD_IDLE)         {
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d129      	bne.n	80019f8 <dfuUpdateByRequest+0x148>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 80019a4:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <dfuUpdateByRequest+0x22c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	7853      	ldrb	r3, [r2, #1]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d11d      	bne.n	80019ea <dfuUpdateByRequest+0x13a>
            if (pInformation->USBwLengths.w > 0) {
 80019ae:	88d2      	ldrh	r2, [r2, #6]
 80019b0:	b10a      	cbz	r2, 80019b6 <dfuUpdateByRequest+0x106>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e7f2      	b.n	800199c <dfuUpdateByRequest+0xec>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 80019b6:	2306      	movs	r3, #6
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <dfuUpdateByRequest+0x240>)
 80019ba:	a801      	add	r0, sp, #4
        if (pInformation->USBbRequest == DFU_DNLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 80019bc:	7123      	strb	r3, [r4, #4]
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 80019be:	f004 fb1d 	bl	8005ffc <imageCheckFromAddress>
 80019c2:	4605      	mov	r5, r0
                debug_print("image check ret: %X\n", ret);
 80019c4:	4629      	mov	r1, r5
 80019c6:	484f      	ldr	r0, [pc, #316]	; (8001b04 <dfuUpdateByRequest+0x254>)
                switch (ret)
 80019c8:	3d02      	subs	r5, #2
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
                ImageObjectHandle imageHandle;
                int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
                debug_print("image check ret: %X\n", ret);
 80019ca:	f7ff fc85 	bl	80012d8 <uart_printf>
                switch (ret)
 80019ce:	2d03      	cmp	r5, #3
 80019d0:	d808      	bhi.n	80019e4 <dfuUpdateByRequest+0x134>
 80019d2:	e8df f005 	tbb	[pc, r5]
 80019d6:	04040204 	streq	r0, [r4], #-516	; 0x204
                {
                    case kImageImageIsTrusted:
                        uart_printf("Uploaded signature verified!\n");
 80019da:	484b      	ldr	r0, [pc, #300]	; (8001b08 <dfuUpdateByRequest+0x258>)
 80019dc:	e000      	b.n	80019e0 <dfuUpdateByRequest+0x130>
                        break;

                    case kImageImageMissingMagic:
                    case kImageImageRejectSignature:
                    case kImageImageHashCalcFailed:
                        uart_printf("Image unverified...\n");
 80019de:	484b      	ldr	r0, [pc, #300]	; (8001b0c <dfuUpdateByRequest+0x25c>)
 80019e0:	f7ff fc7a 	bl	80012d8 <uart_printf>
                        break;

                    default:
                        break;
                }
                flashLock();
 80019e4:	f7ff fe5c 	bl	80016a0 <flashLock>
 80019e8:	e06c      	b.n	8001ac4 <dfuUpdateByRequest+0x214>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d04d      	beq.n	8001a8a <dfuUpdateByRequest+0x1da>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d04b      	beq.n	8001a8a <dfuUpdateByRequest+0x1da>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 80019f2:	2b05      	cmp	r3, #5
 80019f4:	d162      	bne.n	8001abc <dfuUpdateByRequest+0x20c>
 80019f6:	e048      	b.n	8001a8a <dfuUpdateByRequest+0x1da>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC) {
 80019f8:	2b06      	cmp	r3, #6
 80019fa:	d10b      	bne.n	8001a14 <dfuUpdateByRequest+0x164>
        /* device has received last block, waiting DFU_GETSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 80019fc:	4937      	ldr	r1, [pc, #220]	; (8001adc <dfuUpdateByRequest+0x22c>)
 80019fe:	6809      	ldr	r1, [r1, #0]
 8001a00:	7849      	ldrb	r1, [r1, #1]
 8001a02:	2903      	cmp	r1, #3
 8001a04:	d103      	bne.n	8001a0e <dfuUpdateByRequest+0x15e>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8001a06:	2308      	movs	r3, #8
 8001a08:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8001a0a:	7022      	strb	r2, [r4, #0]
 8001a0c:	e05a      	b.n	8001ac4 <dfuUpdateByRequest+0x214>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001a0e:	2905      	cmp	r1, #5
 8001a10:	d154      	bne.n	8001abc <dfuUpdateByRequest+0x20c>
 8001a12:	e7c3      	b.n	800199c <dfuUpdateByRequest+0xec>
            dfuAppStatus.bState  = dfuMANIFEST_SYNC;
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuMANIFEST) {
 8001a14:	2b07      	cmp	r3, #7
 8001a16:	d0f6      	beq.n	8001a06 <dfuUpdateByRequest+0x156>
        /* device is in manifestation phase */

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;
    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d0bf      	beq.n	800199c <dfuUpdateByRequest+0xec>
        /* device has programmed new firmware but needs external
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
    } else if (startState == dfuUPLOAD_IDLE) {
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	d13c      	bne.n	8001a9a <dfuUpdateByRequest+0x1ea>
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <dfuUpdateByRequest+0x22c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	7853      	ldrb	r3, [r2, #1]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d12d      	bne.n	8001a86 <dfuUpdateByRequest+0x1d6>
            if (pInformation->USBwLengths.w > 0) {
 8001a2a:	88d0      	ldrh	r0, [r2, #6]
 8001a2c:	b338      	cbz	r0, 8001a7e <dfuUpdateByRequest+0x1ce>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a2e:	4931      	ldr	r1, [pc, #196]	; (8001af4 <dfuUpdateByRequest+0x244>)
 8001a30:	8852      	ldrh	r2, [r2, #2]
 8001a32:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a34:	4d2d      	ldr	r5, [pc, #180]	; (8001aec <dfuUpdateByRequest+0x23c>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4353      	muls	r3, r2
 8001a3a:	4a29      	ldr	r2, [pc, #164]	; (8001ae0 <dfuUpdateByRequest+0x230>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a3c:	4e2f      	ldr	r6, [pc, #188]	; (8001afc <dfuUpdateByRequest+0x24c>)
    } else if (startState == dfuUPLOAD_IDLE) {
        /* device expecting further dfu_upload requests */
        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8001a3e:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8001a40:	682f      	ldr	r7, [r5, #0]
 8001a42:	f8d2 8000 	ldr.w	r8, [r2]
 8001a46:	f8b1 c000 	ldrh.w	ip, [r1]
 8001a4a:	4447      	add	r7, r8
 8001a4c:	6833      	ldr	r3, [r6, #0]
 8001a4e:	fa1f fc8c 	uxth.w	ip, ip
 8001a52:	4467      	add	r7, ip
 8001a54:	429f      	cmp	r7, r3
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <dfuUpdateByRequest+0x248>)
 8001a58:	d803      	bhi.n	8001a62 <dfuUpdateByRequest+0x1b2>
                    thisBlockLen = uploadBlockLen;
 8001a5a:	880a      	ldrh	r2, [r1, #0]
 8001a5c:	b292      	uxth	r2, r2
 8001a5e:	801a      	strh	r2, [r3, #0]
 8001a60:	e019      	b.n	8001a96 <dfuUpdateByRequest+0x1e6>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8001a62:	6836      	ldr	r6, [r6, #0]
 8001a64:	682d      	ldr	r5, [r5, #0]
 8001a66:	6811      	ldr	r1, [r2, #0]
 8001a68:	1b72      	subs	r2, r6, r5
 8001a6a:	1a52      	subs	r2, r2, r1
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	801a      	strh	r2, [r3, #0]
                    
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	b292      	uxth	r2, r2
 8001a74:	4282      	cmp	r2, r0
 8001a76:	d308      	bcc.n	8001a8a <dfuUpdateByRequest+0x1da>
                        thisBlockLen = 0;
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <dfuUpdateByRequest+0x1da>
                    }
                    
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8001a7e:	230a      	movs	r3, #10
 8001a80:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8001a82:	2309      	movs	r3, #9
 8001a84:	e01d      	b.n	8001ac2 <dfuUpdateByRequest+0x212>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8001a86:	2b06      	cmp	r3, #6
 8001a88:	d101      	bne.n	8001a8e <dfuUpdateByRequest+0x1de>
            dfuAppStatus.bState  = dfuIDLE;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e786      	b.n	800199c <dfuUpdateByRequest+0xec>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d001      	beq.n	8001a96 <dfuUpdateByRequest+0x1e6>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d112      	bne.n	8001abc <dfuUpdateByRequest+0x20c>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8001a96:	2309      	movs	r3, #9
 8001a98:	e780      	b.n	800199c <dfuUpdateByRequest+0xec>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else if (startState == dfuERROR)               {
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d10e      	bne.n	8001abc <dfuUpdateByRequest+0x20c>
        /* status is in error, awaiting DFU_CLRSTATUS request */
        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <dfuUpdateByRequest+0x22c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d101      	bne.n	8001aac <dfuUpdateByRequest+0x1fc>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	e777      	b.n	800199c <dfuUpdateByRequest+0xec>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d0fb      	beq.n	8001aa8 <dfuUpdateByRequest+0x1f8>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d103      	bne.n	8001abc <dfuUpdateByRequest+0x20c>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e002      	b.n	8001ac2 <dfuUpdateByRequest+0x212>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }
    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8001abc:	230a      	movs	r3, #10
 8001abe:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	7023      	strb	r3, [r4, #0]
    }

    return (dfuAppStatus.bStatus == OK) ? TRUE : FALSE;
 8001ac4:	7820      	ldrb	r0, [r4, #0]
}
 8001ac6:	f1d0 0001 	rsbs	r0, r0, #1
 8001aca:	bf38      	it	cc
 8001acc:	2000      	movcc	r0, #0
 8001ace:	b002      	add	sp, #8
 8001ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad4:	20000dcb 	andcs	r0, r0, fp, asr #27
 8001ad8:	20000dc5 	andcs	r0, r0, r5, asr #27
 8001adc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8001ae0:	20000dc0 	andcs	r0, r0, r0, asr #27
 8001ae4:	20000dc4 	andcs	r0, r0, r4, asr #27
 8001ae8:	08002000 	stmdaeq	r0, {sp}
 8001aec:	200002c0 	andcs	r0, r0, r0, asr #5
 8001af0:	08009000 	stmdaeq	r0, {ip, pc}
 8001af4:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
 8001af8:	20000dbe 			; <UNDEFINED> instruction: 0x20000dbe
 8001afc:	200002bc 			; <UNDEFINED> instruction: 0x200002bc
 8001b00:	20000574 	andcs	r0, r0, r4, ror r5
 8001b04:	0800764d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, sp, lr}
 8001b08:	08007720 	stmdaeq	r0, {r5, r8, r9, sl, ip, sp, lr}
 8001b0c:	0800773e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}

08001b10 <dfuUploadStarted>:
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted()
{
    return dfuBusy;
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <dfuUploadStarted+0x8>)
 8001b12:	7818      	ldrb	r0, [r3, #0]
}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000dcb 	andcs	r0, r0, fp, asr #27

08001b1c <dfuFinishUpload>:

void dfuFinishUpload() {

    while (1)
	{
		__asm__ __volatile__ ("");
 8001b1c:	e7fe      	b.n	8001b1c <dfuFinishUpload>
	...

08001b20 <ed25519_project>:
};

/* Conversion to and from projective coordinates */
void ed25519_project(struct ed25519_pt *p,
		     const uint8_t *x, const uint8_t *y)
{
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b22:	460d      	mov	r5, r1
void f25519_load(uint8_t *x, uint32_t c);

/* Copy two points */
static inline void f25519_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, F25519_SIZE);
 8001b24:	f8d1 e000 	ldr.w	lr, [r1]
 8001b28:	684f      	ldr	r7, [r1, #4]
 8001b2a:	68eb      	ldr	r3, [r5, #12]
 8001b2c:	6889      	ldr	r1, [r1, #8]
 8001b2e:	f8c0 e000 	str.w	lr, [r0]
 8001b32:	6047      	str	r7, [r0, #4]
 8001b34:	6081      	str	r1, [r0, #8]
 8001b36:	60c3      	str	r3, [r0, #12]
 8001b38:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8001b3c:	696f      	ldr	r7, [r5, #20]
 8001b3e:	69a9      	ldr	r1, [r5, #24]
 8001b40:	69eb      	ldr	r3, [r5, #28]
 8001b42:	f8c0 e010 	str.w	lr, [r0, #16]
 8001b46:	61c3      	str	r3, [r0, #28]
 8001b48:	6147      	str	r7, [r0, #20]
 8001b4a:	6181      	str	r1, [r0, #24]
 8001b4c:	f8d2 e000 	ldr.w	lr, [r2]
 8001b50:	6857      	ldr	r7, [r2, #4]
 8001b52:	6891      	ldr	r1, [r2, #8]
 8001b54:	4616      	mov	r6, r2
 8001b56:	68d2      	ldr	r2, [r2, #12]
 8001b58:	f8c0 e020 	str.w	lr, [r0, #32]
 8001b5c:	6247      	str	r7, [r0, #36]	; 0x24
 8001b5e:	6281      	str	r1, [r0, #40]	; 0x28
 8001b60:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001b62:	69b1      	ldr	r1, [r6, #24]
 8001b64:	69f2      	ldr	r2, [r6, #28]
 8001b66:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8001b6a:	6977      	ldr	r7, [r6, #20]
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001b70:	63e2      	str	r2, [r4, #60]	; 0x3c
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
 8001b72:	3060      	adds	r0, #96	; 0x60
 8001b74:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8001b78:	6367      	str	r7, [r4, #52]	; 0x34
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	f000 fb20 	bl	80021c0 <f25519_load>
	f25519_mul__distinct(p->t, x, y);
 8001b80:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001b84:	4629      	mov	r1, r5
 8001b86:	4632      	mov	r2, r6
}
 8001b88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		     const uint8_t *x, const uint8_t *y)
{
	f25519_copy(p->x, x);
	f25519_copy(p->y, y);
	f25519_load(p->z, 1);
	f25519_mul__distinct(p->t, x, y);
 8001b8c:	f000 bc7e 	b.w	800248c <f25519_mul__distinct>

08001b90 <ed25519_unproject>:
}

void ed25519_unproject(uint8_t *x, uint8_t *y,
		       const struct ed25519_pt *p)
{
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	4614      	mov	r4, r2
 8001b96:	4606      	mov	r6, r0
 8001b98:	460d      	mov	r5, r1
	uint8_t z1[F25519_SIZE];

	f25519_inv__distinct(z1, p->z);
 8001b9a:	4668      	mov	r0, sp
 8001b9c:	f102 0160 	add.w	r1, r2, #96	; 0x60
 8001ba0:	f000 fcb8 	bl	8002514 <f25519_inv__distinct>
	f25519_mul__distinct(x, p->x, z1);
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	466a      	mov	r2, sp
 8001baa:	f000 fc6f 	bl	800248c <f25519_mul__distinct>
	f25519_mul__distinct(y, p->y, z1);
 8001bae:	f104 0120 	add.w	r1, r4, #32
 8001bb2:	466a      	mov	r2, sp
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f000 fc69 	bl	800248c <f25519_mul__distinct>

	f25519_normalize(x);
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f000 fb10 	bl	80021e0 <f25519_normalize>
	f25519_normalize(y);
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f000 fb0d 	bl	80021e0 <f25519_normalize>
}
 8001bc6:	b008      	add	sp, #32
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	bf00      	nop

08001bcc <ed25519_pack>:
	0x98, 0xe8, 0x79, 0x77, 0x79, 0x40, 0xc7, 0x8c,
	0x73, 0xfe, 0x6f, 0x2b, 0xee, 0x6c, 0x03, 0x52
};

void ed25519_pack(uint8_t *c, const uint8_t *x, const uint8_t *y)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	460f      	mov	r7, r1
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	4616      	mov	r6, r2
 8001bd4:	b089      	sub	sp, #36	; 0x24
 8001bd6:	6808      	ldr	r0, [r1, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6849      	ldr	r1, [r1, #4]
 8001bde:	466c      	mov	r4, sp
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	6938      	ldr	r0, [r7, #16]
 8001be4:	6979      	ldr	r1, [r7, #20]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
 8001bec:	4668      	mov	r0, sp
 8001bee:	f000 faf7 	bl	80021e0 <f25519_normalize>
 8001bf2:	6830      	ldr	r0, [r6, #0]
 8001bf4:	6871      	ldr	r1, [r6, #4]
 8001bf6:	68b2      	ldr	r2, [r6, #8]
 8001bf8:	68f3      	ldr	r3, [r6, #12]
 8001bfa:	6028      	str	r0, [r5, #0]
 8001bfc:	6069      	str	r1, [r5, #4]
 8001bfe:	60aa      	str	r2, [r5, #8]
 8001c00:	60eb      	str	r3, [r5, #12]
 8001c02:	6930      	ldr	r0, [r6, #16]
 8001c04:	69f3      	ldr	r3, [r6, #28]
 8001c06:	6971      	ldr	r1, [r6, #20]
 8001c08:	69b2      	ldr	r2, [r6, #24]
 8001c0a:	6128      	str	r0, [r5, #16]
 8001c0c:	61eb      	str	r3, [r5, #28]
 8001c0e:	6169      	str	r1, [r5, #20]
 8001c10:	61aa      	str	r2, [r5, #24]
	parity = (tmp[0] & 1) << 7;

	f25519_copy(c, y);
	f25519_normalize(c);
 8001c12:	4628      	mov	r0, r5
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001c14:	f89d 4000 	ldrb.w	r4, [sp]

	f25519_copy(c, y);
	f25519_normalize(c);
 8001c18:	f000 fae2 	bl	80021e0 <f25519_normalize>
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001c1c:	01e4      	lsls	r4, r4, #7

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001c1e:	7feb      	ldrb	r3, [r5, #31]
	uint8_t tmp[F25519_SIZE];
	uint8_t parity;

	f25519_copy(tmp, x);
	f25519_normalize(tmp);
	parity = (tmp[0] & 1) << 7;
 8001c20:	b2e4      	uxtb	r4, r4

	f25519_copy(c, y);
	f25519_normalize(c);
	c[31] |= parity;
 8001c22:	431c      	orrs	r4, r3
 8001c24:	77ec      	strb	r4, [r5, #31]
}
 8001c26:	b009      	add	sp, #36	; 0x24
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	bf00      	nop

08001c2c <ed25519_try_unpack>:

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c30:	6817      	ldr	r7, [r2, #0]
 8001c32:	6856      	ldr	r6, [r2, #4]
 8001c34:	6895      	ldr	r5, [r2, #8]
 8001c36:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8001c3a:	4614      	mov	r4, r2
	const int parity = comp[31] >> 7;
 8001c3c:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001c40:	600f      	str	r7, [r1, #0]
 8001c42:	604e      	str	r6, [r1, #4]
 8001c44:	608d      	str	r5, [r1, #8]
 8001c46:	f8c1 e00c 	str.w	lr, [r1, #12]
 8001c4a:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8001c4e:	6927      	ldr	r7, [r4, #16]
 8001c50:	6966      	ldr	r6, [r4, #20]
 8001c52:	69a5      	ldr	r5, [r4, #24]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c54:	b098      	sub	sp, #96	; 0x60
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c56:	f008 037f 	and.w	r3, r8, #127	; 0x7f
 8001c5a:	f8c1 e01c 	str.w	lr, [r1, #28]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c5e:	4604      	mov	r4, r0
	uint8_t b[F25519_SIZE];
	uint8_t c[F25519_SIZE];

	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;
 8001c60:	77cb      	strb	r3, [r1, #31]
	f25519_normalize(c);
	c[31] |= parity;
}

uint8_t ed25519_try_unpack(uint8_t *x, uint8_t *y, const uint8_t *comp)
{
 8001c62:	460a      	mov	r2, r1
 8001c64:	610f      	str	r7, [r1, #16]
 8001c66:	614e      	str	r6, [r1, #20]
 8001c68:	618d      	str	r5, [r1, #24]
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c6a:	a810      	add	r0, sp, #64	; 0x40

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
	f25519_add(a, b, f25519_one);
 8001c6c:	4d1f      	ldr	r5, [pc, #124]	; (8001cec <ed25519_try_unpack+0xc0>)
	/* Unpack y */
	f25519_copy(y, comp);
	y[31] &= 127;

	/* Compute c = y^2 */
	f25519_mul__distinct(c, y, y);
 8001c6e:	f000 fc0d 	bl	800248c <f25519_mul__distinct>

	/* Compute b = (1+dy^2)^-1 */
	f25519_mul__distinct(b, c, ed25519_d);
 8001c72:	a910      	add	r1, sp, #64	; 0x40
 8001c74:	a808      	add	r0, sp, #32
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <ed25519_try_unpack+0xc4>)
 8001c78:	f000 fc08 	bl	800248c <f25519_mul__distinct>
	f25519_add(a, b, f25519_one);
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	a908      	add	r1, sp, #32
 8001c80:	4668      	mov	r0, sp
 8001c82:	f000 fb95 	bl	80023b0 <f25519_add>
	f25519_inv__distinct(b, a);
 8001c86:	a808      	add	r0, sp, #32
 8001c88:	4669      	mov	r1, sp
 8001c8a:	f000 fc43 	bl	8002514 <f25519_inv__distinct>

	/* Compute a = y^2-1 */
	f25519_sub(a, c, f25519_one);
 8001c8e:	4668      	mov	r0, sp
 8001c90:	a910      	add	r1, sp, #64	; 0x40
 8001c92:	462a      	mov	r2, r5
 8001c94:	f000 fbb0 	bl	80023f8 <f25519_sub>

	/* Compute c = a*b = (y^2-1)/(1-dy^2) */
	f25519_mul__distinct(c, a, b);
 8001c98:	aa08      	add	r2, sp, #32
 8001c9a:	a810      	add	r0, sp, #64	; 0x40
 8001c9c:	4669      	mov	r1, sp
 8001c9e:	f000 fbf5 	bl	800248c <f25519_mul__distinct>

	/* Compute a, b = +/-sqrt(c), if c is square */
	f25519_sqrt(a, c);
 8001ca2:	4668      	mov	r0, sp
 8001ca4:	a910      	add	r1, sp, #64	; 0x40
 8001ca6:	f000 ff2b 	bl	8002b00 <f25519_sqrt>
	f25519_neg(b, a);
 8001caa:	a808      	add	r0, sp, #32
 8001cac:	4669      	mov	r1, sp
 8001cae:	f000 fbc9 	bl	8002444 <f25519_neg>

	/* Select one of them, based on the compressed parity bit */
	f25519_select(x, a, b, (a[0] ^ parity) & 1);
 8001cb2:	f89d 3000 	ldrb.w	r3, [sp]
 8001cb6:	aa08      	add	r2, sp, #32
 8001cb8:	ea83 13d8 	eor.w	r3, r3, r8, lsr #7
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4669      	mov	r1, sp
 8001cc4:	f000 fb12 	bl	80022ec <f25519_select>

	/* Verify that x^2 = c */
	f25519_mul__distinct(a, x, x);
 8001cc8:	4621      	mov	r1, r4
 8001cca:	4622      	mov	r2, r4
 8001ccc:	4668      	mov	r0, sp
 8001cce:	f000 fbdd 	bl	800248c <f25519_mul__distinct>
	f25519_normalize(a);
 8001cd2:	4668      	mov	r0, sp
 8001cd4:	f000 fa84 	bl	80021e0 <f25519_normalize>
	f25519_normalize(c);
 8001cd8:	a810      	add	r0, sp, #64	; 0x40
 8001cda:	f000 fa81 	bl	80021e0 <f25519_normalize>

	return f25519_eq(a, c);
 8001cde:	4668      	mov	r0, sp
 8001ce0:	a910      	add	r1, sp, #64	; 0x40
 8001ce2:	f000 fab5 	bl	8002250 <f25519_eq>
}
 8001ce6:	b018      	add	sp, #96	; 0x60
 8001ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cec:	080078b4 	stmdaeq	r0, {r2, r4, r5, r7, fp, ip, sp, lr}
 8001cf0:	08007874 	stmdaeq	r0, {r2, r4, r5, r6, fp, ip, sp, lr}

08001cf4 <ed25519_add>:
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	b0c0      	sub	sp, #256	; 0x100
 8001cfc:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001cfe:	f101 0820 	add.w	r8, r1, #32
	0xe7, 0xfc, 0xdf, 0x56, 0xdc, 0xd9, 0x06, 0x24
};

void ed25519_add(struct ed25519_pt *r,
		 const struct ed25519_pt *p1, const struct ed25519_pt *p2)
{
 8001d02:	4606      	mov	r6, r0
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001d04:	4641      	mov	r1, r8
 8001d06:	462a      	mov	r2, r5
 8001d08:	a810      	add	r0, sp, #64	; 0x40
	f25519_sub(d, p2->y, p2->x);
 8001d0a:	f104 0720 	add.w	r7, r4, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = (Y1-X1)(Y2-X2) */
	f25519_sub(c, p1->y, p1->x);
 8001d0e:	f000 fb73 	bl	80023f8 <f25519_sub>
	f25519_sub(d, p2->y, p2->x);
 8001d12:	4639      	mov	r1, r7
 8001d14:	4622      	mov	r2, r4
 8001d16:	a818      	add	r0, sp, #96	; 0x60
 8001d18:	f000 fb6e 	bl	80023f8 <f25519_sub>
	f25519_mul__distinct(a, c, d);
 8001d1c:	a910      	add	r1, sp, #64	; 0x40
 8001d1e:	aa18      	add	r2, sp, #96	; 0x60
 8001d20:	4668      	mov	r0, sp
 8001d22:	f000 fbb3 	bl	800248c <f25519_mul__distinct>

	/* B = (Y1+X1)(Y2+X2) */
	f25519_add(c, p1->y, p1->x);
 8001d26:	a810      	add	r0, sp, #64	; 0x40
 8001d28:	4641      	mov	r1, r8
 8001d2a:	462a      	mov	r2, r5
 8001d2c:	f000 fb40 	bl	80023b0 <f25519_add>
	f25519_add(d, p2->y, p2->x);
 8001d30:	a818      	add	r0, sp, #96	; 0x60
 8001d32:	4639      	mov	r1, r7
 8001d34:	4622      	mov	r2, r4
 8001d36:	f000 fb3b 	bl	80023b0 <f25519_add>
	f25519_mul__distinct(b, c, d);
 8001d3a:	a910      	add	r1, sp, #64	; 0x40
 8001d3c:	aa18      	add	r2, sp, #96	; 0x60
 8001d3e:	a808      	add	r0, sp, #32
 8001d40:	f000 fba4 	bl	800248c <f25519_mul__distinct>

	/* C = T1 k T2 */
	f25519_mul__distinct(d, p1->t, p2->t);
 8001d44:	a818      	add	r0, sp, #96	; 0x60
 8001d46:	f105 0140 	add.w	r1, r5, #64	; 0x40
 8001d4a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8001d4e:	f000 fb9d 	bl	800248c <f25519_mul__distinct>
	f25519_mul__distinct(c, d, ed25519_k);
 8001d52:	a810      	add	r0, sp, #64	; 0x40
 8001d54:	a918      	add	r1, sp, #96	; 0x60
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <ed25519_add+0xdc>)
 8001d58:	f000 fb98 	bl	800248c <f25519_mul__distinct>

	/* D = Z1 2 Z2 */
	f25519_mul__distinct(d, p1->z, p2->z);
 8001d5c:	a818      	add	r0, sp, #96	; 0x60
 8001d5e:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001d62:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8001d66:	f000 fb91 	bl	800248c <f25519_mul__distinct>
	f25519_add(d, d, d);
 8001d6a:	a818      	add	r0, sp, #96	; 0x60
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4602      	mov	r2, r0
 8001d70:	f000 fb1e 	bl	80023b0 <f25519_add>

	/* E = B - A */
	f25519_sub(e, b, a);
 8001d74:	a908      	add	r1, sp, #32
 8001d76:	466a      	mov	r2, sp
 8001d78:	a820      	add	r0, sp, #128	; 0x80
 8001d7a:	f000 fb3d 	bl	80023f8 <f25519_sub>

	/* F = D - C */
	f25519_sub(f, d, c);
 8001d7e:	a918      	add	r1, sp, #96	; 0x60
 8001d80:	aa10      	add	r2, sp, #64	; 0x40
 8001d82:	a828      	add	r0, sp, #160	; 0xa0
 8001d84:	f000 fb38 	bl	80023f8 <f25519_sub>

	/* G = D + C */
	f25519_add(g, d, c);
 8001d88:	a918      	add	r1, sp, #96	; 0x60
 8001d8a:	aa10      	add	r2, sp, #64	; 0x40
 8001d8c:	a830      	add	r0, sp, #192	; 0xc0
 8001d8e:	f000 fb0f 	bl	80023b0 <f25519_add>

	/* H = B + A */
	f25519_add(h, b, a);
 8001d92:	a908      	add	r1, sp, #32
 8001d94:	466a      	mov	r2, sp
 8001d96:	a838      	add	r0, sp, #224	; 0xe0
 8001d98:	f000 fb0a 	bl	80023b0 <f25519_add>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	a920      	add	r1, sp, #128	; 0x80
 8001da0:	aa28      	add	r2, sp, #160	; 0xa0
 8001da2:	f000 fb73 	bl	800248c <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001da6:	f106 0020 	add.w	r0, r6, #32
 8001daa:	a930      	add	r1, sp, #192	; 0xc0
 8001dac:	aa38      	add	r2, sp, #224	; 0xe0
 8001dae:	f000 fb6d 	bl	800248c <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001db2:	a920      	add	r1, sp, #128	; 0x80
 8001db4:	aa38      	add	r2, sp, #224	; 0xe0
 8001db6:	f106 0040 	add.w	r0, r6, #64	; 0x40
 8001dba:	f000 fb67 	bl	800248c <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001dbe:	f106 0060 	add.w	r0, r6, #96	; 0x60
 8001dc2:	a928      	add	r1, sp, #160	; 0xa0
 8001dc4:	aa30      	add	r2, sp, #192	; 0xc0
 8001dc6:	f000 fb61 	bl	800248c <f25519_mul__distinct>
}
 8001dca:	b040      	add	sp, #256	; 0x100
 8001dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dd0:	08007754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip, sp, lr}

08001dd4 <ed25519_double>:

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
 8001dd6:	b0b8      	sub	sp, #224	; 0xe0
 8001dd8:	4604      	mov	r4, r0

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001dda:	f101 0620 	add.w	r6, r1, #32
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001dde:	460a      	mov	r2, r1
 8001de0:	4668      	mov	r0, sp
	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
}

void ed25519_double(struct ed25519_pt *r, const struct ed25519_pt *p)
{
 8001de2:	460d      	mov	r5, r1
	uint8_t f[F25519_SIZE];
	uint8_t g[F25519_SIZE];
	uint8_t h[F25519_SIZE];

	/* A = X1^2 */
	f25519_mul__distinct(a, p->x, p->x);
 8001de4:	f000 fb52 	bl	800248c <f25519_mul__distinct>

	/* B = Y1^2 */
	f25519_mul__distinct(b, p->y, p->y);
 8001de8:	4631      	mov	r1, r6
 8001dea:	4632      	mov	r2, r6
 8001dec:	a808      	add	r0, sp, #32
 8001dee:	f000 fb4d 	bl	800248c <f25519_mul__distinct>

	/* C = 2 Z1^2 */
	f25519_mul__distinct(c, p->z, p->z);
 8001df2:	f105 0160 	add.w	r1, r5, #96	; 0x60
 8001df6:	460a      	mov	r2, r1
 8001df8:	a810      	add	r0, sp, #64	; 0x40
 8001dfa:	f000 fb47 	bl	800248c <f25519_mul__distinct>
	f25519_add(c, c, c);
 8001dfe:	a810      	add	r0, sp, #64	; 0x40
 8001e00:	4601      	mov	r1, r0
 8001e02:	4602      	mov	r2, r0
 8001e04:	f000 fad4 	bl	80023b0 <f25519_add>

	/* D = a A (alter sign) */
	/* E = (X1+Y1)^2-A-B */
	f25519_add(f, p->x, p->y);
 8001e08:	4632      	mov	r2, r6
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	a820      	add	r0, sp, #128	; 0x80
 8001e0e:	f000 facf 	bl	80023b0 <f25519_add>
	f25519_mul__distinct(e, f, f);
 8001e12:	a920      	add	r1, sp, #128	; 0x80
 8001e14:	460a      	mov	r2, r1
 8001e16:	a818      	add	r0, sp, #96	; 0x60
 8001e18:	f000 fb38 	bl	800248c <f25519_mul__distinct>
	f25519_sub(e, e, a);
 8001e1c:	a818      	add	r0, sp, #96	; 0x60
 8001e1e:	4601      	mov	r1, r0
 8001e20:	466a      	mov	r2, sp
 8001e22:	f000 fae9 	bl	80023f8 <f25519_sub>
	f25519_sub(e, e, b);
 8001e26:	a818      	add	r0, sp, #96	; 0x60
 8001e28:	4601      	mov	r1, r0
 8001e2a:	aa08      	add	r2, sp, #32
 8001e2c:	f000 fae4 	bl	80023f8 <f25519_sub>

	/* G = D + B */
	f25519_sub(g, b, a);
 8001e30:	a908      	add	r1, sp, #32
 8001e32:	466a      	mov	r2, sp
 8001e34:	a828      	add	r0, sp, #160	; 0xa0
 8001e36:	f000 fadf 	bl	80023f8 <f25519_sub>

	/* F = G - C */
	f25519_sub(f, g, c);
 8001e3a:	aa10      	add	r2, sp, #64	; 0x40
 8001e3c:	a820      	add	r0, sp, #128	; 0x80
 8001e3e:	a928      	add	r1, sp, #160	; 0xa0
 8001e40:	f000 fada 	bl	80023f8 <f25519_sub>

	/* H = D - B */
	f25519_neg(h, b);
 8001e44:	a908      	add	r1, sp, #32
 8001e46:	a830      	add	r0, sp, #192	; 0xc0
 8001e48:	f000 fafc 	bl	8002444 <f25519_neg>
	f25519_sub(h, h, a);
 8001e4c:	a830      	add	r0, sp, #192	; 0xc0
 8001e4e:	4601      	mov	r1, r0
 8001e50:	466a      	mov	r2, sp
 8001e52:	f000 fad1 	bl	80023f8 <f25519_sub>

	/* X3 = E F */
	f25519_mul__distinct(r->x, e, f);
 8001e56:	4620      	mov	r0, r4
 8001e58:	a918      	add	r1, sp, #96	; 0x60
 8001e5a:	aa20      	add	r2, sp, #128	; 0x80
 8001e5c:	f000 fb16 	bl	800248c <f25519_mul__distinct>

	/* Y3 = G H */
	f25519_mul__distinct(r->y, g, h);
 8001e60:	f104 0020 	add.w	r0, r4, #32
 8001e64:	a928      	add	r1, sp, #160	; 0xa0
 8001e66:	aa30      	add	r2, sp, #192	; 0xc0
 8001e68:	f000 fb10 	bl	800248c <f25519_mul__distinct>

	/* T3 = E H */
	f25519_mul__distinct(r->t, e, h);
 8001e6c:	a918      	add	r1, sp, #96	; 0x60
 8001e6e:	aa30      	add	r2, sp, #192	; 0xc0
 8001e70:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e74:	f000 fb0a 	bl	800248c <f25519_mul__distinct>

	/* Z3 = F G */
	f25519_mul__distinct(r->z, f, g);
 8001e78:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8001e7c:	a920      	add	r1, sp, #128	; 0x80
 8001e7e:	aa28      	add	r2, sp, #160	; 0xa0
 8001e80:	f000 fb04 	bl	800248c <f25519_mul__distinct>
}
 8001e84:	b038      	add	sp, #224	; 0xe0
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <ed25519_smult>:

void ed25519_smult(struct ed25519_pt *r_out, const struct ed25519_pt *p,
		   const uint8_t *e)
{
 8001e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e8c:	b0c0      	sub	sp, #256	; 0x100
 8001e8e:	4680      	mov	r8, r0
 8001e90:	460f      	mov	r7, r1
 8001e92:	4616      	mov	r6, r2

/* Order of the group generated by the base point */
static inline void ed25519_copy(struct ed25519_pt *dst,
				const struct ed25519_pt *src)
{
	memcpy(dst, src, sizeof(*dst));
 8001e94:	4668      	mov	r0, sp
 8001e96:	491c      	ldr	r1, [pc, #112]	; (8001f08 <ed25519_smult+0x80>)
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	f004 ff2f 	bl	8006cfc <memcpy>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001e9e:	24ff      	movs	r4, #255	; 0xff
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001ea0:	10e3      	asrs	r3, r4, #3
 8001ea2:	5cf5      	ldrb	r5, [r6, r3]
 8001ea4:	f004 0307 	and.w	r3, r4, #7
 8001ea8:	411d      	asrs	r5, r3
		struct ed25519_pt s;

		ed25519_double(&r, &r);
 8001eaa:	4668      	mov	r0, sp
 8001eac:	4669      	mov	r1, sp
 8001eae:	f7ff ff91 	bl	8001dd4 <ed25519_double>
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
		const uint8_t bit = (e[i >> 3] >> (i & 7)) & 1;
 8001eb2:	f005 0501 	and.w	r5, r5, #1
		struct ed25519_pt s;

		ed25519_double(&r, &r);
		ed25519_add(&s, &r, p);
 8001eb6:	a820      	add	r0, sp, #128	; 0x80
 8001eb8:	4669      	mov	r1, sp
 8001eba:	463a      	mov	r2, r7
 8001ebc:	f7ff ff1a 	bl	8001cf4 <ed25519_add>

		f25519_select(r.x, r.x, s.x, bit);
 8001ec0:	4668      	mov	r0, sp
 8001ec2:	4669      	mov	r1, sp
 8001ec4:	aa20      	add	r2, sp, #128	; 0x80
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	f000 fa10 	bl	80022ec <f25519_select>
		f25519_select(r.y, r.y, s.y, bit);
 8001ecc:	a808      	add	r0, sp, #32
 8001ece:	4601      	mov	r1, r0
 8001ed0:	aa28      	add	r2, sp, #160	; 0xa0
 8001ed2:	462b      	mov	r3, r5
 8001ed4:	f000 fa0a 	bl	80022ec <f25519_select>
		f25519_select(r.z, r.z, s.z, bit);
 8001ed8:	a818      	add	r0, sp, #96	; 0x60
 8001eda:	4601      	mov	r1, r0
 8001edc:	aa38      	add	r2, sp, #224	; 0xe0
 8001ede:	462b      	mov	r3, r5
 8001ee0:	f000 fa04 	bl	80022ec <f25519_select>
		f25519_select(r.t, r.t, s.t, bit);
 8001ee4:	a810      	add	r0, sp, #64	; 0x40
 8001ee6:	462b      	mov	r3, r5
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001ee8:	3c01      	subs	r4, #1
		ed25519_add(&s, &r, p);

		f25519_select(r.x, r.x, s.x, bit);
		f25519_select(r.y, r.y, s.y, bit);
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
 8001eea:	4601      	mov	r1, r0
 8001eec:	aa30      	add	r2, sp, #192	; 0xc0
 8001eee:	f000 f9fd 	bl	80022ec <f25519_select>
	struct ed25519_pt r;
	int i;

	ed25519_copy(&r, &ed25519_neutral);

	for (i = 255; i >= 0; i--) {
 8001ef2:	1c63      	adds	r3, r4, #1
 8001ef4:	d1d4      	bne.n	8001ea0 <ed25519_smult+0x18>
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	4669      	mov	r1, sp
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	f004 fefe 	bl	8006cfc <memcpy>
		f25519_select(r.z, r.z, s.z, bit);
		f25519_select(r.t, r.t, s.t, bit);
	}

	ed25519_copy(r_out, &r);
}
 8001f00:	b040      	add	sp, #256	; 0x100
 8001f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f06:	bf00      	nop
 8001f08:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}

08001f0c <expand_key>:
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
};

static void expand_key(uint8_t *expanded, const uint8_t *secret)
{
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
extern const struct sha512_state sha512_initial_state;

/* Set up a new context */
static inline void sha512_init(struct sha512_state *s)
{
	memcpy(s, &sha512_initial_state, sizeof(*s));
 8001f0e:	4d13      	ldr	r5, [pc, #76]	; (8001f5c <expand_key+0x50>)
 8001f10:	b091      	sub	sp, #68	; 0x44
 8001f12:	466c      	mov	r4, sp
 8001f14:	4606      	mov	r6, r0
 8001f16:	460f      	mov	r7, r1
 8001f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct sha512_state s;

	sha512_init(&s);
	sha512_final(&s, secret, EDSIGN_SECRET_KEY_SIZE);
 8001f2c:	4668      	mov	r0, sp
 8001f2e:	4639      	mov	r1, r7
 8001f30:	2220      	movs	r2, #32
 8001f32:	f003 fe17 	bl	8005b64 <sha512_final>
	sha512_get(&s, expanded, 0, EXPANDED_SIZE);
 8001f36:	4668      	mov	r0, sp
 8001f38:	4631      	mov	r1, r6
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2340      	movs	r3, #64	; 0x40
 8001f3e:	f003 fe55 	bl	8005bec <sha512_get>
#define ED25519_EXPONENT_SIZE	32

/* Prepare an exponent by clamping appropriate bits */
static inline void ed25519_prepare(uint8_t *e)
{
	e[0] &= 0xf8;
 8001f42:	7833      	ldrb	r3, [r6, #0]
 8001f44:	f023 0307 	bic.w	r3, r3, #7
 8001f48:	7033      	strb	r3, [r6, #0]
	e[31] &= 0x7f;
 8001f4a:	7ff3      	ldrb	r3, [r6, #31]
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	e[31] |= 0x40;
 8001f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f54:	77f3      	strb	r3, [r6, #31]
	ed25519_prepare(expanded);
}
 8001f56:	b011      	add	sp, #68	; 0x44
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	080078d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp, lr}

08001f60 <hash_with_prefix>:
}

static void hash_with_prefix(uint8_t *out_fp,
			     uint8_t *init_block, int prefix_size,
			     const uint8_t *message, size_t len)
{
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	4d23      	ldr	r5, [pc, #140]	; (8001ff4 <hash_with_prefix+0x94>)
 8001f66:	b090      	sub	sp, #64	; 0x40
 8001f68:	466c      	mov	r4, sp
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	460e      	mov	r6, r1
 8001f6e:	4699      	mov	r9, r3
 8001f70:	4682      	mov	sl, r0
 8001f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f82:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8001f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 8001f88:	f1c8 0480 	rsb	r4, r8, #128	; 0x80
 8001f8c:	42a7      	cmp	r7, r4
		memcpy(init_block + prefix_size, message, len);
 8001f8e:	4649      	mov	r1, r9
 8001f90:	eb06 0008 	add.w	r0, r6, r8
{
	struct sha512_state s;

	sha512_init(&s);

	if (len < SHA512_BLOCK_SIZE - prefix_size) {
 8001f94:	d205      	bcs.n	8001fa2 <hash_with_prefix+0x42>
		memcpy(init_block + prefix_size, message, len);
 8001f96:	463a      	mov	r2, r7
 8001f98:	f004 feb0 	bl	8006cfc <memcpy>
		sha512_final(&s, init_block, len + prefix_size);
 8001f9c:	4668      	mov	r0, sp
 8001f9e:	4631      	mov	r1, r6
 8001fa0:	e015      	b.n	8001fce <hash_with_prefix+0x6e>
	} else {
		size_t i;

		memcpy(init_block + prefix_size, message,
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	f004 feaa 	bl	8006cfc <memcpy>
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);
 8001fa8:	4668      	mov	r0, sp
 8001faa:	4631      	mov	r1, r6
 8001fac:	f003 fb90 	bl	80056d0 <sha512_block>

		for (i = SHA512_BLOCK_SIZE - prefix_size;
		     i + SHA512_BLOCK_SIZE <= len;
 8001fb0:	f104 0580 	add.w	r5, r4, #128	; 0x80

		memcpy(init_block + prefix_size, message,
		       SHA512_BLOCK_SIZE - prefix_size);
		sha512_block(&s, init_block);

		for (i = SHA512_BLOCK_SIZE - prefix_size;
 8001fb4:	42bd      	cmp	r5, r7
 8001fb6:	d807      	bhi.n	8001fc8 <hash_with_prefix+0x68>
 8001fb8:	f1a9 0180 	sub.w	r1, r9, #128	; 0x80
		     i + SHA512_BLOCK_SIZE <= len;
		     i += SHA512_BLOCK_SIZE)
			sha512_block(&s, message + i);
 8001fbc:	4668      	mov	r0, sp
 8001fbe:	4429      	add	r1, r5
 8001fc0:	f003 fb86 	bl	80056d0 <sha512_block>
 8001fc4:	462c      	mov	r4, r5
 8001fc6:	e7f3      	b.n	8001fb0 <hash_with_prefix+0x50>

		sha512_final(&s, message + i, len + prefix_size);
 8001fc8:	4668      	mov	r0, sp
 8001fca:	eb09 0104 	add.w	r1, r9, r4
 8001fce:	eb08 0207 	add.w	r2, r8, r7
 8001fd2:	f003 fdc7 	bl	8005b64 <sha512_final>
	}

	sha512_get(&s, init_block, 0, SHA512_HASH_SIZE);
 8001fd6:	4668      	mov	r0, sp
 8001fd8:	4631      	mov	r1, r6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	f003 fe05 	bl	8005bec <sha512_get>
	fprime_from_bytes(out_fp, init_block, SHA512_HASH_SIZE, ed25519_order);
 8001fe2:	4650      	mov	r0, sl
 8001fe4:	4631      	mov	r1, r6
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <hash_with_prefix+0x98>)
 8001fea:	f001 f8a3 	bl	8003134 <fprime_from_bytes>
}
 8001fee:	b010      	add	sp, #64	; 0x40
 8001ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff4:	080078d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, sp, lr}
 8001ff8:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}

08001ffc <sm_pack>:
	ed25519_unproject(x, y, p);
	ed25519_pack(packed, x, y);
}

static void sm_pack(uint8_t *r, const uint8_t *k)
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	b0b0      	sub	sp, #192	; 0xc0
 8002000:	4604      	mov	r4, r0
 8002002:	460a      	mov	r2, r1
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
 8002004:	a810      	add	r0, sp, #64	; 0x40
 8002006:	4907      	ldr	r1, [pc, #28]	; (8002024 <sm_pack+0x28>)
 8002008:	f7ff ff3e 	bl	8001e88 <ed25519_smult>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 800200c:	4668      	mov	r0, sp
 800200e:	a908      	add	r1, sp, #32
 8002010:	aa10      	add	r2, sp, #64	; 0x40
 8002012:	f7ff fdbd 	bl	8001b90 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 8002016:	4620      	mov	r0, r4
 8002018:	4669      	mov	r1, sp
 800201a:	aa08      	add	r2, sp, #32
 800201c:	f7ff fdd6 	bl	8001bcc <ed25519_pack>
{
	struct ed25519_pt p;

	ed25519_smult(&p, &ed25519_base, k);
	pp(r, &p);
}
 8002020:	b030      	add	sp, #192	; 0xc0
 8002022:	bd10      	pop	{r4, pc}
 8002024:	080077f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}

08002028 <edsign_sec_to_pub>:

void edsign_sec_to_pub(uint8_t *pub, const uint8_t *secret)
{
 8002028:	b510      	push	{r4, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	4604      	mov	r4, r0
	uint8_t expanded[EXPANDED_SIZE];

	expand_key(expanded, secret);
 800202e:	4668      	mov	r0, sp
 8002030:	f7ff ff6c 	bl	8001f0c <expand_key>
	sm_pack(pub, expanded);
 8002034:	4620      	mov	r0, r4
 8002036:	4669      	mov	r1, sp
 8002038:	f7ff ffe0 	bl	8001ffc <sm_pack>
}
 800203c:	b010      	add	sp, #64	; 0x40
 800203e:	bd10      	pop	{r4, pc}

08002040 <edsign_sign>:
}

void edsign_sign(uint8_t *signature, const uint8_t *pub,
		 const uint8_t *secret,
		 const uint8_t *message, size_t len)
{
 8002040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002044:	b0cb      	sub	sp, #300	; 0x12c
 8002046:	4680      	mov	r8, r0
 8002048:	4689      	mov	r9, r1
	uint8_t e[FPRIME_SIZE];
	uint8_t s[FPRIME_SIZE];
	uint8_t k[FPRIME_SIZE];
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);
 800204a:	a81a      	add	r0, sp, #104	; 0x68
 800204c:	4611      	mov	r1, r2
static void generate_k(uint8_t *k, const uint8_t *kgen_key,
		       const uint8_t *message, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, kgen_key, 32);
 800204e:	ac2a      	add	r4, sp, #168	; 0xa8
 8002050:	ad22      	add	r5, sp, #136	; 0x88
}

void edsign_sign(uint8_t *signature, const uint8_t *pub,
		 const uint8_t *secret,
		 const uint8_t *message, size_t len)
{
 8002052:	461e      	mov	r6, r3
 8002054:	9f52      	ldr	r7, [sp, #328]	; 0x148
	uint8_t e[FPRIME_SIZE];
	uint8_t s[FPRIME_SIZE];
	uint8_t k[FPRIME_SIZE];
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);
 8002056:	f7ff ff59 	bl	8001f0c <expand_key>
static void generate_k(uint8_t *k, const uint8_t *kgen_key,
		       const uint8_t *message, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, kgen_key, 32);
 800205a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	hash_with_prefix(k, block, 32, message, len);
 8002066:	4633      	mov	r3, r6
 8002068:	a80a      	add	r0, sp, #40	; 0x28
 800206a:	a92a      	add	r1, sp, #168	; 0xa8
 800206c:	2220      	movs	r2, #32
 800206e:	9700      	str	r7, [sp, #0]
 8002070:	f7ff ff76 	bl	8001f60 <hash_with_prefix>
	uint8_t z[FPRIME_SIZE];

	expand_key(expanded, secret);

	generate_k(k, expanded + 32, message, len);
	sm_pack(signature, k);
 8002074:	4640      	mov	r0, r8
 8002076:	a90a      	add	r1, sp, #40	; 0x28
 8002078:	f7ff ffc0 	bl	8001ffc <sm_pack>
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 800207c:	4644      	mov	r4, r8
 800207e:	ab2a      	add	r3, sp, #168	; 0xa8
 8002080:	f108 0820 	add.w	r8, r8, #32
 8002084:	6820      	ldr	r0, [r4, #0]
 8002086:	6861      	ldr	r1, [r4, #4]
 8002088:	461d      	mov	r5, r3
 800208a:	c503      	stmia	r5!, {r0, r1}
 800208c:	3408      	adds	r4, #8
 800208e:	4544      	cmp	r4, r8
 8002090:	462b      	mov	r3, r5
 8002092:	d1f7      	bne.n	8002084 <edsign_sign+0x44>
	memcpy(block + 32, a, 32);
 8002094:	ad32      	add	r5, sp, #200	; 0xc8
 8002096:	464a      	mov	r2, r9
 8002098:	462b      	mov	r3, r5
 800209a:	f109 0e20 	add.w	lr, r9, #32
 800209e:	6810      	ldr	r0, [r2, #0]
 80020a0:	6851      	ldr	r1, [r2, #4]
 80020a2:	461c      	mov	r4, r3
 80020a4:	c403      	stmia	r4!, {r0, r1}
 80020a6:	3208      	adds	r2, #8
 80020a8:	4572      	cmp	r2, lr
 80020aa:	4623      	mov	r3, r4
 80020ac:	d1f7      	bne.n	800209e <edsign_sign+0x5e>
	hash_with_prefix(z, block, 64, m, len);
 80020ae:	a812      	add	r0, sp, #72	; 0x48
 80020b0:	a92a      	add	r1, sp, #168	; 0xa8
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	4633      	mov	r3, r6
 80020b6:	9700      	str	r7, [sp, #0]
 80020b8:	f7ff ff52 	bl	8001f60 <hash_with_prefix>
	generate_k(k, expanded + 32, message, len);
	sm_pack(signature, k);

	hash_message(z, signature, pub, message, len);

	fprime_from_bytes(e, expanded, 32, ed25519_order);
 80020bc:	a802      	add	r0, sp, #8
 80020be:	a91a      	add	r1, sp, #104	; 0x68
 80020c0:	2220      	movs	r2, #32
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <edsign_sign+0xbc>)
 80020c4:	f001 f836 	bl	8003134 <fprime_from_bytes>

	fprime_mul(s, z, e, ed25519_order);
 80020c8:	a82a      	add	r0, sp, #168	; 0xa8
 80020ca:	a912      	add	r1, sp, #72	; 0x48
 80020cc:	aa02      	add	r2, sp, #8
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <edsign_sign+0xbc>)
 80020d0:	f001 f92c 	bl	800332c <fprime_mul>
	fprime_add(s, k, ed25519_order);
 80020d4:	4a09      	ldr	r2, [pc, #36]	; (80020fc <edsign_sign+0xbc>)
 80020d6:	a82a      	add	r0, sp, #168	; 0xa8
 80020d8:	a90a      	add	r1, sp, #40	; 0x28
 80020da:	f001 f8fb 	bl	80032d4 <fprime_add>
	memcpy(signature + 32, s, 32);
 80020de:	ac2a      	add	r4, sp, #168	; 0xa8
 80020e0:	4642      	mov	r2, r8
 80020e2:	4623      	mov	r3, r4
 80020e4:	cb03      	ldmia	r3!, {r0, r1}
 80020e6:	42ab      	cmp	r3, r5
 80020e8:	6010      	str	r0, [r2, #0]
 80020ea:	6051      	str	r1, [r2, #4]
 80020ec:	461c      	mov	r4, r3
 80020ee:	f102 0208 	add.w	r2, r2, #8
 80020f2:	d1f6      	bne.n	80020e2 <edsign_sign+0xa2>
}
 80020f4:	b04b      	add	sp, #300	; 0x12c
 80020f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020fa:	bf00      	nop
 80020fc:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}

08002100 <edsign_verify>:
uint8_t edsign_verify(const uint8_t *signature, const uint8_t *pub,
		      const uint8_t *message, size_t len)
{
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002104:	b0ea      	sub	sp, #424	; 0x1a8
 8002106:	4606      	mov	r6, r0
 8002108:	460f      	mov	r7, r1
 800210a:	4694      	mov	ip, r2
static void hash_message(uint8_t *z, const uint8_t *r, const uint8_t *a,
			 const uint8_t *m, size_t len)
{
	uint8_t block[SHA512_BLOCK_SIZE];

	memcpy(block, r, 32);
 800210c:	4604      	mov	r4, r0
 800210e:	f50d 7e94 	add.w	lr, sp, #296	; 0x128
 8002112:	f100 0820 	add.w	r8, r0, #32
 8002116:	6820      	ldr	r0, [r4, #0]
 8002118:	6861      	ldr	r1, [r4, #4]
 800211a:	4675      	mov	r5, lr
 800211c:	c503      	stmia	r5!, {r0, r1}
 800211e:	3408      	adds	r4, #8
 8002120:	4544      	cmp	r4, r8
 8002122:	46ae      	mov	lr, r5
 8002124:	d1f7      	bne.n	8002116 <edsign_verify+0x16>
	memcpy(block + 32, a, 32);
 8002126:	463c      	mov	r4, r7
 8002128:	f50d 7ea4 	add.w	lr, sp, #328	; 0x148
 800212c:	f107 0220 	add.w	r2, r7, #32
 8002130:	6820      	ldr	r0, [r4, #0]
 8002132:	6861      	ldr	r1, [r4, #4]
 8002134:	4675      	mov	r5, lr
 8002136:	c503      	stmia	r5!, {r0, r1}
 8002138:	3408      	adds	r4, #8
 800213a:	4294      	cmp	r4, r2
 800213c:	46ae      	mov	lr, r5
 800213e:	d1f7      	bne.n	8002130 <edsign_verify+0x30>
	hash_with_prefix(z, block, 64, m, len);
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	a812      	add	r0, sp, #72	; 0x48
 8002144:	4663      	mov	r3, ip
 8002146:	a94a      	add	r1, sp, #296	; 0x128
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	f7ff ff09 	bl	8001f60 <hash_with_prefix>

	/* Compute z = H(R, A, M) */
	hash_message(z, signature, pub, message, len);

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);
 800214e:	a802      	add	r0, sp, #8
 8002150:	4641      	mov	r1, r8
 8002152:	f7ff ff53 	bl	8001ffc <sm_pack>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002156:	a94a      	add	r1, sp, #296	; 0x128
 8002158:	463a      	mov	r2, r7
 800215a:	a822      	add	r0, sp, #136	; 0x88
 800215c:	f7ff fd66 	bl	8001c2c <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002160:	a922      	add	r1, sp, #136	; 0x88

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002162:	4605      	mov	r5, r0

	ed25519_project(p, x, y);
 8002164:	aa4a      	add	r2, sp, #296	; 0x128
 8002166:	a82a      	add	r0, sp, #168	; 0xa8
 8002168:	f7ff fcda 	bl	8001b20 <ed25519_project>
	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
 800216c:	a82a      	add	r0, sp, #168	; 0xa8
 800216e:	4601      	mov	r1, r0
 8002170:	aa12      	add	r2, sp, #72	; 0x48
 8002172:	f7ff fe89 	bl	8001e88 <ed25519_smult>

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002176:	a922      	add	r1, sp, #136	; 0x88
 8002178:	4632      	mov	r2, r6
 800217a:	a81a      	add	r0, sp, #104	; 0x68
 800217c:	f7ff fd56 	bl	8001c2c <ed25519_try_unpack>

	ed25519_project(p, x, y);
 8002180:	a91a      	add	r1, sp, #104	; 0x68

static uint8_t upp(struct ed25519_pt *p, const uint8_t *packed)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];
	uint8_t ok = ed25519_try_unpack(x, y, packed);
 8002182:	4604      	mov	r4, r0

	ed25519_project(p, x, y);
 8002184:	aa22      	add	r2, sp, #136	; 0x88
 8002186:	a84a      	add	r0, sp, #296	; 0x128
 8002188:	f7ff fcca 	bl	8001b20 <ed25519_project>

	/* ... = zA + R */
	ok &= upp(&p, pub);
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
 800218c:	a82a      	add	r0, sp, #168	; 0xa8
 800218e:	4601      	mov	r1, r0
 8002190:	aa4a      	add	r2, sp, #296	; 0x128
 8002192:	f7ff fdaf 	bl	8001cf4 <ed25519_add>
static void pp(uint8_t *packed, const struct ed25519_pt *p)
{
	uint8_t x[F25519_SIZE];
	uint8_t y[F25519_SIZE];

	ed25519_unproject(x, y, p);
 8002196:	a81a      	add	r0, sp, #104	; 0x68
 8002198:	a922      	add	r1, sp, #136	; 0x88
 800219a:	aa2a      	add	r2, sp, #168	; 0xa8
 800219c:	f7ff fcf8 	bl	8001b90 <ed25519_unproject>
	ed25519_pack(packed, x, y);
 80021a0:	a80a      	add	r0, sp, #40	; 0x28
 80021a2:	a91a      	add	r1, sp, #104	; 0x68
 80021a4:	aa22      	add	r2, sp, #136	; 0x88
 80021a6:	f7ff fd11 	bl	8001bcc <ed25519_pack>
	ok &= upp(&q, signature);
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
 80021aa:	a802      	add	r0, sp, #8
 80021ac:	a90a      	add	r1, sp, #40	; 0x28
 80021ae:	f000 f84f 	bl	8002250 <f25519_eq>

	/* sB = (ze + k)B = ... */
	sm_pack(lhs, signature + 32);

	/* ... = zA + R */
	ok &= upp(&p, pub);
 80021b2:	4028      	ands	r0, r5
	ed25519_smult(&p, &p, z);
	ok &= upp(&q, signature);
 80021b4:	f000 0001 	and.w	r0, r0, #1
	ed25519_add(&p, &p, &q);
	pp(rhs, &p);

	/* Equal? */
	return ok & f25519_eq(lhs, rhs);
}
 80021b8:	4020      	ands	r0, r4
 80021ba:	b06a      	add	sp, #424	; 0x1a8
 80021bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080021c0 <f25519_load>:

const uint8_t f25519_zero[F25519_SIZE] = {0};
const uint8_t f25519_one[F25519_SIZE] = {1};

void f25519_load(uint8_t *x, uint32_t c)
{
 80021c0:	b410      	push	{r4}
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
		c >>= 8;
 80021c2:	0c0a      	lsrs	r2, r1, #16
 80021c4:	0a0c      	lsrs	r4, r1, #8
 80021c6:	0e0b      	lsrs	r3, r1, #24
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 80021c8:	7001      	strb	r1, [r0, #0]
 80021ca:	7082      	strb	r2, [r0, #2]
 80021cc:	7044      	strb	r4, [r0, #1]
 80021ce:	70c3      	strb	r3, [r0, #3]
 80021d0:	2100      	movs	r1, #0
 80021d2:	3004      	adds	r0, #4
 80021d4:	221c      	movs	r2, #28
		c >>= 8;
	}

	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}
 80021d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021da:	f004 bd98 	b.w	8006d0e <memset>
 80021de:	bf00      	nop

080021e0 <f25519_normalize>:

void f25519_normalize(uint8_t *x)
{
 80021e0:	b410      	push	{r4}
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021e2:	7fc4      	ldrb	r4, [r0, #31]
	for (; i < F25519_SIZE; i++)
		x[i] = 0;
}

void f25519_normalize(uint8_t *x)
{
 80021e4:	b089      	sub	sp, #36	; 0x24
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021e6:	09e1      	lsrs	r1, r4, #7
 80021e8:	00ca      	lsls	r2, r1, #3
	x[31] &= 127;
 80021ea:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021ee:	440a      	add	r2, r1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80021f0:	2300      	movs	r3, #0
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;
 80021f2:	77c4      	strb	r4, [r0, #31]
	uint8_t minusp[F25519_SIZE];
	uint16_t c;
	int i;

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
 80021f4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
		c += x[i];
 80021f8:	5cc1      	ldrb	r1, [r0, r3]
 80021fa:	440a      	add	r2, r1
		x[i] = c;
 80021fc:	54c2      	strb	r2, [r0, r3]

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 80021fe:	3301      	adds	r3, #1
 8002200:	2b20      	cmp	r3, #32
		c += x[i];
		x[i] = c;
		c >>= 8;
 8002202:	f3c2 220f 	ubfx	r2, r2, #8, #16

	/* Reduce using 2^255 = 19 mod p */
	c = (x[31] >> 7) * 19;
	x[31] &= 127;

	for (i = 0; i < F25519_SIZE; i++) {
 8002206:	d1f7      	bne.n	80021f8 <f25519_normalize+0x18>
 8002208:	2300      	movs	r3, #0
 800220a:	2213      	movs	r2, #19
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += x[i];
 800220c:	5cc1      	ldrb	r1, [r0, r3]
 800220e:	440a      	add	r2, r1
		minusp[i] = c;
 8002210:	f80d 2003 	strb.w	r2, [sp, r3]
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002214:	3301      	adds	r3, #1
 8002216:	2b1f      	cmp	r3, #31
		c += x[i];
		minusp[i] = c;
		c >>= 8;
 8002218:	f3c2 220f 	ubfx	r2, r2, #8, #16
	 * 2p. Try subtracting p, and conditionally load the subtracted
	 * value if underflow did not occur.
	 */
	c = 19;

	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800221c:	d1f6      	bne.n	800220c <f25519_normalize+0x2c>
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 800221e:	7fc1      	ldrb	r1, [r0, #31]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002220:	2300      	movs	r3, #0
		c += x[i];
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
 8002222:	3980      	subs	r1, #128	; 0x80
 8002224:	440a      	add	r2, r1
 8002226:	b292      	uxth	r2, r2

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8002228:	f342 34c0 	sbfx	r4, r2, #15, #1
		minusp[i] = c;
		c >>= 8;
	}

	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;
 800222c:	f88d 201f 	strb.w	r2, [sp, #31]

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8002230:	b2e4      	uxtb	r4, r4
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002232:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8002236:	5cc1      	ldrb	r1, [r0, r3]
 8002238:	4051      	eors	r1, r2
 800223a:	4021      	ands	r1, r4
 800223c:	404a      	eors	r2, r1
 800223e:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002240:	3301      	adds	r3, #1
 8002242:	2b20      	cmp	r3, #32
 8002244:	d1f5      	bne.n	8002232 <f25519_normalize+0x52>
	c += ((uint16_t)x[i]) - 128;
	minusp[31] = c;

	/* Load x-p if no underflow */
	f25519_select(x, minusp, x, (c >> 15) & 1);
}
 8002246:	b009      	add	sp, #36	; 0x24
 8002248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <f25519_eq>:

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
 8002250:	ea40 0301 	orr.w	r3, r0, r1
 8002254:	079b      	lsls	r3, r3, #30
 8002256:	b4f0      	push	{r4, r5, r6, r7}
 8002258:	d13c      	bne.n	80022d4 <f25519_eq+0x84>
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 800225a:	6807      	ldr	r7, [r0, #0]
 800225c:	6842      	ldr	r2, [r0, #4]
 800225e:	684b      	ldr	r3, [r1, #4]
 8002260:	680e      	ldr	r6, [r1, #0]
 8002262:	6885      	ldr	r5, [r0, #8]
 8002264:	688c      	ldr	r4, [r1, #8]
 8002266:	ea82 0c03 	eor.w	ip, r2, r3
 800226a:	407e      	eors	r6, r7
 800226c:	68c2      	ldr	r2, [r0, #12]
 800226e:	68cb      	ldr	r3, [r1, #12]
 8002270:	ea46 060c 	orr.w	r6, r6, ip
 8002274:	ea85 0c04 	eor.w	ip, r5, r4
 8002278:	6905      	ldr	r5, [r0, #16]
 800227a:	690c      	ldr	r4, [r1, #16]
 800227c:	ea46 0c0c 	orr.w	ip, r6, ip
 8002280:	ea82 0603 	eor.w	r6, r2, r3
 8002284:	6942      	ldr	r2, [r0, #20]
 8002286:	694b      	ldr	r3, [r1, #20]
 8002288:	ea4c 0c06 	orr.w	ip, ip, r6
 800228c:	6987      	ldr	r7, [r0, #24]
 800228e:	698e      	ldr	r6, [r1, #24]
 8002290:	406c      	eors	r4, r5
 8002292:	ea4c 0404 	orr.w	r4, ip, r4
 8002296:	4053      	eors	r3, r2
 8002298:	69c0      	ldr	r0, [r0, #28]
 800229a:	69c9      	ldr	r1, [r1, #28]
 800229c:	ea44 0203 	orr.w	r2, r4, r3
 80022a0:	ea87 0406 	eor.w	r4, r7, r6
 80022a4:	4322      	orrs	r2, r4
 80022a6:	ea80 0301 	eor.w	r3, r0, r1
 80022aa:	4313      	orrs	r3, r2
 80022ac:	ea43 2213 	orr.w	r2, r3, r3, lsr #8
 80022b0:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 80022b4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 80022b8:	ea42 6213 	orr.w	r2, r2, r3, lsr #24

	sum |= (sum >> 4);
 80022bc:	ea42 1212 	orr.w	r2, r2, r2, lsr #4
	sum |= (sum >> 2);
 80022c0:	ea42 0292 	orr.w	r2, r2, r2, lsr #2
	sum |= (sum >> 1);
 80022c4:	ea42 0252 	orr.w	r2, r2, r2, lsr #1

	return (sum ^ 1) & 1;
 80022c8:	f002 0001 	and.w	r0, r2, #1
}
 80022cc:	f080 0001 	eor.w	r0, r0, #1
 80022d0:	bcf0      	pop	{r4, r5, r6, r7}
 80022d2:	4770      	bx	lr
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022d4:	2300      	movs	r3, #0
	f25519_select(x, minusp, x, (c >> 15) & 1);
}

uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
 80022d6:	461a      	mov	r2, r3
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		sum |= x[i] ^ y[i];
 80022d8:	5cc5      	ldrb	r5, [r0, r3]
 80022da:	5ccc      	ldrb	r4, [r1, r3]
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022dc:	3301      	adds	r3, #1
		sum |= x[i] ^ y[i];
 80022de:	406c      	eors	r4, r5
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022e0:	2b20      	cmp	r3, #32
		sum |= x[i] ^ y[i];
 80022e2:	ea42 0204 	orr.w	r2, r2, r4
uint8_t f25519_eq(const uint8_t *x, const uint8_t *y)
{
	uint8_t sum = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80022e6:	d1f7      	bne.n	80022d8 <f25519_eq+0x88>
 80022e8:	e7e8      	b.n	80022bc <f25519_eq+0x6c>
 80022ea:	bf00      	nop

080022ec <f25519_select>:
}

void f25519_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
 80022ec:	b4f0      	push	{r4, r5, r6, r7}
 80022ee:	1d04      	adds	r4, r0, #4
 80022f0:	1d0f      	adds	r7, r1, #4
 80022f2:	42b8      	cmp	r0, r7
 80022f4:	bf38      	it	cc
 80022f6:	42a1      	cmpcc	r1, r4
 80022f8:	f102 0504 	add.w	r5, r2, #4
 80022fc:	bf34      	ite	cc
 80022fe:	2700      	movcc	r7, #0
 8002300:	2701      	movcs	r7, #1
 8002302:	42a8      	cmp	r0, r5
 8002304:	bf38      	it	cc
 8002306:	42a2      	cmpcc	r2, r4
 8002308:	bf34      	ite	cc
 800230a:	2400      	movcc	r4, #0
 800230c:	2401      	movcs	r4, #1
	const uint8_t mask = -condition;
 800230e:	425b      	negs	r3, r3
 8002310:	4227      	tst	r7, r4
 8002312:	b2de      	uxtb	r6, r3
 8002314:	d03f      	beq.n	8002396 <f25519_select+0xaa>
 8002316:	ea41 0302 	orr.w	r3, r1, r2
 800231a:	4303      	orrs	r3, r0
 800231c:	079b      	lsls	r3, r3, #30
 800231e:	d13a      	bne.n	8002396 <f25519_select+0xaa>
 8002320:	2300      	movs	r3, #0
 8002322:	f366 0307 	bfi	r3, r6, #0, #8
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002326:	680c      	ldr	r4, [r1, #0]
 8002328:	6815      	ldr	r5, [r2, #0]
 800232a:	f366 230f 	bfi	r3, r6, #8, #8
 800232e:	f366 4317 	bfi	r3, r6, #16, #8
 8002332:	f366 631f 	bfi	r3, r6, #24, #8
 8002336:	4065      	eors	r5, r4
 8002338:	401d      	ands	r5, r3
 800233a:	406c      	eors	r4, r5
 800233c:	6004      	str	r4, [r0, #0]
 800233e:	684c      	ldr	r4, [r1, #4]
 8002340:	6855      	ldr	r5, [r2, #4]
 8002342:	4065      	eors	r5, r4
 8002344:	401d      	ands	r5, r3
 8002346:	406c      	eors	r4, r5
 8002348:	6044      	str	r4, [r0, #4]
 800234a:	688c      	ldr	r4, [r1, #8]
 800234c:	6895      	ldr	r5, [r2, #8]
 800234e:	4065      	eors	r5, r4
 8002350:	401d      	ands	r5, r3
 8002352:	406c      	eors	r4, r5
 8002354:	6084      	str	r4, [r0, #8]
 8002356:	68cc      	ldr	r4, [r1, #12]
 8002358:	68d5      	ldr	r5, [r2, #12]
 800235a:	4065      	eors	r5, r4
 800235c:	401d      	ands	r5, r3
 800235e:	406c      	eors	r4, r5
 8002360:	60c4      	str	r4, [r0, #12]
 8002362:	690c      	ldr	r4, [r1, #16]
 8002364:	6915      	ldr	r5, [r2, #16]
 8002366:	4065      	eors	r5, r4
 8002368:	401d      	ands	r5, r3
 800236a:	406c      	eors	r4, r5
 800236c:	6104      	str	r4, [r0, #16]
 800236e:	694c      	ldr	r4, [r1, #20]
 8002370:	6955      	ldr	r5, [r2, #20]
 8002372:	4065      	eors	r5, r4
 8002374:	401d      	ands	r5, r3
 8002376:	406c      	eors	r4, r5
 8002378:	6144      	str	r4, [r0, #20]
 800237a:	698c      	ldr	r4, [r1, #24]
 800237c:	6995      	ldr	r5, [r2, #24]
 800237e:	4065      	eors	r5, r4
 8002380:	401d      	ands	r5, r3
 8002382:	406c      	eors	r4, r5
 8002384:	6184      	str	r4, [r0, #24]
 8002386:	69c9      	ldr	r1, [r1, #28]
 8002388:	69d2      	ldr	r2, [r2, #28]
}
 800238a:	bcf0      	pop	{r4, r5, r6, r7}
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800238c:	404a      	eors	r2, r1
 800238e:	4013      	ands	r3, r2
 8002390:	4059      	eors	r1, r3
 8002392:	61c1      	str	r1, [r0, #28]
}
 8002394:	4770      	bx	lr
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 8002396:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8002398:	5ccc      	ldrb	r4, [r1, r3]
 800239a:	5cd5      	ldrb	r5, [r2, r3]
 800239c:	4065      	eors	r5, r4
 800239e:	4035      	ands	r5, r6
 80023a0:	406c      	eors	r4, r5
 80023a2:	54c4      	strb	r4, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < F25519_SIZE; i++)
 80023a4:	3301      	adds	r3, #1
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	d1f6      	bne.n	8002398 <f25519_select+0xac>
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}
 80023aa:	bcf0      	pop	{r4, r5, r6, r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <f25519_add>:
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 80023b0:	2300      	movs	r3, #0
	for (i = 0; i < F25519_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void f25519_add(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 80023b2:	b470      	push	{r4, r5, r6}
	uint16_t c = 0;
 80023b4:	461c      	mov	r4, r3
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
 80023b6:	5cce      	ldrb	r6, [r1, r3]
 80023b8:	5cd5      	ldrb	r5, [r2, r3]
 80023ba:	4435      	add	r5, r6
 80023bc:	eb05 2414 	add.w	r4, r5, r4, lsr #8
		r[i] = c;
 80023c0:	54c4      	strb	r4, [r0, r3]
{
	uint16_t c = 0;
	int i;

	/* Add */
	for (i = 0; i < F25519_SIZE; i++) {
 80023c2:	3301      	adds	r3, #1
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d1f6      	bne.n	80023b6 <f25519_add+0x6>
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;
 80023c8:	f3c4 14cf 	ubfx	r4, r4, #7, #16
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023cc:	7fc3      	ldrb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80023ce:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c = (c >> 7) * 19;
 80023d6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c += ((uint16_t)a[i]) + ((uint16_t)b[i]);
		r[i] = c;
	}

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
 80023da:	77c3      	strb	r3, [r0, #31]
	c = (c >> 7) * 19;
 80023dc:	b292      	uxth	r2, r2

	for (i = 0; i < F25519_SIZE; i++) {
 80023de:	2300      	movs	r3, #0
		c += r[i];
 80023e0:	5cc1      	ldrb	r1, [r0, r3]
 80023e2:	440a      	add	r2, r1
 80023e4:	b292      	uxth	r2, r2
		r[i] = c;
 80023e6:	54c2      	strb	r2, [r0, r3]

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80023e8:	3301      	adds	r3, #1
 80023ea:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80023ec:	ea4f 2212 	mov.w	r2, r2, lsr #8

	/* Reduce with 2^255 = 19 mod p */
	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80023f0:	d1f6      	bne.n	80023e0 <f25519_add+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 80023f2:	bc70      	pop	{r4, r5, r6}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop

080023f8 <f25519_sub>:

void f25519_sub(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 80023f8:	b470      	push	{r4, r5, r6}
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 80023fa:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
 80023fc:	24da      	movs	r4, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 80023fe:	5ccd      	ldrb	r5, [r1, r3]
 8002400:	5cd6      	ldrb	r6, [r2, r3]
 8002402:	f505 457f 	add.w	r5, r5, #65280	; 0xff00
 8002406:	1bad      	subs	r5, r5, r6
 8002408:	442c      	add	r4, r5
		r[i] = c;
 800240a:	54c4      	strb	r4, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800240c:	3301      	adds	r3, #1
 800240e:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 8002410:	ea4f 2414 	mov.w	r4, r4, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002414:	d1f3      	bne.n	80023fe <f25519_sub+0x6>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8002416:	7fc9      	ldrb	r1, [r1, #31]
 8002418:	7fd2      	ldrb	r2, [r2, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800241a:	2300      	movs	r3, #0
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 800241c:	1a8a      	subs	r2, r1, r2
 800241e:	4414      	add	r4, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002420:	09e2      	lsrs	r2, r4, #7
 8002422:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 8002426:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800242a:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 800242c:	eb02 0241 	add.w	r2, r2, r1, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002430:	5cc1      	ldrb	r1, [r0, r3]
 8002432:	440a      	add	r2, r1
		r[i] = c;
 8002434:	54c2      	strb	r2, [r0, r3]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002436:	3301      	adds	r3, #1
 8002438:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800243a:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800243e:	d1f7      	bne.n	8002430 <f25519_sub+0x38>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002440:	bc70      	pop	{r4, r5, r6}
 8002442:	4770      	bx	lr

08002444 <f25519_neg>:

void f25519_neg(uint8_t *r, const uint8_t *a)
{
 8002444:	b410      	push	{r4}
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002446:	2300      	movs	r3, #0
{
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
 8002448:	22da      	movs	r2, #218	; 0xda
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 - ((uint32_t)a[i]);
 800244a:	5ccc      	ldrb	r4, [r1, r3]
 800244c:	f5c4 447f 	rsb	r4, r4, #65280	; 0xff00
 8002450:	4422      	add	r2, r4
		r[i] = c;
 8002452:	54c2      	strb	r2, [r0, r3]
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002454:	3301      	adds	r3, #1
 8002456:	2b1f      	cmp	r3, #31
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
 8002458:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate 2p - a, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 800245c:	d1f5      	bne.n	800244a <f25519_neg+0x6>
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 800245e:	7fc9      	ldrb	r1, [r1, #31]
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002460:	2300      	movs	r3, #0
		c += 65280 - ((uint32_t)a[i]);
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
 8002462:	1a52      	subs	r2, r2, r1
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8002464:	09d1      	lsrs	r1, r2, #7
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 8002466:	f002 047f 	and.w	r4, r2, #127	; 0x7f
	c = (c >> 7) * 19;
 800246a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
 800246e:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;
 8002470:	eb01 0242 	add.w	r2, r1, r2, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002474:	5cc1      	ldrb	r1, [r0, r3]
 8002476:	440a      	add	r2, r1
		r[i] = c;
 8002478:	54c2      	strb	r2, [r0, r3]

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800247a:	3301      	adds	r3, #1
 800247c:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 800247e:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c -= ((uint32_t)a[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002482:	d1f7      	bne.n	8002474 <f25519_neg+0x30>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 8002484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop

0800248c <f25519_mul__distinct>:

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
 800248c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002490:	f04f 0800 	mov.w	r8, #0
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 8002494:	4643      	mov	r3, r8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002496:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	eb02 0508 	add.w	r5, r2, r8
		for (j = 0; j <= i; j++)
 80024a0:	2400      	movs	r4, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80024a2:	5d0f      	ldrb	r7, [r1, r4]
 80024a4:	f815 6901 	ldrb.w	r6, [r5], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80024a8:	3401      	adds	r4, #1
 80024aa:	4544      	cmp	r4, r8
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80024ac:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80024b0:	ddf7      	ble.n	80024a2 <f25519_mul__distinct+0x16>
 80024b2:	ea28 75e8 	bic.w	r5, r8, r8, asr #31
 80024b6:	1c6c      	adds	r4, r5, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024b8:	2c20      	cmp	r4, #32
 80024ba:	d00f      	beq.n	80024dc <f25519_mul__distinct+0x50>
 80024bc:	ebc5 0608 	rsb	r6, r5, r8
 80024c0:	3620      	adds	r6, #32
 80024c2:	4416      	add	r6, r2
 80024c4:	440d      	add	r5, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80024c6:	f816 7d01 	ldrb.w	r7, [r6, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80024ca:	f815 cf01 	ldrb.w	ip, [r5, #1]!
 80024ce:	fb09 f707 	mul.w	r7, r9, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024d2:	3401      	adds	r4, #1
 80024d4:	2c20      	cmp	r4, #32
			c += ((uint32_t)a[j]) *
 80024d6:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80024da:	d1f4      	bne.n	80024c6 <f25519_mul__distinct+0x3a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80024dc:	f800 3008 	strb.w	r3, [r0, r8]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80024e0:	f108 0801 	add.w	r8, r8, #1
 80024e4:	f1b8 0f20 	cmp.w	r8, #32
 80024e8:	d1d7      	bne.n	800249a <f25519_mul__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024ea:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 80024ec:	09db      	lsrs	r3, r3, #7
 80024ee:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 80024f6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80024fa:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80024fc:	2300      	movs	r3, #0
		c += r[i];
 80024fe:	5cc1      	ldrb	r1, [r0, r3]
 8002500:	440a      	add	r2, r1
		r[i] = c;
 8002502:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002504:	3301      	adds	r3, #1
 8002506:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002508:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800250c:	d1f7      	bne.n	80024fe <f25519_mul__distinct+0x72>
		c += r[i];
		r[i] = c;
		c >>= 8;
	}
}
 800250e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002512:	4770      	bx	lr

08002514 <f25519_inv__distinct>:
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 8002514:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002518:	2600      	movs	r6, #0
		c >>= 8;
	}
}

void f25519_inv__distinct(uint8_t *r, const uint8_t *x)
{
 800251a:	b088      	sub	sp, #32
	}
}

void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
 800251c:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800251e:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	1874      	adds	r4, r6, r1
		for (j = 0; j <= i; j++)
 8002526:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002528:	5c8f      	ldrb	r7, [r1, r2]
 800252a:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800252e:	3201      	adds	r2, #1
 8002530:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002532:	fb07 3305 	mla	r3, r7, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002536:	ddf7      	ble.n	8002528 <f25519_inv__distinct+0x14>
 8002538:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 800253c:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800253e:	2a20      	cmp	r2, #32
 8002540:	d00e      	beq.n	8002560 <f25519_inv__distinct+0x4c>
 8002542:	1b35      	subs	r5, r6, r4
 8002544:	3520      	adds	r5, #32
 8002546:	440d      	add	r5, r1
 8002548:	440c      	add	r4, r1
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800254a:	f815 7d01 	ldrb.w	r7, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800254e:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 8002552:	fb08 f707 	mul.w	r7, r8, r7

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002556:	3201      	adds	r2, #1
 8002558:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800255a:	fb0c 3307 	mla	r3, ip, r7, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800255e:	d1f4      	bne.n	800254a <f25519_inv__distinct+0x36>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002560:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002564:	3601      	adds	r6, #1
 8002566:	2e20      	cmp	r6, #32
 8002568:	d1db      	bne.n	8002522 <f25519_inv__distinct+0xe>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800256a:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800256e:	09db      	lsrs	r3, r3, #7
 8002570:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002574:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002578:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800257c:	f88d 401f 	strb.w	r4, [sp, #31]
 8002580:	af08      	add	r7, sp, #32
	c = (c >> 7) * 19;
 8002582:	466b      	mov	r3, sp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002584:	781c      	ldrb	r4, [r3, #0]
 8002586:	4422      	add	r2, r4
		r[i] = c;
 8002588:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800258c:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 800258e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002592:	d1f7      	bne.n	8002584 <f25519_inv__distinct+0x70>
 8002594:	2500      	movs	r5, #0
 8002596:	eb0d 0205 	add.w	r2, sp, r5
 800259a:	462b      	mov	r3, r5
 800259c:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025a0:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 80025a8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80025aa:	f81d c002 	ldrb.w	ip, [sp, r2]
 80025ae:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80025b2:	3201      	adds	r2, #1
 80025b4:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80025b6:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80025ba:	ddf6      	ble.n	80025aa <f25519_inv__distinct+0x96>
 80025bc:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025c0:	2a1f      	cmp	r2, #31
 80025c2:	d00e      	beq.n	80025e2 <f25519_inv__distinct+0xce>
 80025c4:	1aac      	subs	r4, r5, r2
 80025c6:	3420      	adds	r4, #32
 80025c8:	ae00      	add	r6, sp, #0
 80025ca:	440c      	add	r4, r1
 80025cc:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80025ce:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80025d2:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80025d6:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025da:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80025dc:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80025e0:	d1f5      	bne.n	80025ce <f25519_inv__distinct+0xba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80025e2:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80025e4:	3501      	adds	r5, #1
 80025e6:	2d20      	cmp	r5, #32
 80025e8:	d1dc      	bne.n	80025a4 <f25519_inv__distinct+0x90>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025ea:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80025ec:	09db      	lsrs	r3, r3, #7
 80025ee:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025f2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80025f6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80025fa:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80025fc:	2300      	movs	r3, #0
		c += r[i];
 80025fe:	5cc4      	ldrb	r4, [r0, r3]
 8002600:	4422      	add	r2, r4
		r[i] = c;
 8002602:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002604:	3301      	adds	r3, #1
 8002606:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002608:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800260c:	d1f7      	bne.n	80025fe <f25519_inv__distinct+0xea>
 800260e:	f04f 0cf8 	mov.w	ip, #248	; 0xf8
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002612:	2526      	movs	r5, #38	; 0x26
 8002614:	f10d 061f 	add.w	r6, sp, #31
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002618:	f04f 0900 	mov.w	r9, #0
 800261c:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	eb09 0400 	add.w	r4, r9, r0
		for (j = 0; j <= i; j++)
 8002624:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002626:	f810 a002 	ldrb.w	sl, [r0, r2]
 800262a:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800262e:	3201      	adds	r2, #1
 8002630:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002632:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002636:	ddf6      	ble.n	8002626 <f25519_inv__distinct+0x112>
 8002638:	ea29 74e9 	bic.w	r4, r9, r9, asr #31
 800263c:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800263e:	2a20      	cmp	r2, #32
 8002640:	d010      	beq.n	8002664 <f25519_inv__distinct+0x150>
 8002642:	ebc4 0809 	rsb	r8, r4, r9
 8002646:	f108 0820 	add.w	r8, r8, #32
 800264a:	4480      	add	r8, r0
 800264c:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800264e:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002652:	f814 bf01 	ldrb.w	fp, [r4, #1]!
 8002656:	fb05 fa0a 	mul.w	sl, r5, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800265a:	3201      	adds	r2, #1
 800265c:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800265e:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002662:	d1f4      	bne.n	800264e <f25519_inv__distinct+0x13a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002664:	f80d 3009 	strb.w	r3, [sp, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002668:	f109 0901 	add.w	r9, r9, #1
 800266c:	f1b9 0f20 	cmp.w	r9, #32
 8002670:	d1d5      	bne.n	800261e <f25519_inv__distinct+0x10a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002672:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002676:	09db      	lsrs	r3, r3, #7
 8002678:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800267c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002680:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002684:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002688:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800268a:	781c      	ldrb	r4, [r3, #0]
 800268c:	4422      	add	r2, r4
		r[i] = c;
 800268e:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002692:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002694:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002698:	d1f7      	bne.n	800268a <f25519_inv__distinct+0x176>
 800269a:	f04f 0900 	mov.w	r9, #0
 800269e:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	eb01 0409 	add.w	r4, r1, r9
		for (j = 0; j <= i; j++)
 80026a6:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80026a8:	f81d a002 	ldrb.w	sl, [sp, r2]
 80026ac:	f814 8901 	ldrb.w	r8, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026b0:	3201      	adds	r2, #1
 80026b2:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80026b4:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80026b8:	ddf6      	ble.n	80026a8 <f25519_inv__distinct+0x194>
 80026ba:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026be:	2a1f      	cmp	r2, #31
 80026c0:	d010      	beq.n	80026e4 <f25519_inv__distinct+0x1d0>
 80026c2:	ebc2 0409 	rsb	r4, r2, r9
 80026c6:	3420      	adds	r4, #32
 80026c8:	f10d 0800 	add.w	r8, sp, #0
 80026cc:	440c      	add	r4, r1
 80026ce:	4442      	add	r2, r8
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80026d0:	f814 8d01 	ldrb.w	r8, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80026d4:	f812 af01 	ldrb.w	sl, [r2, #1]!
 80026d8:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026dc:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) *
 80026de:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80026e2:	d1f5      	bne.n	80026d0 <f25519_inv__distinct+0x1bc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80026e4:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80026e8:	f109 0901 	add.w	r9, r9, #1
 80026ec:	f1b9 0f20 	cmp.w	r9, #32
 80026f0:	d1d6      	bne.n	80026a0 <f25519_inv__distinct+0x18c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026f2:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80026f4:	09db      	lsrs	r3, r3, #7
 80026f6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80026fa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80026fe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002702:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002704:	2300      	movs	r3, #0
		c += r[i];
 8002706:	5cc4      	ldrb	r4, [r0, r3]
 8002708:	4422      	add	r2, r4
		r[i] = c;
 800270a:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800270c:	3301      	adds	r3, #1
 800270e:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002710:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002714:	d1f7      	bne.n	8002706 <f25519_inv__distinct+0x1f2>
	/* 1 1 */
	f25519_mul__distinct(s, x, x);
	f25519_mul__distinct(r, s, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 8002716:	f1bc 0c01 	subs.w	ip, ip, #1
 800271a:	f47f af7d 	bne.w	8002618 <f25519_inv__distinct+0x104>
 800271e:	4663      	mov	r3, ip
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002720:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	eb00 040c 	add.w	r4, r0, ip
		for (j = 0; j <= i; j++)
 800272a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800272c:	5c86      	ldrb	r6, [r0, r2]
 800272e:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002732:	3201      	adds	r2, #1
 8002734:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002736:	fb06 3305 	mla	r3, r6, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800273a:	ddf7      	ble.n	800272c <f25519_inv__distinct+0x218>
 800273c:	ea2c 74ec 	bic.w	r4, ip, ip, asr #31
 8002740:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002742:	2a20      	cmp	r2, #32
 8002744:	d00f      	beq.n	8002766 <f25519_inv__distinct+0x252>
 8002746:	ebc4 050c 	rsb	r5, r4, ip
 800274a:	3520      	adds	r5, #32
 800274c:	4405      	add	r5, r0
 800274e:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002750:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002754:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002758:	fb09 f606 	mul.w	r6, r9, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800275c:	3201      	adds	r2, #1
 800275e:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002760:	fb08 3306 	mla	r3, r8, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002764:	d1f4      	bne.n	8002750 <f25519_inv__distinct+0x23c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002766:	f80d 300c 	strb.w	r3, [sp, ip]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800276a:	f10c 0c01 	add.w	ip, ip, #1
 800276e:	f1bc 0f20 	cmp.w	ip, #32
 8002772:	d1d7      	bne.n	8002724 <f25519_inv__distinct+0x210>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002774:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002778:	09db      	lsrs	r3, r3, #7
 800277a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800277e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002782:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002786:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800278a:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 800278c:	781c      	ldrb	r4, [r3, #0]
 800278e:	4422      	add	r2, r4
		r[i] = c;
 8002790:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002794:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002796:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800279a:	d1f7      	bne.n	800278c <f25519_inv__distinct+0x278>
 800279c:	2500      	movs	r5, #0
 800279e:	eb0d 0205 	add.w	r2, sp, r5
 80027a2:	462b      	mov	r3, r5
 80027a4:	f102 091f 	add.w	r9, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027a8:	f04f 0826 	mov.w	r8, #38	; 0x26
 80027ac:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 80027b2:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027b4:	f81d c002 	ldrb.w	ip, [sp, r2]
 80027b8:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027bc:	3201      	adds	r2, #1
 80027be:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80027c0:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80027c4:	ddf6      	ble.n	80027b4 <f25519_inv__distinct+0x2a0>
 80027c6:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027ca:	2a1f      	cmp	r2, #31
 80027cc:	d00e      	beq.n	80027ec <f25519_inv__distinct+0x2d8>
 80027ce:	1aac      	subs	r4, r5, r2
 80027d0:	ae00      	add	r6, sp, #0
 80027d2:	3420      	adds	r4, #32
 80027d4:	4434      	add	r4, r6
 80027d6:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80027d8:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80027dc:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80027e0:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027e4:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80027e6:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80027ea:	d1f5      	bne.n	80027d8 <f25519_inv__distinct+0x2c4>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80027ec:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80027ee:	3501      	adds	r5, #1
 80027f0:	2d20      	cmp	r5, #32
 80027f2:	d1db      	bne.n	80027ac <f25519_inv__distinct+0x298>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027f4:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80027f6:	09db      	lsrs	r3, r3, #7
 80027f8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80027fc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002800:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002804:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002806:	2300      	movs	r3, #0
		c += r[i];
 8002808:	5cc4      	ldrb	r4, [r0, r3]
 800280a:	4422      	add	r2, r4
		r[i] = c;
 800280c:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800280e:	3301      	adds	r3, #1
 8002810:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002812:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002816:	d1f7      	bne.n	8002808 <f25519_inv__distinct+0x2f4>
 8002818:	2600      	movs	r6, #0
 800281a:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800281c:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	198c      	adds	r4, r1, r6
		for (j = 0; j <= i; j++)
 8002824:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002826:	f810 c002 	ldrb.w	ip, [r0, r2]
 800282a:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800282e:	3201      	adds	r2, #1
 8002830:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002832:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002836:	ddf6      	ble.n	8002826 <f25519_inv__distinct+0x312>
 8002838:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 800283c:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800283e:	2a20      	cmp	r2, #32
 8002840:	d00e      	beq.n	8002860 <f25519_inv__distinct+0x34c>
 8002842:	1b35      	subs	r5, r6, r4
 8002844:	3520      	adds	r5, #32
 8002846:	440d      	add	r5, r1
 8002848:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 800284a:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800284e:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002852:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002856:	3201      	adds	r2, #1
 8002858:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 800285a:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800285e:	d1f4      	bne.n	800284a <f25519_inv__distinct+0x336>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002860:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002864:	3601      	adds	r6, #1
 8002866:	2e20      	cmp	r6, #32
 8002868:	d1da      	bne.n	8002820 <f25519_inv__distinct+0x30c>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800286a:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 800286e:	09db      	lsrs	r3, r3, #7
 8002870:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002874:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002878:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800287c:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002880:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002882:	781c      	ldrb	r4, [r3, #0]
 8002884:	4422      	add	r2, r4
		r[i] = c;
 8002886:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800288a:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800288c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002890:	d1f7      	bne.n	8002882 <f25519_inv__distinct+0x36e>
 8002892:	2500      	movs	r5, #0
 8002894:	eb0d 0805 	add.w	r8, sp, r5
 8002898:	f108 091f 	add.w	r9, r8, #31
 800289c:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 800289e:	f04f 0826 	mov.w	r8, #38	; 0x26
 80028a2:	ac00      	add	r4, sp, #0
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	442c      	add	r4, r5
		for (j = 0; j <= i; j++)
 80028a8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028aa:	f81d c002 	ldrb.w	ip, [sp, r2]
 80028ae:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028b2:	3201      	adds	r2, #1
 80028b4:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80028b6:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80028ba:	ddf6      	ble.n	80028aa <f25519_inv__distinct+0x396>
 80028bc:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028c0:	2a1f      	cmp	r2, #31
 80028c2:	d00e      	beq.n	80028e2 <f25519_inv__distinct+0x3ce>
 80028c4:	1aac      	subs	r4, r5, r2
 80028c6:	ae00      	add	r6, sp, #0
 80028c8:	3420      	adds	r4, #32
 80028ca:	4434      	add	r4, r6
 80028cc:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80028ce:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80028d2:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80028d6:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028da:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80028dc:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80028e0:	d1f5      	bne.n	80028ce <f25519_inv__distinct+0x3ba>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80028e2:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80028e4:	3501      	adds	r5, #1
 80028e6:	2d20      	cmp	r5, #32
 80028e8:	d1db      	bne.n	80028a2 <f25519_inv__distinct+0x38e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028ea:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80028ec:	09db      	lsrs	r3, r3, #7
 80028ee:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028f2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80028f6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80028fa:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80028fc:	2300      	movs	r3, #0
		c += r[i];
 80028fe:	5cc4      	ldrb	r4, [r0, r3]
 8002900:	4422      	add	r2, r4
		r[i] = c;
 8002902:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002904:	3301      	adds	r3, #1
 8002906:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002908:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800290c:	d1f7      	bne.n	80028fe <f25519_inv__distinct+0x3ea>
 800290e:	2600      	movs	r6, #0
 8002910:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002912:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 800291a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800291c:	f810 c002 	ldrb.w	ip, [r0, r2]
 8002920:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002924:	3201      	adds	r2, #1
 8002926:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002928:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800292c:	ddf6      	ble.n	800291c <f25519_inv__distinct+0x408>
 800292e:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002932:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002934:	2a20      	cmp	r2, #32
 8002936:	d00e      	beq.n	8002956 <f25519_inv__distinct+0x442>
 8002938:	1b35      	subs	r5, r6, r4
 800293a:	3520      	adds	r5, #32
 800293c:	4405      	add	r5, r0
 800293e:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002940:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002944:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002948:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800294c:	3201      	adds	r2, #1
 800294e:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002950:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002954:	d1f4      	bne.n	8002940 <f25519_inv__distinct+0x42c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002956:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 800295a:	3601      	adds	r6, #1
 800295c:	2e20      	cmp	r6, #32
 800295e:	d1da      	bne.n	8002916 <f25519_inv__distinct+0x402>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002960:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002964:	09db      	lsrs	r3, r3, #7
 8002966:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800296a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 800296e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002972:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002976:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002978:	781c      	ldrb	r4, [r3, #0]
 800297a:	4422      	add	r2, r4
		r[i] = c;
 800297c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002980:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002982:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002986:	d1f7      	bne.n	8002978 <f25519_inv__distinct+0x464>
 8002988:	2500      	movs	r5, #0
 800298a:	eb0d 0805 	add.w	r8, sp, r5
 800298e:	f108 091f 	add.w	r9, r8, #31
 8002992:	462b      	mov	r3, r5
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002994:	f04f 0826 	mov.w	r8, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 800299c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800299e:	f81d c002 	ldrb.w	ip, [sp, r2]
 80029a2:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029a6:	3201      	adds	r2, #1
 80029a8:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80029aa:	fb0c 3306 	mla	r3, ip, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80029ae:	ddf6      	ble.n	800299e <f25519_inv__distinct+0x48a>
 80029b0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029b4:	2a1f      	cmp	r2, #31
 80029b6:	d00e      	beq.n	80029d6 <f25519_inv__distinct+0x4c2>
 80029b8:	1aac      	subs	r4, r5, r2
 80029ba:	3420      	adds	r4, #32
 80029bc:	ae00      	add	r6, sp, #0
 80029be:	440c      	add	r4, r1
 80029c0:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80029c2:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80029c6:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 80029ca:	fb08 f606 	mul.w	r6, r8, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029ce:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) *
 80029d0:	fb0c 3306 	mla	r3, ip, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80029d4:	d1f5      	bne.n	80029c2 <f25519_inv__distinct+0x4ae>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80029d6:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80029d8:	3501      	adds	r5, #1
 80029da:	2d20      	cmp	r5, #32
 80029dc:	d1dc      	bne.n	8002998 <f25519_inv__distinct+0x484>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029de:	7fc4      	ldrb	r4, [r0, #31]
	c = (c >> 7) * 19;
 80029e0:	09db      	lsrs	r3, r3, #7
 80029e2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 80029ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 80029ee:	77c4      	strb	r4, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029f0:	2300      	movs	r3, #0
		c += r[i];
 80029f2:	5cc4      	ldrb	r4, [r0, r3]
 80029f4:	4422      	add	r2, r4
		r[i] = c;
 80029f6:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80029f8:	3301      	adds	r3, #1
 80029fa:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 80029fc:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a00:	d1f7      	bne.n	80029f2 <f25519_inv__distinct+0x4de>
 8002a02:	2600      	movs	r6, #0
 8002a04:	4633      	mov	r3, r6
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a06:	f04f 0926 	mov.w	r9, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	1984      	adds	r4, r0, r6
		for (j = 0; j <= i; j++)
 8002a0e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a10:	f810 c002 	ldrb.w	ip, [r0, r2]
 8002a14:	f814 5901 	ldrb.w	r5, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a18:	3201      	adds	r2, #1
 8002a1a:	42b2      	cmp	r2, r6
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a1c:	fb0c 3305 	mla	r3, ip, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a20:	ddf6      	ble.n	8002a10 <f25519_inv__distinct+0x4fc>
 8002a22:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 8002a26:	1c62      	adds	r2, r4, #1
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a28:	2a20      	cmp	r2, #32
 8002a2a:	d00e      	beq.n	8002a4a <f25519_inv__distinct+0x536>
 8002a2c:	1b35      	subs	r5, r6, r4
 8002a2e:	3520      	adds	r5, #32
 8002a30:	4405      	add	r5, r0
 8002a32:	4404      	add	r4, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002a34:	f815 cd01 	ldrb.w	ip, [r5, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a38:	f814 8f01 	ldrb.w	r8, [r4, #1]!
 8002a3c:	fb09 fc0c 	mul.w	ip, r9, ip

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a40:	3201      	adds	r2, #1
 8002a42:	2a20      	cmp	r2, #32
			c += ((uint32_t)a[j]) *
 8002a44:	fb08 330c 	mla	r3, r8, ip, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002a48:	d1f4      	bne.n	8002a34 <f25519_inv__distinct+0x520>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002a4a:	f80d 3006 	strb.w	r3, [sp, r6]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a4e:	3601      	adds	r6, #1
 8002a50:	2e20      	cmp	r6, #32
 8002a52:	d1da      	bne.n	8002a0a <f25519_inv__distinct+0x4f6>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a54:	f89d 401f 	ldrb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a58:	09db      	lsrs	r3, r3, #7
 8002a5a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a5e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	c = (c >> 7) * 19;
 8002a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002a66:	f88d 401f 	strb.w	r4, [sp, #31]
	c = (c >> 7) * 19;
 8002a6a:	ab00      	add	r3, sp, #0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002a6c:	781c      	ldrb	r4, [r3, #0]
 8002a6e:	4422      	add	r2, r4
		r[i] = c;
 8002a70:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a74:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002a76:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002a7a:	d1f7      	bne.n	8002a6c <f25519_inv__distinct+0x558>
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	eb0d 0205 	add.w	r2, sp, r5
 8002a82:	462b      	mov	r3, r5
 8002a84:	f102 081f 	add.w	r8, r2, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002a88:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	194c      	adds	r4, r1, r5
		for (j = 0; j <= i; j++)
 8002a90:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a92:	f81d 7002 	ldrb.w	r7, [sp, r2]
 8002a96:	f814 6901 	ldrb.w	r6, [r4], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002a9a:	3201      	adds	r2, #1
 8002a9c:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002a9e:	fb07 3306 	mla	r3, r7, r6, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002aa2:	ddf6      	ble.n	8002a92 <f25519_inv__distinct+0x57e>
 8002aa4:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002aa8:	2a1f      	cmp	r2, #31
 8002aaa:	d00e      	beq.n	8002aca <f25519_inv__distinct+0x5b6>
 8002aac:	1aac      	subs	r4, r5, r2
 8002aae:	3420      	adds	r4, #32
 8002ab0:	ae00      	add	r6, sp, #0
 8002ab2:	440c      	add	r4, r1
 8002ab4:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002ab6:	f814 6d01 	ldrb.w	r6, [r4, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002aba:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8002abe:	fb0c f606 	mul.w	r6, ip, r6

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ac2:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002ac4:	fb07 3306 	mla	r3, r7, r6, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ac8:	d1f5      	bne.n	8002ab6 <f25519_inv__distinct+0x5a2>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002aca:	5543      	strb	r3, [r0, r5]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002acc:	3501      	adds	r5, #1
 8002ace:	2d20      	cmp	r5, #32
 8002ad0:	d1dc      	bne.n	8002a8c <f25519_inv__distinct+0x578>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ad2:	7fc1      	ldrb	r1, [r0, #31]
	c = (c >> 7) * 19;
 8002ad4:	09db      	lsrs	r3, r3, #7
 8002ad6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ada:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ade:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ae2:	77c1      	strb	r1, [r0, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ae4:	2300      	movs	r3, #0
		c += r[i];
 8002ae6:	5cc1      	ldrb	r1, [r0, r3]
 8002ae8:	440a      	add	r2, r1
		r[i] = c;
 8002aea:	54c2      	strb	r2, [r0, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002aec:	3301      	adds	r3, #1
 8002aee:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002af0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002af4:	d1f7      	bne.n	8002ae6 <f25519_inv__distinct+0x5d2>
	f25519_mul__distinct(r, s, x);

	/* 1 */
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}
 8002af6:	b008      	add	sp, #32
 8002af8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <f25519_sqrt>:
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002b00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b04:	2300      	movs	r3, #0
	f25519_mul__distinct(s, r, r);
	f25519_mul__distinct(r, s, x);
}

void f25519_sqrt(uint8_t *r, const uint8_t *a)
{
 8002b06:	b0a4      	sub	sp, #144	; 0x90
 8002b08:	9002      	str	r0, [sp, #8]
 8002b0a:	9103      	str	r1, [sp, #12]
	f25519_copy(r, tmp);
}

void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	ae14      	add	r6, sp, #80	; 0x50
 8002b10:	4608      	mov	r0, r1
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		c >>= 8;
		c += b * ((uint32_t)a[i]);
 8002b12:	5cc1      	ldrb	r1, [r0, r3]
 8002b14:	0049      	lsls	r1, r1, #1
 8002b16:	eb01 2212 	add.w	r2, r1, r2, lsr #8
		r[i] = c;
 8002b1a:	54f2      	strb	r2, [r6, r3]
void f25519_mul_c(uint8_t *r, const uint8_t *a, uint32_t b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1f7      	bne.n	8002b12 <f25519_sqrt+0x12>
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b22:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
 8002b26:	09d2      	lsrs	r2, r2, #7
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	c >>= 7;
	c *= 19;
 8002b2c:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
		c >>= 8;
		c += b * ((uint32_t)a[i]);
		r[i] = c;
	}

	r[31] &= 127;
 8002b30:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
	c >>= 7;
	c *= 19;
 8002b34:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8002b38:	a81c      	add	r0, sp, #112	; 0x70
 8002b3a:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002b3c:	7819      	ldrb	r1, [r3, #0]
 8002b3e:	440a      	add	r2, r1
		r[i] = c;
 8002b40:	f803 2b01 	strb.w	r2, [r3], #1

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b44:	4283      	cmp	r3, r0
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002b46:	ea4f 2212 	mov.w	r2, r2, lsr #8

	r[31] &= 127;
	c >>= 7;
	c *= 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b4a:	d1f7      	bne.n	8002b3c <f25519_sqrt+0x3c>
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	4623      	mov	r3, r4
 8002b50:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b54:	2726      	movs	r7, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002b5a:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b5c:	f816 8002 	ldrb.w	r8, [r6, r2]
 8002b60:	f811 5901 	ldrb.w	r5, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b64:	3201      	adds	r2, #1
 8002b66:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002b68:	fb08 3305 	mla	r3, r8, r5, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002b6c:	ddf6      	ble.n	8002b5c <f25519_sqrt+0x5c>
 8002b6e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b72:	2a1f      	cmp	r2, #31
 8002b74:	d00d      	beq.n	8002b92 <f25519_sqrt+0x92>
 8002b76:	1aa1      	subs	r1, r4, r2
 8002b78:	3120      	adds	r1, #32
 8002b7a:	4431      	add	r1, r6
 8002b7c:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002b7e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002b82:	f812 8f01 	ldrb.w	r8, [r2, #1]!
 8002b86:	fb07 f505 	mul.w	r5, r7, r5

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b8a:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002b8c:	fb08 3305 	mla	r3, r8, r5, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002b90:	d1f5      	bne.n	8002b7e <f25519_sqrt+0x7e>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002b92:	a904      	add	r1, sp, #16
 8002b94:	550b      	strb	r3, [r1, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002b96:	3401      	adds	r4, #1
 8002b98:	2c20      	cmp	r4, #32
 8002b9a:	d1dc      	bne.n	8002b56 <f25519_sqrt+0x56>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002b9c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002ba0:	09db      	lsrs	r3, r3, #7
 8002ba2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ba6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002baa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002bae:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8002bb2:	af0c      	add	r7, sp, #48	; 0x30
	c = (c >> 7) * 19;
 8002bb4:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002bb6:	7819      	ldrb	r1, [r3, #0]
 8002bb8:	440a      	add	r2, r1
		r[i] = c;
 8002bba:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bbe:	42bb      	cmp	r3, r7
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002bc0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002bc4:	d1f7      	bne.n	8002bb6 <f25519_sqrt+0xb6>
 8002bc6:	2400      	movs	r4, #0
 8002bc8:	4623      	mov	r3, r4
 8002bca:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002bce:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002bd4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002bd6:	f10d 0a10 	add.w	sl, sp, #16
 8002bda:	f81a 9002 	ldrb.w	r9, [sl, r2]
 8002bde:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002be2:	3201      	adds	r2, #1
 8002be4:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002be6:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002bea:	ddf4      	ble.n	8002bd6 <f25519_sqrt+0xd6>
 8002bec:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002bf0:	2a1f      	cmp	r2, #31
 8002bf2:	d00d      	beq.n	8002c10 <f25519_sqrt+0x110>
 8002bf4:	1aa1      	subs	r1, r4, r2
 8002bf6:	3120      	adds	r1, #32
 8002bf8:	4431      	add	r1, r6
 8002bfa:	4452      	add	r2, sl
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002bfc:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c00:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002c04:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c08:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002c0a:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c0e:	d1f5      	bne.n	8002bfc <f25519_sqrt+0xfc>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002c10:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c12:	3401      	adds	r4, #1
 8002c14:	2c20      	cmp	r4, #32
 8002c16:	d1db      	bne.n	8002bd0 <f25519_sqrt+0xd0>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c18:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002c1c:	09db      	lsrs	r3, r3, #7
 8002c1e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002c22:	f10d 0b90 	add.w	fp, sp, #144	; 0x90
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002c2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002c2e:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
 8002c32:	f8cd b000 	str.w	fp, [sp]
	c = (c >> 7) * 19;
 8002c36:	4603      	mov	r3, r0
 8002c38:	46dc      	mov	ip, fp

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002c3a:	7819      	ldrb	r1, [r3, #0]
 8002c3c:	440a      	add	r2, r1
		r[i] = c;
 8002c3e:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c42:	4563      	cmp	r3, ip
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002c44:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002c48:	d1f7      	bne.n	8002c3a <f25519_sqrt+0x13a>
 8002c4a:	21f8      	movs	r1, #248	; 0xf8
 8002c4c:	9101      	str	r1, [sp, #4]
 8002c4e:	f100 051f 	add.w	r5, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c52:	2126      	movs	r1, #38	; 0x26
 8002c54:	f10d 042f 	add.w	r4, sp, #47	; 0x2f

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8002c58:	f04f 0900 	mov.w	r9, #0
 8002c5c:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	eb00 0809 	add.w	r8, r0, r9
		for (j = 0; j <= i; j++)
 8002c64:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c66:	f810 b002 	ldrb.w	fp, [r0, r2]
 8002c6a:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c6e:	3201      	adds	r2, #1
 8002c70:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002c72:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002c76:	ddf6      	ble.n	8002c66 <f25519_sqrt+0x166>
 8002c78:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c7c:	2a1f      	cmp	r2, #31
 8002c7e:	d00f      	beq.n	8002ca0 <f25519_sqrt+0x1a0>
 8002c80:	ebc2 0809 	rsb	r8, r2, r9
 8002c84:	f108 0820 	add.w	r8, r8, #32
 8002c88:	4480      	add	r8, r0
 8002c8a:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002c8c:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002c90:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002c94:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c98:	42aa      	cmp	r2, r5
			c += ((uint32_t)a[j]) *
 8002c9a:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002c9e:	d1f5      	bne.n	8002c8c <f25519_sqrt+0x18c>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002ca0:	f10d 0810 	add.w	r8, sp, #16
 8002ca4:	f808 3009 	strb.w	r3, [r8, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ca8:	f109 0901 	add.w	r9, r9, #1
 8002cac:	f1b9 0f20 	cmp.w	r9, #32
 8002cb0:	d1d5      	bne.n	8002c5e <f25519_sqrt+0x15e>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002cb2:	f89d 802f 	ldrb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002cb6:	09db      	lsrs	r3, r3, #7
 8002cb8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002cbc:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002cc0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002cc4:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002cc8:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002cca:	f893 8000 	ldrb.w	r8, [r3]
 8002cce:	4442      	add	r2, r8
		r[i] = c;
 8002cd0:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cd4:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002cd6:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002cda:	d1f6      	bne.n	8002cca <f25519_sqrt+0x1ca>
 8002cdc:	f04f 0900 	mov.w	r9, #0
 8002ce0:	464b      	mov	r3, r9
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	eb06 0809 	add.w	r8, r6, r9
		for (j = 0; j <= i; j++)
 8002ce8:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cea:	f10d 0c10 	add.w	ip, sp, #16
 8002cee:	f81c b002 	ldrb.w	fp, [ip, r2]
 8002cf2:	f818 a901 	ldrb.w	sl, [r8], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002cf6:	3201      	adds	r2, #1
 8002cf8:	454a      	cmp	r2, r9
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002cfa:	fb0b 330a 	mla	r3, fp, sl, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002cfe:	ddf4      	ble.n	8002cea <f25519_sqrt+0x1ea>
 8002d00:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d04:	2a1f      	cmp	r2, #31
 8002d06:	d00f      	beq.n	8002d28 <f25519_sqrt+0x228>
 8002d08:	ebc2 0809 	rsb	r8, r2, r9
 8002d0c:	f108 0820 	add.w	r8, r8, #32
 8002d10:	44b0      	add	r8, r6
 8002d12:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002d14:	f818 ad01 	ldrb.w	sl, [r8, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d18:	f812 bf01 	ldrb.w	fp, [r2, #1]!
 8002d1c:	fb01 fa0a 	mul.w	sl, r1, sl

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d20:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) *
 8002d22:	fb0b 330a 	mla	r3, fp, sl, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d26:	d1f5      	bne.n	8002d14 <f25519_sqrt+0x214>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002d28:	f800 3009 	strb.w	r3, [r0, r9]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d2c:	f109 0901 	add.w	r9, r9, #1
 8002d30:	f1b9 0f20 	cmp.w	r9, #32
 8002d34:	d1d5      	bne.n	8002ce2 <f25519_sqrt+0x1e2>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d36:	f89d 808f 	ldrb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002d3a:	09db      	lsrs	r3, r3, #7
 8002d3c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d40:	f008 087f 	and.w	r8, r8, #127	; 0x7f
	c = (c >> 7) * 19;
 8002d44:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002d48:	f88d 808f 	strb.w	r8, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002d4c:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002d4e:	f893 8000 	ldrb.w	r8, [r3]
 8002d52:	4442      	add	r2, r8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d54:	f8dd 8000 	ldr.w	r8, [sp]
		c += r[i];
		r[i] = c;
 8002d58:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d5c:	4598      	cmp	r8, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002d5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002d62:	d1f4      	bne.n	8002d4e <f25519_sqrt+0x24e>
	/* 1 1 */
	f25519_mul__distinct(r, x, x);
	f25519_mul__distinct(s, r, x);

	/* 1 x 248 */
	for (i = 0; i < 248; i++) {
 8002d64:	9a01      	ldr	r2, [sp, #4]
 8002d66:	3a01      	subs	r2, #1
 8002d68:	9201      	str	r2, [sp, #4]
 8002d6a:	f47f af75 	bne.w	8002c58 <f25519_sqrt+0x158>
 8002d6e:	4614      	mov	r4, r2
 8002d70:	4613      	mov	r3, r2
 8002d72:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002d76:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002d7c:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d7e:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002d82:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d86:	3201      	adds	r2, #1
 8002d88:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002d8a:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002d8e:	ddf6      	ble.n	8002d7e <f25519_sqrt+0x27e>
 8002d90:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002d94:	2a1f      	cmp	r2, #31
 8002d96:	d00d      	beq.n	8002db4 <f25519_sqrt+0x2b4>
 8002d98:	1aa1      	subs	r1, r4, r2
 8002d9a:	3120      	adds	r1, #32
 8002d9c:	4401      	add	r1, r0
 8002d9e:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002da0:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002da4:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002da8:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002dac:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002dae:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002db2:	d1f5      	bne.n	8002da0 <f25519_sqrt+0x2a0>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002db4:	f10d 0a10 	add.w	sl, sp, #16
 8002db8:	f80a 3004 	strb.w	r3, [sl, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002dbc:	3401      	adds	r4, #1
 8002dbe:	2c20      	cmp	r4, #32
 8002dc0:	d1da      	bne.n	8002d78 <f25519_sqrt+0x278>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dc2:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002dc6:	09db      	lsrs	r3, r3, #7
 8002dc8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dcc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002dd0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002dd4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002dd8:	4653      	mov	r3, sl

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002dda:	7819      	ldrb	r1, [r3, #0]
 8002ddc:	440a      	add	r2, r1
		r[i] = c;
 8002dde:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002de2:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002de4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002de8:	d1f7      	bne.n	8002dda <f25519_sqrt+0x2da>
 8002dea:	2400      	movs	r4, #0
 8002dec:	4623      	mov	r3, r4
 8002dee:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002df2:	2526      	movs	r5, #38	; 0x26
 8002df4:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002dfa:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002dfc:	f10d 0c10 	add.w	ip, sp, #16
 8002e00:	f81c a002 	ldrb.w	sl, [ip, r2]
 8002e04:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e08:	3201      	adds	r2, #1
 8002e0a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e0c:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e10:	ddf4      	ble.n	8002dfc <f25519_sqrt+0x2fc>
 8002e12:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e16:	2a1f      	cmp	r2, #31
 8002e18:	d00d      	beq.n	8002e36 <f25519_sqrt+0x336>
 8002e1a:	1aa1      	subs	r1, r4, r2
 8002e1c:	3120      	adds	r1, #32
 8002e1e:	4461      	add	r1, ip
 8002e20:	4462      	add	r2, ip
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e22:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e26:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002e2a:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e2e:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002e30:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e34:	d1f5      	bne.n	8002e22 <f25519_sqrt+0x322>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002e36:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e38:	3401      	adds	r4, #1
 8002e3a:	2c20      	cmp	r4, #32
 8002e3c:	d1da      	bne.n	8002df4 <f25519_sqrt+0x2f4>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e3e:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e42:	09db      	lsrs	r3, r3, #7
 8002e44:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e48:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002e4c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002e50:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002e54:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002e56:	7819      	ldrb	r1, [r3, #0]
 8002e58:	440a      	add	r2, r1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e5a:	9900      	ldr	r1, [sp, #0]
		c += r[i];
		r[i] = c;
 8002e5c:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e60:	4299      	cmp	r1, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002e62:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002e66:	d1f6      	bne.n	8002e56 <f25519_sqrt+0x356>
 8002e68:	2400      	movs	r4, #0
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	f100 081f 	add.w	r8, r0, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e70:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	1931      	adds	r1, r6, r4
		for (j = 0; j <= i; j++)
 8002e76:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e78:	f810 a002 	ldrb.w	sl, [r0, r2]
 8002e7c:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e80:	3201      	adds	r2, #1
 8002e82:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002e84:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002e88:	ddf6      	ble.n	8002e78 <f25519_sqrt+0x378>
 8002e8a:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002e8e:	2a1f      	cmp	r2, #31
 8002e90:	d00d      	beq.n	8002eae <f25519_sqrt+0x3ae>
 8002e92:	1aa1      	subs	r1, r4, r2
 8002e94:	3120      	adds	r1, #32
 8002e96:	4431      	add	r1, r6
 8002e98:	4402      	add	r2, r0
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002e9a:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002e9e:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002ea2:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002ea6:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002ea8:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002eac:	d1f5      	bne.n	8002e9a <f25519_sqrt+0x39a>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002eae:	aa04      	add	r2, sp, #16
 8002eb0:	5513      	strb	r3, [r2, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002eb2:	3401      	adds	r4, #1
 8002eb4:	2c20      	cmp	r4, #32
 8002eb6:	d1dc      	bne.n	8002e72 <f25519_sqrt+0x372>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002eb8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002ebc:	09db      	lsrs	r3, r3, #7
 8002ebe:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002ec2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002ec6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002eca:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
	c = (c >> 7) * 19;
 8002ece:	ab04      	add	r3, sp, #16

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002ed0:	7819      	ldrb	r1, [r3, #0]
 8002ed2:	440a      	add	r2, r1
		r[i] = c;
 8002ed4:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ed8:	429f      	cmp	r7, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002eda:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002ede:	d1f7      	bne.n	8002ed0 <f25519_sqrt+0x3d0>
 8002ee0:	2400      	movs	r4, #0
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	f10d 082f 	add.w	r8, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002ee8:	2526      	movs	r5, #38	; 0x26
 8002eea:	a904      	add	r1, sp, #16
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	4421      	add	r1, r4
		for (j = 0; j <= i; j++)
 8002ef0:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002ef2:	f10d 0b10 	add.w	fp, sp, #16
 8002ef6:	f81b a002 	ldrb.w	sl, [fp, r2]
 8002efa:	f811 9901 	ldrb.w	r9, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002efe:	3201      	adds	r2, #1
 8002f00:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f02:	fb0a 3309 	mla	r3, sl, r9, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f06:	ddf4      	ble.n	8002ef2 <f25519_sqrt+0x3f2>
 8002f08:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f0c:	2a1f      	cmp	r2, #31
 8002f0e:	d00d      	beq.n	8002f2c <f25519_sqrt+0x42c>
 8002f10:	1aa1      	subs	r1, r4, r2
 8002f12:	3120      	adds	r1, #32
 8002f14:	4459      	add	r1, fp
 8002f16:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f18:	f811 9d01 	ldrb.w	r9, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f1c:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8002f20:	fb05 f909 	mul.w	r9, r5, r9

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f24:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 8002f26:	fb0a 3309 	mla	r3, sl, r9, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f2a:	d1f5      	bne.n	8002f18 <f25519_sqrt+0x418>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002f2c:	5503      	strb	r3, [r0, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f2e:	3401      	adds	r4, #1
 8002f30:	2c20      	cmp	r4, #32
 8002f32:	d1da      	bne.n	8002eea <f25519_sqrt+0x3ea>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f34:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f38:	09db      	lsrs	r3, r3, #7
 8002f3a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002f42:	f8dd c000 	ldr.w	ip, [sp]
	c = (c >> 7) * 19;
 8002f46:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002f4a:	f88d 108f 	strb.w	r1, [sp, #143]	; 0x8f
	c = (c >> 7) * 19;
 8002f4e:	4603      	mov	r3, r0

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002f50:	7819      	ldrb	r1, [r3, #0]
 8002f52:	440a      	add	r2, r1
		r[i] = c;
 8002f54:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f58:	459c      	cmp	ip, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002f5a:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002f5e:	d1f7      	bne.n	8002f50 <f25519_sqrt+0x450>
 8002f60:	2400      	movs	r4, #0
 8002f62:	4623      	mov	r3, r4
 8002f64:	f106 0c1f 	add.w	ip, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f68:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	1901      	adds	r1, r0, r4
		for (j = 0; j <= i; j++)
 8002f6e:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f70:	f816 9002 	ldrb.w	r9, [r6, r2]
 8002f74:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f78:	3201      	adds	r2, #1
 8002f7a:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 8002f7c:	fb09 3308 	mla	r3, r9, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8002f80:	ddf6      	ble.n	8002f70 <f25519_sqrt+0x470>
 8002f82:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f86:	2a1f      	cmp	r2, #31
 8002f88:	d00d      	beq.n	8002fa6 <f25519_sqrt+0x4a6>
 8002f8a:	1aa1      	subs	r1, r4, r2
 8002f8c:	3120      	adds	r1, #32
 8002f8e:	4401      	add	r1, r0
 8002f90:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8002f92:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8002f96:	f812 9f01 	ldrb.w	r9, [r2, #1]!
 8002f9a:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002f9e:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 8002fa0:	fb09 3308 	mla	r3, r9, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8002fa4:	d1f5      	bne.n	8002f92 <f25519_sqrt+0x492>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8002fa6:	553b      	strb	r3, [r7, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fa8:	3401      	adds	r4, #1
 8002faa:	2c20      	cmp	r4, #32
 8002fac:	d1dd      	bne.n	8002f6a <f25519_sqrt+0x46a>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fae:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002fb2:	09db      	lsrs	r3, r3, #7
 8002fb4:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fb8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 8002fbc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8002fc0:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8002fc4:	463b      	mov	r3, r7

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8002fc6:	7819      	ldrb	r1, [r3, #0]
 8002fc8:	440a      	add	r2, r1
		r[i] = c;
 8002fca:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fce:	42b3      	cmp	r3, r6
		c += r[i];
		r[i] = c;
		c >>= 8;
 8002fd0:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8002fd4:	d1f7      	bne.n	8002fc6 <f25519_sqrt+0x4c6>
 8002fd6:	2300      	movs	r3, #0
void f25519_load(uint8_t *x, uint32_t c)
{
	int i;

	for (i = 0; i < sizeof(c); i++) {
		x[i] = c;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	921c      	str	r2, [sp, #112]	; 0x70
 8002fdc:	931d      	str	r3, [sp, #116]	; 0x74
 8002fde:	931e      	str	r3, [sp, #120]	; 0x78
 8002fe0:	931f      	str	r3, [sp, #124]	; 0x7c
 8002fe2:	9320      	str	r3, [sp, #128]	; 0x80
 8002fe4:	9321      	str	r3, [sp, #132]	; 0x84
 8002fe6:	9322      	str	r3, [sp, #136]	; 0x88
 8002fe8:	9323      	str	r3, [sp, #140]	; 0x8c
 8002fea:	22da      	movs	r2, #218	; 0xda
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
 8002fec:	5cfc      	ldrb	r4, [r7, r3]
 8002fee:	5cc1      	ldrb	r1, [r0, r3]
 8002ff0:	f504 447f 	add.w	r4, r4, #65280	; 0xff00
 8002ff4:	1a61      	subs	r1, r4, r1
 8002ff6:	440a      	add	r2, r1
		r[i] = c;
 8002ff8:	54fa      	strb	r2, [r7, r3]
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	2b1f      	cmp	r3, #31
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
 8002ffe:	ea4f 2212 	mov.w	r2, r2, lsr #8
	uint32_t c = 0;
	int i;

	/* Calculate a + 2p - b, to avoid underflow */
	c = 218;
	for (i = 0; i + 1 < F25519_SIZE; i++) {
 8003002:	d1f3      	bne.n	8002fec <f25519_sqrt+0x4ec>
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 8003004:	f89d 404f 	ldrb.w	r4, [sp, #79]	; 0x4f
 8003008:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
	r[31] = c & 127;
	c = (c >> 7) * 19;
 800300c:	463b      	mov	r3, r7
		c += 65280 + ((uint32_t)a[i]) - ((uint32_t)b[i]);
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
 800300e:	1a61      	subs	r1, r4, r1
 8003010:	4411      	add	r1, r2
	r[31] = c & 127;
	c = (c >> 7) * 19;
 8003012:	09ca      	lsrs	r2, r1, #7
 8003014:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
		r[i] = c;
		c >>= 8;
	}

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
 8003018:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800301c:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
	c = (c >> 7) * 19;
 8003020:	eb02 0244 	add.w	r2, r2, r4, lsl #1

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 8003024:	7819      	ldrb	r1, [r3, #0]
 8003026:	440a      	add	r2, r1
		r[i] = c;
 8003028:	f803 2b01 	strb.w	r2, [r3], #1

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800302c:	429e      	cmp	r6, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 800302e:	ea4f 2212 	mov.w	r2, r2, lsr #8

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003032:	d1f7      	bne.n	8003024 <f25519_sqrt+0x524>
 8003034:	2400      	movs	r4, #0
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003036:	f8dd 900c 	ldr.w	r9, [sp, #12]

	c += ((uint32_t)a[31]) - ((uint32_t)b[31]);
	r[31] = c & 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800303a:	4623      	mov	r3, r4
 800303c:	f10d 0c2f 	add.w	ip, sp, #47	; 0x2f
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003040:	2526      	movs	r5, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	eb09 0104 	add.w	r1, r9, r4
		for (j = 0; j <= i; j++)
 8003048:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800304a:	f10d 0b10 	add.w	fp, sp, #16
 800304e:	f81b a002 	ldrb.w	sl, [fp, r2]
 8003052:	f811 8901 	ldrb.w	r8, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 8003056:	3201      	adds	r2, #1
 8003058:	42a2      	cmp	r2, r4
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 800305a:	fb0a 3308 	mla	r3, sl, r8, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 800305e:	ddf4      	ble.n	800304a <f25519_sqrt+0x54a>
 8003060:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003064:	2a1f      	cmp	r2, #31
 8003066:	d00d      	beq.n	8003084 <f25519_sqrt+0x584>
 8003068:	1aa1      	subs	r1, r4, r2
 800306a:	3120      	adds	r1, #32
 800306c:	4449      	add	r1, r9
 800306e:	445a      	add	r2, fp
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 8003070:	f811 8d01 	ldrb.w	r8, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 8003074:	f812 af01 	ldrb.w	sl, [r2, #1]!
 8003078:	fb05 f808 	mul.w	r8, r5, r8

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 800307c:	4562      	cmp	r2, ip
			c += ((uint32_t)a[j]) *
 800307e:	fb0a 3308 	mla	r3, sl, r8, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 8003082:	d1f5      	bne.n	8003070 <f25519_sqrt+0x570>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 8003084:	5533      	strb	r3, [r6, r4]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 8003086:	3401      	adds	r4, #1
 8003088:	2c20      	cmp	r4, #32
 800308a:	d1da      	bne.n	8003042 <f25519_sqrt+0x542>
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800308c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 8003090:	09db      	lsrs	r3, r3, #7
 8003092:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003096:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	c = (c >> 7) * 19;
 800309a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 800309e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
	c = (c >> 7) * 19;
 80030a2:	4633      	mov	r3, r6

	for (i = 0; i < F25519_SIZE; i++) {
		c += r[i];
 80030a4:	7819      	ldrb	r1, [r3, #0]
 80030a6:	440a      	add	r2, r1
		r[i] = c;
 80030a8:	f803 2b01 	strb.w	r2, [r3], #1
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80030ac:	4298      	cmp	r0, r3
		c += r[i];
		r[i] = c;
		c >>= 8;
 80030ae:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 80030b2:	d1f7      	bne.n	80030a4 <f25519_sqrt+0x5a4>
 80030b4:	2000      	movs	r0, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	f106 081f 	add.w	r8, r6, #31
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80030bc:	f04f 0c26 	mov.w	ip, #38	; 0x26
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	1839      	adds	r1, r7, r0
		for (j = 0; j <= i; j++)
 80030c4:	2200      	movs	r2, #0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80030c6:	5cb5      	ldrb	r5, [r6, r2]
 80030c8:	f811 4901 	ldrb.w	r4, [r1], #-1

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80030cc:	3201      	adds	r2, #1
 80030ce:	4282      	cmp	r2, r0
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);
 80030d0:	fb05 3304 	mla	r3, r5, r4, r3

	for (i = 0; i < F25519_SIZE; i++) {
		int j;

		c >>= 8;
		for (j = 0; j <= i; j++)
 80030d4:	ddf7      	ble.n	80030c6 <f25519_sqrt+0x5c6>
 80030d6:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030da:	2a1f      	cmp	r2, #31
 80030dc:	d00d      	beq.n	80030fa <f25519_sqrt+0x5fa>
 80030de:	1a81      	subs	r1, r0, r2
 80030e0:	3120      	adds	r1, #32
 80030e2:	4439      	add	r1, r7
 80030e4:	4432      	add	r2, r6
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;
 80030e6:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
			c += ((uint32_t)a[j]) *
 80030ea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80030ee:	fb0c f404 	mul.w	r4, ip, r4

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030f2:	4542      	cmp	r2, r8
			c += ((uint32_t)a[j]) *
 80030f4:	fb05 3304 	mla	r3, r5, r4, r3

		c >>= 8;
		for (j = 0; j <= i; j++)
			c += ((uint32_t)a[j]) * ((uint32_t)b[i - j]);

		for (; j < F25519_SIZE; j++)
 80030f8:	d1f5      	bne.n	80030e6 <f25519_sqrt+0x5e6>
			c += ((uint32_t)a[j]) *
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
 80030fa:	9a02      	ldr	r2, [sp, #8]
 80030fc:	5413      	strb	r3, [r2, r0]
void f25519_mul__distinct(uint8_t *r, const uint8_t *a, const uint8_t *b)
{
	uint32_t c = 0;
	int i;

	for (i = 0; i < F25519_SIZE; i++) {
 80030fe:	3001      	adds	r0, #1
 8003100:	2820      	cmp	r0, #32
 8003102:	d1dd      	bne.n	80030c0 <f25519_sqrt+0x5c0>

		r[i] = c;
	}

	r[31] &= 127;
	c = (c >> 7) * 19;
 8003104:	09db      	lsrs	r3, r3, #7
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003106:	7fd1      	ldrb	r1, [r2, #31]
	c = (c >> 7) * 19;
 8003108:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800310c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
			     ((uint32_t)b[i + F25519_SIZE - j]) * 38;

		r[i] = c;
	}

	r[31] &= 127;
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003116:	77d9      	strb	r1, [r3, #31]
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003118:	9902      	ldr	r1, [sp, #8]
 800311a:	2300      	movs	r3, #0
		c += r[i];
 800311c:	5cc8      	ldrb	r0, [r1, r3]
 800311e:	4402      	add	r2, r0
		r[i] = c;
 8003120:	54ca      	strb	r2, [r1, r3]
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 8003122:	3301      	adds	r3, #1
 8003124:	2b20      	cmp	r3, #32
		c += r[i];
		r[i] = c;
		c >>= 8;
 8003126:	ea4f 2212 	mov.w	r2, r2, lsr #8
	}

	r[31] &= 127;
	c = (c >> 7) * 19;

	for (i = 0; i < F25519_SIZE; i++) {
 800312a:	d1f7      	bne.n	800311c <f25519_sqrt+0x61c>
	f25519_sub(i, i, y);

	/* r = avi */
	f25519_mul__distinct(x, v, a);
	f25519_mul__distinct(r, x, i);
}
 800312c:	b024      	add	sp, #144	; 0x90
 800312e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003132:	4770      	bx	lr

08003134 <fprime_from_bytes>:
}

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003138:	4691      	mov	r9, r2
 800313a:	b08b      	sub	sp, #44	; 0x2c
 800313c:	4604      	mov	r4, r0
 800313e:	460f      	mov	r7, r1
 8003140:	461d      	mov	r5, r3
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8003142:	221f      	movs	r2, #31
 8003144:	e003      	b.n	800314e <fprime_from_bytes+0x1a>
 8003146:	f112 32ff 	adds.w	r2, r2, #4294967295
 800314a:	f0c0 80b3 	bcc.w	80032b4 <fprime_from_bytes+0x180>
		if (p[i])
 800314e:	5cab      	ldrb	r3, [r5, r2]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f8      	beq.n	8003146 <fprime_from_bytes+0x12>
			break;

	x = p[i];
	i <<= 3;
 8003154:	00d2      	lsls	r2, r2, #3

	while (x) {
 8003156:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 8003158:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 800315c:	d1fb      	bne.n	8003156 <fprime_from_bytes+0x22>
 800315e:	3a02      	subs	r2, #2

void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
 8003160:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
		x[i] = 0;
}

static inline int min_int(int a, int b)
{
	return a < b ? a : b;
 8003164:	4552      	cmp	r2, sl
 8003166:	bfb4      	ite	lt
 8003168:	4616      	movlt	r6, r2
 800316a:	4656      	movge	r6, sl
void fprime_from_bytes(uint8_t *n,
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
 800316c:	ea4f 08e6 	mov.w	r8, r6, asr #3
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);
 8003170:	4620      	mov	r0, r4
 8003172:	2100      	movs	r1, #0
 8003174:	2220      	movs	r2, #32
 8003176:	f003 fdca 	bl	8006d0e <memset>

	for (i = 0; i < preload_bytes; i++)
 800317a:	f1b8 0f00 	cmp.w	r8, #0
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
	const int rbits = (len << 3) - preload_total;
 800317e:	ebc6 0a0a 	rsb	sl, r6, sl
		       const uint8_t *x, size_t len,
		       const uint8_t *modulus)
{
	const int preload_total = min_int(prime_msb(modulus) - 1, len << 3);
	const int preload_bytes = preload_total >> 3;
	const int preload_bits = preload_total & 7;
 8003182:	f006 0607 	and.w	r6, r6, #7
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003186:	dd42      	ble.n	800320e <fprime_from_bytes+0xda>
 8003188:	ebc8 0c09 	rsb	ip, r8, r9
 800318c:	eb07 030c 	add.w	r3, r7, ip
 8003190:	1d22      	adds	r2, r4, #4
 8003192:	1d19      	adds	r1, r3, #4
 8003194:	4293      	cmp	r3, r2
 8003196:	bf38      	it	cc
 8003198:	428c      	cmpcc	r4, r1
 800319a:	bf34      	ite	cc
 800319c:	2200      	movcc	r2, #0
 800319e:	2201      	movcs	r2, #1
 80031a0:	f1b8 0f09 	cmp.w	r8, #9
 80031a4:	bf94      	ite	ls
 80031a6:	2200      	movls	r2, #0
 80031a8:	f002 0201 	andhi.w	r2, r2, #1
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	f000 8087 	beq.w	80032c0 <fprime_from_bytes+0x18c>
 80031b2:	ea43 0204 	orr.w	r2, r3, r4
 80031b6:	0792      	lsls	r2, r2, #30
 80031b8:	f040 8082 	bne.w	80032c0 <fprime_from_bytes+0x18c>
 80031bc:	ea4f 0298 	mov.w	r2, r8, lsr #2
 80031c0:	2100      	movs	r1, #0
 80031c2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80031c6:	4608      	mov	r0, r1
 80031c8:	9501      	str	r5, [sp, #4]
		n[i] = x[len - preload_bytes + i];
 80031ca:	585d      	ldr	r5, [r3, r1]
 80031cc:	3001      	adds	r0, #1
 80031ce:	4282      	cmp	r2, r0
 80031d0:	5065      	str	r5, [r4, r1]
 80031d2:	f101 0104 	add.w	r1, r1, #4
 80031d6:	d8f8      	bhi.n	80031ca <fprime_from_bytes+0x96>
 80031d8:	45c3      	cmp	fp, r8
 80031da:	9d01      	ldr	r5, [sp, #4]
 80031dc:	d017      	beq.n	800320e <fprime_from_bytes+0xda>
 80031de:	eb07 030b 	add.w	r3, r7, fp
 80031e2:	f813 100c 	ldrb.w	r1, [r3, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031e6:	f10b 0301 	add.w	r3, fp, #1
 80031ea:	4598      	cmp	r8, r3
		n[i] = x[len - preload_bytes + i];
 80031ec:	f804 1022 	strb.w	r1, [r4, r2, lsl #2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031f0:	dd0d      	ble.n	800320e <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 80031f2:	18fa      	adds	r2, r7, r3
 80031f4:	f812 200c 	ldrb.w	r2, [r2, ip]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80031f8:	f10b 0b02 	add.w	fp, fp, #2
 80031fc:	45d8      	cmp	r8, fp
		n[i] = x[len - preload_bytes + i];
 80031fe:	54e2      	strb	r2, [r4, r3]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 8003200:	dd05      	ble.n	800320e <fprime_from_bytes+0xda>
		n[i] = x[len - preload_bytes + i];
 8003202:	eb07 030b 	add.w	r3, r7, fp
 8003206:	f813 300c 	ldrb.w	r3, [r3, ip]
 800320a:	f804 300b 	strb.w	r3, [r4, fp]

	if (preload_bits) {
 800320e:	b1be      	cbz	r6, 8003240 <fprime_from_bytes+0x10c>
 8003210:	2200      	movs	r2, #0
 8003212:	4613      	mov	r3, r2
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c |= ((uint16_t)x[i]) << n;
 8003214:	5ce1      	ldrb	r1, [r4, r3]
 8003216:	40b1      	lsls	r1, r6
 8003218:	430a      	orrs	r2, r1
 800321a:	b292      	uxth	r2, r2
		x[i] = c;
 800321c:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800321e:	3301      	adds	r3, #1
 8003220:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 8003222:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003226:	d1f5      	bne.n	8003214 <fprime_from_bytes+0xe0>
	for (i = 0; i < preload_bytes; i++)
		n[i] = x[len - preload_bytes + i];

	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
 8003228:	f109 39ff 	add.w	r9, r9, #4294967295
 800322c:	ebc8 0809 	rsb	r8, r8, r9
 8003230:	f817 2008 	ldrb.w	r2, [r7, r8]
 8003234:	f1c6 0608 	rsb	r6, r6, #8
 8003238:	4132      	asrs	r2, r6
 800323a:	7823      	ldrb	r3, [r4, #0]
 800323c:	4313      	orrs	r3, r2
 800323e:	7023      	strb	r3, [r4, #0]
	}

	for (i = rbits - 1; i >= 0; i--) {
 8003240:	f1ba 0a01 	subs.w	sl, sl, #1
 8003244:	d433      	bmi.n	80032ae <fprime_from_bytes+0x17a>
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 8003246:	ea4f 03ea 	mov.w	r3, sl, asr #3
 800324a:	5cf8      	ldrb	r0, [r7, r3]
 800324c:	f00a 0307 	and.w	r3, sl, #7
 8003250:	4118      	asrs	r0, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 8003252:	2200      	movs	r2, #0
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;
 8003254:	f000 0001 	and.w	r0, r0, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003258:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 800325a:	5ce1      	ldrb	r1, [r4, r3]
 800325c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 8003260:	54e2      	strb	r2, [r4, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003262:	3301      	adds	r3, #1
 8003264:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 8003266:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800326a:	d1f6      	bne.n	800325a <fprime_from_bytes+0x126>

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 800326c:	7823      	ldrb	r3, [r4, #0]
}

static void raw_try_sub(uint8_t *x, const uint8_t *p)
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
 800326e:	2200      	movs	r2, #0

	for (i = rbits - 1; i >= 0; i--) {
		const uint8_t bit = (x[i >> 3] >> (i & 7)) & 1;

		shift_n_bits(n, 1);
		n[0] |= bit;
 8003270:	4303      	orrs	r3, r0
 8003272:	7023      	strb	r3, [r4, #0]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003274:	4613      	mov	r3, r2
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 8003276:	5ce0      	ldrb	r0, [r4, r3]
 8003278:	5ce9      	ldrb	r1, [r5, r3]
 800327a:	1a41      	subs	r1, r0, r1
 800327c:	1a8a      	subs	r2, r1, r2
 800327e:	b292      	uxth	r2, r2
		minusp[i] = c;
 8003280:	a802      	add	r0, sp, #8
 8003282:	54c2      	strb	r2, [r0, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003284:	3301      	adds	r3, #1
 8003286:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 8003288:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800328c:	d1f3      	bne.n	8003276 <fprime_from_bytes+0x142>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800328e:	4252      	negs	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003292:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003294:	a802      	add	r0, sp, #8
 8003296:	5cc1      	ldrb	r1, [r0, r3]
 8003298:	5ce0      	ldrb	r0, [r4, r3]
 800329a:	4048      	eors	r0, r1
 800329c:	4010      	ands	r0, r2
 800329e:	4041      	eors	r1, r0
 80032a0:	54e1      	strb	r1, [r4, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80032a2:	3301      	adds	r3, #1
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d1f5      	bne.n	8003294 <fprime_from_bytes+0x160>
	if (preload_bits) {
		shift_n_bits(n, preload_bits);
		n[0] |= x[len - preload_bytes - 1] >> (8 - preload_bits);
	}

	for (i = rbits - 1; i >= 0; i--) {
 80032a8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80032ac:	d2cb      	bcs.n	8003246 <fprime_from_bytes+0x112>

		shift_n_bits(n, 1);
		n[0] |= bit;
		raw_try_sub(n, modulus);
	}
}
 80032ae:	b00b      	add	sp, #44	; 0x2c
 80032b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 80032b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
	i <<= 3;

	while (x) {
 80032b8:	b14b      	cbz	r3, 80032ce <fprime_from_bytes+0x19a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 80032ba:	f06f 0207 	mvn.w	r2, #7
 80032be:	e74a      	b.n	8003156 <fprime_from_bytes+0x22>
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032c0:	2200      	movs	r2, #0
		n[i] = x[len - preload_bytes + i];
 80032c2:	5c99      	ldrb	r1, [r3, r2]
 80032c4:	54a1      	strb	r1, [r4, r2]
	const int rbits = (len << 3) - preload_total;
	int i;

	memset(n, 0, FPRIME_SIZE);

	for (i = 0; i < preload_bytes; i++)
 80032c6:	3201      	adds	r2, #1
 80032c8:	4542      	cmp	r2, r8
 80032ca:	d1fa      	bne.n	80032c2 <fprime_from_bytes+0x18e>
 80032cc:	e79f      	b.n	800320e <fprime_from_bytes+0xda>
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 80032ce:	f06f 0209 	mvn.w	r2, #9
 80032d2:	e745      	b.n	8003160 <fprime_from_bytes+0x2c>

080032d4 <fprime_add>:
	for (i = 0; i < FPRIME_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
 80032d4:	b470      	push	{r4, r5, r6}
const uint8_t fprime_zero[FPRIME_SIZE] = {0};
const uint8_t fprime_one[FPRIME_SIZE] = {1};

static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
 80032d6:	2400      	movs	r4, #0
	for (i = 0; i < FPRIME_SIZE; i++)
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
}

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
 80032d8:	b089      	sub	sp, #36	; 0x24
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032da:	4623      	mov	r3, r4
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
 80032dc:	5cce      	ldrb	r6, [r1, r3]
 80032de:	5cc5      	ldrb	r5, [r0, r3]
 80032e0:	4435      	add	r5, r6
 80032e2:	442c      	add	r4, r5
		x[i] = c;
 80032e4:	54c4      	strb	r4, [r0, r3]
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032e6:	3301      	adds	r3, #1
 80032e8:	2b20      	cmp	r3, #32
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
		x[i] = c;
		c >>= 8;
 80032ea:	f3c4 240f 	ubfx	r4, r4, #8, #16
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80032ee:	d1f5      	bne.n	80032dc <fprime_add+0x8>
 80032f0:	2100      	movs	r1, #0
 80032f2:	460b      	mov	r3, r1
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 80032f4:	5cc5      	ldrb	r5, [r0, r3]
 80032f6:	5cd4      	ldrb	r4, [r2, r3]
 80032f8:	1b2c      	subs	r4, r5, r4
 80032fa:	1a61      	subs	r1, r4, r1
 80032fc:	b289      	uxth	r1, r1
		minusp[i] = c;
 80032fe:	f80d 1003 	strb.w	r1, [sp, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003302:	3301      	adds	r3, #1
 8003304:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 8003306:	f3c1 2100 	ubfx	r1, r1, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800330a:	d1f3      	bne.n	80032f4 <fprime_add+0x20>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 800330c:	4249      	negs	r1, r1
 800330e:	b2c9      	uxtb	r1, r1
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003310:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 8003312:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8003316:	5cc4      	ldrb	r4, [r0, r3]
 8003318:	4054      	eors	r4, r2
 800331a:	400c      	ands	r4, r1
 800331c:	4062      	eors	r2, r4
 800331e:	54c2      	strb	r2, [r0, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003320:	3301      	adds	r3, #1
 8003322:	2b20      	cmp	r3, #32
 8003324:	d1f5      	bne.n	8003312 <fprime_add+0x3e>

void fprime_add(uint8_t *r, const uint8_t *a, const uint8_t *modulus)
{
	raw_add(r, a);
	raw_try_sub(r, modulus);
}
 8003326:	b009      	add	sp, #36	; 0x24
 8003328:	bc70      	pop	{r4, r5, r6}
 800332a:	4770      	bx	lr

0800332c <fprime_mul>:
	raw_try_sub(r, modulus);
}

void fprime_mul(uint8_t *r, const uint8_t *a, const uint8_t *b,
		const uint8_t *modulus)
{
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	4688      	mov	r8, r1
 8003332:	b091      	sub	sp, #68	; 0x44
 8003334:	4692      	mov	sl, r2
	int i;

	memset(r, 0, FPRIME_SIZE);
 8003336:	2100      	movs	r1, #0
 8003338:	2220      	movs	r2, #32
	raw_try_sub(r, modulus);
}

void fprime_mul(uint8_t *r, const uint8_t *a, const uint8_t *b,
		const uint8_t *modulus)
{
 800333a:	461f      	mov	r7, r3
 800333c:	4605      	mov	r5, r0
	int i;

	memset(r, 0, FPRIME_SIZE);
 800333e:	f003 fce6 	bl	8006d0e <memset>
static int prime_msb(const uint8_t *p)
{
	int i;
	uint8_t x;

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
 8003342:	221f      	movs	r2, #31
 8003344:	e003      	b.n	800334e <fprime_mul+0x22>
 8003346:	f112 32ff 	adds.w	r2, r2, #4294967295
 800334a:	f0c0 8087 	bcc.w	800345c <fprime_mul+0x130>
		if (p[i])
 800334e:	5cbb      	ldrb	r3, [r7, r2]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f8      	beq.n	8003346 <fprime_mul+0x1a>
			break;

	x = p[i];
	i <<= 3;
 8003354:	00d2      	lsls	r2, r2, #3

	while (x) {
 8003356:	085b      	lsrs	r3, r3, #1
		x >>= 1;
		i++;
 8003358:	f102 0201 	add.w	r2, r2, #1
			break;

	x = p[i];
	i <<= 3;

	while (x) {
 800335c:	d1fb      	bne.n	8003356 <fprime_mul+0x2a>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 800335e:	f1b2 0c01 	subs.w	ip, r2, #1
 8003362:	d478      	bmi.n	8003456 <fprime_mul+0x12a>
 8003364:	ae08      	add	r6, sp, #32
		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 8003366:	ea4f 03ec 	mov.w	r3, ip, asr #3
 800336a:	f81a 9003 	ldrb.w	r9, [sl, r3]
 800336e:	f00c 0307 	and.w	r3, ip, #7
 8003372:	fa49 f903 	asr.w	r9, r9, r3
}

/* Warning: this function may be variable-time in the argument n */
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
 8003376:	2200      	movs	r2, #0
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
		const uint8_t bit = (b[i >> 3] >> (i & 7)) & 1;
 8003378:	f009 0901 	and.w	r9, r9, #1
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800337c:	4613      	mov	r3, r2
		c |= ((uint16_t)x[i]) << n;
 800337e:	5ce9      	ldrb	r1, [r5, r3]
 8003380:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
		x[i] = c;
 8003384:	54ea      	strb	r2, [r5, r3]
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003386:	3301      	adds	r3, #1
 8003388:	2b20      	cmp	r3, #32
		c |= ((uint16_t)x[i]) << n;
		x[i] = c;
		c >>= 8;
 800338a:	ea4f 2212 	mov.w	r2, r2, lsr #8
static void shift_n_bits(uint8_t *x, int n)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800338e:	d1f6      	bne.n	800337e <fprime_mul+0x52>
 8003390:	2200      	movs	r2, #0
 8003392:	4613      	mov	r3, r2
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 8003394:	5ce8      	ldrb	r0, [r5, r3]
 8003396:	5cf9      	ldrb	r1, [r7, r3]
 8003398:	1a41      	subs	r1, r0, r1
 800339a:	1a8a      	subs	r2, r1, r2
 800339c:	b292      	uxth	r2, r2
		minusp[i] = c;
 800339e:	54f2      	strb	r2, [r6, r3]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033a0:	3301      	adds	r3, #1
 80033a2:	2b20      	cmp	r3, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 80033a4:	f3c2 2200 	ubfx	r2, r2, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033a8:	d1f4      	bne.n	8003394 <fprime_mul+0x68>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 80033aa:	4252      	negs	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80033ae:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 80033b0:	5cf1      	ldrb	r1, [r6, r3]
 80033b2:	5ce8      	ldrb	r0, [r5, r3]
 80033b4:	4048      	eors	r0, r1
 80033b6:	4010      	ands	r0, r2
 80033b8:	4041      	eors	r1, r0
 80033ba:	54e9      	strb	r1, [r5, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 80033bc:	3301      	adds	r3, #1
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d1f6      	bne.n	80033b0 <fprime_mul+0x84>
		       const uint8_t *modulus);

/* Copy an element */
static inline void fprime_copy(uint8_t *x, const uint8_t *a)
{
	memcpy(x, a, FPRIME_SIZE);
 80033c2:	6828      	ldr	r0, [r5, #0]
 80033c4:	6869      	ldr	r1, [r5, #4]
 80033c6:	68aa      	ldr	r2, [r5, #8]
 80033c8:	68eb      	ldr	r3, [r5, #12]
 80033ca:	466c      	mov	r4, sp
 80033cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ce:	6928      	ldr	r0, [r5, #16]
 80033d0:	6969      	ldr	r1, [r5, #20]
 80033d2:	69aa      	ldr	r2, [r5, #24]
 80033d4:	69eb      	ldr	r3, [r5, #28]
const uint8_t fprime_zero[FPRIME_SIZE] = {0};
const uint8_t fprime_one[FPRIME_SIZE] = {1};

static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
 80033d6:	f04f 0b00 	mov.w	fp, #0
 80033da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033dc:	465c      	mov	r4, fp
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
 80033de:	f81d 3004 	ldrb.w	r3, [sp, r4]
 80033e2:	f818 2004 	ldrb.w	r2, [r8, r4]
 80033e6:	4413      	add	r3, r2
 80033e8:	445b      	add	r3, fp
		x[i] = c;
 80033ea:	f80d 3004 	strb.w	r3, [sp, r4]
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033ee:	3401      	adds	r4, #1
 80033f0:	2c20      	cmp	r4, #32
		c += ((uint16_t)x[i]) + ((uint16_t)p[i]);
		x[i] = c;
		c >>= 8;
 80033f2:	f3c3 2b0f 	ubfx	fp, r3, #8, #16
static void raw_add(uint8_t *x, const uint8_t *p)
{
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 80033f6:	d1f2      	bne.n	80033de <fprime_mul+0xb2>
 80033f8:	2300      	movs	r3, #0
 80033fa:	461c      	mov	r4, r3
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
 80033fc:	f81d 1004 	ldrb.w	r1, [sp, r4]
 8003400:	5d3a      	ldrb	r2, [r7, r4]
 8003402:	1a8a      	subs	r2, r1, r2
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	b29b      	uxth	r3, r3
		minusp[i] = c;
 8003408:	5533      	strb	r3, [r6, r4]
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 800340a:	3401      	adds	r4, #1
 800340c:	2c20      	cmp	r4, #32
		c = ((uint16_t)x[i]) - ((uint16_t)p[i]) - c;
		minusp[i] = c;
		c = (c >> 8) & 1;
 800340e:	f3c3 2300 	ubfx	r3, r3, #8, #1
{
	uint8_t minusp[FPRIME_SIZE];
	uint16_t c = 0;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++) {
 8003412:	d1f3      	bne.n	80033fc <fprime_mul+0xd0>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8003414:	425b      	negs	r3, r3
 8003416:	b2db      	uxtb	r3, r3
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003418:	2200      	movs	r2, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800341a:	5cb1      	ldrb	r1, [r6, r2]
 800341c:	f81d 0002 	ldrb.w	r0, [sp, r2]
 8003420:	4048      	eors	r0, r1
 8003422:	4018      	ands	r0, r3
 8003424:	4041      	eors	r1, r0
 8003426:	f80d 1002 	strb.w	r1, [sp, r2]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 800342a:	3201      	adds	r2, #1
 800342c:	2a20      	cmp	r2, #32
 800342e:	d1f4      	bne.n	800341a <fprime_mul+0xee>

void fprime_select(uint8_t *dst,
		   const uint8_t *zero, const uint8_t *one,
		   uint8_t condition)
{
	const uint8_t mask = -condition;
 8003430:	f1c9 0900 	rsb	r9, r9, #0
 8003434:	fa5f f989 	uxtb.w	r9, r9
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 8003438:	2300      	movs	r3, #0
		dst[i] = zero[i] ^ (mask & (one[i] ^ zero[i]));
 800343a:	5cea      	ldrb	r2, [r5, r3]
 800343c:	f81d 1003 	ldrb.w	r1, [sp, r3]
 8003440:	4051      	eors	r1, r2
 8003442:	ea09 0101 	and.w	r1, r9, r1
 8003446:	404a      	eors	r2, r1
 8003448:	54ea      	strb	r2, [r5, r3]
		   uint8_t condition)
{
	const uint8_t mask = -condition;
	int i;

	for (i = 0; i < FPRIME_SIZE; i++)
 800344a:	3301      	adds	r3, #1
 800344c:	2b20      	cmp	r3, #32
 800344e:	d1f4      	bne.n	800343a <fprime_mul+0x10e>
{
	int i;

	memset(r, 0, FPRIME_SIZE);

	for (i = prime_msb(modulus); i >= 0; i--) {
 8003450:	f11c 3cff 	adds.w	ip, ip, #4294967295
 8003454:	d287      	bcs.n	8003366 <fprime_mul+0x3a>
		fprime_copy(plusa, r);
		fprime_add(plusa, a, modulus);

		fprime_select(r, r, plusa, bit);
	}
}
 8003456:	b011      	add	sp, #68	; 0x44
 8003458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
 800345c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
	i <<= 3;

	while (x) {
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f8      	beq.n	8003456 <fprime_mul+0x12a>
	for (i = FPRIME_SIZE - 1; i >= 0; i--)
		if (p[i])
			break;

	x = p[i];
	i <<= 3;
 8003464:	f06f 0207 	mvn.w	r2, #7
 8003468:	e775      	b.n	8003356 <fprime_mul+0x2a>
 800346a:	bf00      	nop

0800346c <sha256_starts>:
    (b)[(i) + 2] = (uint8) ( (n) >>  8 );       \
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
 800346c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 8003470:	f8df c048 	ldr.w	ip, [pc, #72]	; 80034bc <sha256_starts+0x50>
void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 8003474:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80034c0 <sha256_starts+0x54>
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 8003478:	4f0a      	ldr	r7, [pc, #40]	; (80034a4 <sha256_starts+0x38>)
    ctx->state[3] = 0xA54FF53A;
 800347a:	4e0b      	ldr	r6, [pc, #44]	; (80034a8 <sha256_starts+0x3c>)
    ctx->state[4] = 0x510E527F;
 800347c:	4d0b      	ldr	r5, [pc, #44]	; (80034ac <sha256_starts+0x40>)
    ctx->state[5] = 0x9B05688C;
 800347e:	4c0c      	ldr	r4, [pc, #48]	; (80034b0 <sha256_starts+0x44>)
    ctx->state[6] = 0x1F83D9AB;
 8003480:	490c      	ldr	r1, [pc, #48]	; (80034b4 <sha256_starts+0x48>)
    ctx->state[7] = 0x5BE0CD19;
 8003482:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <sha256_starts+0x4c>)
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 8003484:	2300      	movs	r3, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
 8003486:	f8c0 8008 	str.w	r8, [r0, #8]
    ctx->state[1] = 0xBB67AE85;
    ctx->state[2] = 0x3C6EF372;
 800348a:	6107      	str	r7, [r0, #16]
    ctx->state[3] = 0xA54FF53A;
 800348c:	6146      	str	r6, [r0, #20]
    ctx->state[4] = 0x510E527F;
 800348e:	6185      	str	r5, [r0, #24]
    ctx->state[5] = 0x9B05688C;
 8003490:	61c4      	str	r4, [r0, #28]
{
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x6A09E667;
    ctx->state[1] = 0xBB67AE85;
 8003492:	f8c0 c00c 	str.w	ip, [r0, #12]
    ctx->state[2] = 0x3C6EF372;
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
 8003496:	6201      	str	r1, [r0, #32]
    ctx->state[7] = 0x5BE0CD19;
 8003498:	6242      	str	r2, [r0, #36]	; 0x24
    (b)[(i) + 3] = (uint8) ( (n)       );       \
}

void sha256_starts( sha256_context *ctx )
{
    ctx->total[0] = 0;
 800349a:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 800349c:	6043      	str	r3, [r0, #4]
    ctx->state[3] = 0xA54FF53A;
    ctx->state[4] = 0x510E527F;
    ctx->state[5] = 0x9B05688C;
    ctx->state[6] = 0x1F83D9AB;
    ctx->state[7] = 0x5BE0CD19;
}
 800349e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80034a2:	4770      	bx	lr
 80034a4:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 80034a8:	a54ff53a 	strbge	pc, [pc, #-1338]	; 8002f76 <f25519_sqrt+0x476>	; <UNPREDICTABLE>
 80034ac:	510e527f 	tstpl	lr, pc, ror r2
 80034b0:	9b05688c 	blls	815d6e8 <_etext+0x155a18>
 80034b4:	1f83d9ab 	svcne	0x0083d9ab
 80034b8:	5be0cd19 	blpl	7836924 <__Stack_Size+0x7836124>
 80034bc:	bb67ae85 	bllt	99eeed8 <_etext+0x19e7208>
 80034c0:	6a09e667 	bvs	827ce64 <_etext+0x275194>

080034c4 <sha256_process>:

void sha256_process( sha256_context *ctx, uint8 data[64] )
{
 80034c4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034c8:	b09c      	sub	sp, #112	; 0x70
 80034ca:	9019      	str	r0, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80034cc:	9a19      	ldr	r2, [sp, #100]	; 0x64

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80034ce:	6980      	ldr	r0, [r0, #24]
    F = ctx->state[5];
 80034d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
    H = ctx->state[7];
 80034d2:	9c19      	ldr	r4, [sp, #100]	; 0x64
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80034d6:	9004      	str	r0, [sp, #16]
    F = ctx->state[5];
    G = ctx->state[6];
 80034d8:	6a12      	ldr	r2, [r2, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80034da:	69db      	ldr	r3, [r3, #28]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034dc:	ea4f 15b0 	mov.w	r5, r0, ror #6
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034e0:	9819      	ldr	r0, [sp, #100]	; 0x64
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80034e2:	6a64      	ldr	r4, [r4, #36]	; 0x24
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034e4:	68b6      	ldr	r6, [r6, #8]
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80034e6:	9202      	str	r2, [sp, #8]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80034e8:	9303      	str	r3, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034ea:	68c0      	ldr	r0, [r0, #12]
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
 80034ec:	9608      	str	r6, [sp, #32]
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];
 80034ee:	9401      	str	r4, [sp, #4]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034f0:	9a04      	ldr	r2, [sp, #16]
 80034f2:	9c02      	ldr	r4, [sp, #8]
 80034f4:	9e03      	ldr	r6, [sp, #12]
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80034f6:	9007      	str	r0, [sp, #28]
    C = ctx->state[2];
 80034f8:	9819      	ldr	r0, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 80034fa:	ea85 25f2 	eor.w	r5, r5, r2, ror #11
 80034fe:	4bd0      	ldr	r3, [pc, #832]	; (8003840 <sha256_process+0x37c>)
 8003500:	ea84 0206 	eor.w	r2, r4, r6
 8003504:	9c04      	ldr	r4, [sp, #16]
 8003506:	9e01      	ldr	r6, [sp, #4]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 8003508:	6900      	ldr	r0, [r0, #16]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800350a:	784f      	ldrb	r7, [r1, #1]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800350c:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8003510:	4433      	add	r3, r6
 8003512:	4022      	ands	r2, r4
 8003514:	9e08      	ldr	r6, [sp, #32]
 8003516:	9c07      	ldr	r4, [sp, #28]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003518:	f891 a000 	ldrb.w	sl, [r1]
    d += temp1; h = temp1 + temp2;              \
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 800351c:	9006      	str	r0, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800351e:	f891 c003 	ldrb.w	ip, [r1, #3]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003522:	eb03 0805 	add.w	r8, r3, r5
 8003526:	ea44 0006 	orr.w	r0, r4, r6
 800352a:	9b02      	ldr	r3, [sp, #8]
 800352c:	9c06      	ldr	r4, [sp, #24]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800352e:	043f      	lsls	r7, r7, #16
 8003530:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003534:	ea47 670a 	orr.w	r7, r7, sl, lsl #24
 8003538:	ea47 070c 	orr.w	r7, r7, ip
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800353c:	405a      	eors	r2, r3
 800353e:	4020      	ands	r0, r4
 8003540:	9b07      	ldr	r3, [sp, #28]
 8003542:	9c08      	ldr	r4, [sp, #32]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 8003544:	ea47 2909 	orr.w	r9, r7, r9, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003548:	ea4f 06b6 	mov.w	r6, r6, ror #2
 800354c:	ea03 0504 	and.w	r5, r3, r4
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003550:	f891 a005 	ldrb.w	sl, [r1, #5]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003554:	ea86 3674 	eor.w	r6, r6, r4, ror #13
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003558:	790c      	ldrb	r4, [r1, #4]
void sha256_process( sha256_context *ctx, uint8 data[64] )
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
 800355a:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 800355e:	9f19      	ldr	r7, [sp, #100]	; 0x64
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003560:	9b08      	ldr	r3, [sp, #32]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 8003562:	697f      	ldr	r7, [r7, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003564:	4328      	orrs	r0, r5
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003566:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 800356a:	79cd      	ldrb	r5, [r1, #7]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800356c:	ea86 56b3 	eor.w	r6, r6, r3, ror #22
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003570:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 8003574:	798c      	ldrb	r4, [r1, #6]
}

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 8003576:	9705      	str	r7, [sp, #20]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003578:	4430      	add	r0, r6
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 800357a:	ea4a 0a05 	orr.w	sl, sl, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 800357e:	9e03      	ldr	r6, [sp, #12]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003580:	4442      	add	r2, r8
 8003582:	46bc      	mov	ip, r7
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003584:	9f04      	ldr	r7, [sp, #16]
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 8003586:	444a      	add	r2, r9
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003588:	ea4a 2404 	orr.w	r4, sl, r4, lsl #8
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
 800358c:	eb00 0b02 	add.w	fp, r0, r2
 8003590:	4494      	add	ip, r2
{
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
 8003592:	940d      	str	r4, [sp, #52]	; 0x34
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 8003594:	9d03      	ldr	r5, [sp, #12]
 8003596:	9c08      	ldr	r4, [sp, #32]
 8003598:	ea86 0207 	eor.w	r2, r6, r7
 800359c:	9802      	ldr	r0, [sp, #8]
 800359e:	ea0c 0202 	and.w	r2, ip, r2
 80035a2:	4ba8      	ldr	r3, [pc, #672]	; (8003844 <sha256_process+0x380>)
 80035a4:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80035a8:	ea4b 0704 	orr.w	r7, fp, r4
 80035ac:	406a      	eors	r2, r5
 80035ae:	ea0b 0504 	and.w	r5, fp, r4
 80035b2:	9c07      	ldr	r4, [sp, #28]
 80035b4:	4403      	add	r3, r0
 80035b6:	ea4f 18bc 	mov.w	r8, ip, ror #6
 80035ba:	ea4f 06bb 	mov.w	r6, fp, ror #2
 80035be:	444b      	add	r3, r9
 80035c0:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80035c4:	4027      	ands	r7, r4
 80035c6:	ea86 367b 	eor.w	r6, r6, fp, ror #13
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035ca:	7a48      	ldrb	r0, [r1, #9]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035cc:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80035d0:	ea86 56bb 	eor.w	r6, r6, fp, ror #22
 80035d4:	4413      	add	r3, r2
 80035d6:	432f      	orrs	r7, r5
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035d8:	7a0c      	ldrb	r4, [r1, #8]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035da:	4443      	add	r3, r8
 80035dc:	4437      	add	r7, r6
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035de:	7acd      	ldrb	r5, [r1, #11]
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035e0:	441f      	add	r7, r3
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035e2:	0400      	lsls	r0, r0, #16
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035e4:	970b      	str	r7, [sp, #44]	; 0x2c
 80035e6:	9e06      	ldr	r6, [sp, #24]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035e8:	9f04      	ldr	r7, [sp, #16]
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035ea:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80035ee:	7a8c      	ldrb	r4, [r1, #10]
 80035f0:	4328      	orrs	r0, r5
    F = ctx->state[5];
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
 80035f2:	441e      	add	r6, r3
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035f4:	ea8c 0907 	eor.w	r9, ip, r7
    uint32 temp1, temp2, W[64];
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
 80035f8:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 80035fc:	940e      	str	r4, [sp, #56]	; 0x38
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 80035fe:	9803      	ldr	r0, [sp, #12]
 8003600:	ea06 0909 	and.w	r9, r6, r9
 8003604:	4a90      	ldr	r2, [pc, #576]	; (8003848 <sha256_process+0x384>)
 8003606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003608:	ea89 0907 	eor.w	r9, r9, r7
 800360c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800360e:	4402      	add	r2, r0
 8003610:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003614:	ea43 080b 	orr.w	r8, r3, fp
 8003618:	ea4f 04b3 	mov.w	r4, r3, ror #2
 800361c:	443a      	add	r2, r7
 800361e:	ea03 070b 	and.w	r7, r3, fp
 8003622:	9b08      	ldr	r3, [sp, #32]
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003624:	7b48      	ldrb	r0, [r1, #13]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003626:	ea4f 15b6 	mov.w	r5, r6, ror #6
 800362a:	ea08 0803 	and.w	r8, r8, r3
 800362e:	ea84 347a 	eor.w	r4, r4, sl, ror #13
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003632:	7b0b      	ldrb	r3, [r1, #12]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003634:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
 8003638:	ea85 25f6 	eor.w	r5, r5, r6, ror #11
 800363c:	ea48 0807 	orr.w	r8, r8, r7
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003640:	0400      	lsls	r0, r0, #16
 8003642:	7bcf      	ldrb	r7, [r1, #15]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003644:	ea85 6576 	eor.w	r5, r5, r6, ror #25
 8003648:	444a      	add	r2, r9
 800364a:	44a0      	add	r8, r4
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800364c:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 8003650:	7b8c      	ldrb	r4, [r1, #14]
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003652:	442a      	add	r2, r5
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003654:	433b      	orrs	r3, r7
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 8003656:	9d07      	ldr	r5, [sp, #28]
 8003658:	4490      	add	r8, r2
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 800365a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
    G = ctx->state[6];
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
 800365e:	4415      	add	r5, r2
 8003660:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003664:	7c4f      	ldrb	r7, [r1, #17]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003666:	4879      	ldr	r0, [pc, #484]	; (800384c <sha256_process+0x388>)
    uint32 A, B, C, D, E, F, G, H;

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
 8003668:	940f      	str	r4, [sp, #60]	; 0x3c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800366a:	9a04      	ldr	r2, [sp, #16]

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800366c:	7c0b      	ldrb	r3, [r1, #16]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800366e:	4410      	add	r0, r2
 8003670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003672:	930a      	str	r3, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003676:	ea48 0402 	orr.w	r4, r8, r2
 800367a:	ea4f 02b8 	mov.w	r2, r8, ror #2

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 800367e:	f891 8013 	ldrb.w	r8, [r1, #19]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 8003682:	4403      	add	r3, r0
 8003684:	9309      	str	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 8003686:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 800368a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800368c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8003690:	ea86 0a0c 	eor.w	sl, r6, ip
 8003694:	ea03 0008 	and.w	r0, r3, r8
 8003698:	ea05 0a0a 	and.w	sl, r5, sl
 800369c:	ea82 3273 	eor.w	r2, r2, r3, ror #13
 80036a0:	9b09      	ldr	r3, [sp, #36]	; 0x24

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036a2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036a6:	ea04 040b 	and.w	r4, r4, fp
 80036aa:	ea8a 0a0c 	eor.w	sl, sl, ip
 80036ae:	449a      	add	sl, r3
 80036b0:	ea4f 19b5 	mov.w	r9, r5, ror #6
 80036b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036b6:	4320      	orrs	r0, r4

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036b8:	043f      	lsls	r7, r7, #16
 80036ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036bc:	ea89 29f5 	eor.w	r9, r9, r5, ror #11

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036c0:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 80036c4:	f891 8012 	ldrb.w	r8, [r1, #18]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036c8:	ea82 52b3 	eor.w	r2, r2, r3, ror #22

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036cc:	4327      	orrs	r7, r4
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036ce:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 80036d2:	44d1      	add	r9, sl

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036d4:	ea47 2808 	orr.w	r8, r7, r8, lsl #8
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036d8:	4410      	add	r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036da:	7d4f      	ldrb	r7, [r1, #21]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036de:	4b5c      	ldr	r3, [pc, #368]	; (8003850 <sha256_process+0x38c>)
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036e0:	4448      	add	r0, r9
 80036e2:	9009      	str	r0, [sp, #36]	; 0x24
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036e4:	9712      	str	r7, [sp, #72]	; 0x48

    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
 80036e6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036ea:	4443      	add	r3, r8
 80036ec:	ea4f 07b0 	mov.w	r7, r0, ror #2
 80036f0:	ea40 0802 	orr.w	r8, r0, r2
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036f4:	7d08      	ldrb	r0, [r1, #20]
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036f6:	9c08      	ldr	r4, [sp, #32]
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 80036f8:	9011      	str	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 80036fa:	4463      	add	r3, ip
 80036fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    H = ctx->state[7];

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
 80036fe:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003700:	930a      	str	r3, [sp, #40]	; 0x28
 8003702:	ea85 0a06 	eor.w	sl, r5, r6
 8003706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003708:	ea08 0800 	and.w	r8, r8, r0
 800370c:	ea04 0a0a 	and.w	sl, r4, sl
 8003710:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003712:	ea03 0c02 	and.w	ip, r3, r2
 8003716:	ea8a 0a06 	eor.w	sl, sl, r6
 800371a:	ea87 3773 	eor.w	r7, r7, r3, ror #13
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800371e:	9b12      	ldr	r3, [sp, #72]	; 0x48

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003720:	ea4f 19b4 	mov.w	r9, r4, ror #6
 8003724:	4482      	add	sl, r0
 8003726:	ea48 0c0c 	orr.w	ip, r8, ip
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800372a:	9811      	ldr	r0, [sp, #68]	; 0x44

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800372c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8003730:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	7dcb      	ldrb	r3, [r1, #23]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003738:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 800373c:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003740:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003744:	f891 8016 	ldrb.w	r8, [r1, #22]

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003748:	44ca      	add	sl, r9
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800374a:	431a      	orrs	r2, r3

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800374c:	44bc      	add	ip, r7
 800374e:	44d4      	add	ip, sl
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 8003750:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <sha256_process+0x390>)

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 8003756:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    GET_UINT32( W[0],  data,  0 );
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
 800375a:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    GET_UINT32( W[6],  data, 24 );
 800375e:	7e4a      	ldrb	r2, [r1, #25]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003760:	4443      	add	r3, r8
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003762:	9212      	str	r2, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 8003764:	441e      	add	r6, r3
 8003766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800376a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800376c:	ea02 0803 	and.w	r8, r2, r3
 8003770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003772:	ea4c 0907 	orr.w	r9, ip, r7
 8003776:	ea4f 0cbc 	mov.w	ip, ip, ror #2

    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
 800377a:	eb0a 000b 	add.w	r0, sl, fp
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800377e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003780:	ea84 0b05 	eor.w	fp, r4, r5
 8003784:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800378a:	7e0f      	ldrb	r7, [r1, #24]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800378c:	ea00 0b0b 	and.w	fp, r0, fp
 8003790:	ea8b 0b05 	eor.w	fp, fp, r5
 8003794:	ea09 0902 	and.w	r9, r9, r2
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 8003798:	041a      	lsls	r2, r3, #16
 800379a:	7ecb      	ldrb	r3, [r1, #27]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 800379c:	445e      	add	r6, fp
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 800379e:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
 80037a2:	f891 b01a 	ldrb.w	fp, [r1, #26]
 80037a6:	ea42 0703 	orr.w	r7, r2, r3
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037aa:	ea49 0808 	orr.w	r8, r9, r8
 80037ae:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[1],  data,  4 );
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
 80037b2:	ea47 2b0b 	orr.w	fp, r7, fp, lsl #8
 80037b6:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037ba:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 80037be:	ea4f 1ab0 	mov.w	sl, r0, ror #6
 80037c2:	ea8a 2af0 	eor.w	sl, sl, r0, ror #11
 80037c6:	44e0      	add	r8, ip
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <sha256_process+0x394>)
 80037ca:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037ce:	ea8a 6a70 	eor.w	sl, sl, r0, ror #25
 80037d2:	4456      	add	r6, sl
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037d4:	4463      	add	r3, ip
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037d6:	44b0      	add	r8, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037d8:	441d      	add	r5, r3
 80037da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037de:	f891 a01d 	ldrb.w	sl, [r1, #29]
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037e2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037e6:	ea48 0909 	orr.w	r9, r8, r9
 80037ea:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 80037ee:	ea08 0803 	and.w	r8, r8, r3
 80037f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 80037f4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, W[ 0], 0x428A2F98 );
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
 80037f8:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 80037fa:	ea80 0b04 	eor.w	fp, r0, r4
 80037fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003800:	ea8c 3c73 	eor.w	ip, ip, r3, ror #13
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003806:	7f0f      	ldrb	r7, [r1, #28]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003808:	ea02 0b0b 	and.w	fp, r2, fp
 800380c:	ea8b 0b04 	eor.w	fp, fp, r4
 8003810:	ea09 0906 	and.w	r9, r9, r6
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003814:	041e      	lsls	r6, r3, #16
 8003816:	7fcb      	ldrb	r3, [r1, #31]
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003818:	445d      	add	r5, fp
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 800381a:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 800381e:	f891 b01e 	ldrb.w	fp, [r1, #30]
 8003822:	431e      	orrs	r6, r3
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003824:	ea4f 1ab2 	mov.w	sl, r2, ror #6
 8003828:	ea49 0808 	orr.w	r8, r9, r8
 800382c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003830:	ea46 2b0b 	orr.w	fp, r6, fp, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003834:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    GET_UINT32( W[2],  data,  8 );
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
 8003838:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800383c:	e00e      	b.n	800385c <sha256_process+0x398>
 800383e:	bf00      	nop
 8003840:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 8003844:	71374491 			; <UNDEFINED> instruction: 0x71374491
 8003848:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 800384c:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8003850:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 8003854:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 8003858:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800385c:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
 8003860:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8003864:	44aa      	add	sl, r5
 8003866:	44e0      	add	r8, ip
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003868:	4de9      	ldr	r5, [pc, #932]	; (8003c10 <sha256_process+0x74c>)
 800386a:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 800386e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003870:	4465      	add	r5, ip
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003872:	44d0      	add	r8, sl
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003874:	442c      	add	r4, r5
 8003876:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( H, A, B, C, D, E, F, G, W[ 1], 0x71374491 );
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
 8003878:	4453      	add	r3, sl
 800387a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 800387e:	f891 a021 	ldrb.w	sl, [r1, #33]	; 0x21
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003882:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003884:	ea48 0909 	orr.w	r9, r8, r9
 8003888:	ea4f 0cb8 	mov.w	ip, r8, ror #2
 800388c:	ea08 0805 	and.w	r8, r8, r5
 8003890:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 8003892:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 8003896:	ea82 0b00 	eor.w	fp, r2, r0
 800389a:	ea09 0906 	and.w	r9, r9, r6
 800389e:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80038a4:	f891 7020 	ldrb.w	r7, [r1, #32]
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038a8:	ea03 0b0b 	and.w	fp, r3, fp
 80038ac:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 80038b0:	ea49 0808 	orr.w	r8, r9, r8
 80038b4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80038b8:	ea8b 0b00 	eor.w	fp, fp, r0
 80038bc:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038c0:	042e      	lsls	r6, r5, #16
 80038c2:	f891 5023 	ldrb.w	r5, [r1, #35]	; 0x23
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038c6:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80038ca:	ea8c 5cb9 	eor.w	ip, ip, r9, ror #22
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038ce:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038d2:	445c      	add	r4, fp
 80038d4:	4454      	add	r4, sl
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038d6:	4335      	orrs	r5, r6
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038d8:	44e0      	add	r8, ip
 80038da:	9e09      	ldr	r6, [sp, #36]	; 0x24
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038dc:	f891 b022 	ldrb.w	fp, [r1, #34]	; 0x22
    P( G, H, A, B, C, D, E, F, W[ 2], 0xB5C0FBCF );
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
 80038e0:	44a0      	add	r8, r4
 80038e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80038e6:	4426      	add	r6, r4
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038e8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80038ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 80038ee:	f891 a025 	ldrb.w	sl, [r1, #37]	; 0x25
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 80038f2:	4fc8      	ldr	r7, [pc, #800]	; (8003c14 <sha256_process+0x750>)
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038f4:	ea45 2b0b 	orr.w	fp, r5, fp, lsl #8
    GET_UINT32( W[9],  data, 36 );
 80038f8:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
    GET_UINT32( W[3],  data, 12 );
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
 80038fc:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003900:	ea83 0902 	eor.w	r9, r3, r2
 8003904:	445f      	add	r7, fp
 8003906:	ea4f 0abc 	mov.w	sl, ip, ror #2
 800390a:	ea4c 0b04 	orr.w	fp, ip, r4
 800390e:	ea0c 0c04 	and.w	ip, ip, r4
 8003912:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003914:	ea06 0909 	and.w	r9, r6, r9
 8003918:	ea89 0902 	eor.w	r9, r9, r2
 800391c:	4438      	add	r0, r7
 800391e:	ea8a 3a74 	eor.w	sl, sl, r4, ror #13
 8003922:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003924:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8003926:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800392a:	ea4f 18b6 	mov.w	r8, r6, ror #6
 800392e:	4448      	add	r0, r9
 8003930:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003934:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 8003938:	ea0b 0b07 	and.w	fp, fp, r7
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800393c:	0427      	lsls	r7, r4, #16
 800393e:	f891 4027 	ldrb.w	r4, [r1, #39]	; 0x27
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003942:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 8003946:	ea8a 5ab9 	eor.w	sl, sl, r9, ror #22
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800394a:	ea47 6505 	orr.w	r5, r7, r5, lsl #24
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800394e:	ea4b 0b0c 	orr.w	fp, fp, ip
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003952:	f891 7026 	ldrb.w	r7, [r1, #38]	; 0x26
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003956:	4440      	add	r0, r8
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003958:	432c      	orrs	r4, r5
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800395a:	44d3      	add	fp, sl
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800395c:	4dae      	ldr	r5, [pc, #696]	; (8003c18 <sha256_process+0x754>)
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800395e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 8003962:	ea44 2707 	orr.w	r7, r4, r7, lsl #8
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 8003966:	4483      	add	fp, r0
 8003968:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800396c:	443d      	add	r5, r7
    P( F, G, H, A, B, C, D, E, W[ 3], 0xE9B5DBA5 );
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
 800396e:	4481      	add	r9, r0
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003970:	442a      	add	r2, r5
 8003972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003974:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003976:	f891 a029 	ldrb.w	sl, [r1, #41]	; 0x29
    GET_UINT32( W[4],  data, 16 );
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
 800397a:	9714      	str	r7, [sp, #80]	; 0x50
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800397c:	ea4b 0b00 	orr.w	fp, fp, r0
 8003980:	ea05 0700 	and.w	r7, r5, r0
 8003984:	980c      	ldr	r0, [sp, #48]	; 0x30
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003986:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 800398a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800398c:	ea86 0803 	eor.w	r8, r6, r3
 8003990:	ea0b 0b00 	and.w	fp, fp, r0
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003994:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 8003996:	ea09 0808 	and.w	r8, r9, r8
 800399a:	ea4f 1cb9 	mov.w	ip, r9, ror #6
 800399e:	ea4f 0ab4 	mov.w	sl, r4, ror #2
 80039a2:	ea4b 0b07 	orr.w	fp, fp, r7
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039a6:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80039ac:	ea88 0803 	eor.w	r8, r8, r3
 80039b0:	ea8c 2cf9 	eor.w	ip, ip, r9, ror #11
 80039b4:	ea8a 3a75 	eor.w	sl, sl, r5, ror #13
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039b8:	0405      	lsls	r5, r0, #16
 80039ba:	f891 002b 	ldrb.w	r0, [r1, #43]	; 0x2b
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039be:	ea8c 6c79 	eor.w	ip, ip, r9, ror #25
 80039c2:	ea8a 5ab7 	eor.w	sl, sl, r7, ror #22
 80039c6:	4442      	add	r2, r8
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039c8:	ea45 6404 	orr.w	r4, r5, r4, lsl #24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039cc:	4462      	add	r2, ip
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039ce:	f891 802a 	ldrb.w	r8, [r1, #42]	; 0x2a
 80039d2:	4304      	orrs	r4, r0
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039d4:	44d3      	add	fp, sl
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039d6:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039d8:	4493      	add	fp, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039da:	4d90      	ldr	r5, [pc, #576]	; (8003c1c <sha256_process+0x758>)
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 80039de:	ea44 2808 	orr.w	r8, r4, r8, lsl #8
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039e2:	ea4b 0c00 	orr.w	ip, fp, r0
 80039e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039e8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039ec:	4445      	add	r5, r8
    P( E, F, G, H, A, B, C, D, W[ 4], 0x3956C25B );
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
 80039ee:	4417      	add	r7, r2
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039f0:	ea89 0a06 	eor.w	sl, r9, r6
 80039f4:	ea4f 04bb 	mov.w	r4, fp, ror #2
 80039f8:	442b      	add	r3, r5
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 80039fa:	f891 b02c 	ldrb.w	fp, [r1, #44]	; 0x2c
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 80039fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a00:	ea0c 0c00 	and.w	ip, ip, r0
 8003a04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003a06:	ea07 0a0a 	and.w	sl, r7, sl
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a0a:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
 8003a0e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a12:	ea05 0b00 	and.w	fp, r5, r0
 8003a16:	ea8a 0a06 	eor.w	sl, sl, r6
    GET_UINT32( W[5],  data, 20 );
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
 8003a1a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a1e:	4453      	add	r3, sl
 8003a20:	ea4f 18b7 	mov.w	r8, r7, ror #6
 8003a24:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003a28:	ea4c 0c0b 	orr.w	ip, ip, fp
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a2c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a30:	ea88 28f7 	eor.w	r8, r8, r7, ror #11
 8003a34:	ea84 3475 	eor.w	r4, r4, r5, ror #13
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a38:	0412      	lsls	r2, r2, #16
 8003a3a:	f891 502f 	ldrb.w	r5, [r1, #47]	; 0x2f
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a3e:	ea88 6877 	eor.w	r8, r8, r7, ror #25
 8003a42:	ea84 54ba 	eor.w	r4, r4, sl, ror #22
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a46:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a4a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a4e:	f891 b02e 	ldrb.w	fp, [r1, #46]	; 0x2e
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a52:	4443      	add	r3, r8
 8003a54:	44a4      	add	ip, r4
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a56:	432a      	orrs	r2, r5
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a58:	4c71      	ldr	r4, [pc, #452]	; (8003c20 <sha256_process+0x75c>)
    P( D, E, F, G, H, A, B, C, W[ 5], 0x59F111F1 );
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
 8003a5a:	eb0c 0803 	add.w	r8, ip, r3
 8003a5e:	449a      	add	sl, r3
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a60:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a64:	ea87 0c09 	eor.w	ip, r7, r9
 8003a68:	445c      	add	r4, fp
 8003a6a:	ea0a 0c0c 	and.w	ip, sl, ip
    GET_UINT32( W[6],  data, 24 );
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
 8003a6e:	f8cd b058 	str.w	fp, [sp, #88]	; 0x58
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a72:	ea8c 0c09 	eor.w	ip, ip, r9
 8003a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a78:	4426      	add	r6, r4
 8003a7a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a7e:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a82:	4466      	add	r6, ip
 8003a84:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8003a88:	ea48 0002 	orr.w	r0, r8, r2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003a8c:	940c      	str	r4, [sp, #48]	; 0x30
 8003a8e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003a92:	ea00 000b 	and.w	r0, r0, fp
 8003a96:	ea08 0b0c 	and.w	fp, r8, ip
 8003a9a:	ea4f 15ba 	mov.w	r5, sl, ror #6
 8003a9e:	ea4f 02b8 	mov.w	r2, r8, ror #2
 8003aa2:	ea40 000b 	orr.w	r0, r0, fp
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003aa6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8003aaa:	f891 4033 	ldrb.w	r4, [r1, #51]	; 0x33
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003aae:	ea85 25fa 	eor.w	r5, r5, sl, ror #11
 8003ab2:	ea82 3278 	eor.w	r2, r2, r8, ror #13
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003ab6:	041b      	lsls	r3, r3, #16
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ab8:	ea85 657a 	eor.w	r5, r5, sl, ror #25
 8003abc:	ea82 52b8 	eor.w	r2, r2, r8, ror #22
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003ac0:	ea43 630b 	orr.w	r3, r3, fp, lsl #24
 8003ac4:	f891 b032 	ldrb.w	fp, [r1, #50]	; 0x32
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ac8:	442e      	add	r6, r5
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003aca:	4323      	orrs	r3, r4
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003acc:	4410      	add	r0, r2
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ace:	4a55      	ldr	r2, [pc, #340]	; (8003c24 <sha256_process+0x760>)
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003ad2:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003ad6:	4430      	add	r0, r6
 8003ad8:	9009      	str	r0, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ada:	445a      	add	r2, fp
    P( C, D, E, F, G, H, A, B, W[ 6], 0x923F82A4 );
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
 8003adc:	4434      	add	r4, r6
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003ade:	4491      	add	r9, r2
 8003ae0:	ea8a 0607 	eor.w	r6, sl, r7
 8003ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ae6:	4026      	ands	r6, r4
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003ae8:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003aec:	407e      	eors	r6, r7
 8003aee:	ea4f 0cb2 	mov.w	ip, r2, ror #2
    GET_UINT32( W[7],  data, 28 );
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
 8003af2:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003af6:	ea8c 3c72 	eor.w	ip, ip, r2, ror #13
 8003afa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003afe:	f891 2034 	ldrb.w	r2, [r1, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b02:	44b1      	add	r9, r6
 8003b04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003b06:	ea40 0008 	orr.w	r0, r0, r8
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b0a:	041b      	lsls	r3, r3, #16
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b0c:	ea00 000b 	and.w	r0, r0, fp
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003b14:	f891 b037 	ldrb.w	fp, [r1, #55]	; 0x37
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b18:	ea06 0208 	and.w	r2, r6, r8
 8003b1c:	4310      	orrs	r0, r2
 8003b1e:	ea4f 15b4 	mov.w	r5, r4, ror #6
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b22:	f891 2036 	ldrb.w	r2, [r1, #54]	; 0x36
 8003b26:	ea43 030b 	orr.w	r3, r3, fp
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b2a:	ea85 25f4 	eor.w	r5, r5, r4, ror #11
 8003b2e:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
 8003b32:	ea85 6574 	eor.w	r5, r5, r4, ror #25
 8003b36:	4484      	add	ip, r0
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b38:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b3e:	44a9      	add	r9, r5
    GET_UINT32( W[8],  data, 32 );
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
 8003b40:	9218      	str	r2, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, W[ 7], 0xAB1C5ED5 );
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
 8003b42:	eb0c 0b09 	add.w	fp, ip, r9
 8003b46:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b48:	4e37      	ldr	r6, [pc, #220]	; (8003c28 <sha256_process+0x764>)
 8003b4a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8003b4e:	ea84 020a 	eor.w	r2, r4, sl
 8003b52:	444e      	add	r6, r9
 8003b54:	4002      	ands	r2, r0
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b56:	f891 5039 	ldrb.w	r5, [r1, #57]	; 0x39
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b5a:	ea82 020a 	eor.w	r2, r2, sl
 8003b5e:	443e      	add	r6, r7
 8003b60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003b62:	4416      	add	r6, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b64:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b68:	ea4b 0307 	orr.w	r3, fp, r7
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b6c:	042d      	lsls	r5, r5, #16
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b6e:	ea03 0308 	and.w	r3, r3, r8
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b72:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b76:	ea0b 0207 	and.w	r2, fp, r7
 8003b7a:	4313      	orrs	r3, r2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b7c:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8003b80:	f891 703a 	ldrb.w	r7, [r1, #58]	; 0x3a
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b84:	ea4f 1cb0 	mov.w	ip, r0, ror #6
 8003b88:	ea4f 09bb 	mov.w	r9, fp, ror #2
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b8c:	4315      	orrs	r5, r2
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003b8e:	ea8c 2cf0 	eor.w	ip, ip, r0, ror #11
 8003b92:	ea89 397b 	eor.w	r9, r9, fp, ror #13
 8003b96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b98:	ea8c 6c70 	eor.w	ip, ip, r0, ror #25
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003b9c:	ea45 2707 	orr.w	r7, r5, r7, lsl #8
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ba0:	ea89 59bb 	eor.w	r9, r9, fp, ror #22
    GET_UINT32( W[9],  data, 36 );
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
 8003ba4:	970b      	str	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003ba6:	4466      	add	r6, ip
 8003ba8:	4499      	add	r9, r3
 8003baa:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bac:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <sha256_process+0x768>)
    P( A, B, C, D, E, F, G, H, W[ 8], 0xD807AA98 );
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
 8003bae:	444e      	add	r6, r9
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bb0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8003bb4:	ea80 0704 	eor.w	r7, r0, r4
 8003bb8:	444b      	add	r3, r9
 8003bba:	4017      	ands	r7, r2
 8003bbc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8003bc0:	4067      	eors	r7, r4
 8003bc2:	449a      	add	sl, r3
 8003bc4:	44ba      	add	sl, r7
 8003bc6:	ea46 070b 	orr.w	r7, r6, fp
 8003bca:	ea06 030b 	and.w	r3, r6, fp
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bce:	f891 503d 	ldrb.w	r5, [r1, #61]	; 0x3d
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bd2:	ea07 070c 	and.w	r7, r7, ip
 8003bd6:	431f      	orrs	r7, r3
 8003bd8:	ea4f 0cb6 	mov.w	ip, r6, ror #2
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bdc:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003be0:	ea8c 3c76 	eor.w	ip, ip, r6, ror #13
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003be4:	042d      	lsls	r5, r5, #16
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003be6:	ea8c 5cb6 	eor.w	ip, ip, r6, ror #22
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bea:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8003bee:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bf2:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8003bf6:	4467      	add	r7, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003bf8:	f891 c03e 	ldrb.w	ip, [r1, #62]	; 0x3e
 8003bfc:	431d      	orrs	r5, r3
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003bfe:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c02:	490b      	ldr	r1, [pc, #44]	; (8003c30 <sha256_process+0x76c>)
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003c04:	ea45 2c0c 	orr.w	ip, r5, ip, lsl #8
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003c08:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8003c0c:	e012      	b.n	8003c34 <sha256_process+0x770>
 8003c0e:	bf00      	nop
 8003c10:	ab1c5ed5 	blge	871b76c <_etext+0x713a9c>
 8003c14:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8003c18:	12835b01 	addne	r5, r3, #1024	; 0x400
 8003c1c:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8003c20:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8003c24:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8003c28:	80deb1fe 	ldrshhi	fp, [lr], #30
 8003c2c:	9bdc06a7 	blls	77056d0 <__Stack_Size+0x7704ed0>
 8003c30:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8003c34:	44ca      	add	sl, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c36:	4461      	add	r1, ip
    GET_UINT32( W[10], data, 40 );
    GET_UINT32( W[11], data, 44 );
    GET_UINT32( W[12], data, 48 );
    GET_UINT32( W[13], data, 52 );
    GET_UINT32( W[14], data, 56 );
    GET_UINT32( W[15], data, 60 );
 8003c38:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, W[ 9], 0x12835B01 );
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
 8003c3c:	eb0a 0308 	add.w	r3, sl, r8
 8003c40:	4457      	add	r7, sl
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c42:	440c      	add	r4, r1
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c44:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8003c48:	991b      	ldr	r1, [sp, #108]	; 0x6c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c4a:	ea82 0900 	eor.w	r9, r2, r0
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c4e:	448a      	add	sl, r1
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c50:	ea03 0909 	and.w	r9, r3, r9
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c56:	ea89 0900 	eor.w	r9, r9, r0
 8003c5a:	ea4f 1cb3 	mov.w	ip, r3, ror #6
 8003c5e:	444c      	add	r4, r9
 8003c60:	ea8c 2cf3 	eor.w	ip, ip, r3, ror #11
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c64:	ea4f 4971 	mov.w	r9, r1, ror #17
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c68:	ea47 0506 	orr.w	r5, r7, r6
 8003c6c:	ea4f 08b7 	mov.w	r8, r7, ror #2
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c70:	ea89 49f1 	eor.w	r9, r9, r1, ror #19
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c74:	ea8c 6c73 	eor.w	ip, ip, r3, ror #25
 8003c78:	44a4      	add	ip, r4
 8003c7a:	ea05 050b 	and.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c7e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c80:	ea88 3877 	eor.w	r8, r8, r7, ror #13
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c84:	ea89 2991 	eor.w	r9, r9, r1, lsr #10
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003c88:	ea07 0106 	and.w	r1, r7, r6
 8003c8c:	ea88 58b7 	eor.w	r8, r8, r7, ror #22
 8003c90:	430d      	orrs	r5, r1
 8003c92:	4445      	add	r5, r8
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003c94:	ea4f 18f4 	mov.w	r8, r4, ror #7
 8003c98:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
 8003c9c:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003ca0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003ca2:	44d1      	add	r9, sl
 8003ca4:	49eb      	ldr	r1, [pc, #940]	; (8004054 <sha256_process+0xb90>)
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003ca6:	4464      	add	r4, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003ca8:	44c8      	add	r8, r9
    P( G, H, A, B, C, D, E, F, W[10], 0x243185BE );
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
 8003caa:	4465      	add	r5, ip
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cac:	4441      	add	r1, r8
 8003cae:	ea83 0c02 	eor.w	ip, r3, r2
 8003cb2:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cb6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cba:	ea04 0c0c 	and.w	ip, r4, ip
 8003cbe:	4408      	add	r0, r1
 8003cc0:	ea89 21f4 	eor.w	r1, r9, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cc4:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cc8:	ea8c 0c02 	eor.w	ip, ip, r2
 8003ccc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cd0:	44d1      	add	r9, sl
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cd2:	ea45 0807 	orr.w	r8, r5, r7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cd6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cda:	ea81 6174 	eor.w	r1, r1, r4, ror #25
 8003cde:	4460      	add	r0, ip
 8003ce0:	4408      	add	r0, r1
 8003ce2:	ea08 0806 	and.w	r8, r8, r6
 8003ce6:	ea05 0107 	and.w	r1, r5, r7
 8003cea:	ea4f 0cb5 	mov.w	ip, r5, ror #2
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cee:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cf2:	ea8c 3c75 	eor.w	ip, ip, r5, ror #13
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cf6:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003cfa:	ea48 0801 	orr.w	r8, r8, r1
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003cfe:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d00:	ea8c 5cb5 	eor.w	ip, ip, r5, ror #22
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d04:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 8003d08:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d0c:	44e0      	add	r8, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d0e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003d12:	ea4f 1cf1 	mov.w	ip, r1, ror #7
 8003d16:	ea8c 4cb1 	eor.w	ip, ip, r1, ror #18
 8003d1a:	44d1      	add	r9, sl
 8003d1c:	ea8c 0cd1 	eor.w	ip, ip, r1, lsr #3
 8003d20:	49cd      	ldr	r1, [pc, #820]	; (8004058 <sha256_process+0xb94>)
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d22:	4483      	add	fp, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d24:	44cc      	add	ip, r9
 8003d26:	ea84 0903 	eor.w	r9, r4, r3
    P( F, G, H, A, B, C, D, E, W[11], 0x550C7DC3 );
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
 8003d2a:	4480      	add	r8, r0
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d2c:	4461      	add	r1, ip
 8003d2e:	ea4f 10bb 	mov.w	r0, fp, ror #6
 8003d32:	ea0b 0909 	and.w	r9, fp, r9
 8003d36:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003d3a:	ea89 0903 	eor.w	r9, r9, r3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d3e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d42:	440a      	add	r2, r1
 8003d44:	ea80 21fb 	eor.w	r1, r0, fp, ror #11
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d48:	980e      	ldr	r0, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d4a:	ea48 0a05 	orr.w	sl, r8, r5
 8003d4e:	ea81 617b 	eor.w	r1, r1, fp, ror #25
 8003d52:	444a      	add	r2, r9
 8003d54:	ea4f 09b8 	mov.w	r9, r8, ror #2
 8003d58:	440a      	add	r2, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d5a:	4484      	add	ip, r0
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d5c:	ea08 0105 	and.w	r1, r8, r5
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d60:	980f      	ldr	r0, [sp, #60]	; 0x3c
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d62:	ea0a 0a07 	and.w	sl, sl, r7
 8003d66:	ea89 3978 	eor.w	r9, r9, r8, ror #13
 8003d6a:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
 8003d6e:	ea4a 0a01 	orr.w	sl, sl, r1
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d72:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d76:	44ca      	add	sl, r9
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d78:	ea4f 1cf0 	mov.w	ip, r0, ror #7
 8003d7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003d80:	ea8c 4cb0 	eor.w	ip, ip, r0, ror #18
 8003d84:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8003d88:	ea4f 4179 	mov.w	r1, r9, ror #17
 8003d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d8e:	ea81 41f9 	eor.w	r1, r1, r9, ror #19
 8003d92:	4484      	add	ip, r0
 8003d94:	ea81 2199 	eor.w	r1, r1, r9, lsr #10
 8003d98:	48b0      	ldr	r0, [pc, #704]	; (800405c <sha256_process+0xb98>)
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d9a:	4416      	add	r6, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003d9c:	4461      	add	r1, ip
    P( E, F, G, H, A, B, C, D, W[12], 0x72BE5D74 );
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
 8003d9e:	4492      	add	sl, r2
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003da0:	4408      	add	r0, r1
 8003da2:	ea8b 0204 	eor.w	r2, fp, r4
 8003da6:	ea4f 1cb6 	mov.w	ip, r6, ror #6
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003daa:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dae:	4032      	ands	r2, r6
 8003db0:	4403      	add	r3, r0
 8003db2:	ea8c 20f6 	eor.w	r0, ip, r6, ror #11
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003db6:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dba:	4062      	eors	r2, r4
 8003dbc:	910d      	str	r1, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dbe:	44e1      	add	r9, ip
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dc0:	ea4a 0108 	orr.w	r1, sl, r8
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dc4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dc8:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8003dcc:	4413      	add	r3, r2
 8003dce:	4403      	add	r3, r0
 8003dd0:	4029      	ands	r1, r5
 8003dd2:	ea0a 0008 	and.w	r0, sl, r8
 8003dd6:	ea4f 02ba 	mov.w	r2, sl, ror #2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dde:	ea82 327a 	eor.w	r2, r2, sl, ror #13
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003de2:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003de6:	4301      	orrs	r1, r0
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003de8:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003dea:	ea82 52ba 	eor.w	r2, r2, sl, ror #22
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003dee:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
 8003df2:	ea89 09dc 	eor.w	r9, r9, ip, lsr #3
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003df6:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003df8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8003dfc:	ea4f 4270 	mov.w	r2, r0, ror #17
 8003e00:	ea82 42f0 	eor.w	r2, r2, r0, ror #19
 8003e04:	44cc      	add	ip, r9
 8003e06:	ea82 2290 	eor.w	r2, r2, r0, lsr #10
 8003e0a:	4895      	ldr	r0, [pc, #596]	; (8004060 <sha256_process+0xb9c>)
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003e0c:	441f      	add	r7, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e0e:	4462      	add	r2, ip
 8003e10:	ea86 090b 	eor.w	r9, r6, fp
 8003e14:	4410      	add	r0, r2
 8003e16:	ea07 0909 	and.w	r9, r7, r9
 8003e1a:	ea4f 1cb7 	mov.w	ip, r7, ror #6
    P( D, E, F, G, H, A, B, C, W[13], 0x80DEB1FE );
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
 8003e1e:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e20:	920e      	str	r2, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e24:	ea89 090b 	eor.w	r9, r9, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e28:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e2a:	4420      	add	r0, r4
 8003e2c:	ea8c 2cf7 	eor.w	ip, ip, r7, ror #11
 8003e30:	ea41 040a 	orr.w	r4, r1, sl
 8003e34:	ea8c 6c77 	eor.w	ip, ip, r7, ror #25
 8003e38:	4448      	add	r0, r9
 8003e3a:	ea4f 09b1 	mov.w	r9, r1, ror #2
 8003e3e:	4460      	add	r0, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e40:	441a      	add	r2, r3
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e42:	ea01 0c0a 	and.w	ip, r1, sl
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e48:	ea04 0408 	and.w	r4, r4, r8
 8003e4c:	ea89 3971 	eor.w	r9, r9, r1, ror #13
 8003e50:	ea89 59b1 	eor.w	r9, r9, r1, ror #22
 8003e54:	ea44 040c 	orr.w	r4, r4, ip
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e58:	920f      	str	r2, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e5a:	444c      	add	r4, r9
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e5c:	ea4f 12f3 	mov.w	r2, r3, ror #7
 8003e60:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8003e64:	ea82 42b3 	eor.w	r2, r2, r3, ror #18
 8003e68:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
 8003e6c:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003e70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e72:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003e76:	4413      	add	r3, r2
 8003e78:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003e7c:	4a79      	ldr	r2, [pc, #484]	; (8004064 <sha256_process+0xba0>)
 8003e7e:	449c      	add	ip, r3
 8003e80:	4462      	add	r2, ip
 8003e82:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e86:	4405      	add	r5, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e88:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e8c:	ea87 0306 	eor.w	r3, r7, r6
 8003e90:	4493      	add	fp, r2
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e94:	402b      	ands	r3, r5
 8003e96:	ea4f 1cb5 	mov.w	ip, r5, ror #6
    P( C, D, E, F, G, H, A, B, W[14], 0x9BDC06A7 );
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
 8003e9a:	4404      	add	r4, r0
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003e9c:	4073      	eors	r3, r6
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003e9e:	444a      	add	r2, r9
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ea0:	ea8c 2cf5 	eor.w	ip, ip, r5, ror #11
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ea4:	9210      	str	r2, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ea6:	ea44 0001 	orr.w	r0, r4, r1
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003eaa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003eac:	449b      	add	fp, r3
 8003eae:	ea8c 6c75 	eor.w	ip, ip, r5, ror #25
 8003eb2:	44dc      	add	ip, fp
 8003eb4:	ea00 000a 	and.w	r0, r0, sl
 8003eb8:	ea04 0b01 	and.w	fp, r4, r1
 8003ebc:	ea4f 09b4 	mov.w	r9, r4, ror #2
 8003ec0:	ea89 3974 	eor.w	r9, r9, r4, ror #13
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ec4:	ea4f 13f2 	mov.w	r3, r2, ror #7
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ec8:	ea40 000b 	orr.w	r0, r0, fp
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ecc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ed0:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ed4:	ea83 43b2 	eor.w	r3, r3, r2, ror #18
 8003ed8:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003edc:	4448      	add	r0, r9
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ee0:	ea4f 497b 	mov.w	r9, fp, ror #17
 8003ee4:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8003ee8:	441a      	add	r2, r3
 8003eea:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8003eee:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <sha256_process+0xba4>)
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ef0:	44e0      	add	r8, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ef2:	4491      	add	r9, r2
    P( B, C, D, E, F, G, H, A, W[15], 0xC19BF174 );
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
 8003ef4:	4460      	add	r0, ip
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003ef6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003efa:	ea85 0c07 	eor.w	ip, r5, r7
 8003efe:	444b      	add	r3, r9
 8003f00:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f04:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f08:	ea08 0c0c 	and.w	ip, r8, ip
 8003f0c:	441e      	add	r6, r3
 8003f0e:	ea89 23f8 	eor.w	r3, r9, r8, ror #11
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f12:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f16:	ea8c 0c07 	eor.w	ip, ip, r7
 8003f1a:	ea40 0204 	orr.w	r2, r0, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f1e:	44d9      	add	r9, fp
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f20:	ea83 6378 	eor.w	r3, r3, r8, ror #25
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f24:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f28:	4466      	add	r6, ip
 8003f2a:	441e      	add	r6, r3
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	ea00 0304 	and.w	r3, r0, r4
 8003f32:	ea4f 0cb0 	mov.w	ip, r0, ror #2
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f36:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f3a:	ea8c 3c70 	eor.w	ip, ip, r0, ror #13
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f3e:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f42:	431a      	orrs	r2, r3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f46:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f4a:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
 8003f4e:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f52:	4462      	add	r2, ip
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f54:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8003f58:	ea4f 4c73 	mov.w	ip, r3, ror #17
 8003f5c:	ea8c 4cf3 	eor.w	ip, ip, r3, ror #19
 8003f60:	44cb      	add	fp, r9
 8003f62:	ea8c 2c93 	eor.w	ip, ip, r3, lsr #10
 8003f66:	44dc      	add	ip, fp
 8003f68:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 8003f6c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8003f70:	4b3e      	ldr	r3, [pc, #248]	; (800406c <sha256_process+0xba8>)
    P( A, B, C, D, E, F, G, H, R(16), 0xE49B69C1 );
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
 8003f72:	4432      	add	r2, r6
 8003f74:	44b2      	add	sl, r6
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f76:	ea88 0c05 	eor.w	ip, r8, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f7a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f7c:	444b      	add	r3, r9
 8003f7e:	ea0a 0c0c 	and.w	ip, sl, ip
 8003f82:	ea8c 0c05 	eor.w	ip, ip, r5
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f86:	ea4f 1bf6 	mov.w	fp, r6, ror #7
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f8a:	441f      	add	r7, r3
 8003f8c:	ea4f 19ba 	mov.w	r9, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f90:	ea8b 4bb6 	eor.w	fp, fp, r6, ror #18
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f94:	ea89 29fa 	eor.w	r9, r9, sl, ror #11
 8003f98:	4467      	add	r7, ip
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003f9a:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003f9e:	ea42 0300 	orr.w	r3, r2, r0
 8003fa2:	ea89 697a 	eor.w	r9, r9, sl, ror #25
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fa6:	ea8b 0bd6 	eor.w	fp, fp, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003faa:	ea4f 06b2 	mov.w	r6, r2, ror #2
 8003fae:	444f      	add	r7, r9
 8003fb0:	4023      	ands	r3, r4
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fb2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8003fb6:	44e3      	add	fp, ip
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003fb8:	ea86 3672 	eor.w	r6, r6, r2, ror #13
 8003fbc:	ea02 0c00 	and.w	ip, r2, r0
 8003fc0:	ea86 56b2 	eor.w	r6, r6, r2, ror #22
 8003fc4:	ea43 030c 	orr.w	r3, r3, ip
 8003fc8:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fca:	ea4f 4c79 	mov.w	ip, r9, ror #17
 8003fce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003fd0:	ea8c 4cf9 	eor.w	ip, ip, r9, ror #19
 8003fd4:	44b3      	add	fp, r6
 8003fd6:	ea8c 2c99 	eor.w	ip, ip, r9, lsr #10
 8003fda:	4e25      	ldr	r6, [pc, #148]	; (8004070 <sha256_process+0xbac>)
    P( H, A, B, C, D, E, F, G, R(17), 0xEFBE4786 );
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
 8003fdc:	443b      	add	r3, r7
 8003fde:	4439      	add	r1, r7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fe0:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003fe2:	9f14      	ldr	r7, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003fe4:	ea8a 0908 	eor.w	r9, sl, r8
 8003fe8:	4466      	add	r6, ip
 8003fea:	ea01 0909 	and.w	r9, r1, r9
 8003fee:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003ff2:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8003ff4:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8003ff8:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8003ffc:	ea89 0908 	eor.w	r9, r9, r8
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004000:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8004004:	44a9      	add	r9, r5
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004006:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004008:	ea8b 0bdc 	eor.w	fp, fp, ip, lsr #3
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 800400c:	ea43 0c02 	orr.w	ip, r3, r2
 8004010:	ea03 0602 	and.w	r6, r3, r2
 8004014:	ea4f 17b1 	mov.w	r7, r1, ror #6
 8004018:	ea0c 0c00 	and.w	ip, ip, r0
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800401c:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 800401e:	ea4f 0bb3 	mov.w	fp, r3, ror #2
 8004022:	ea87 27f1 	eor.w	r7, r7, r1, ror #11
 8004026:	ea8b 3b73 	eor.w	fp, fp, r3, ror #13
 800402a:	ea4c 0c06 	orr.w	ip, ip, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800402e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 8004030:	ea87 6771 	eor.w	r7, r7, r1, ror #25
 8004034:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 8004038:	44b9      	add	r9, r7
 800403a:	44dc      	add	ip, fp
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800403c:	ea4f 4776 	mov.w	r7, r6, ror #17
 8004040:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004044:	ea87 47f6 	eor.w	r7, r7, r6, ror #19
 8004048:	445d      	add	r5, fp
 800404a:	ea87 2796 	eor.w	r7, r7, r6, lsr #10
 800404e:	19ef      	adds	r7, r5, r7
 8004050:	e010      	b.n	8004074 <sha256_process+0xbb0>
 8004052:	bf00      	nop
 8004054:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 8004058:	efbe4786 	svc	0x00be4786
 800405c:	0fc19dc6 	svceq	0x00c19dc6
 8004060:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 8004064:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 8004068:	4a7484aa 	bmi	9d25318 <_etext+0x1d1d648>
 800406c:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 8004070:	76f988da 	usatvc	r8, #25, sl, asr #17
 8004074:	9713      	str	r7, [sp, #76]	; 0x4c
 8004076:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 800407a:	4ee6      	ldr	r6, [pc, #920]	; (8004414 <sha256_process+0xf50>)
    P( G, H, A, B, C, D, E, F, R(18), 0x0FC19DC6 );
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
 800407c:	44cc      	add	ip, r9
 800407e:	444c      	add	r4, r9
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004080:	ea81 050a 	eor.w	r5, r1, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004084:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004088:	445e      	add	r6, fp
 800408a:	4025      	ands	r5, r4
 800408c:	ea85 050a 	eor.w	r5, r5, sl
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004090:	ea4f 17f9 	mov.w	r7, r9, ror #7
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 8004094:	44b0      	add	r8, r6
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004096:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 800409a:	ea4f 1bb4 	mov.w	fp, r4, ror #6
 800409e:	44a8      	add	r8, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040a2:	ea8b 2bf4 	eor.w	fp, fp, r4, ror #11
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040a6:	ea87 07d9 	eor.w	r7, r7, r9, lsr #3
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040aa:	ea4c 0603 	orr.w	r6, ip, r3
 80040ae:	ea8b 6b74 	eor.w	fp, fp, r4, ror #25
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040b2:	442f      	add	r7, r5
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040b4:	ea4f 05bc 	mov.w	r5, ip, ror #2
 80040b8:	44d8      	add	r8, fp
 80040ba:	ea0c 0903 	and.w	r9, ip, r3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040be:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040c2:	4016      	ands	r6, r2
 80040c4:	ea85 357c 	eor.w	r5, r5, ip, ror #13
 80040c8:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 80040cc:	ea46 0609 	orr.w	r6, r6, r9
 80040d0:	442e      	add	r6, r5
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040d2:	ea4f 497b 	mov.w	r9, fp, ror #17
 80040d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80040d8:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 80040dc:	442f      	add	r7, r5
 80040de:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 80040e2:	44b9      	add	r9, r7
 80040e4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 80040e8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80040ec:	4dca      	ldr	r5, [pc, #808]	; (8004418 <sha256_process+0xf54>)
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040ee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040f2:	4440      	add	r0, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040f4:	ea84 0701 	eor.w	r7, r4, r1
 80040f8:	445d      	add	r5, fp
    P( F, G, H, A, B, C, D, E, R(19), 0x240CA1CC );
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
 80040fa:	4446      	add	r6, r8
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 80040fc:	44aa      	add	sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80040fe:	ea4f 18f9 	mov.w	r8, r9, ror #7
 8004102:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004104:	4007      	ands	r7, r0
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004106:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 800410a:	ea88 48b9 	eor.w	r8, r8, r9, ror #18
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800410e:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004110:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004114:	4457      	add	r7, sl
 8004116:	ea46 0a0c 	orr.w	sl, r6, ip
 800411a:	ea06 050c 	and.w	r5, r6, ip
 800411e:	ea4f 19b0 	mov.w	r9, r0, ror #6
 8004122:	ea0a 0a03 	and.w	sl, sl, r3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004126:	44d8      	add	r8, fp
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 8004128:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 800412c:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004130:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 8004134:	ea4a 0a05 	orr.w	sl, sl, r5
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004138:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800413a:	ea89 6970 	eor.w	r9, r9, r0, ror #25
 800413e:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 8004142:	444f      	add	r7, r9
 8004144:	44da      	add	sl, fp
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004146:	ea4f 4975 	mov.w	r9, r5, ror #17
 800414a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 800414e:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
 8004152:	44d8      	add	r8, fp
 8004154:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 8004158:	44c1      	add	r9, r8
 800415a:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(20), 0x2DE92C6F );
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
 800415e:	44ba      	add	sl, r7
 8004160:	443a      	add	r2, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004162:	4dae      	ldr	r5, [pc, #696]	; (800441c <sha256_process+0xf58>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004164:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004166:	ea80 0804 	eor.w	r8, r0, r4
 800416a:	444d      	add	r5, r9
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800416c:	ea4f 1bf7 	mov.w	fp, r7, ror #7
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004170:	ea02 0808 	and.w	r8, r2, r8
 8004174:	4429      	add	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004176:	ea8b 4bb7 	eor.w	fp, fp, r7, ror #18
 800417a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 800417c:	ea88 0804 	eor.w	r8, r8, r4
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004180:	ea8b 0bd7 	eor.w	fp, fp, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004184:	4488      	add	r8, r1
 8004186:	ea4a 0106 	orr.w	r1, sl, r6
 800418a:	ea4f 19b2 	mov.w	r9, r2, ror #6
 800418e:	ea01 010c 	and.w	r1, r1, ip
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004192:	44ab      	add	fp, r5
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 8004194:	ea4f 07ba 	mov.w	r7, sl, ror #2
 8004198:	ea0a 0506 	and.w	r5, sl, r6
 800419c:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
 80041a0:	ea87 377a 	eor.w	r7, r7, sl, ror #13
 80041a4:	4329      	orrs	r1, r5
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80041a8:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 80041ac:	ea87 57ba 	eor.w	r7, r7, sl, ror #22
 80041b0:	44c8      	add	r8, r9
 80041b2:	4439      	add	r1, r7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041b4:	ea4f 4975 	mov.w	r9, r5, ror #17
 80041b8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80041ba:	ea89 49f5 	eor.w	r9, r9, r5, ror #19
    P( D, E, F, G, H, A, B, C, R(21), 0x4A7484AA );
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
 80041be:	4441      	add	r1, r8
 80041c0:	4443      	add	r3, r8
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041c2:	44bb      	add	fp, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041c8:	ea89 2995 	eor.w	r9, r9, r5, lsr #10
 80041cc:	4f94      	ldr	r7, [pc, #592]	; (8004420 <sha256_process+0xf5c>)
 80041ce:	44d9      	add	r9, fp
 80041d0:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 80041d4:	ea82 0500 	eor.w	r5, r2, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041d8:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041dc:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041de:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041e2:	401d      	ands	r5, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041e4:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041e8:	4427      	add	r7, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041ea:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041ec:	4045      	eors	r5, r0
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80041ee:	ea8b 0bd9 	eor.w	fp, fp, r9, lsr #3
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 80041f2:	ea41 090a 	orr.w	r9, r1, sl
 80041f6:	ea4f 18b3 	mov.w	r8, r3, ror #6
 80041fa:	442f      	add	r7, r5
 80041fc:	ea09 0906 	and.w	r9, r9, r6
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004200:	44a3      	add	fp, r4
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004202:	ea4f 05b1 	mov.w	r5, r1, ror #2
 8004206:	ea01 040a 	and.w	r4, r1, sl
 800420a:	ea88 28f3 	eor.w	r8, r8, r3, ror #11
 800420e:	ea85 3571 	eor.w	r5, r5, r1, ror #13
 8004212:	ea49 0904 	orr.w	r9, r9, r4
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004216:	9c15      	ldr	r4, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004218:	ea88 6873 	eor.w	r8, r8, r3, ror #25
 800421c:	ea85 55b1 	eor.w	r5, r5, r1, ror #22
 8004220:	4447      	add	r7, r8
 8004222:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004224:	ea4f 4874 	mov.w	r8, r4, ror #17
 8004228:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800422a:	ea88 48f4 	eor.w	r8, r8, r4, ror #19
 800422e:	44ab      	add	fp, r5
 8004230:	ea88 2894 	eor.w	r8, r8, r4, lsr #10
 8004234:	44d8      	add	r8, fp
 8004236:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 800423a:	eb07 040c 	add.w	r4, r7, ip
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800423e:	4d79      	ldr	r5, [pc, #484]	; (8004424 <sha256_process+0xf60>)
 8004240:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(22), 0x5CB0A9DC );
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
 8004244:	44b9      	add	r9, r7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004246:	ea83 0b02 	eor.w	fp, r3, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800424a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800424c:	4465      	add	r5, ip
 800424e:	ea04 0b0b 	and.w	fp, r4, fp
 8004252:	ea8b 0b02 	eor.w	fp, fp, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004256:	ea4f 18f7 	mov.w	r8, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800425a:	4428      	add	r0, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800425c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800425e:	ea88 48b7 	eor.w	r8, r8, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004262:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004264:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004268:	ea49 0c01 	orr.w	ip, r9, r1
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800426c:	ea88 08d5 	eor.w	r8, r8, r5, lsr #3
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004270:	ea4f 17b4 	mov.w	r7, r4, ror #6
 8004274:	ea09 0501 	and.w	r5, r9, r1
 8004278:	ea0c 0c0a 	and.w	ip, ip, sl
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800427c:	44d8      	add	r8, fp
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 800427e:	ea4f 0bb9 	mov.w	fp, r9, ror #2
 8004282:	ea87 27f4 	eor.w	r7, r7, r4, ror #11
 8004286:	ea8b 3b79 	eor.w	fp, fp, r9, ror #13
 800428a:	ea4c 0c05 	orr.w	ip, ip, r5
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800428e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 8004290:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 8004294:	ea8b 5bb9 	eor.w	fp, fp, r9, ror #22
 8004298:	4438      	add	r0, r7
 800429a:	44dc      	add	ip, fp
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800429c:	ea4f 4775 	mov.w	r7, r5, ror #17
 80042a0:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80042a4:	ea87 47f5 	eor.w	r7, r7, r5, ror #19
 80042a8:	44d8      	add	r8, fp
 80042aa:	ea87 2795 	eor.w	r7, r7, r5, lsr #10
 80042ae:	4d5e      	ldr	r5, [pc, #376]	; (8004428 <sha256_process+0xf64>)
    P( B, C, D, E, F, G, H, A, R(23), 0x76F988DA );
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
 80042b0:	eb00 0b06 	add.w	fp, r0, r6
 80042b4:	4484      	add	ip, r0
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042b6:	4447      	add	r7, r8
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042ba:	ea84 0603 	eor.w	r6, r4, r3
 80042be:	443d      	add	r5, r7
 80042c0:	ea0b 0606 	and.w	r6, fp, r6
 80042c4:	405e      	eors	r6, r3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042c6:	ea4f 18f0 	mov.w	r8, r0, ror #7
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042ca:	442a      	add	r2, r5
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042cc:	ea88 48b0 	eor.w	r8, r8, r0, ror #18
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042d0:	4432      	add	r2, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80042d4:	ea88 05d0 	eor.w	r5, r8, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042d8:	ea4c 0809 	orr.w	r8, ip, r9
 80042dc:	9718      	str	r7, [sp, #96]	; 0x60
 80042de:	ea08 0801 	and.w	r8, r8, r1
 80042e2:	ea0c 0009 	and.w	r0, ip, r9
 80042e6:	ea4f 17bb 	mov.w	r7, fp, ror #6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042ea:	4435      	add	r5, r6
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 80042ec:	ea4f 06bc 	mov.w	r6, ip, ror #2
 80042f0:	ea87 27fb 	eor.w	r7, r7, fp, ror #11
 80042f4:	ea86 367c 	eor.w	r6, r6, ip, ror #13
 80042f8:	ea48 0000 	orr.w	r0, r8, r0
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 80042fc:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 8004300:	ea87 677b 	eor.w	r7, r7, fp, ror #25
 8004304:	ea86 56bc 	eor.w	r6, r6, ip, ror #22
 8004308:	443a      	add	r2, r7
 800430a:	4430      	add	r0, r6
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800430c:	ea4f 4778 	mov.w	r7, r8, ror #17
 8004310:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8004312:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 8004316:	4435      	add	r5, r6
 8004318:	ea87 2898 	eor.w	r8, r7, r8, lsr #10
 800431c:	4e43      	ldr	r6, [pc, #268]	; (800442c <sha256_process+0xf68>)
    P( A, B, C, D, E, F, G, H, R(24), 0x983E5152 );
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
 800431e:	4492      	add	sl, r2
 8004320:	4410      	add	r0, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004322:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004324:	44a8      	add	r8, r5
 8004326:	ea8b 0204 	eor.w	r2, fp, r4
 800432a:	4446      	add	r6, r8
 800432c:	ea0a 0202 	and.w	r2, sl, r2
 8004330:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8004334:	4062      	eors	r2, r4
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004336:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800433a:	ea4f 15f7 	mov.w	r5, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800433e:	4433      	add	r3, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004340:	ea85 45b7 	eor.w	r5, r5, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004344:	4413      	add	r3, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004348:	ea85 05d8 	eor.w	r5, r5, r8, lsr #3
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800434c:	ea40 080c 	orr.w	r8, r0, ip
 8004350:	ea08 0809 	and.w	r8, r8, r9
 8004354:	ea00 060c 	and.w	r6, r0, ip
 8004358:	ea4f 17ba 	mov.w	r7, sl, ror #6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800435c:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 800435e:	ea4f 02b0 	mov.w	r2, r0, ror #2
 8004362:	ea87 27fa 	eor.w	r7, r7, sl, ror #11
 8004366:	ea82 3270 	eor.w	r2, r2, r0, ror #13
 800436a:	ea48 0606 	orr.w	r6, r8, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800436e:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004372:	ea87 677a 	eor.w	r7, r7, sl, ror #25
 8004376:	ea82 52b0 	eor.w	r2, r2, r0, ror #22
 800437a:	443b      	add	r3, r7
 800437c:	4416      	add	r6, r2
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 800437e:	ea4f 4778 	mov.w	r7, r8, ror #17
 8004382:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004384:	ea87 47f8 	eor.w	r7, r7, r8, ror #19
 8004388:	4415      	add	r5, r2
 800438a:	ea87 2798 	eor.w	r7, r7, r8, lsr #10
 800438e:	4a28      	ldr	r2, [pc, #160]	; (8004430 <sha256_process+0xf6c>)
    P( H, A, B, C, D, E, F, G, R(25), 0xA831C66D );
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
 8004390:	4419      	add	r1, r3
 8004392:	441e      	add	r6, r3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004394:	19ef      	adds	r7, r5, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004398:	ea8a 050b 	eor.w	r5, sl, fp
 800439c:	443a      	add	r2, r7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800439e:	ea4f 18f3 	mov.w	r8, r3, ror #7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043a2:	400d      	ands	r5, r1
 80043a4:	4422      	add	r2, r4
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043a8:	970c      	str	r7, [sp, #48]	; 0x30
 80043aa:	ea85 050b 	eor.w	r5, r5, fp
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80043b0:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043b4:	ea4f 13b1 	mov.w	r3, r1, ror #6
 80043b8:	ea83 23f1 	eor.w	r3, r3, r1, ror #11
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043bc:	ea88 08d4 	eor.w	r8, r8, r4, lsr #3
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043c0:	442a      	add	r2, r5
 80043c2:	ea46 0500 	orr.w	r5, r6, r0
 80043c6:	ea83 6471 	eor.w	r4, r3, r1, ror #25
 80043ca:	ea05 050c 	and.w	r5, r5, ip
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043ce:	44b8      	add	r8, r7
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043d0:	ea4f 03b6 	mov.w	r3, r6, ror #2
 80043d4:	ea06 0700 	and.w	r7, r6, r0
 80043d8:	ea83 3376 	eor.w	r3, r3, r6, ror #13
 80043dc:	432f      	orrs	r7, r5
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 80043e0:	ea83 53b6 	eor.w	r3, r3, r6, ror #22
 80043e4:	4422      	add	r2, r4
 80043e6:	441f      	add	r7, r3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80043e8:	ea4f 4475 	mov.w	r4, r5, ror #17
 80043ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043ee:	ea84 44f5 	eor.w	r4, r4, r5, ror #19
 80043f2:	4498      	add	r8, r3
 80043f4:	ea84 2495 	eor.w	r4, r4, r5, lsr #10
 80043f8:	4444      	add	r4, r8
 80043fa:	9409      	str	r4, [sp, #36]	; 0x24
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <sha256_process+0xf70>)
 80043fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(26), 0xB00327C8 );
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
 8004400:	4417      	add	r7, r2
 8004402:	4491      	add	r9, r2
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004404:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004406:	ea81 020a 	eor.w	r2, r1, sl
 800440a:	442b      	add	r3, r5
 800440c:	ea09 0202 	and.w	r2, r9, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004410:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004412:	e011      	b.n	8004438 <sha256_process+0xf74>
 8004414:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 8004418:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 800441c:	b00327c8 	andlt	r2, r3, r8, asr #15
 8004420:	bf597fc7 	svclt	0x00597fc7
 8004424:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 8004428:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 800442c:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 8004430:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 8004434:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004438:	ea82 020a 	eor.w	r2, r2, sl
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800443c:	ea4f 18f4 	mov.w	r8, r4, ror #7
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004440:	445b      	add	r3, fp
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004442:	ea88 48b4 	eor.w	r8, r8, r4, ror #18
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004446:	4413      	add	r3, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800444a:	ea88 0bd5 	eor.w	fp, r8, r5, lsr #3
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800444e:	ea47 0806 	orr.w	r8, r7, r6
 8004452:	ea08 0800 	and.w	r8, r8, r0
 8004456:	ea07 0506 	and.w	r5, r7, r6
 800445a:	ea4f 14b9 	mov.w	r4, r9, ror #6
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800445e:	4493      	add	fp, r2
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004460:	ea4f 02b7 	mov.w	r2, r7, ror #2
 8004464:	ea84 24f9 	eor.w	r4, r4, r9, ror #11
 8004468:	ea82 3277 	eor.w	r2, r2, r7, ror #13
 800446c:	ea48 0505 	orr.w	r5, r8, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004470:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 8004474:	ea84 6479 	eor.w	r4, r4, r9, ror #25
 8004478:	ea82 52b7 	eor.w	r2, r2, r7, ror #22
 800447c:	4423      	add	r3, r4
 800447e:	4415      	add	r5, r2
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 8004480:	ea4f 4478 	mov.w	r4, r8, ror #17
 8004484:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004486:	ea84 44f8 	eor.w	r4, r4, r8, ror #19
 800448a:	4493      	add	fp, r2
 800448c:	ea84 2498 	eor.w	r4, r4, r8, lsr #10
 8004490:	445c      	add	r4, fp
 8004492:	940a      	str	r4, [sp, #40]	; 0x28
 8004494:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004498:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800449a:	4af1      	ldr	r2, [pc, #964]	; (8004860 <sha256_process+0x139c>)
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 800449c:	449c      	add	ip, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800449e:	ea89 0b01 	eor.w	fp, r9, r1
    P( F, G, H, A, B, C, D, E, R(27), 0xBF597FC7 );
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
 80044a2:	441d      	add	r5, r3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044a4:	4442      	add	r2, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044a6:	ea4f 13f4 	mov.w	r3, r4, ror #7
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044aa:	ea0c 0b0b 	and.w	fp, ip, fp
 80044ae:	ea8b 0b01 	eor.w	fp, fp, r1
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044b2:	ea83 43b4 	eor.w	r3, r3, r4, ror #18
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044b6:	4452      	add	r2, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044b8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80044bc:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044c0:	445a      	add	r2, fp
 80044c2:	ea45 0b07 	orr.w	fp, r5, r7
 80044c6:	ea0b 0b06 	and.w	fp, fp, r6
 80044ca:	ea05 0407 	and.w	r4, r5, r7
 80044ce:	ea4f 18bc 	mov.w	r8, ip, ror #6
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044d2:	449a      	add	sl, r3
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044d4:	ea4f 03b5 	mov.w	r3, r5, ror #2
 80044d8:	ea88 28fc 	eor.w	r8, r8, ip, ror #11
 80044dc:	ea83 3375 	eor.w	r3, r3, r5, ror #13
 80044e0:	ea4b 0404 	orr.w	r4, fp, r4
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044e4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 80044e8:	ea88 687c 	eor.w	r8, r8, ip, ror #25
 80044ec:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
 80044f0:	4442      	add	r2, r8
 80044f2:	441c      	add	r4, r3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 80044f4:	ea4f 487b 	mov.w	r8, fp, ror #17
 80044f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044fa:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80044fe:	449a      	add	sl, r3
 8004500:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004504:	44d0      	add	r8, sl
 8004506:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(28), 0xC6E00BF3 );
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
 800450a:	4410      	add	r0, r2
 800450c:	4414      	add	r4, r2
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800450e:	4bd5      	ldr	r3, [pc, #852]	; (8004864 <sha256_process+0x13a0>)
 8004510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004512:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004516:	ea8c 0b09 	eor.w	fp, ip, r9
 800451a:	4413      	add	r3, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800451c:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004520:	ea00 0b0b 	and.w	fp, r0, fp
 8004524:	440b      	add	r3, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004526:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800452a:	ea8b 0b09 	eor.w	fp, fp, r9
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800452e:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004532:	ea8a 0ad1 	eor.w	sl, sl, r1, lsr #3
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004536:	445b      	add	r3, fp
 8004538:	ea44 0b05 	orr.w	fp, r4, r5
 800453c:	ea0b 0b07 	and.w	fp, fp, r7
 8004540:	ea04 0105 	and.w	r1, r4, r5
 8004544:	ea4f 18b0 	mov.w	r8, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004548:	4492      	add	sl, r2
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800454a:	ea4f 02b4 	mov.w	r2, r4, ror #2
 800454e:	ea88 28f0 	eor.w	r8, r8, r0, ror #11
 8004552:	ea82 3274 	eor.w	r2, r2, r4, ror #13
 8004556:	ea4b 0101 	orr.w	r1, fp, r1
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800455a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 800455e:	ea88 6870 	eor.w	r8, r8, r0, ror #25
 8004562:	ea82 52b4 	eor.w	r2, r2, r4, ror #22
 8004566:	4443      	add	r3, r8
 8004568:	4411      	add	r1, r2
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800456a:	ea4f 487b 	mov.w	r8, fp, ror #17
 800456e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004570:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
    P( D, E, F, G, H, A, B, C, R(29), 0xD5A79147 );
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
 8004574:	441e      	add	r6, r3
 8004576:	4419      	add	r1, r3
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 8004578:	4492      	add	sl, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800457a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800457c:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 8004580:	4ab9      	ldr	r2, [pc, #740]	; (8004868 <sha256_process+0x13a4>)
 8004582:	44d0      	add	r8, sl
 8004584:	ea80 0b0c 	eor.w	fp, r0, ip
 8004588:	4442      	add	r2, r8
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800458a:	ea4f 1af3 	mov.w	sl, r3, ror #7
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800458e:	ea06 0b0b 	and.w	fp, r6, fp
 8004592:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004596:	ea8a 4ab3 	eor.w	sl, sl, r3, ror #18
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 800459a:	4491      	add	r9, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800459c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800459e:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045a2:	44d9      	add	r9, fp
 80045a4:	ea41 0b04 	orr.w	fp, r1, r4
 80045a8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80045ac:	ea0b 0b05 	and.w	fp, fp, r5
 80045b0:	ea4f 18b6 	mov.w	r8, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045b4:	4492      	add	sl, r2
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045b6:	ea4f 03b1 	mov.w	r3, r1, ror #2
 80045ba:	ea01 0204 	and.w	r2, r1, r4
 80045be:	ea88 28f6 	eor.w	r8, r8, r6, ror #11
 80045c2:	ea83 3371 	eor.w	r3, r3, r1, ror #13
 80045c6:	ea4b 0202 	orr.w	r2, fp, r2
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045ca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045ce:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 80045d2:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 80045d6:	44c1      	add	r9, r8
 80045d8:	441a      	add	r2, r3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045da:	ea4f 487b 	mov.w	r8, fp, ror #17
 80045de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80045e0:	ea88 48fb 	eor.w	r8, r8, fp, ror #19
 80045e4:	449a      	add	sl, r3
 80045e6:	ea88 289b 	eor.w	r8, r8, fp, lsr #10
 80045ea:	44d0      	add	r8, sl
 80045ec:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80045f0:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80045f4:	4b9d      	ldr	r3, [pc, #628]	; (800486c <sha256_process+0x13a8>)
    P( C, D, E, F, G, H, A, B, R(30), 0x06CA6351 );
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
 80045f6:	444a      	add	r2, r9
 80045f8:	444f      	add	r7, r9
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 80045fa:	ea86 0800 	eor.w	r8, r6, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80045fe:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004602:	445b      	add	r3, fp
 8004604:	ea07 0808 	and.w	r8, r7, r8
 8004608:	ea88 0800 	eor.w	r8, r8, r0
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800460c:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004610:	449c      	add	ip, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004614:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004618:	44c4      	add	ip, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800461a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 800461e:	ea42 0b01 	orr.w	fp, r2, r1
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004622:	ea8a 0ad3 	eor.w	sl, sl, r3, lsr #3
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004626:	ea0b 0b04 	and.w	fp, fp, r4
 800462a:	ea02 0301 	and.w	r3, r2, r1
 800462e:	ea4f 19b7 	mov.w	r9, r7, ror #6
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004632:	44c2      	add	sl, r8
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004634:	ea4f 08b2 	mov.w	r8, r2, ror #2
 8004638:	ea89 29f7 	eor.w	r9, r9, r7, ror #11
 800463c:	ea88 3872 	eor.w	r8, r8, r2, ror #13
 8004640:	ea4b 0303 	orr.w	r3, fp, r3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004644:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004648:	ea89 6977 	eor.w	r9, r9, r7, ror #25
 800464c:	ea88 58b2 	eor.w	r8, r8, r2, ror #22
 8004650:	44cc      	add	ip, r9
 8004652:	4443      	add	r3, r8
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004654:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004658:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800465c:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004660:	44c2      	add	sl, r8
 8004662:	ea89 2b9b 	eor.w	fp, r9, fp, lsr #10
 8004666:	44d3      	add	fp, sl
 8004668:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8004878 <sha256_process+0x13b4>
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800466c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004670:	4465      	add	r5, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004672:	ea87 0906 	eor.w	r9, r7, r6
    P( B, C, D, E, F, G, H, A, R(31), 0x14292967 );
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
 8004676:	4463      	add	r3, ip
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004678:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800467c:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004680:	44d8      	add	r8, fp
 8004682:	ea05 0909 	and.w	r9, r5, r9
 8004686:	ea4f 1bb5 	mov.w	fp, r5, ror #6
 800468a:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800468e:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 8004692:	4480      	add	r8, r0
 8004694:	ea8b 2bf5 	eor.w	fp, fp, r5, ror #11
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004698:	9811      	ldr	r0, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 800469a:	ea8b 6b75 	eor.w	fp, fp, r5, ror #25
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800469e:	ea8c 0cda 	eor.w	ip, ip, sl, lsr #3
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80046a2:	44c8      	add	r8, r9
 80046a4:	ea43 0a02 	orr.w	sl, r3, r2
 80046a8:	ea4f 09b3 	mov.w	r9, r3, ror #2
 80046ac:	44d8      	add	r8, fp
 80046ae:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046b2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80046b6:	4484      	add	ip, r0
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80046b8:	ea89 3973 	eor.w	r9, r9, r3, ror #13
 80046bc:	ea03 0002 	and.w	r0, r3, r2
 80046c0:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 80046c4:	ea4a 0000 	orr.w	r0, sl, r0
 80046c8:	4448      	add	r0, r9
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046ca:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80046ce:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80046d2:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80046d6:	44cc      	add	ip, r9
 80046d8:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80046dc:	44e2      	add	sl, ip
 80046de:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80046e2:	f8df 9198 	ldr.w	r9, [pc, #408]	; 800487c <sha256_process+0x13b8>
 80046e6:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(32), 0x27B70A85 );
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
 80046ea:	4440      	add	r0, r8
 80046ec:	4444      	add	r4, r8
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80046ee:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 80046f2:	ea85 0807 	eor.w	r8, r5, r7
 80046f6:	44d9      	add	r9, fp
 80046f8:	ea04 0808 	and.w	r8, r4, r8
 80046fc:	ea88 0807 	eor.w	r8, r8, r7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004700:	ea4f 1cfa 	mov.w	ip, sl, ror #7
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004704:	44b1      	add	r9, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004706:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004708:	44c1      	add	r9, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800470a:	ea8c 4cba 	eor.w	ip, ip, sl, ror #18
 800470e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004712:	ea40 0b03 	orr.w	fp, r0, r3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004716:	ea8c 0cd6 	eor.w	ip, ip, r6, lsr #3
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800471a:	ea0b 0b02 	and.w	fp, fp, r2
 800471e:	ea00 0603 	and.w	r6, r0, r3
 8004722:	ea4f 1ab4 	mov.w	sl, r4, ror #6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004726:	44c4      	add	ip, r8
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004728:	ea4f 08b0 	mov.w	r8, r0, ror #2
 800472c:	ea8a 2af4 	eor.w	sl, sl, r4, ror #11
 8004730:	ea88 3870 	eor.w	r8, r8, r0, ror #13
 8004734:	ea4b 0606 	orr.w	r6, fp, r6
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004738:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800473c:	ea88 58b0 	eor.w	r8, r8, r0, ror #22
 8004740:	ea8a 6a74 	eor.w	sl, sl, r4, ror #25
 8004744:	44ca      	add	sl, r9
 8004746:	4446      	add	r6, r8
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004748:	ea4f 497b 	mov.w	r9, fp, ror #17
 800474c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004750:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004754:	44c4      	add	ip, r8
 8004756:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 800475a:	44e1      	add	r9, ip
 800475c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004760:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004764:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8004768:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8004880 <sha256_process+0x13bc>
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 800476c:	4451      	add	r1, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800476e:	ea84 0905 	eor.w	r9, r4, r5
    P( H, A, B, C, D, E, F, G, R(33), 0x2E1B2138 );
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
 8004772:	4456      	add	r6, sl
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004774:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004776:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800477a:	ea01 0909 	and.w	r9, r1, r9
 800477e:	ea89 0905 	eor.w	r9, r9, r5
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004782:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004786:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004788:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 800478c:	444f      	add	r7, r9
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800478e:	ea8a 0adb 	eor.w	sl, sl, fp, lsr #3
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 8004792:	ea46 0900 	orr.w	r9, r6, r0
 8004796:	ea09 0903 	and.w	r9, r9, r3
 800479a:	ea4f 1cb1 	mov.w	ip, r1, ror #6
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800479e:	44c2      	add	sl, r8
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80047a0:	ea4f 0bb6 	mov.w	fp, r6, ror #2
 80047a4:	ea06 0800 	and.w	r8, r6, r0
 80047a8:	ea8c 2cf1 	eor.w	ip, ip, r1, ror #11
 80047ac:	ea8b 3b76 	eor.w	fp, fp, r6, ror #13
 80047b0:	ea49 0808 	orr.w	r8, r9, r8
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047b4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80047b8:	ea8b 5bb6 	eor.w	fp, fp, r6, ror #22
 80047bc:	ea8c 6c71 	eor.w	ip, ip, r1, ror #25
 80047c0:	44bc      	add	ip, r7
 80047c2:	44d8      	add	r8, fp
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047c4:	ea4f 4779 	mov.w	r7, r9, ror #17
 80047c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80047cc:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 80047d0:	44da      	add	sl, fp
 80047d2:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 80047d6:	44d1      	add	r9, sl
    P( G, H, A, B, C, D, E, F, R(34), 0x4D2C6DFC );
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
 80047d8:	4462      	add	r2, ip
 80047da:	44e0      	add	r8, ip
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047dc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047e0:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80047e8:	4f21      	ldr	r7, [pc, #132]	; (8004870 <sha256_process+0x13ac>)
 80047ea:	ea81 0b04 	eor.w	fp, r1, r4
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047ee:	ea4f 19fc 	mov.w	r9, ip, ror #7
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047f2:	4457      	add	r7, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80047f4:	ea89 49bc 	eor.w	r9, r9, ip, ror #18
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 80047f8:	ea02 0b0b 	and.w	fp, r2, fp
 80047fc:	ea8b 0b04 	eor.w	fp, fp, r4
 8004800:	443d      	add	r5, r7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004802:	ea89 07dc 	eor.w	r7, r9, ip, lsr #3
 8004806:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800480a:	445d      	add	r5, fp
 800480c:	ea48 0b06 	orr.w	fp, r8, r6
 8004810:	ea0b 0b00 	and.w	fp, fp, r0
 8004814:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004818:	4467      	add	r7, ip
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800481a:	ea08 0c06 	and.w	ip, r8, r6
 800481e:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
 8004822:	ea4b 0c0c 	orr.w	ip, fp, ip
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004826:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800482a:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 800482e:	44aa      	add	sl, r5
 8004830:	ea4f 09b8 	mov.w	r9, r8, ror #2
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004834:	ea4f 457b 	mov.w	r5, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004838:	ea89 3978 	eor.w	r9, r9, r8, ror #13
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800483c:	ea85 45fb 	eor.w	r5, r5, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 8004840:	ea89 59b8 	eor.w	r9, r9, r8, ror #22
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004844:	ea85 2b9b 	eor.w	fp, r5, fp, lsr #10
 8004848:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(35), 0x53380D13 );
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
 800484a:	44cc      	add	ip, r9
 800484c:	44d4      	add	ip, sl
 800484e:	4453      	add	r3, sl
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004850:	442f      	add	r7, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004852:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004856:	4d07      	ldr	r5, [pc, #28]	; (8004874 <sha256_process+0x13b0>)
 8004858:	44bb      	add	fp, r7
 800485a:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 800485e:	e011      	b.n	8004884 <sha256_process+0x13c0>
 8004860:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 8004864:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 8004868:	53380d13 	teqpl	r8, #1216	; 0x4c0
 800486c:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8004870:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8004874:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8004878:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 800487c:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8004880:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8004884:	ea82 0701 	eor.w	r7, r2, r1
 8004888:	445d      	add	r5, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800488a:	ea4f 19fa 	mov.w	r9, sl, ror #7
 800488e:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004892:	401f      	ands	r7, r3
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004894:	ea89 49ba 	eor.w	r9, r9, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 8004898:	442c      	add	r4, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800489a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 800489c:	404f      	eors	r7, r1
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800489e:	ea89 09db 	eor.w	r9, r9, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048a2:	ea4c 0b08 	orr.w	fp, ip, r8
 80048a6:	ea0b 0b06 	and.w	fp, fp, r6
 80048aa:	ea4f 1ab3 	mov.w	sl, r3, ror #6
 80048ae:	443c      	add	r4, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048b0:	44a9      	add	r9, r5
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048b2:	ea4f 07bc 	mov.w	r7, ip, ror #2
 80048b6:	ea0c 0508 	and.w	r5, ip, r8
 80048ba:	ea8a 2af3 	eor.w	sl, sl, r3, ror #11
 80048be:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 80048c2:	ea4b 0505 	orr.w	r5, fp, r5
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048c6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048ca:	ea8a 6a73 	eor.w	sl, sl, r3, ror #25
 80048ce:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
 80048d2:	4454      	add	r4, sl
 80048d4:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048d6:	ea4f 4a7b 	mov.w	sl, fp, ror #17
 80048da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80048dc:	ea8a 4afb 	eor.w	sl, sl, fp, ror #19
 80048e0:	44b9      	add	r9, r7
 80048e2:	ea8a 2a9b 	eor.w	sl, sl, fp, lsr #10
 80048e6:	44ca      	add	sl, r9
 80048e8:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(36), 0x650A7354 );
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
 80048ec:	4420      	add	r0, r4
 80048ee:	4425      	add	r5, r4
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048f0:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80048f6:	4fee      	ldr	r7, [pc, #952]	; (8004cb0 <sha256_process+0x17ec>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80048f8:	ea4f 19fb 	mov.w	r9, fp, ror #7
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 80048fc:	4427      	add	r7, r4
 80048fe:	ea83 0a02 	eor.w	sl, r3, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004902:	ea89 49bb 	eor.w	r9, r9, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004906:	4439      	add	r1, r7
 8004908:	ea4f 1bb0 	mov.w	fp, r0, ror #6
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800490c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800490e:	ea8b 2bf0 	eor.w	fp, fp, r0, ror #11
 8004912:	ea00 0a0a 	and.w	sl, r0, sl
 8004916:	ea8a 0a02 	eor.w	sl, sl, r2
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800491a:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 800491e:	ea8b 6770 	eor.w	r7, fp, r0, ror #25
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004922:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004926:	4451      	add	r1, sl
 8004928:	ea45 0a0c 	orr.w	sl, r5, ip
 800492c:	ea0a 0a08 	and.w	sl, sl, r8
 8004930:	ea05 040c 	and.w	r4, r5, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004934:	44d9      	add	r9, fp
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004936:	ea4f 0bb5 	mov.w	fp, r5, ror #2
 800493a:	ea8b 3b75 	eor.w	fp, fp, r5, ror #13
 800493e:	ea4a 0404 	orr.w	r4, sl, r4
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004942:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004946:	ea8b 5bb5 	eor.w	fp, fp, r5, ror #22
 800494a:	4439      	add	r1, r7
 800494c:	445c      	add	r4, fp
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 800494e:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004952:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8004956:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 800495a:	44d9      	add	r9, fp
 800495c:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004960:	4fd4      	ldr	r7, [pc, #848]	; (8004cb4 <sha256_process+0x17f0>)
    P( D, E, F, G, H, A, B, C, R(37), 0x766A0ABB );
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
 8004962:	440c      	add	r4, r1
 8004964:	440e      	add	r6, r1
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004966:	44ca      	add	sl, r9
 8004968:	ea80 0103 	eor.w	r1, r0, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800496c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004970:	4457      	add	r7, sl
 8004972:	4031      	ands	r1, r6
 8004974:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 8004978:	4059      	eors	r1, r3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800497a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800497e:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004982:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004984:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004988:	440f      	add	r7, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 800498a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800498c:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 8004990:	ea44 0a05 	orr.w	sl, r4, r5
 8004994:	ea0a 0a0c 	and.w	sl, sl, ip
 8004998:	ea04 0205 	and.w	r2, r4, r5
 800499c:	ea4f 19b6 	mov.w	r9, r6, ror #6
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049a0:	448b      	add	fp, r1
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80049a2:	ea4f 01b4 	mov.w	r1, r4, ror #2
 80049a6:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 80049aa:	ea81 3174 	eor.w	r1, r1, r4, ror #13
 80049ae:	ea4a 0202 	orr.w	r2, sl, r2
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049b2:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80049b6:	ea89 6976 	eor.w	r9, r9, r6, ror #25
 80049ba:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 80049be:	444f      	add	r7, r9
 80049c0:	440a      	add	r2, r1
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049c2:	ea4f 497a 	mov.w	r9, sl, ror #17
 80049c6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80049c8:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
 80049cc:	448b      	add	fp, r1
 80049ce:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 80049d2:	44d9      	add	r9, fp
 80049d4:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(38), 0x81C2C92E );
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
 80049d8:	44b8      	add	r8, r7
 80049da:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049dc:	49b6      	ldr	r1, [pc, #728]	; (8004cb8 <sha256_process+0x17f4>)
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049e0:	ea86 0b00 	eor.w	fp, r6, r0
 80049e4:	4449      	add	r1, r9
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049e6:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049ea:	ea08 0b0b 	and.w	fp, r8, fp
 80049ee:	ea8b 0b00 	eor.w	fp, fp, r0
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049f2:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049f6:	440b      	add	r3, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 80049f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80049fa:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 80049fe:	445b      	add	r3, fp
 8004a00:	ea42 0b04 	orr.w	fp, r2, r4
 8004a04:	ea0b 0b05 	and.w	fp, fp, r5
 8004a08:	ea4f 19b8 	mov.w	r9, r8, ror #6
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a0c:	448a      	add	sl, r1
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004a0e:	ea4f 07b2 	mov.w	r7, r2, ror #2
 8004a12:	ea02 0104 	and.w	r1, r2, r4
 8004a16:	ea89 29f8 	eor.w	r9, r9, r8, ror #11
 8004a1a:	ea87 3772 	eor.w	r7, r7, r2, ror #13
 8004a1e:	ea4b 0101 	orr.w	r1, fp, r1
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a22:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004a26:	ea89 6978 	eor.w	r9, r9, r8, ror #25
 8004a2a:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 8004a2e:	444b      	add	r3, r9
 8004a30:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a32:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004a36:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004a38:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004a3c:	44ba      	add	sl, r7
 8004a3e:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004a42:	44d1      	add	r9, sl
 8004a44:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(39), 0x92722C85 );
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
 8004a48:	449c      	add	ip, r3
 8004a4a:	4419      	add	r1, r3
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a4c:	4f9b      	ldr	r7, [pc, #620]	; (8004cbc <sha256_process+0x17f8>)
 8004a4e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a50:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a54:	ea88 0906 	eor.w	r9, r8, r6
 8004a58:	441f      	add	r7, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a5a:	ea4f 1afb 	mov.w	sl, fp, ror #7
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a5e:	ea0c 0909 	and.w	r9, ip, r9
 8004a62:	4407      	add	r7, r0
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a64:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a68:	ea89 0906 	eor.w	r9, r9, r6
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a6c:	ea8a 4abb 	eor.w	sl, sl, fp, ror #18
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a70:	ea4f 1bbc 	mov.w	fp, ip, ror #6
 8004a74:	ea8b 2bfc 	eor.w	fp, fp, ip, ror #11
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a78:	ea8a 0ad0 	eor.w	sl, sl, r0, lsr #3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a7c:	444f      	add	r7, r9
 8004a7e:	ea41 0902 	orr.w	r9, r1, r2
 8004a82:	ea8b 607c 	eor.w	r0, fp, ip, ror #25
 8004a86:	ea09 0904 	and.w	r9, r9, r4
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a8a:	449a      	add	sl, r3
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004a8c:	ea4f 0bb1 	mov.w	fp, r1, ror #2
 8004a90:	ea01 0302 	and.w	r3, r1, r2
 8004a94:	ea8b 3b71 	eor.w	fp, fp, r1, ror #13
 8004a98:	ea49 0303 	orr.w	r3, r9, r3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004a9c:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004aa0:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8004aa4:	4407      	add	r7, r0
 8004aa6:	445b      	add	r3, fp
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004aa8:	ea4f 4079 	mov.w	r0, r9, ror #17
 8004aac:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8004ab0:	ea80 40f9 	eor.w	r0, r0, r9, ror #19
    P( A, B, C, D, E, F, G, H, R(40), 0xA2BFE8A1 );
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
 8004ab4:	443b      	add	r3, r7
 8004ab6:	443d      	add	r5, r7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ab8:	44da      	add	sl, fp
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aba:	9f09      	ldr	r7, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004abc:	ea80 2999 	eor.w	r9, r0, r9, lsr #10
 8004ac0:	487f      	ldr	r0, [pc, #508]	; (8004cc0 <sha256_process+0x17fc>)
 8004ac2:	44d1      	add	r9, sl
 8004ac4:	ea8c 0b08 	eor.w	fp, ip, r8
 8004ac8:	4448      	add	r0, r9
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004aca:	ea4f 1af7 	mov.w	sl, r7, ror #7
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ace:	ea05 0b0b 	and.w	fp, r5, fp
 8004ad2:	ea8b 0b08 	eor.w	fp, fp, r8
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004ad6:	ea8a 4ab7 	eor.w	sl, sl, r7, ror #18
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ada:	4406      	add	r6, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004ade:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004ae2:	445e      	add	r6, fp
 8004ae4:	ea43 0b01 	orr.w	fp, r3, r1
 8004ae8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8004aec:	ea0b 0b02 	and.w	fp, fp, r2
 8004af0:	ea4f 19b5 	mov.w	r9, r5, ror #6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004af4:	4482      	add	sl, r0
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004af6:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8004afa:	ea03 0001 	and.w	r0, r3, r1
 8004afe:	ea89 29f5 	eor.w	r9, r9, r5, ror #11
 8004b02:	ea87 3773 	eor.w	r7, r7, r3, ror #13
 8004b06:	ea4b 0000 	orr.w	r0, fp, r0
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b0a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004b0e:	ea89 6975 	eor.w	r9, r9, r5, ror #25
 8004b12:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8004b16:	444e      	add	r6, r9
 8004b18:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b1a:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004b1e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8004b20:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004b24:	44ba      	add	sl, r7
 8004b26:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004b2a:	44d1      	add	r9, sl
 8004b2c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
    P( H, A, B, C, D, E, F, G, R(41), 0xA81A664B );
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
 8004b30:	4430      	add	r0, r6
 8004b32:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b34:	4f63      	ldr	r7, [pc, #396]	; (8004cc4 <sha256_process+0x1800>)
 8004b36:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b3c:	4437      	add	r7, r6
 8004b3e:	ea85 0a0c 	eor.w	sl, r5, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b42:	ea4f 1bf9 	mov.w	fp, r9, ror #7
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b46:	4447      	add	r7, r8
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b48:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b4c:	ea04 0a0a 	and.w	sl, r4, sl
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b50:	ea8b 4bb9 	eor.w	fp, fp, r9, ror #18
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b54:	ea8a 0a0c 	eor.w	sl, sl, ip
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b58:	ea8b 0bd8 	eor.w	fp, fp, r8, lsr #3
 8004b5c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b60:	4457      	add	r7, sl
 8004b62:	ea40 0a03 	orr.w	sl, r0, r3
 8004b66:	ea0a 0a01 	and.w	sl, sl, r1
 8004b6a:	ea00 0603 	and.w	r6, r0, r3
 8004b6e:	ea4f 19b4 	mov.w	r9, r4, ror #6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b72:	44d8      	add	r8, fp
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b74:	ea4f 0bb0 	mov.w	fp, r0, ror #2
 8004b78:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8004b7c:	ea8b 3b70 	eor.w	fp, fp, r0, ror #13
 8004b80:	ea4a 0606 	orr.w	r6, sl, r6
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b84:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004b88:	ea8b 5bb0 	eor.w	fp, fp, r0, ror #22
 8004b8c:	ea89 6974 	eor.w	r9, r9, r4, ror #25
 8004b90:	44b9      	add	r9, r7
 8004b92:	445e      	add	r6, fp
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004b94:	ea4f 477a 	mov.w	r7, sl, ror #17
 8004b98:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8004b9c:	ea87 47fa 	eor.w	r7, r7, sl, ror #19
 8004ba0:	44d8      	add	r8, fp
 8004ba2:	ea87 2a9a 	eor.w	sl, r7, sl, lsr #10
 8004ba6:	44c2      	add	sl, r8
 8004ba8:	4f47      	ldr	r7, [pc, #284]	; (8004cc8 <sha256_process+0x1804>)
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004baa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(42), 0xC24B8B70 );
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
 8004bae:	444a      	add	r2, r9
 8004bb0:	444e      	add	r6, r9
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bb2:	ea84 0905 	eor.w	r9, r4, r5
 8004bb6:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bba:	ea4f 1bf8 	mov.w	fp, r8, ror #7
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bbe:	4457      	add	r7, sl
 8004bc0:	ea02 0909 	and.w	r9, r2, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bc4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bc8:	ea89 0905 	eor.w	r9, r9, r5
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bcc:	ea8b 4bb8 	eor.w	fp, fp, r8, ror #18
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bd0:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bd2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bd6:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bd8:	ea8b 0bda 	eor.w	fp, fp, sl, lsr #3
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bdc:	ea46 0900 	orr.w	r9, r6, r0
 8004be0:	ea09 0903 	and.w	r9, r9, r3
 8004be4:	ea4f 18b2 	mov.w	r8, r2, ror #6
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004be8:	44e3      	add	fp, ip
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004bea:	ea4f 0ab6 	mov.w	sl, r6, ror #2
 8004bee:	ea06 0c00 	and.w	ip, r6, r0
 8004bf2:	ea88 28f2 	eor.w	r8, r8, r2, ror #11
 8004bf6:	ea8a 3a76 	eor.w	sl, sl, r6, ror #13
 8004bfa:	ea49 0c0c 	orr.w	ip, r9, ip
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004bfe:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004c02:	ea8a 5ab6 	eor.w	sl, sl, r6, ror #22
 8004c06:	ea88 6872 	eor.w	r8, r8, r2, ror #25
 8004c0a:	44b8      	add	r8, r7
 8004c0c:	44d4      	add	ip, sl
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c0e:	ea4f 4779 	mov.w	r7, r9, ror #17
 8004c12:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8004c16:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
 8004c1a:	ea87 2999 	eor.w	r9, r7, r9, lsr #10
 8004c1e:	44d3      	add	fp, sl
 8004c20:	4f2a      	ldr	r7, [pc, #168]	; (8004ccc <sha256_process+0x1808>)
    P( F, G, H, A, B, C, D, E, R(43), 0xC76C51A3 );
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
 8004c22:	44c4      	add	ip, r8
 8004c24:	4441      	add	r1, r8
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c26:	44cb      	add	fp, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c28:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c2c:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c2e:	ea4f 1af8 	mov.w	sl, r8, ror #7
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c32:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c34:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c36:	ea82 0904 	eor.w	r9, r2, r4
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c3a:	ea8a 4ab8 	eor.w	sl, sl, r8, ror #18
 8004c3e:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c42:	ea01 0909 	and.w	r9, r1, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c48:	ea4f 18b1 	mov.w	r8, r1, ror #6
 8004c4c:	ea89 0904 	eor.w	r9, r9, r4
 8004c50:	ea88 28f1 	eor.w	r8, r8, r1, ror #11
 8004c54:	444d      	add	r5, r9
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c56:	4457      	add	r7, sl
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c58:	ea4c 0906 	orr.w	r9, ip, r6
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c5c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c60:	ea88 6871 	eor.w	r8, r8, r1, ror #25
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c64:	9709      	str	r7, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c66:	44a8      	add	r8, r5
 8004c68:	ea09 0900 	and.w	r9, r9, r0
 8004c6c:	ea0c 0506 	and.w	r5, ip, r6
 8004c70:	ea4f 07bc 	mov.w	r7, ip, ror #2
 8004c74:	ea87 377c 	eor.w	r7, r7, ip, ror #13
 8004c78:	ea49 0505 	orr.w	r5, r9, r5
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c7c:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c80:	ea87 57bc 	eor.w	r7, r7, ip, ror #22
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c84:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c88:	443d      	add	r5, r7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c8a:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004c8e:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8004c90:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004c94:	4445      	add	r5, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004c96:	44ba      	add	sl, r7
 8004c98:	44d1      	add	r9, sl
 8004c9a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004c9e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ca2:	4f0b      	ldr	r7, [pc, #44]	; (8004cd0 <sha256_process+0x180c>)
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ca4:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ca8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8004cac:	e012      	b.n	8004cd4 <sha256_process+0x1810>
 8004cae:	bf00      	nop
 8004cb0:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8004cb4:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8004cb8:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8004cbc:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8004cc0:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8004cc4:	106aa070 	rsbne	sl, sl, r0, ror r0
 8004cc8:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8004ccc:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8004cd0:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
    P( E, F, G, H, A, B, C, D, R(44), 0xD192E819 );
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
 8004cd4:	4443      	add	r3, r8
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cd6:	444f      	add	r7, r9
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cd8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cdc:	443c      	add	r4, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cde:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ce0:	ea81 0802 	eor.w	r8, r1, r2
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004ce4:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004ce8:	ea03 0808 	and.w	r8, r3, r8
 8004cec:	ea4f 19b3 	mov.w	r9, r3, ror #6
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004cf0:	ea8a 0ad7 	eor.w	sl, sl, r7, lsr #3
 8004cf4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004cf6:	ea88 0802 	eor.w	r8, r8, r2
 8004cfa:	ea89 29f3 	eor.w	r9, r9, r3, ror #11
 8004cfe:	ea89 6973 	eor.w	r9, r9, r3, ror #25
 8004d02:	4444      	add	r4, r8
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d04:	44ba      	add	sl, r7
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004d06:	ea45 080c 	orr.w	r8, r5, ip
 8004d0a:	ea4f 07b5 	mov.w	r7, r5, ror #2
 8004d0e:	444c      	add	r4, r9
 8004d10:	ea08 0806 	and.w	r8, r8, r6
 8004d14:	ea05 090c 	and.w	r9, r5, ip
 8004d18:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 8004d1c:	ea87 57b5 	eor.w	r7, r7, r5, ror #22
 8004d20:	ea48 0809 	orr.w	r8, r8, r9
 8004d24:	44b8      	add	r8, r7
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d26:	ea4f 497b 	mov.w	r9, fp, ror #17
 8004d2a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004d2c:	ea89 49fb 	eor.w	r9, r9, fp, ror #19
 8004d30:	44ba      	add	sl, r7
 8004d32:	ea89 299b 	eor.w	r9, r9, fp, lsr #10
 8004d36:	44d1      	add	r9, sl
 8004d38:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d3c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d40:	4fe8      	ldr	r7, [pc, #928]	; (80050e4 <sha256_process+0x1c20>)
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d42:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d46:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
    P( D, E, F, G, H, A, B, C, R(45), 0xD6990624 );
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
 8004d4a:	44a0      	add	r8, r4
 8004d4c:	4420      	add	r0, r4
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d4e:	ea83 0401 	eor.w	r4, r3, r1
 8004d52:	444f      	add	r7, r9
 8004d54:	4004      	ands	r4, r0
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d56:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d5a:	404c      	eors	r4, r1
 8004d5c:	4417      	add	r7, r2
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d60:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d64:	4427      	add	r7, r4
 8004d66:	ea4f 19b0 	mov.w	r9, r0, ror #6
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004d6c:	ea8a 0ad2 	eor.w	sl, sl, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d70:	ea89 29f0 	eor.w	r9, r9, r0, ror #11
 8004d74:	ea48 0205 	orr.w	r2, r8, r5
 8004d78:	ea89 6970 	eor.w	r9, r9, r0, ror #25
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d7c:	4454      	add	r4, sl
 8004d7e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004d82:	9409      	str	r4, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d84:	444f      	add	r7, r9
 8004d86:	ea02 020c 	and.w	r2, r2, ip
 8004d8a:	ea08 0905 	and.w	r9, r8, r5
 8004d8e:	ea4f 04b8 	mov.w	r4, r8, ror #2
 8004d92:	ea84 3478 	eor.w	r4, r4, r8, ror #13
 8004d96:	ea42 0209 	orr.w	r2, r2, r9
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004d9a:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004d9e:	ea84 54b8 	eor.w	r4, r4, r8, ror #22
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004da2:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004da6:	4422      	add	r2, r4
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004da8:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004dac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004dae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004db2:	443a      	add	r2, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004db4:	44a2      	add	sl, r4
 8004db6:	44d1      	add	r9, sl
 8004db8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dbc:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dc0:	4cc9      	ldr	r4, [pc, #804]	; (80050e8 <sha256_process+0x1c24>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dc2:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dc6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    P( C, D, E, F, G, H, A, B, R(46), 0xF40E3585 );
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
 8004dca:	443e      	add	r6, r7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dcc:	444c      	add	r4, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dce:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dd2:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dd6:	ea80 0703 	eor.w	r7, r0, r3
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004dda:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
 8004dde:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004de2:	4037      	ands	r7, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004de4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004de6:	ea4f 19b6 	mov.w	r9, r6, ror #6
 8004dea:	405f      	eors	r7, r3
 8004dec:	ea89 29f6 	eor.w	r9, r9, r6, ror #11
 8004df0:	ea89 6976 	eor.w	r9, r9, r6, ror #25
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004df4:	4454      	add	r4, sl
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004df6:	440f      	add	r7, r1
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004df8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004dfc:	ea42 0108 	orr.w	r1, r2, r8
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e00:	9409      	str	r4, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e02:	444f      	add	r7, r9
 8004e04:	4029      	ands	r1, r5
 8004e06:	ea02 0908 	and.w	r9, r2, r8
 8004e0a:	ea4f 04b2 	mov.w	r4, r2, ror #2
 8004e0e:	ea84 3472 	eor.w	r4, r4, r2, ror #13
 8004e12:	ea41 0109 	orr.w	r1, r1, r9
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e16:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e1a:	ea84 54b2 	eor.w	r4, r4, r2, ror #22
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e1e:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e22:	4421      	add	r1, r4
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e24:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004e28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e2a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e2e:	4439      	add	r1, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e30:	44a2      	add	sl, r4
 8004e32:	44d1      	add	r9, sl
 8004e34:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e38:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e3c:	4cab      	ldr	r4, [pc, #684]	; (80050ec <sha256_process+0x1c28>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e3e:	ea4f 1af9 	mov.w	sl, r9, ror #7
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e42:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( B, C, D, E, F, G, H, A, R(47), 0x106AA070 );
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
 8004e46:	44bc      	add	ip, r7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e48:	ea86 0700 	eor.w	r7, r6, r0
 8004e4c:	444c      	add	r4, r9
 8004e4e:	ea0c 0707 	and.w	r7, ip, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e52:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e56:	4047      	eors	r7, r0
 8004e58:	4423      	add	r3, r4
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004e5c:	ea8a 4ab9 	eor.w	sl, sl, r9, ror #18
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e60:	443b      	add	r3, r7
 8004e62:	ea4f 19bc 	mov.w	r9, ip, ror #6
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e66:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004e68:	ea8a 0ad4 	eor.w	sl, sl, r4, lsr #3
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e6c:	ea89 29fc 	eor.w	r9, r9, ip, ror #11
 8004e70:	ea41 0402 	orr.w	r4, r1, r2
 8004e74:	ea89 697c 	eor.w	r9, r9, ip, ror #25
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e78:	4457      	add	r7, sl
 8004e7a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8004e7e:	9709      	str	r7, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e80:	444b      	add	r3, r9
 8004e82:	ea04 0408 	and.w	r4, r4, r8
 8004e86:	ea01 0902 	and.w	r9, r1, r2
 8004e8a:	ea4f 07b1 	mov.w	r7, r1, ror #2
 8004e8e:	ea87 3771 	eor.w	r7, r7, r1, ror #13
 8004e92:	ea44 0409 	orr.w	r4, r4, r9
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e96:	ea4f 497a 	mov.w	r9, sl, ror #17
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004e9a:	ea87 57b1 	eor.w	r7, r7, r1, ror #22
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004e9e:	ea89 49fa 	eor.w	r9, r9, sl, ror #19
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004ea2:	443c      	add	r4, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ea4:	ea89 299a 	eor.w	r9, r9, sl, lsr #10
 8004ea8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004eaa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004eae:	441c      	add	r4, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004eb0:	44ba      	add	sl, r7
 8004eb2:	44d1      	add	r9, sl
 8004eb4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    P( A, B, C, D, E, F, G, H, R(48), 0x19A4C116 );
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
 8004eb8:	441d      	add	r5, r3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ebc:	4f8c      	ldr	r7, [pc, #560]	; (80050f0 <sha256_process+0x1c2c>)
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ebe:	ea4f 19f3 	mov.w	r9, r3, ror #7
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ec4:	ea8c 0a06 	eor.w	sl, ip, r6
 8004ec8:	441f      	add	r7, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ecc:	4438      	add	r0, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ece:	ea89 49b3 	eor.w	r9, r9, r3, ror #18
 8004ed2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ed4:	ea4f 13b5 	mov.w	r3, r5, ror #6
 8004ed8:	ea83 23f5 	eor.w	r3, r3, r5, ror #11
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004edc:	ea89 09d7 	eor.w	r9, r9, r7, lsr #3
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ee0:	ea05 0a0a 	and.w	sl, r5, sl
 8004ee4:	ea83 6775 	eor.w	r7, r3, r5, ror #25
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004eea:	ea8a 0a06 	eor.w	sl, sl, r6
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004eee:	444b      	add	r3, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ef0:	4450      	add	r0, sl
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004ef2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004ef6:	ea44 0a01 	orr.w	sl, r4, r1
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004efa:	9309      	str	r3, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004efc:	4438      	add	r0, r7
 8004efe:	ea0a 0a02 	and.w	sl, sl, r2
 8004f02:	ea04 0701 	and.w	r7, r4, r1
 8004f06:	ea4f 03b4 	mov.w	r3, r4, ror #2
 8004f0a:	ea83 3374 	eor.w	r3, r3, r4, ror #13
 8004f0e:	ea4a 0a07 	orr.w	sl, sl, r7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f12:	ea4f 4779 	mov.w	r7, r9, ror #17
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f16:	ea83 53b4 	eor.w	r3, r3, r4, ror #22
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f1a:	ea87 47f9 	eor.w	r7, r7, r9, ror #19
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f1e:	449a      	add	sl, r3
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f20:	ea87 2799 	eor.w	r7, r7, r9, lsr #10
 8004f24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8004f26:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f2a:	4482      	add	sl, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f2c:	4499      	add	r9, r3
 8004f2e:	444f      	add	r7, r9
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f30:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f34:	9712      	str	r7, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f36:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
    P( H, A, B, C, D, E, F, G, R(49), 0x1E376C08 );
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
 8004f3a:	4480      	add	r8, r0
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f3c:	4b6d      	ldr	r3, [pc, #436]	; (80050f4 <sha256_process+0x1c30>)
 8004f3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f40:	ea4f 17fa 	mov.w	r7, sl, ror #7
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f44:	4403      	add	r3, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f46:	ea87 47ba 	eor.w	r7, r7, sl, ror #18
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f4a:	ea85 090c 	eor.w	r9, r5, ip
 8004f4e:	441e      	add	r6, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f50:	ea87 07da 	eor.w	r7, r7, sl, lsr #3
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f56:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f5a:	ea08 0909 	and.w	r9, r8, r9
 8004f5e:	ea89 090c 	eor.w	r9, r9, ip
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f62:	4457      	add	r7, sl
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f64:	ea4f 0ab3 	mov.w	sl, r3, ror #2
 8004f68:	444e      	add	r6, r9
 8004f6a:	ea8a 3a73 	eor.w	sl, sl, r3, ror #13
 8004f6e:	ea43 0904 	orr.w	r9, r3, r4
 8004f72:	ea8a 5ab3 	eor.w	sl, sl, r3, ror #22
 8004f76:	ea4f 10b8 	mov.w	r0, r8, ror #6
 8004f7a:	4023      	ands	r3, r4
 8004f7c:	ea09 0901 	and.w	r9, r9, r1
 8004f80:	ea80 20f8 	eor.w	r0, r0, r8, ror #11
 8004f84:	ea49 0903 	orr.w	r9, r9, r3
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f8a:	ea80 6078 	eor.w	r0, r0, r8, ror #25
 8004f8e:	4406      	add	r6, r0
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f90:	ea4f 4073 	mov.w	r0, r3, ror #17
 8004f94:	ea80 40f3 	eor.w	r0, r0, r3, ror #19
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f98:	44d1      	add	r9, sl
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f9a:	445f      	add	r7, fp
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004f9c:	44b1      	add	r9, r6
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004f9e:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8004fa2:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <sha256_process+0x1c34>)
    P( G, H, A, B, C, D, E, F, R(50), 0x2748774C );
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
 8004fa4:	4432      	add	r2, r6
 8004fa6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004faa:	1838      	adds	r0, r7, r0
 8004fac:	ea88 0605 	eor.w	r6, r8, r5
 8004fb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004fb4:	4403      	add	r3, r0
 8004fb6:	4016      	ands	r6, r2
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fb8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fbc:	406e      	eors	r6, r5
 8004fbe:	449c      	add	ip, r3
 8004fc0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004fc4:	44b4      	add	ip, r6
 8004fc6:	ea4f 06ba 	mov.w	r6, sl, ror #2
 8004fca:	9013      	str	r0, [sp, #76]	; 0x4c
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fcc:	ea4f 17f9 	mov.w	r7, r9, ror #7
 8004fd0:	9815      	ldr	r0, [sp, #84]	; 0x54
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fd2:	ea86 367a 	eor.w	r6, r6, sl, ror #13
 8004fd6:	ea4a 030b 	orr.w	r3, sl, fp
 8004fda:	ea86 56ba 	eor.w	r6, r6, sl, ror #22
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004fde:	ea87 47b9 	eor.w	r7, r7, r9, ror #18
 8004fe2:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8004fe6:	ea87 07d0 	eor.w	r7, r7, r0, lsr #3
 8004fea:	4457      	add	r7, sl
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8004fec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004ff0:	ea4f 19b2 	mov.w	r9, r2, ror #6
 8004ff4:	4023      	ands	r3, r4
 8004ff6:	ea0a 000b 	and.w	r0, sl, fp
 8004ffa:	ea89 29f2 	eor.w	r9, r9, r2, ror #11
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8004ffe:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8005002:	ea89 6972 	eor.w	r9, r9, r2, ror #25
 8005006:	4318      	orrs	r0, r3
 8005008:	44cc      	add	ip, r9
 800500a:	4430      	add	r0, r6
 800500c:	4460      	add	r0, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800500e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8005010:	ea4f 437b 	mov.w	r3, fp, ror #17
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 8005014:	900d      	str	r0, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005016:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800501a:	ea83 43fb 	eor.w	r3, r3, fp, ror #19
    P( F, G, H, A, B, C, D, E, R(51), 0x34B0BCB5 );
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
 800501e:	4461      	add	r1, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005020:	ea83 239b 	eor.w	r3, r3, fp, lsr #10
 8005024:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8005028:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800502c:	4437      	add	r7, r6
 800502e:	441f      	add	r7, r3
 8005030:	4e32      	ldr	r6, [pc, #200]	; (80050fc <sha256_process+0x1c38>)
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005032:	ea4f 13fa 	mov.w	r3, sl, ror #7
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005036:	ea82 0908 	eor.w	r9, r2, r8
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800503a:	ea83 43ba 	eor.w	r3, r3, sl, ror #18
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800503e:	ea4b 0a0c 	orr.w	sl, fp, ip
 8005042:	ea4f 0cbb 	mov.w	ip, fp, ror #2
 8005046:	443e      	add	r6, r7
 8005048:	ea01 0909 	and.w	r9, r1, r9
 800504c:	ea8c 3c7b 	eor.w	ip, ip, fp, ror #13
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005050:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005054:	ea89 0908 	eor.w	r9, r9, r8
 8005058:	4435      	add	r5, r6
 800505a:	444d      	add	r5, r9
 800505c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800505e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005062:	ea83 03db 	eor.w	r3, r3, fp, lsr #3
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005066:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800506a:	ea0a 0a06 	and.w	sl, sl, r6
 800506e:	ea09 060b 	and.w	r6, r9, fp
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005072:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005076:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800507a:	ea4f 10b1 	mov.w	r0, r1, ror #6
 800507e:	ea8c 5cbb 	eor.w	ip, ip, fp, ror #22
 8005082:	ea80 20f1 	eor.w	r0, r0, r1, ror #11
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005086:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 800508a:	ea4a 0a06 	orr.w	sl, sl, r6
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800508e:	ea4f 4679 	mov.w	r6, r9, ror #17
 8005092:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 8005096:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 800509a:	44e2      	add	sl, ip
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800509c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80050a0:	4428      	add	r0, r5
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050a2:	ea86 46fb 	eor.w	r6, r6, fp, ror #19
 80050a6:	444b      	add	r3, r9
 80050a8:	ea86 259b 	eor.w	r5, r6, fp, lsr #10
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80050ac:	4482      	add	sl, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050ae:	4463      	add	r3, ip
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80050b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050b4:	442b      	add	r3, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050b6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    P( E, F, G, H, A, B, C, D, R(52), 0x391C0CB3 );
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
 80050b8:	4404      	add	r4, r0
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050ba:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050be:	ea4f 10f5 	mov.w	r0, r5, ror #7
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80050c4:	4e0e      	ldr	r6, [pc, #56]	; (8005100 <sha256_process+0x1c3c>)
 80050c6:	ea4b 0c05 	orr.w	ip, fp, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050ca:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050ce:	441e      	add	r6, r3
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80050d0:	ea80 40bb 	eor.w	r0, r0, fp, ror #18
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 80050d4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80050d8:	4446      	add	r6, r8
 80050da:	ea4f 05bb 	mov.w	r5, fp, ror #2
 80050de:	ea85 357b 	eor.w	r5, r5, fp, ror #13
 80050e2:	e00f      	b.n	8005104 <sha256_process+0x1c40>
 80050e4:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 80050e8:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 80050ec:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 80050f0:	5b9cca4f 	blpl	6737a34 <__Stack_Size+0x6737234>
 80050f4:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 80050f8:	748f82ee 	strvc	r8, [pc], #750	; 8005100 <sha256_process+0x1c3c>
 80050fc:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 8005100:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005104:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005108:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800510c:	ea80 00db 	eor.w	r0, r0, fp, lsr #3
 8005110:	9014      	str	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005112:	ea0c 0c08 	and.w	ip, ip, r8
 8005116:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005118:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800511c:	ea81 0a02 	eor.w	sl, r1, r2
 8005120:	ea00 0b08 	and.w	fp, r0, r8
 8005124:	ea4c 0c0b 	orr.w	ip, ip, fp
 8005128:	ea85 55b0 	eor.w	r5, r5, r0, ror #22
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800512c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8005130:	9814      	ldr	r0, [sp, #80]	; 0x50
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005132:	ea04 0a0a 	and.w	sl, r4, sl
 8005136:	ea4f 19b4 	mov.w	r9, r4, ror #6
 800513a:	ea8a 0a02 	eor.w	sl, sl, r2
 800513e:	ea89 29f4 	eor.w	r9, r9, r4, ror #11
 8005142:	44b2      	add	sl, r6
 8005144:	ea89 6974 	eor.w	r9, r9, r4, ror #25
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005148:	ea4f 4677 	mov.w	r6, r7, ror #17
 800514c:	4458      	add	r0, fp
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800514e:	eb0c 0b05 	add.w	fp, ip, r5
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005152:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005156:	eb0a 0809 	add.w	r8, sl, r9
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800515a:	ea86 46f7 	eor.w	r6, r6, r7, ror #19
 800515e:	ea86 2697 	eor.w	r6, r6, r7, lsr #10
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005162:	44c3      	add	fp, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005164:	9f18      	ldr	r7, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005166:	4460      	add	r0, ip
 8005168:	4daa      	ldr	r5, [pc, #680]	; (8005414 <sha256_process+0x1f50>)
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 800516a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800516e:	4430      	add	r0, r6
    P( D, E, F, G, H, A, B, C, R(53), 0x4ED8AA4A );
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
 8005170:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8005174:	44c4      	add	ip, r8
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005176:	ea4f 16f7 	mov.w	r6, r7, ror #7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800517a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800517e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005180:	4405      	add	r5, r0
 8005182:	1955      	adds	r5, r2, r5
 8005184:	950f      	str	r5, [sp, #60]	; 0x3c
 8005186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005188:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800518a:	ea48 0907 	orr.w	r9, r8, r7
 800518e:	ea4f 07b8 	mov.w	r7, r8, ror #2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005192:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005196:	ea84 0b01 	eor.w	fp, r4, r1
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800519a:	ea86 46b8 	eor.w	r6, r6, r8, ror #18
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800519e:	ea02 0805 	and.w	r8, r2, r5
 80051a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051a6:	ea09 0902 	and.w	r9, r9, r2
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051ac:	ea0c 0b0b 	and.w	fp, ip, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051b0:	ea86 06d2 	eor.w	r6, r6, r2, lsr #3
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051b4:	ea49 0808 	orr.w	r8, r9, r8
 80051b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051ba:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80051be:	ea4f 1abc 	mov.w	sl, ip, ror #6
 80051c2:	ea8b 0b01 	eor.w	fp, fp, r1
 80051c6:	ea87 3775 	eor.w	r7, r7, r5, ror #13
 80051ca:	4493      	add	fp, r2
 80051cc:	ea87 57b9 	eor.w	r7, r7, r9, ror #22
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051d2:	ea8a 2afc 	eor.w	sl, sl, ip, ror #11
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051d6:	ea4f 4573 	mov.w	r5, r3, ror #17
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051da:	ea8a 6a7c 	eor.w	sl, sl, ip, ror #25
 80051de:	44b8      	add	r8, r7
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051e0:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051e2:	44da      	add	sl, fp
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051e4:	4416      	add	r6, r2
 80051e6:	ea85 45f3 	eor.w	r5, r5, r3, ror #19
 80051ea:	443e      	add	r6, r7
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051ec:	44d0      	add	r8, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051ee:	ea85 2593 	eor.w	r5, r5, r3, lsr #10
 80051f2:	4f89      	ldr	r7, [pc, #548]	; (8005418 <sha256_process+0x1f54>)
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 80051f4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 80051f8:	1975      	adds	r5, r6, r5
 80051fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80051fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005200:	950f      	str	r5, [sp, #60]	; 0x3c
 8005202:	442f      	add	r7, r5
 8005204:	9d09      	ldr	r5, [sp, #36]	; 0x24
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005206:	ea4f 18f9 	mov.w	r8, r9, ror #7
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800520a:	ea4f 06b3 	mov.w	r6, r3, ror #2
 800520e:	ea43 0905 	orr.w	r9, r3, r5
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 8005214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005216:	ea88 48b3 	eor.w	r8, r8, r3, ror #18
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800521a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( C, D, E, F, G, H, A, B, R(54), 0x5B9CCA4F );
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
 800521c:	4452      	add	r2, sl
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800521e:	ea8c 0b04 	eor.w	fp, ip, r4
 8005222:	ea02 0b0b 	and.w	fp, r2, fp
 8005226:	4439      	add	r1, r7
 8005228:	ea03 0705 	and.w	r7, r3, r5
 800522c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800522e:	ea8b 0b04 	eor.w	fp, fp, r4
 8005232:	ea86 3673 	eor.w	r6, r6, r3, ror #13
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005238:	ea09 0905 	and.w	r9, r9, r5
 800523c:	4459      	add	r1, fp
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800523e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005242:	ea4f 1ab2 	mov.w	sl, r2, ror #6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005246:	ea88 08d3 	eor.w	r8, r8, r3, lsr #3
 800524a:	ea4f 4570 	mov.w	r5, r0, ror #17
 800524e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005250:	ea49 0707 	orr.w	r7, r9, r7
 8005254:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005258:	ea8a 2af2 	eor.w	sl, sl, r2, ror #11
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800525c:	44d8      	add	r8, fp
 800525e:	ea85 45f0 	eor.w	r5, r5, r0, ror #19
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005262:	ea8a 6a72 	eor.w	sl, sl, r2, ror #25
 8005266:	ea86 56b9 	eor.w	r6, r6, r9, ror #22
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 800526a:	4498      	add	r8, r3
 800526c:	ea85 2590 	eor.w	r5, r5, r0, lsr #10
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005270:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005272:	4451      	add	r1, sl
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005274:	4445      	add	r5, r8
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 8005276:	4437      	add	r7, r6
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005278:	950d      	str	r5, [sp, #52]	; 0x34
    P( B, C, D, E, F, G, H, A, R(55), 0x682E6FF3 );
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
 800527a:	187b      	adds	r3, r7, r1
 800527c:	4408      	add	r0, r1
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800527e:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005280:	4e66      	ldr	r6, [pc, #408]	; (800541c <sha256_process+0x1f58>)
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005282:	ea4f 18f1 	mov.w	r8, r1, ror #7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 8005286:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005288:	442e      	add	r6, r5
 800528a:	ea4f 17b0 	mov.w	r7, r0, ror #6
 800528e:	4434      	add	r4, r6
 8005290:	ea87 26f0 	eor.w	r6, r7, r0, ror #11
 8005294:	ea03 0701 	and.w	r7, r3, r1
 8005298:	9909      	ldr	r1, [sp, #36]	; 0x24
 800529a:	ea43 0a09 	orr.w	sl, r3, r9
 800529e:	ea0a 0a01 	and.w	sl, sl, r1
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052a4:	ea82 0b0c 	eor.w	fp, r2, ip
 80052a8:	ea4a 0a07 	orr.w	sl, sl, r7
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ac:	4d5c      	ldr	r5, [pc, #368]	; (8005420 <sha256_process+0x1f5c>)
 80052ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052b0:	ea00 0b0b 	and.w	fp, r0, fp
 80052b4:	ea4f 09b3 	mov.w	r9, r3, ror #2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052b8:	ea88 48b1 	eor.w	r8, r8, r1, ror #18
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052bc:	ea8b 0b0c 	eor.w	fp, fp, ip
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052c0:	443d      	add	r5, r7
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052c2:	ea89 3973 	eor.w	r9, r9, r3, ror #13
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052c6:	ea88 08d1 	eor.w	r8, r8, r1, lsr #3
 80052ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052cc:	ea86 6670 	eor.w	r6, r6, r0, ror #25
 80052d0:	ea89 59b3 	eor.w	r9, r9, r3, ror #22
 80052d4:	445c      	add	r4, fp
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052d6:	44a8      	add	r8, r5
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80052da:	4434      	add	r4, r6
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052dc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052de:	44ca      	add	sl, r9
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052e0:	ea4f 4b71 	mov.w	fp, r1, ror #17
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052e4:	4425      	add	r5, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052e6:	ea8b 4bf1 	eor.w	fp, fp, r1, ror #19
    P( A, B, C, D, E, F, G, H, R(56), 0x748F82EE );
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
 80052ea:	eb0a 0104 	add.w	r1, sl, r4
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 80052ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80052f0:	ea8b 2697 	eor.w	r6, fp, r7, lsr #10
 80052f4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80052f8:	44a0      	add	r8, r4
 80052fa:	ea41 0403 	orr.w	r4, r1, r3
 80052fe:	ea04 040b 	and.w	r4, r4, fp
 8005302:	940b      	str	r4, [sp, #44]	; 0x2c
 8005304:	ea80 0902 	eor.w	r9, r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005308:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800530a:	4446      	add	r6, r8
 800530c:	ea05 0909 	and.w	r9, r5, r9
 8005310:	4466      	add	r6, ip
 8005312:	ea4f 0ab1 	mov.w	sl, r1, ror #2
 8005316:	ea4f 18b5 	mov.w	r8, r5, ror #6
 800531a:	ea89 0902 	eor.w	r9, r9, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800531e:	ea4f 1cf4 	mov.w	ip, r4, ror #7
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005322:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005324:	ea01 0b03 	and.w	fp, r1, r3
 8005328:	44b1      	add	r9, r6
 800532a:	ea8a 3a71 	eor.w	sl, sl, r1, ror #13
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800532e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005330:	ea88 28f5 	eor.w	r8, r8, r5, ror #11
 8005334:	ea8a 5ab1 	eor.w	sl, sl, r1, ror #22
 8005338:	ea88 6875 	eor.w	r8, r8, r5, ror #25
 800533c:	ea44 0b0b 	orr.w	fp, r4, fp
 8005340:	eb0b 040a 	add.w	r4, fp, sl
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005344:	ea8c 4cb6 	eor.w	ip, ip, r6, ror #18
 8005348:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800534c:	eb09 0608 	add.w	r6, r9, r8
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005350:	4f34      	ldr	r7, [pc, #208]	; (8005424 <sha256_process+0x1f60>)
 8005352:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005356:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800535a:	4447      	add	r7, r8
 800535c:	ea4f 487a 	mov.w	r8, sl, ror #17
 8005360:	ea8c 0cd9 	eor.w	ip, ip, r9, lsr #3
 8005364:	ea88 48fa 	eor.w	r8, r8, sl, ror #19
 8005368:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800536c:	4467      	add	r7, ip
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800536e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005372:	4457      	add	r7, sl
 8005374:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 8005378:	4434      	add	r4, r6
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 800537a:	ea85 0c00 	eor.w	ip, r5, r0
    P( H, A, B, C, D, E, F, G, R(57), 0x78A5636F );
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
 800537e:	445e      	add	r6, fp
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 8005380:	ea88 289a 	eor.w	r8, r8, sl, lsr #10
 8005384:	ea06 0c0c 	and.w	ip, r6, ip
 8005388:	4447      	add	r7, r8
 800538a:	ea8c 0c00 	eor.w	ip, ip, r0
 800538e:	4417      	add	r7, r2
 8005390:	ea44 0b01 	orr.w	fp, r4, r1
 8005394:	9a04      	ldr	r2, [sp, #16]
 8005396:	ea4f 09b4 	mov.w	r9, r4, ror #2
 800539a:	4467      	add	r7, ip
 800539c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80053a0:	ea0b 0b03 	and.w	fp, fp, r3
 80053a4:	ea04 0a01 	and.w	sl, r4, r1
 80053a8:	ea89 3974 	eor.w	r9, r9, r4, ror #13
 80053ac:	ea89 59b4 	eor.w	r9, r9, r4, ror #22
 80053b0:	4494      	add	ip, r2
 80053b2:	ea4b 0a0a 	orr.w	sl, fp, sl
 80053b6:	9a08      	ldr	r2, [sp, #32]
 80053b8:	44ca      	add	sl, r9
 80053ba:	4492      	add	sl, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80053bc:	9a01      	ldr	r2, [sp, #4]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053be:	ea4f 18b6 	mov.w	r8, r6, ror #6
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80053c2:	4410      	add	r0, r2
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053c4:	9a05      	ldr	r2, [sp, #20]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053c6:	ea88 28f6 	eor.w	r8, r8, r6, ror #11

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053ca:	4413      	add	r3, r2
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80053cc:	9a02      	ldr	r2, [sp, #8]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053ce:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80053d2:	4415      	add	r5, r2
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053d4:	9a06      	ldr	r2, [sp, #24]
    P( G, H, A, B, C, D, E, F, R(58), 0x84C87814 );
    P( F, G, H, A, B, C, D, E, R(59), 0x8CC70208 );
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );
 80053d6:	4447      	add	r7, r8

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053d8:	4411      	add	r1, r2
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80053da:	9a07      	ldr	r2, [sp, #28]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053dc:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
    ctx->state[1] += B;
 80053e0:	4414      	add	r4, r2
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053e2:	9a03      	ldr	r2, [sp, #12]
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053e4:	44ba      	add	sl, r7
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053e6:	4416      	add	r6, r2

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 80053e8:	4467      	add	r7, ip
    P( E, F, G, H, A, B, C, D, R(60), 0x90BEFFFA );
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
 80053ea:	f8c8 a008 	str.w	sl, [r8, #8]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80053ee:	f8c8 3014 	str.w	r3, [r8, #20]
    ctx->state[4] += E;
 80053f2:	f8c8 7018 	str.w	r7, [r8, #24]
    P( D, E, F, G, H, A, B, C, R(61), 0xA4506CEB );
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
 80053f6:	f8c8 400c 	str.w	r4, [r8, #12]
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
 80053fa:	f8c8 601c 	str.w	r6, [r8, #28]
    P( C, D, E, F, G, H, A, B, R(62), 0xBEF9A3F7 );
    P( B, C, D, E, F, G, H, A, R(63), 0xC67178F2 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80053fe:	f8c8 1010 	str.w	r1, [r8, #16]
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 8005402:	f8c8 5020 	str.w	r5, [r8, #32]
    ctx->state[7] += H;
 8005406:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
}
 800540a:	b01c      	add	sp, #112	; 0x70
 800540c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8005418:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 800541c:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8005420:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8005424:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

08005428 <sha256_update>:

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 8005428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32 left, fill;

    if( ! length ) return;
 800542c:	4617      	mov	r7, r2
    ctx->state[6] += G;
    ctx->state[7] += H;
}

void sha256_update( sha256_context *ctx, uint8 *input, uint32 length )
{
 800542e:	4606      	mov	r6, r0
 8005430:	4688      	mov	r8, r1
    uint32 left, fill;

    if( ! length ) return;
 8005432:	b302      	cbz	r2, 8005476 <sha256_update+0x4e>

    left = ctx->total[0] & 0x3F;
 8005434:	6803      	ldr	r3, [r0, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 8005436:	441a      	add	r2, r3
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005438:	4297      	cmp	r7, r2
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800543a:	6002      	str	r2, [r0, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 800543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005440:	d902      	bls.n	8005448 <sha256_update+0x20>
        ctx->total[1]++;
 8005442:	6842      	ldr	r2, [r0, #4]
 8005444:	3201      	adds	r2, #1
 8005446:	6042      	str	r2, [r0, #4]

    if( left && length >= fill )
 8005448:	b9bb      	cbnz	r3, 800547a <sha256_update+0x52>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800544a:	2f3f      	cmp	r7, #63	; 0x3f
 800544c:	d912      	bls.n	8005474 <sha256_update+0x4c>
 800544e:	463d      	mov	r5, r7
 8005450:	4644      	mov	r4, r8
    {
        sha256_process( ctx, input );
 8005452:	4621      	mov	r1, r4
        length -= 64;
 8005454:	3d40      	subs	r5, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005456:	4630      	mov	r0, r6
 8005458:	f7fe f834 	bl	80034c4 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800545c:	2d3f      	cmp	r5, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 800545e:	f104 0440 	add.w	r4, r4, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005462:	d8f6      	bhi.n	8005452 <sha256_update+0x2a>
 8005464:	f1a7 0340 	sub.w	r3, r7, #64	; 0x40
 8005468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800546c:	3340      	adds	r3, #64	; 0x40
 800546e:	4498      	add	r8, r3
 8005470:	f007 073f 	and.w	r7, r7, #63	; 0x3f
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005474:	b9ef      	cbnz	r7, 80054b2 <sha256_update+0x8a>
 8005476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800547a:	f1c3 0440 	rsb	r4, r3, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800547e:	42a7      	cmp	r7, r4
 8005480:	d208      	bcs.n	8005494 <sha256_update+0x6c>
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005482:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005486:	4430      	add	r0, r6
 8005488:	4641      	mov	r1, r8
 800548a:	463a      	mov	r2, r7
                (void *) input, length );
    }
}
 800548c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005490:	f001 bc34 	b.w	8006cfc <memcpy>
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005494:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005498:	4641      	mov	r1, r8
 800549a:	4622      	mov	r2, r4
 800549c:	4430      	add	r0, r6
 800549e:	f001 fc2d 	bl	8006cfc <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 80054a2:	4630      	mov	r0, r6
 80054a4:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80054a8:	f7fe f80c 	bl	80034c4 <sha256_process>
        length -= fill;
 80054ac:	1b3f      	subs	r7, r7, r4
        input  += fill;
 80054ae:	44a0      	add	r8, r4
 80054b0:	e7cb      	b.n	800544a <sha256_update+0x22>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80054b2:	2300      	movs	r3, #0
 80054b4:	e7e5      	b.n	8005482 <sha256_update+0x5a>
 80054b6:	bf00      	nop

080054b8 <sha256_finish>:
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80054bc:	e890 0088 	ldmia.w	r0, {r3, r7}
    low  = ( ctx->total[0] <<  3 );
 80054c0:	00da      	lsls	r2, r3, #3

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80054c2:	f003 063f 	and.w	r6, r3, #63	; 0x3f
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054c6:	b083      	sub	sp, #12
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80054c8:	ea4f 6812 	mov.w	r8, r2, lsr #24

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80054cc:	2e37      	cmp	r6, #55	; 0x37
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
    PUT_UINT32( low,  msglen, 4 );
 80054ce:	f88d 8004 	strb.w	r8, [sp, #4]

    last = ctx->total[0] & 0x3F;
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80054d2:	bf94      	ite	ls
 80054d4:	f1c6 0838 	rsbls	r8, r6, #56	; 0x38
 80054d8:	f1c6 0878 	rsbhi	r8, r6, #120	; 0x78
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 80054dc:	4604      	mov	r4, r0
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80054de:	0f58      	lsrs	r0, r3, #29
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 80054e0:	4443      	add	r3, r8
{
    uint32 last, padn;
    uint32 high, low;
    uint8 msglen[8];

    high = ( ctx->total[0] >> 29 )
 80054e2:	ea40 00c7 	orr.w	r0, r0, r7, lsl #3
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 80054e6:	4598      	cmp	r8, r3

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 80054e8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80054ec:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 80054f0:	ea4f 2910 	mov.w	r9, r0, lsr #8
    PUT_UINT32( low,  msglen, 4 );
 80054f4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80054f8:	ea4f 2e12 	mov.w	lr, r2, lsr #8

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 80054fc:	bf88      	it	hi
 80054fe:	3701      	addhi	r7, #1
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

void sha256_finish( sha256_context *ctx, uint8 digest[32] )
{
 8005500:	460d      	mov	r5, r1

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32( high, msglen, 0 );
 8005502:	f88d 0003 	strb.w	r0, [sp, #3]
 8005506:	f88d b000 	strb.w	fp, [sp]
 800550a:	f88d a001 	strb.w	sl, [sp, #1]
 800550e:	f88d 9002 	strb.w	r9, [sp, #2]
    PUT_UINT32( low,  msglen, 4 );
 8005512:	f88d 2007 	strb.w	r2, [sp, #7]
 8005516:	f88d c005 	strb.w	ip, [sp, #5]
 800551a:	f88d e006 	strb.w	lr, [sp, #6]
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800551e:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;
 8005520:	bf88      	it	hi
 8005522:	6067      	strhi	r7, [r4, #4]

    if( left && length >= fill )
 8005524:	2e00      	cmp	r6, #0
 8005526:	f000 80a1 	beq.w	800566c <sha256_finish+0x1b4>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 800552a:	f1c6 0740 	rsb	r7, r6, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800552e:	45b8      	cmp	r8, r7
 8005530:	d273      	bcs.n	800561a <sha256_finish+0x162>
 8005532:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80056cc <sha256_finish+0x214>
 8005536:	4642      	mov	r2, r8
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 8005538:	b12a      	cbz	r2, 8005546 <sha256_finish+0x8e>
    {
        memcpy( (void *) (ctx->buffer + left),
 800553a:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800553e:	4420      	add	r0, r4
 8005540:	4649      	mov	r1, r9
 8005542:	f001 fbdb 	bl	8006cfc <memcpy>
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005546:	6822      	ldr	r2, [r4, #0]
    fill = 64 - left;

    ctx->total[0] += length;
 8005548:	f102 0308 	add.w	r3, r2, #8
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 800554c:	2b07      	cmp	r3, #7
    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += length;
 800554e:	6023      	str	r3, [r4, #0]
{
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
 8005550:	f002 083f 	and.w	r8, r2, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += length;
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
 8005554:	d802      	bhi.n	800555c <sha256_finish+0xa4>
        ctx->total[1]++;
 8005556:	6863      	ldr	r3, [r4, #4]
 8005558:	3301      	adds	r3, #1
 800555a:	6063      	str	r3, [r4, #4]

    if( left && length >= fill )
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	d005      	beq.n	800556e <sha256_finish+0xb6>
    uint32 left, fill;

    if( ! length ) return;

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8005562:	f1c8 0940 	rsb	r9, r8, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 8005566:	f1b9 0f08 	cmp.w	r9, #8
 800556a:	f240 8082 	bls.w	8005672 <sha256_finish+0x1ba>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 800556e:	2608      	movs	r6, #8
 8005570:	46e9      	mov	r9, sp
        input  += 64;
    }

    if( length )
    {
        memcpy( (void *) (ctx->buffer + left),
 8005572:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8005576:	4420      	add	r0, r4
 8005578:	4649      	mov	r1, r9
 800557a:	4632      	mov	r2, r6
 800557c:	f001 fbbe 	bl	8006cfc <memcpy>
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );

    sha256_update( ctx, sha256_padding, padn );
    sha256_update( ctx, msglen, 8 );

    PUT_UINT32( ctx->state[0], digest,  0 );
 8005580:	7ae3      	ldrb	r3, [r4, #11]
 8005582:	702b      	strb	r3, [r5, #0]
 8005584:	8963      	ldrh	r3, [r4, #10]
 8005586:	706b      	strb	r3, [r5, #1]
 8005588:	68a3      	ldr	r3, [r4, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	70ab      	strb	r3, [r5, #2]
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32( ctx->state[1], digest,  4 );
 8005592:	7be3      	ldrb	r3, [r4, #15]
 8005594:	712b      	strb	r3, [r5, #4]
 8005596:	89e3      	ldrh	r3, [r4, #14]
 8005598:	716b      	strb	r3, [r5, #5]
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	0a1b      	lsrs	r3, r3, #8
 800559e:	71ab      	strb	r3, [r5, #6]
 80055a0:	68e3      	ldr	r3, [r4, #12]
 80055a2:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32( ctx->state[2], digest,  8 );
 80055a4:	7ce3      	ldrb	r3, [r4, #19]
 80055a6:	722b      	strb	r3, [r5, #8]
 80055a8:	8a63      	ldrh	r3, [r4, #18]
 80055aa:	726b      	strb	r3, [r5, #9]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	72ab      	strb	r3, [r5, #10]
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32( ctx->state[3], digest, 12 );
 80055b6:	7de3      	ldrb	r3, [r4, #23]
 80055b8:	732b      	strb	r3, [r5, #12]
 80055ba:	8ae3      	ldrh	r3, [r4, #22]
 80055bc:	736b      	strb	r3, [r5, #13]
 80055be:	6963      	ldr	r3, [r4, #20]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	73ab      	strb	r3, [r5, #14]
 80055c4:	6963      	ldr	r3, [r4, #20]
 80055c6:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32( ctx->state[4], digest, 16 );
 80055c8:	7ee3      	ldrb	r3, [r4, #27]
 80055ca:	742b      	strb	r3, [r5, #16]
 80055cc:	8b63      	ldrh	r3, [r4, #26]
 80055ce:	746b      	strb	r3, [r5, #17]
 80055d0:	69a3      	ldr	r3, [r4, #24]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	74ab      	strb	r3, [r5, #18]
 80055d6:	69a3      	ldr	r3, [r4, #24]
 80055d8:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32( ctx->state[5], digest, 20 );
 80055da:	7fe3      	ldrb	r3, [r4, #31]
 80055dc:	752b      	strb	r3, [r5, #20]
 80055de:	8be3      	ldrh	r3, [r4, #30]
 80055e0:	756b      	strb	r3, [r5, #21]
 80055e2:	69e3      	ldr	r3, [r4, #28]
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	75ab      	strb	r3, [r5, #22]
 80055e8:	69e3      	ldr	r3, [r4, #28]
 80055ea:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32( ctx->state[6], digest, 24 );
 80055ec:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80055f0:	762b      	strb	r3, [r5, #24]
 80055f2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80055f4:	766b      	strb	r3, [r5, #25]
 80055f6:	6a23      	ldr	r3, [r4, #32]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	76ab      	strb	r3, [r5, #26]
 80055fc:	6a23      	ldr	r3, [r4, #32]
 80055fe:	76eb      	strb	r3, [r5, #27]
    PUT_UINT32( ctx->state[7], digest, 28 );
 8005600:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005604:	772b      	strb	r3, [r5, #28]
 8005606:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005608:	776b      	strb	r3, [r5, #29]
 800560a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800560c:	0a1b      	lsrs	r3, r3, #8
 800560e:	77ab      	strb	r3, [r5, #30]
 8005610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005612:	77eb      	strb	r3, [r5, #31]
 8005614:	b003      	add	sp, #12
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
 800561a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80056cc <sha256_finish+0x214>
 800561e:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005622:	4649      	mov	r1, r9
 8005624:	4420      	add	r0, r4
 8005626:	463a      	mov	r2, r7
 8005628:	f001 fb68 	bl	8006cfc <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800562c:	4620      	mov	r0, r4
 800562e:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
 8005632:	ebc7 0808 	rsb	r8, r7, r8
        input  += fill;
 8005636:	44b9      	add	r9, r7

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005638:	f7fd ff44 	bl	80034c4 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 800563c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8005640:	d93a      	bls.n	80056b8 <sha256_finish+0x200>
 8005642:	4647      	mov	r7, r8
 8005644:	464e      	mov	r6, r9
    {
        sha256_process( ctx, input );
 8005646:	4631      	mov	r1, r6
        length -= 64;
 8005648:	3f40      	subs	r7, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800564a:	4620      	mov	r0, r4
 800564c:	f7fd ff3a 	bl	80034c4 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005650:	2f3f      	cmp	r7, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 8005652:	f106 0640 	add.w	r6, r6, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005656:	d8f6      	bhi.n	8005646 <sha256_finish+0x18e>
 8005658:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
 800565c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005660:	3340      	adds	r3, #64	; 0x40
 8005662:	4499      	add	r9, r3
 8005664:	f008 023f 	and.w	r2, r8, #63	; 0x3f
 8005668:	2600      	movs	r6, #0
 800566a:	e765      	b.n	8005538 <sha256_finish+0x80>
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < length )
        ctx->total[1]++;

    if( left && length >= fill )
 800566c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80056cc <sha256_finish+0x214>
 8005670:	e7e4      	b.n	800563c <sha256_finish+0x184>
    {
        memcpy( (void *) (ctx->buffer + left),
 8005672:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8005676:	464a      	mov	r2, r9
 8005678:	4669      	mov	r1, sp
 800567a:	4420      	add	r0, r4
 800567c:	f001 fb3e 	bl	8006cfc <memcpy>
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
 8005680:	f1a8 0638 	sub.w	r6, r8, #56	; 0x38
        input  += fill;
 8005684:	ab00      	add	r3, sp, #0

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 8005686:	4620      	mov	r0, r4
 8005688:	f104 0128 	add.w	r1, r4, #40	; 0x28
        length -= fill;
        input  += fill;
 800568c:	4499      	add	r9, r3

    if( left && length >= fill )
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
 800568e:	f7fd ff19 	bl	80034c4 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 8005692:	2e3f      	cmp	r6, #63	; 0x3f
 8005694:	d913      	bls.n	80056be <sha256_finish+0x206>
    {
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
 8005696:	464f      	mov	r7, r9
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 8005698:	4639      	mov	r1, r7
        length -= 64;
 800569a:	3e40      	subs	r6, #64	; 0x40
        left = 0;
    }

    while( length >= 64 )
    {
        sha256_process( ctx, input );
 800569c:	4620      	mov	r0, r4
 800569e:	f7fd ff11 	bl	80034c4 <sha256_process>
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80056a2:	2e3f      	cmp	r6, #63	; 0x3f
    {
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
 80056a4:	f107 0740 	add.w	r7, r7, #64	; 0x40
        length -= fill;
        input  += fill;
        left = 0;
    }

    while( length >= 64 )
 80056a8:	d8f6      	bhi.n	8005698 <sha256_finish+0x1e0>
 80056aa:	f108 0608 	add.w	r6, r8, #8
 80056ae:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80056b2:	f04f 0800 	mov.w	r8, #0
 80056b6:	e75c      	b.n	8005572 <sha256_finish+0xba>
    }

    while( length >= 64 )
 80056b8:	4642      	mov	r2, r8
 80056ba:	2600      	movs	r6, #0
 80056bc:	e73c      	b.n	8005538 <sha256_finish+0x80>
        sha256_process( ctx, input );
        length -= 64;
        input  += 64;
    }

    if( length )
 80056be:	2e00      	cmp	r6, #0
 80056c0:	f43f af5e 	beq.w	8005580 <sha256_finish+0xc8>
        memcpy( (void *) (ctx->buffer + left),
                (void *) input, fill );
        sha256_process( ctx, ctx->buffer );
        length -= fill;
        input  += fill;
        left = 0;
 80056c4:	f04f 0800 	mov.w	r8, #0
 80056c8:	e753      	b.n	8005572 <sha256_finish+0xba>
 80056ca:	bf00      	nop
 80056cc:	200002c4 	andcs	r0, r0, r4, asr #5

080056d0 <sha512_block>:
{
	return (x >> bits) | (x << (64 - bits));
}

void sha512_block(struct sha512_state *s, const uint8_t *blk)
{
 80056d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056d4:	b0e4      	sub	sp, #400	; 0x190
 80056d6:	460c      	mov	r4, r1
 80056d8:	9033      	str	r0, [sp, #204]	; 0xcc
 80056da:	f101 0c80 	add.w	ip, r1, #128	; 0x80
 80056de:	ad42      	add	r5, sp, #264	; 0x108

static inline uint64_t load64(const uint8_t *x)
{
	uint64_t r;

	r = *(x++);
 80056e0:	7820      	ldrb	r0, [r4, #0]
	r = (r << 8) | *(x++);
 80056e2:	2100      	movs	r1, #0
 80056e4:	0e02      	lsrs	r2, r0, #24
 80056e6:	0203      	lsls	r3, r0, #8
 80056e8:	9211      	str	r2, [sp, #68]	; 0x44
 80056ea:	7860      	ldrb	r0, [r4, #1]
 80056ec:	9310      	str	r3, [sp, #64]	; 0x40
 80056ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056f2:	4339      	orrs	r1, r7
 80056f4:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 80056f6:	020f      	lsls	r7, r1, #8
 80056f8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80056fc:	0206      	lsls	r6, r0, #8
 80056fe:	2100      	movs	r1, #0
 8005700:	78a0      	ldrb	r0, [r4, #2]
 8005702:	4339      	orrs	r1, r7
 8005704:	4330      	orrs	r0, r6
	r = (r << 8) | *(x++);
 8005706:	ea4f 2801 	mov.w	r8, r1, lsl #8
 800570a:	ea48 6910 	orr.w	r9, r8, r0, lsr #24
 800570e:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 8005712:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8005716:	78e0      	ldrb	r0, [r4, #3]
 8005718:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800571c:	2100      	movs	r1, #0
 800571e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005722:	4319      	orrs	r1, r3
 8005724:	4310      	orrs	r0, r2
	r = (r << 8) | *(x++);
 8005726:	020b      	lsls	r3, r1, #8
 8005728:	ea43 6810 	orr.w	r8, r3, r0, lsr #24
 800572c:	ea4f 2900 	mov.w	r9, r0, lsl #8
 8005730:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8005734:	7920      	ldrb	r0, [r4, #4]
 8005736:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800573a:	2100      	movs	r1, #0
 800573c:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8005740:	ea41 010b 	orr.w	r1, r1, fp
 8005744:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 8005748:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800574c:	ea4b 6b10 	orr.w	fp, fp, r0, lsr #24
 8005750:	ea4f 2a00 	mov.w	sl, r0, lsl #8
 8005754:	2100      	movs	r1, #0
 8005756:	7960      	ldrb	r0, [r4, #5]
 8005758:	ea41 010b 	orr.w	r1, r1, fp
 800575c:	ea40 000a 	orr.w	r0, r0, sl
	r = (r << 8) | *(x++);
 8005760:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8005764:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8005768:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800576c:	2100      	movs	r1, #0
 800576e:	79a0      	ldrb	r0, [r4, #6]
 8005770:	ea41 0109 	orr.w	r1, r1, r9
 8005774:	ea40 0008 	orr.w	r0, r0, r8
	r = (r << 8) | *(x++);
 8005778:	020b      	lsls	r3, r1, #8
 800577a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800577e:	0202      	lsls	r2, r0, #8
 8005780:	79e0      	ldrb	r0, [r4, #7]
 8005782:	2100      	movs	r1, #0
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
		w[i] = load64(blk);
		blk += 8;
 8005784:	3408      	adds	r4, #8
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
	r = (r << 8) | *(x++);
 8005786:	4310      	orrs	r0, r2
 8005788:	4319      	orrs	r1, r3
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 800578a:	4564      	cmp	r4, ip
		w[i] = load64(blk);
 800578c:	e9e5 0102 	strd	r0, r1, [r5, #8]!
{
	uint64_t w[16];
	uint64_t a, b, c, d, e, f, g, h;
	int i;

	for (i = 0; i < 16; i++) {
 8005790:	d1a6      	bne.n	80056e0 <sha512_block+0x10>
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 8005792:	9b33      	ldr	r3, [sp, #204]	; 0xcc
	c = s->h[2];
 8005794:	9d33      	ldr	r5, [sp, #204]	; 0xcc
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
 8005796:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 800579a:	9933      	ldr	r1, [sp, #204]	; 0xcc
	b = s->h[1];
 800579c:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	c = s->h[2];
 80057a0:	e9d5 4504 	ldrd	r4, r5, [r5, #16]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057a4:	e9d1 0100 	ldrd	r0, r1, [r1]
	b = s->h[1];
 80057a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057ac:	9a33      	ldr	r2, [sp, #204]	; 0xcc
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 80057ae:	e9cd 4538 	strd	r4, r5, [sp, #224]	; 0xe0
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057b2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
	}

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
 80057ba:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	d = s->h[3];
 80057be:	9f33      	ldr	r7, [sp, #204]	; 0xcc
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057c0:	ac40      	add	r4, sp, #256	; 0x100
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057c2:	4689      	mov	r9, r1
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 80057c4:	e9c4 2300 	strd	r2, r3, [r4]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057c8:	e9d7 6706 	ldrd	r6, r7, [r7, #24]
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057cc:	e9cd 0134 	strd	r0, r1, [sp, #208]	; 0xd0
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 80057d0:	f8dd b0cc 	ldr.w	fp, [sp, #204]	; 0xcc
	f = s->h[5];
 80057d4:	9933      	ldr	r1, [sp, #204]	; 0xcc
	g = s->h[6];
	h = s->h[7];
 80057d6:	9c33      	ldr	r4, [sp, #204]	; 0xcc

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057d8:	e9cd 673a 	strd	r6, r7, [sp, #232]	; 0xe8
	e = s->h[4];
 80057dc:	e9db ab08 	ldrd	sl, fp, [fp, #32]
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80057e0:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80057e4:	e9d5 4500 	ldrd	r4, r5, [r5]

	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
 80057e8:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 80057ec:	ae42      	add	r6, sp, #264	; 0x108
		w[i] = load64(blk);
		blk += 8;
	}

	/* Load state */
	a = s->h[0];
 80057ee:	4680      	mov	r8, r0
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 80057f0:	f04f 0c00 	mov.w	ip, #0
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80057f4:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
	g = s->h[6];
 80057f8:	461f      	mov	r7, r3
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
 80057fa:	e9cd 013e 	strd	r0, r1, [sp, #248]	; 0xf8
 80057fe:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	g = s->h[6];
	h = s->h[7];
 8005802:	465b      	mov	r3, fp
 8005804:	e9c6 4500 	strd	r4, r5, [r6]
 8005808:	4620      	mov	r0, r4
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 800580a:	4616      	mov	r6, r2
	h = s->h[7];
 800580c:	4629      	mov	r1, r5
 800580e:	4652      	mov	r2, sl
	/* Load state */
	a = s->h[0];
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
 8005810:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8005814:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];
 8005818:	46c2      	mov	sl, r8
 800581a:	46cb      	mov	fp, r9
 800581c:	4690      	mov	r8, r2
	b = s->h[1];
	c = s->h[2];
	d = s->h[3];
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
 800581e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	h = s->h[7];
 8005822:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 8005826:	4699      	mov	r9, r3
 8005828:	4662      	mov	r2, ip
 800582a:	e018      	b.n	800585e <sha512_block+0x18e>

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 800582c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8005830:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8005834:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8005838:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800583c:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 8005840:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8005844:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8005848:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 800584c:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005850:	4690      	mov	r8, r2
 8005852:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005854:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8005858:	4699      	mov	r9, r3
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 800585a:	4682      	mov	sl, r0
 800585c:	468b      	mov	fp, r1
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
 800585e:	ab64      	add	r3, sp, #400	; 0x190
 8005860:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005864:	ea4f 4298 	mov.w	r2, r8, lsr #18
 8005868:	ea42 3289 	orr.w	r2, r2, r9, lsl #14
 800586c:	9216      	str	r2, [sp, #88]	; 0x58
 800586e:	ea4f 3298 	mov.w	r2, r8, lsr #14
 8005872:	ea42 4289 	orr.w	r2, r2, r9, lsl #18
 8005876:	9218      	str	r2, [sp, #96]	; 0x60
 8005878:	ea4f 4299 	mov.w	r2, r9, lsr #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800587c:	f10c 0c01 	add.w	ip, ip, #1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005880:	ea42 3288 	orr.w	r2, r2, r8, lsl #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005884:	f00c 040f 	and.w	r4, ip, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005888:	9217      	str	r2, [sp, #92]	; 0x5c
 800588a:	ea4f 3299 	mov.w	r2, r9, lsr #14
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800588e:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005892:	ea42 4288 	orr.w	r2, r2, r8, lsl #18
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 8005896:	e951 0120 	ldrd	r0, r1, [r1, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800589a:	9219      	str	r2, [sp, #100]	; 0x64
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 800589c:	09c6      	lsrs	r6, r0, #7
	h = s->h[7];

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
 800589e:	9410      	str	r4, [sp, #64]	; 0x40
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058a0:	ea4f 52c8 	mov.w	r2, r8, lsl #23
 80058a4:	0844      	lsrs	r4, r0, #1
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058a6:	ea46 6741 	orr.w	r7, r6, r1, lsl #25
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058aa:	ea44 74c1 	orr.w	r4, r4, r1, lsl #31
 80058ae:	ea42 2259 	orr.w	r2, r2, r9, lsr #9
 80058b2:	f10c 030d 	add.w	r3, ip, #13
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058b6:	9708      	str	r7, [sp, #32]
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058b8:	9422      	str	r4, [sp, #136]	; 0x88
 80058ba:	921a      	str	r2, [sp, #104]	; 0x68
 80058bc:	0a04      	lsrs	r4, r0, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058be:	af64      	add	r7, sp, #400	; 0x190
 80058c0:	f003 030f 	and.w	r3, r3, #15
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058c4:	ea4f 52c9 	mov.w	r2, r9, lsl #23
 80058c8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80058cc:	084e      	lsrs	r6, r1, #1

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058ce:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058d2:	ea42 2258 	orr.w	r2, r2, r8, lsr #9
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058d6:	09cf      	lsrs	r7, r1, #7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058d8:	ea46 76c0 	orr.w	r6, r6, r0, lsl #31
 80058dc:	9424      	str	r4, [sp, #144]	; 0x90
 80058de:	921b      	str	r2, [sp, #108]	; 0x6c
 80058e0:	0a09      	lsrs	r1, r1, #8

	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
 80058e2:	e953 2320 	ldrd	r2, r3, [r3, #-128]	; 0x80
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058e6:	0994      	lsrs	r4, r2, #6
 80058e8:	940a      	str	r4, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058ea:	9709      	str	r7, [sp, #36]	; 0x24
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80058ec:	9623      	str	r6, [sp, #140]	; 0x8c
 80058ee:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80058f2:	9125      	str	r1, [sp, #148]	; 0x94
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 80058f4:	e9dd 6722 	ldrd	r6, r7, [sp, #136]	; 0x88
 80058f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058fc:	404f      	eors	r7, r1
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 80058fe:	990a      	ldr	r1, [sp, #40]	; 0x28
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
 8005900:	4046      	eors	r6, r0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005902:	ea41 6183 	orr.w	r1, r1, r3, lsl #26
 8005906:	910a      	str	r1, [sp, #40]	; 0x28
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005908:	0cd1      	lsrs	r1, r2, #19
 800590a:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 800590e:	9126      	str	r1, [sp, #152]	; 0x98
 8005910:	ea4f 718a 	mov.w	r1, sl, lsl #30
 8005914:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 8005918:	911c      	str	r1, [sp, #112]	; 0x70
 800591a:	ea4f 711a 	mov.w	r1, sl, lsr #28
 800591e:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 8005922:	911e      	str	r1, [sp, #120]	; 0x78
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
 8005924:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8005928:	4070      	eors	r0, r6
 800592a:	4079      	eors	r1, r7
 800592c:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005930:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005934:	0999      	lsrs	r1, r3, #6
 8005936:	910b      	str	r1, [sp, #44]	; 0x2c

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
 8005938:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800593c:	4070      	eors	r0, r6
 800593e:	4079      	eors	r1, r7
 8005940:	f10c 0408 	add.w	r4, ip, #8
 8005944:	e9dd 671a 	ldrd	r6, r7, [sp, #104]	; 0x68
 8005948:	4046      	eors	r6, r0
 800594a:	404f      	eors	r7, r1
 800594c:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005950:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
	for (i = 0; i < 80; i++) {
		/* Compute value of w[i + 16]. w[wrap(i)] is currently w[i] */
		const uint64_t wi = w[i & 15];
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
 8005954:	af64      	add	r7, sp, #400	; 0x190
 8005956:	f004 040f 	and.w	r4, r4, #15
 800595a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800595e:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
 8005962:	1980      	adds	r0, r0, r6
 8005964:	eb41 0107 	adc.w	r1, r1, r7
 8005968:	e9cd 0130 	strd	r0, r1, [sp, #192]	; 0xc0
 800596c:	e954 0120 	ldrd	r0, r1, [r4, #-128]	; 0x80
 8005970:	e9dd 6730 	ldrd	r6, r7, [sp, #192]	; 0xc0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005974:	0cdc      	lsrs	r4, r3, #19
 8005976:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 800597a:	9427      	str	r4, [sp, #156]	; 0x9c
 800597c:	00d4      	lsls	r4, r2, #3
 800597e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 8005982:	00db      	lsls	r3, r3, #3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005984:	1980      	adds	r0, r0, r6
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 800598a:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 800598e:	9428      	str	r4, [sp, #160]	; 0xa0
 8005990:	9329      	str	r3, [sp, #164]	; 0xa4
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);
 8005992:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8005996:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800599a:	4056      	eors	r6, r2
 800599c:	405f      	eors	r7, r3
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 800599e:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80059a2:	4056      	eors	r6, r2
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80059a4:	1982      	adds	r2, r0, r6
		const uint64_t wi15 = w[(i + 1) & 15];
		const uint64_t wi2 = w[(i + 14) & 15];
		const uint64_t wi7 = w[(i + 9) & 15];
		const uint64_t s0 =
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
 80059a6:	ea87 0703 	eor.w	r7, r7, r3
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 80059aa:	eb41 0307 	adc.w	r3, r1, r7
 80059ae:	e9cd 2330 	strd	r2, r3, [sp, #192]	; 0xc0
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
 80059b2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80059b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80059ba:	ea20 0008 	bic.w	r0, r0, r8
 80059be:	ea02 0208 	and.w	r2, r2, r8
 80059c2:	ea03 0309 	and.w	r3, r3, r9
 80059c6:	ea21 0109 	bic.w	r1, r1, r9
 80059ca:	4050      	eors	r0, r2
 80059cc:	4059      	eors	r1, r3
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059ce:	ea4f 738b 	mov.w	r3, fp, lsl #30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059d2:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059d6:	ea43 039a 	orr.w	r3, r3, sl, lsr #2

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059da:	1980      	adds	r0, r0, r6
 80059dc:	eb41 0107 	adc.w	r1, r1, r7
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059e0:	931d      	str	r3, [sp, #116]	; 0x74

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059e2:	e955 6720 	ldrd	r6, r7, [r5, #-128]	; 0x80
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059e6:	ea4f 634a 	mov.w	r3, sl, lsl #25

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 80059ea:	1836      	adds	r6, r6, r0
 80059ec:	eb47 0701 	adc.w	r7, r7, r1
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059f0:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 80059f4:	ea4f 721b 	mov.w	r2, fp, lsr #28
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 80059f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 80059fc:	ea42 120a 	orr.w	r2, r2, sl, lsl #4
 8005a00:	9320      	str	r3, [sp, #128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a02:	e9cd 672e 	strd	r6, r7, [sp, #184]	; 0xb8
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a06:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005a0a:	ea4f 634b 	mov.w	r3, fp, lsl #25
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a0e:	404f      	eors	r7, r1
 8005a10:	4953      	ldr	r1, [pc, #332]	; (8005b60 <sha512_block+0x490>)
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005a12:	921f      	str	r2, [sp, #124]	; 0x7c
 8005a14:	ea43 13da 	orr.w	r3, r3, sl, lsr #7
		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a18:	4046      	eors	r6, r0
	*(x--) = v;
}

static inline uint64_t rot64(uint64_t x, int bits)
{
	return (x >> bits) | (x << (64 - bits));
 8005a1a:	9321      	str	r3, [sp, #132]	; 0x84
 8005a1c:	eb01 04cc 	add.w	r4, r1, ip, lsl #3
			rot64(wi15, 1) ^ rot64(wi15, 8) ^ (wi15 >> 7);
		const uint64_t s1 =
			rot64(wi2, 19) ^ rot64(wi2, 61) ^ (wi2 >> 6);

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
 8005a20:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005a24:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8005a28:	4042      	eors	r2, r0
 8005a2a:	404b      	eors	r3, r1
 8005a2c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8005a30:	4050      	eors	r0, r2
 8005a32:	4059      	eors	r1, r3
 8005a34:	e9cd 0100 	strd	r0, r1, [sp]
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005a38:	e9dd 2330 	ldrd	r2, r3, [sp, #192]	; 0xc0

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a3c:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
		c = b;
		b = a;
		a = temp1 + temp2;

		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
 8005a40:	e945 2320 	strd	r2, r3, [r5, #-128]	; 0x80

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a44:	f1a4 0508 	sub.w	r5, r4, #8
 8005a48:	e9d5 4500 	ldrd	r4, r5, [r5]
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a50:	1900      	adds	r0, r0, r4
 8005a52:	eb41 0105 	adc.w	r1, r1, r5
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
 8005a56:	ea06 060a 	and.w	r6, r6, sl
 8005a5a:	ea07 070b 	and.w	r7, r7, fp
 8005a5e:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8005a62:	4014      	ands	r4, r2
 8005a64:	401d      	ands	r5, r3
 8005a66:	4074      	eors	r4, r6
 8005a68:	407d      	eors	r5, r7

		/* Round calculations */
		const uint64_t S0 = rot64(a, 28) ^ rot64(a, 34) ^ rot64(a, 39);
		const uint64_t S1 = rot64(e, 14) ^ rot64(e, 18) ^ rot64(e, 41);
		const uint64_t ch = (e & f) ^ ((~e) & g);
		const uint64_t temp1 = h + S1 + ch + round_k[i] + wi;
 8005a6a:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 8005a6e:	1980      	adds	r0, r0, r6
 8005a70:	eb41 0107 	adc.w	r1, r1, r7
		const uint64_t maj = (a & b) ^ (a & c) ^ (b & c);
		const uint64_t temp2 = S0 + maj;
 8005a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a78:	18a4      	adds	r4, r4, r2
 8005a7a:	eb45 0503 	adc.w	r5, r5, r3

		/* Update round state */
		h = g;
		g = f;
		f = e;
		e = d + temp1;
 8005a7e:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	; 0xa8
 8005a82:	1812      	adds	r2, r2, r0
 8005a84:	eb43 0301 	adc.w	r3, r3, r1
		d = c;
		c = b;
		b = a;
		a = temp1 + temp2;
 8005a88:	1900      	adds	r0, r0, r4
 8005a8a:	eb41 0105 	adc.w	r1, r1, r5
	e = s->h[4];
	f = s->h[5];
	g = s->h[6];
	h = s->h[7];

	for (i = 0; i < 80; i++) {
 8005a8e:	f1bc 0f50 	cmp.w	ip, #80	; 0x50
 8005a92:	f47f aecb 	bne.w	800582c <sha512_block+0x15c>
 8005a96:	4614      	mov	r4, r2
 8005a98:	461d      	mov	r5, r3
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	46d0      	mov	r8, sl
 8005aa4:	46d9      	mov	r9, fp
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	468b      	mov	fp, r1
 8005aaa:	4620      	mov	r0, r4
 8005aac:	4629      	mov	r1, r5
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005aae:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 8005ab2:	18a4      	adds	r4, r4, r2
 8005ab4:	eb45 0503 	adc.w	r5, r5, r3
	s->h[1] += b;
 8005ab8:	e9dd 6736 	ldrd	r6, r7, [sp, #216]	; 0xd8
 8005abc:	eb16 0608 	adds.w	r6, r6, r8
 8005ac0:	eb47 0709 	adc.w	r7, r7, r9
	s->h[2] += c;
 8005ac4:	e9dd 2338 	ldrd	r2, r3, [sp, #224]	; 0xe0
 8005ac8:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
 8005acc:	eb18 0802 	adds.w	r8, r8, r2
 8005ad0:	eb49 0903 	adc.w	r9, r9, r3
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005ad4:	e9cd 4506 	strd	r4, r5, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005ad8:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
	s->h[4] += e;
 8005adc:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	; 0xf0
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005ae0:	e9cd 6704 	strd	r6, r7, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005ae4:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 8005ae8:	19a4      	adds	r4, r4, r6
 8005aea:	eb45 0507 	adc.w	r5, r5, r7
	s->h[4] += e;
 8005aee:	1880      	adds	r0, r0, r2
 8005af0:	eb41 0103 	adc.w	r1, r1, r3
	s->h[5] += f;
	s->h[6] += g;
 8005af4:	af40      	add	r7, sp, #256	; 0x100
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
 8005af6:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 8005afa:	eb12 020a 	adds.w	r2, r2, sl
 8005afe:	eb43 030b 	adc.w	r3, r3, fp
	s->h[6] += g;
 8005b02:	e9d7 6700 	ldrd	r6, r7, [r7]

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005b06:	e9cd 4502 	strd	r4, r5, [sp, #8]
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005b0a:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
	s->h[7] += h;
 8005b0e:	f50d 7b84 	add.w	fp, sp, #264	; 0x108
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005b12:	19a4      	adds	r4, r4, r6
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005b14:	f8dd c0cc 	ldr.w	ip, [sp, #204]	; 0xcc
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
	s->h[5] += f;
	s->h[6] += g;
 8005b18:	eb45 0507 	adc.w	r5, r5, r7
	s->h[7] += h;
 8005b1c:	e9db ab00 	ldrd	sl, fp, [fp]
 8005b20:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005b24:	eb16 060a 	adds.w	r6, r6, sl
 8005b28:	eb47 070b 	adc.w	r7, r7, fp
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
	s->h[2] += c;
 8005b2c:	e9cc 8904 	strd	r8, r9, [ip, #16]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005b30:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
	s->h[1] += b;
	s->h[2] += c;
	s->h[3] += d;
 8005b34:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
		/* w[wrap(i)] becomes w[i + 16] */
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
 8005b38:	e9cc ab00 	strd	sl, fp, [ip]
	s->h[1] += b;
 8005b3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
	s->h[2] += c;
	s->h[3] += d;
 8005b40:	e9cc 8906 	strd	r8, r9, [ip, #24]
		w[i & 15] = wi + s0 + wi7 + s1;
	}

	/* Store state */
	s->h[0] += a;
	s->h[1] += b;
 8005b44:	e9cc ab02 	strd	sl, fp, [ip, #8]
	s->h[2] += c;
	s->h[3] += d;
	s->h[4] += e;
 8005b48:	e9cc 0108 	strd	r0, r1, [ip, #32]
	s->h[5] += f;
 8005b4c:	e9cc 230a 	strd	r2, r3, [ip, #40]	; 0x28
	s->h[6] += g;
 8005b50:	e9cc 450c 	strd	r4, r5, [ip, #48]	; 0x30
	s->h[7] += h;
 8005b54:	e9cc 670e 	strd	r6, r7, [ip, #56]	; 0x38
}
 8005b58:	b064      	add	sp, #400	; 0x190
 8005b5a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b5e:	4770      	bx	lr
 8005b60:	08007918 	stmdaeq	r0, {r3, r4, r8, fp, ip, sp, lr}

08005b64 <sha512_final>:

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005b68:	2580      	movs	r5, #128	; 0x80
	s->h[7] += h;
}

void sha512_final(struct sha512_state *s, const uint8_t *blk,
		  size_t total_size)
{
 8005b6a:	b0a0      	sub	sp, #128	; 0x80
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	4682      	mov	sl, r0
 8005b70:	460f      	mov	r7, r1
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
 8005b72:	4668      	mov	r0, sp
 8005b74:	462a      	mov	r2, r5
 8005b76:	2100      	movs	r1, #0
 8005b78:	f001 f8c9 	bl	8006d0e <memset>
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
 8005b7c:	f014 067f 	ands.w	r6, r4, #127	; 0x7f
 8005b80:	d11e      	bne.n	8005bc0 <sha512_final+0x5c>
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005b82:	f88d 5000 	strb.w	r5, [sp]
		sha512_block(s, temp);
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
 8005b86:	00e2      	lsls	r2, r4, #3

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005b88:	0a14      	lsrs	r4, r2, #8
	*(x--) = v;
	v >>= 8;
 8005b8a:	0a26      	lsrs	r6, r4, #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005b8c:	2500      	movs	r5, #0
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005b8e:	ea4f 2816 	mov.w	r8, r6, lsr #8
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005b92:	4650      	mov	r0, sl
 8005b94:	4669      	mov	r1, sp
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005b96:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
	v >>= 8;
	*(x--) = v;
 8005b9a:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
	v >>= 8;
	*(x--) = v;
 8005b9e:	f88d 607d 	strb.w	r6, [sp, #125]	; 0x7d
	v >>= 8;
	*(x--) = v;
 8005ba2:	f88d 807c 	strb.w	r8, [sp, #124]	; 0x7c
	v >>= 8;
	*(x--) = v;
 8005ba6:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
	v >>= 8;
	*(x--) = v;
 8005baa:	f88d 507a 	strb.w	r5, [sp, #122]	; 0x7a
	v >>= 8;
	*(x--) = v;
 8005bae:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
	v >>= 8;
	*(x--) = v;
 8005bb2:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
		memset(temp, 0, sizeof(temp));
	}

	/* Note: we assume total_size fits in 61 bits */
	store64(temp + SHA512_BLOCK_SIZE - 8, total_size << 3);
	sha512_block(s, temp);
 8005bb6:	f7ff fd8b 	bl	80056d0 <sha512_block>
}
 8005bba:	b020      	add	sp, #128	; 0x80
 8005bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	4668      	mov	r0, sp
 8005bc4:	4632      	mov	r2, r6
 8005bc6:	f001 f899 	bl	8006cfc <memcpy>
	temp[last_size] = 0x80;
 8005bca:	eb0d 0305 	add.w	r3, sp, r5
 8005bce:	4433      	add	r3, r6

	if (last_size > 111) {
 8005bd0:	2e6f      	cmp	r6, #111	; 0x6f
	uint8_t temp[SHA512_BLOCK_SIZE] = {0};
	const size_t last_size = total_size & (SHA512_BLOCK_SIZE - 1);

	if (last_size)
		memcpy(temp, blk, last_size);
	temp[last_size] = 0x80;
 8005bd2:	f803 5c80 	strb.w	r5, [r3, #-128]

	if (last_size > 111) {
 8005bd6:	d9d6      	bls.n	8005b86 <sha512_final+0x22>
		sha512_block(s, temp);
 8005bd8:	4650      	mov	r0, sl
 8005bda:	4669      	mov	r1, sp
 8005bdc:	f7ff fd78 	bl	80056d0 <sha512_block>
		memset(temp, 0, sizeof(temp));
 8005be0:	4668      	mov	r0, sp
 8005be2:	462a      	mov	r2, r5
 8005be4:	2100      	movs	r1, #0
 8005be6:	f001 f892 	bl	8006d0e <memset>
 8005bea:	e7cc      	b.n	8005b86 <sha512_final+0x22>

08005bec <sha512_get>:
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005bf0:	2a80      	cmp	r2, #128	; 0x80
	sha512_block(s, temp);
}

void sha512_get(const struct sha512_state *s, uint8_t *hash,
		unsigned int offset, unsigned int len)
{
 8005bf2:	b09b      	sub	sp, #108	; 0x6c
 8005bf4:	9014      	str	r0, [sp, #80]	; 0x50
 8005bf6:	910f      	str	r1, [sp, #60]	; 0x3c
	int i;

	if (offset > SHA512_BLOCK_SIZE)
 8005bf8:	d87b      	bhi.n	8005cf2 <sha512_get+0x106>
		return;

	if (len > SHA512_BLOCK_SIZE - offset)
 8005bfa:	f1c2 0180 	rsb	r1, r2, #128	; 0x80
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	bf28      	it	cs
 8005c02:	4619      	movcs	r1, r3
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005c04:	08d0      	lsrs	r0, r2, #3
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005c06:	f012 0207 	ands.w	r2, r2, #7
 8005c0a:	910d      	str	r1, [sp, #52]	; 0x34

	if (len > SHA512_BLOCK_SIZE - offset)
		len = SHA512_BLOCK_SIZE - offset;

	/* Skip whole words */
	i = offset >> 3;
 8005c0c:	900e      	str	r0, [sp, #56]	; 0x38
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
 8005c0e:	9215      	str	r2, [sp, #84]	; 0x54
 8005c10:	d172      	bne.n	8005cf8 <sha512_get+0x10c>
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005c12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005c14:	2d07      	cmp	r5, #7
 8005c16:	d969      	bls.n	8005cec <sha512_get+0x100>
 8005c18:	f1a5 0308 	sub.w	r3, r5, #8
 8005c1c:	08db      	lsrs	r3, r3, #3
 8005c1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005c20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005c22:	469c      	mov	ip, r3
 8005c24:	4484      	add	ip, r0
 8005c26:	930a      	str	r3, [sp, #40]	; 0x28
 8005c28:	f104 0308 	add.w	r3, r4, #8
 8005c2c:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
 8005c30:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8005c34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c36:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 8005c3a:	9012      	str	r0, [sp, #72]	; 0x48
		store64(hash, s->h[i++]);
 8005c3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005c3e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8005c42:	e9cd 2306 	strd	r2, r3, [sp, #24]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005c46:	9d06      	ldr	r5, [sp, #24]
 8005c48:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005c4c:	0a2a      	lsrs	r2, r5, #8
 8005c4e:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 8005c52:	ea4f 231c 	mov.w	r3, ip, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c56:	0a10      	lsrs	r0, r2, #8
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
		store64(hash, s->h[i++]);
 8005c58:	9412      	str	r4, [sp, #72]	; 0x48
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c5a:	ea40 6403 	orr.w	r4, r0, r3, lsl #24
 8005c5e:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005c60:	ea4f 2a14 	mov.w	sl, r4, lsr #8
 8005c64:	ea4a 6a05 	orr.w	sl, sl, r5, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c68:	9404      	str	r4, [sp, #16]
	*(x--) = v;
	v >>= 8;
 8005c6a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c6e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8005c72:	ea44 640b 	orr.w	r4, r4, fp, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c76:	9505      	str	r5, [sp, #20]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c78:	0a26      	lsrs	r6, r4, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005c7a:	ea4f 251b 	mov.w	r5, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c7e:	ea46 6605 	orr.w	r6, r6, r5, lsl #24
 8005c82:	0a2f      	lsrs	r7, r5, #8
	*(x--) = v;
	v >>= 8;
 8005c84:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8005c88:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8005c8c:	ea4f 2917 	mov.w	r9, r7, lsr #8
	*(x--) = v;
	v >>= 8;
 8005c90:	ea4f 2018 	mov.w	r0, r8, lsr #8
 8005c94:	ea40 6c09 	orr.w	ip, r0, r9, lsl #24
 8005c98:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8005c9c:	9009      	str	r0, [sp, #36]	; 0x24
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005c9e:	f89d 0010 	ldrb.w	r0, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005ca2:	f8cd c020 	str.w	ip, [sp, #32]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ca6:	7148      	strb	r0, [r1, #5]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005ca8:	f89d c020 	ldrb.w	ip, [sp, #32]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005cac:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cb0:	f881 8001 	strb.w	r8, [r1, #1]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005cb4:	71c8      	strb	r0, [r1, #7]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cb6:	708e      	strb	r6, [r1, #2]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cb8:	70cc      	strb	r4, [r1, #3]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cba:	f881 a004 	strb.w	sl, [r1, #4]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cbe:	718a      	strb	r2, [r1, #6]
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005cc0:	9812      	ldr	r0, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005cc2:	f801 cb08 	strb.w	ip, [r1], #8
		len -= c;
		hash += c;
	}

	/* Read out whole words */
	while (len >= 8) {
 8005cc6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005cca:	4560      	cmp	r0, ip
 8005ccc:	d1b6      	bne.n	8005c3c <sha512_get+0x50>
 8005cce:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005cd0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cd2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005cd4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005cd6:	1c4b      	adds	r3, r1, #1
 8005cd8:	f100 0c01 	add.w	ip, r0, #1
 8005cdc:	4461      	add	r1, ip
 8005cde:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005ce2:	f005 0507 	and.w	r5, r5, #7
 8005ce6:	910e      	str	r1, [sp, #56]	; 0x38
 8005ce8:	940f      	str	r4, [sp, #60]	; 0x3c
 8005cea:	950d      	str	r5, [sp, #52]	; 0x34
		hash += 8;
		len -= 8;
	}

	/* Read out bytes */
	if (len) {
 8005cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d173      	bne.n	8005dda <sha512_get+0x1ee>
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
	}
}
 8005cf2:	b01b      	add	sp, #108	; 0x6c
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005cf8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005cfa:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005d02:	0a14      	lsrs	r4, r2, #8
 8005d04:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 8005d08:	0a1d      	lsrs	r5, r3, #8
	*(x--) = v;
	v >>= 8;
 8005d0a:	0a21      	lsrs	r1, r4, #8
 8005d0c:	ea41 6c05 	orr.w	ip, r1, r5, lsl #24
 8005d10:	ea4f 2e15 	mov.w	lr, r5, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d14:	ea4f 211c 	mov.w	r1, ip, lsr #8
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d18:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
	*(x--) = v;
	v >>= 8;
 8005d1c:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d20:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d24:	ea4f 211c 	mov.w	r1, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8005d2c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
 8005d30:	ea41 6c0e 	orr.w	ip, r1, lr, lsl #24
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d34:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d38:	ea4f 201c 	mov.w	r0, ip, lsr #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	*(x--) = v;
	v >>= 8;
 8005d40:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
 8005d44:	ea4f 211e 	mov.w	r1, lr, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005d48:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d4c:	0a02      	lsrs	r2, r0, #8
 8005d4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d52:	0a0b      	lsrs	r3, r1, #8
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d54:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d58:	0a15      	lsrs	r5, r2, #8
 8005d5a:	ea45 6c03 	orr.w	ip, r5, r3, lsl #24
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d5e:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d62:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d66:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d6a:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d6e:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005d72:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d76:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	v >>= 8;
	*(x--) = v;
 8005d7a:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005d7e:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
 8005d82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d84:	f89d 5018 	ldrb.w	r5, [sp, #24]
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d88:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d8c:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005d90:	ea4f 2e13 	mov.w	lr, r3, lsr #8
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d94:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005d98:	980e      	ldr	r0, [sp, #56]	; 0x38
		memcpy(hash, tmp + offset, c);
 8005d9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005d9c:	a91a      	add	r1, sp, #104	; 0x68
	offset &= 7;

	/* Skip/read out bytes */
	if (offset) {
		uint8_t tmp[8];
		unsigned int c = 8 - offset;
 8005d9e:	f1cc 0308 	rsb	r3, ip, #8
 8005da2:	429c      	cmp	r4, r3
 8005da4:	bf38      	it	cc
 8005da6:	4623      	movcc	r3, r4
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005da8:	f801 5d08 	strb.w	r5, [r1, #-8]!
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005dac:	f100 0c01 	add.w	ip, r0, #1
		memcpy(hash, tmp + offset, c);
		len -= c;
 8005db0:	1ae4      	subs	r4, r4, r3

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005db2:	4411      	add	r1, r2
 8005db4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005db6:	461a      	mov	r2, r3
		len -= c;
 8005db8:	940d      	str	r4, [sp, #52]	; 0x34

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005dba:	9302      	str	r3, [sp, #8]
 8005dbc:	f8cd c00c 	str.w	ip, [sp, #12]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005dc0:	f8cd e01c 	str.w	lr, [sp, #28]

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
		memcpy(hash, tmp + offset, c);
 8005dc4:	f000 ff9a 	bl	8006cfc <memcpy>
		len -= c;
		hash += c;
 8005dc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005dca:	9b02      	ldr	r3, [sp, #8]
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005dcc:	f8dd c00c 	ldr.w	ip, [sp, #12]
		memcpy(hash, tmp + offset, c);
		len -= c;
		hash += c;
 8005dd0:	441c      	add	r4, r3
 8005dd2:	940f      	str	r4, [sp, #60]	; 0x3c
		unsigned int c = 8 - offset;

		if (c > len)
			c = len;

		store64(tmp, s->h[i++]);
 8005dd4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8005dd8:	e71b      	b.n	8005c12 <sha512_get+0x26>

	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
 8005dda:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005ddc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005dde:	eb04 0cc5 	add.w	ip, r4, r5, lsl #3
 8005de2:	e9dc 0100 	ldrd	r0, r1, [ip]
 8005de6:	e9cd 0104 	strd	r0, r1, [sp, #16]

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005dea:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8005dee:	ea4a 6a01 	orr.w	sl, sl, r1, lsl #24
 8005df2:	9905      	ldr	r1, [sp, #20]
	*(x--) = v;
	v >>= 8;
 8005df4:	ea4f 281a 	mov.w	r8, sl, lsr #8

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
 8005df8:	ea4f 2b11 	mov.w	fp, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005dfc:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8005e00:	ea4f 291b 	mov.w	r9, fp, lsr #8
	*(x--) = v;
	v >>= 8;
 8005e04:	ea4f 2618 	mov.w	r6, r8, lsr #8
 8005e08:	ea46 6609 	orr.w	r6, r6, r9, lsl #24
 8005e0c:	ea4f 2719 	mov.w	r7, r9, lsr #8
	*(x--) = v;
	v >>= 8;
 8005e10:	0a34      	lsrs	r4, r6, #8
 8005e12:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8005e16:	0a3d      	lsrs	r5, r7, #8
	*(x--) = v;
	v >>= 8;
 8005e18:	0a20      	lsrs	r0, r4, #8
 8005e1a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 8005e1e:	0a29      	lsrs	r1, r5, #8
	*(x--) = v;
	v >>= 8;
 8005e20:	0a03      	lsrs	r3, r0, #8
 8005e22:	ea43 6c01 	orr.w	ip, r3, r1, lsl #24
 8005e26:	ea4f 2e11 	mov.w	lr, r1, lsr #8
	*(x--) = v;
	v >>= 8;
 8005e2a:	ea4f 231c 	mov.w	r3, ip, lsr #8
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005e2e:	f89d 2010 	ldrb.w	r2, [sp, #16]
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e32:	f8cd c018 	str.w	ip, [sp, #24]
	*(x--) = v;
	v >>= 8;
 8005e36:	ea43 6c0e 	orr.w	ip, r3, lr, lsl #24
 8005e3a:	f8cd c010 	str.w	ip, [sp, #16]
}

static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
 8005e3e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e42:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e46:	f89d 2010 	ldrb.w	r2, [sp, #16]
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e4a:	f89d 0018 	ldrb.w	r0, [sp, #24]
	v >>= 8;
	*(x--) = v;
 8005e4e:	a91a      	add	r1, sp, #104	; 0x68
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e50:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e54:	f8cd e01c 	str.w	lr, [sp, #28]
static inline void store64(uint8_t *x, uint64_t v)
{
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e58:	f88d a066 	strb.w	sl, [sp, #102]	; 0x66
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
	x += 7;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e60:	f88d 8065 	strb.w	r8, [sp, #101]	; 0x65
	v >>= 8;
	*(x--) = v;
 8005e64:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
	v >>= 8;
	*(x--) = v;
 8005e68:	f88d 4063 	strb.w	r4, [sp, #99]	; 0x63
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
 8005e6e:	f801 2d08 	strb.w	r2, [r1, #-8]!
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
	*(x--) = v;
	v >>= 8;
 8005e74:	f8cd e014 	str.w	lr, [sp, #20]
	/* Read out bytes */
	if (len) {
		uint8_t tmp[8];

		store64(tmp, s->h[i]);
		memcpy(hash, tmp, len);
 8005e78:	f000 ff40 	bl	8006cfc <memcpy>
	}
}
 8005e7c:	b01b      	add	sp, #108	; 0x6c
 8005e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e82:	bf00      	nop

08005e84 <base64_init_encodestate>:

const int CHARS_PER_LINE = 72;

void base64_init_encodestate(base64_encodestate* state_in)
{
	state_in->step = step_A;
 8005e84:	2300      	movs	r3, #0
 8005e86:	7003      	strb	r3, [r0, #0]
	state_in->result = 0;
 8005e88:	7043      	strb	r3, [r0, #1]
	state_in->stepcount = 0;
 8005e8a:	6043      	str	r3, [r0, #4]
 8005e8c:	4770      	bx	lr
	...

08005e90 <base64_encode_value>:
}

char base64_encode_value(char value_in)
{
	static const char* encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	if (value_in > 63) return '=';
 8005e90:	283f      	cmp	r0, #63	; 0x3f
	return encoding[(int)value_in];
 8005e92:	bf9a      	itte	ls
 8005e94:	4b01      	ldrls	r3, [pc, #4]	; (8005e9c <base64_encode_value+0xc>)
 8005e96:	5cc0      	ldrbls	r0, [r0, r3]
}

char base64_encode_value(char value_in)
{
	static const char* encoding = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	if (value_in > 63) return '=';
 8005e98:	203d      	movhi	r0, #61	; 0x3d
	return encoding[(int)value_in];
}
 8005e9a:	4770      	bx	lr
 8005e9c:	08007b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp, ip, sp, lr}

08005ea0 <base64_encode_block>:

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	461c      	mov	r4, r3
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
	char result;
	char fragment;
	
	result = state_in->result;
 8005ea6:	785e      	ldrb	r6, [r3, #1]
	
	switch (state_in->step)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
	if (value_in > 63) return '=';
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005eaa:	4605      	mov	r5, r0
	char result;
	char fragment;
	
	result = state_in->result;
	
	switch (state_in->step)
 8005eac:	2b01      	cmp	r3, #1
	if (value_in > 63) return '=';
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
 8005eae:	4690      	mov	r8, r2
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
 8005eb0:	eb00 0b01 	add.w	fp, r0, r1
	char result;
	char fragment;
	
	result = state_in->result;
	
	switch (state_in->step)
 8005eb4:	d01e      	beq.n	8005ef4 <base64_encode_block+0x54>
 8005eb6:	d304      	bcc.n	8005ec2 <base64_encode_block+0x22>
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d158      	bne.n	8005f6e <base64_encode_block+0xce>

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ebc:	4617      	mov	r7, r2
	return encoding[(int)value_in];
}

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
 8005ebe:	4682      	mov	sl, r0
 8005ec0:	e02f      	b.n	8005f22 <base64_encode_block+0x82>
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ec2:	4691      	mov	r9, r2
	switch (state_in->step)
	{
		while (1)
		{
	case step_A:
			if (plainchar == plaintextend)
 8005ec4:	455d      	cmp	r5, fp
 8005ec6:	d105      	bne.n	8005ed4 <base64_encode_block+0x34>
			{
				state_in->result = result;
				state_in->step = step_A;
 8005ec8:	2300      	movs	r3, #0
		while (1)
		{
	case step_A:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005eca:	7066      	strb	r6, [r4, #1]
				state_in->step = step_A;
 8005ecc:	7023      	strb	r3, [r4, #0]
				return codechar - code_out;
 8005ece:	ebc8 0009 	rsb	r0, r8, r9
 8005ed2:	e04d      	b.n	8005f70 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005ed4:	782e      	ldrb	r6, [r5, #0]
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
 8005ed6:	f109 0301 	add.w	r3, r9, #1
 8005eda:	08b0      	lsrs	r0, r6, #2
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	f7ff ffd7 	bl	8005e90 <base64_encode_value>
			{
				state_in->result = result;
				state_in->step = step_A;
				return codechar - code_out;
			}
			fragment = *plainchar++;
 8005ee2:	1c6f      	adds	r7, r5, #1
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
 8005ee4:	f889 0000 	strb.w	r0, [r9]
			result = (fragment & 0x003) << 4;
 8005ee8:	f006 0603 	and.w	r6, r6, #3
 8005eec:	0136      	lsls	r6, r6, #4
			{
				state_in->result = result;
				state_in->step = step_A;
				return codechar - code_out;
			}
			fragment = *plainchar++;
 8005eee:	463d      	mov	r5, r7
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	e000      	b.n	8005ef6 <base64_encode_block+0x56>

int base64_encode_block(const char* plaintext_in, int length_in, char* code_out, base64_encodestate* state_in)
{
	const char* plainchar = plaintext_in;
	const char* const plaintextend = plaintext_in + length_in;
	char* codechar = code_out;
 8005ef4:	4613      	mov	r3, r2
			fragment = *plainchar++;
			result = (fragment & 0x0fc) >> 2;
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x003) << 4;
	case step_B:
			if (plainchar == plaintextend)
 8005ef6:	455d      	cmp	r5, fp
 8005ef8:	d105      	bne.n	8005f06 <base64_encode_block+0x66>
			{
				state_in->result = result;
				state_in->step = step_B;
 8005efa:	2201      	movs	r2, #1
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x003) << 4;
	case step_B:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005efc:	7066      	strb	r6, [r4, #1]
				state_in->step = step_B;
 8005efe:	7022      	strb	r2, [r4, #0]
				return codechar - code_out;
 8005f00:	ebc8 0003 	rsb	r0, r8, r3
 8005f04:	e034      	b.n	8005f70 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005f06:	f105 0a01 	add.w	sl, r5, #1
 8005f0a:	782d      	ldrb	r5, [r5, #0]
			result |= (fragment & 0x0f0) >> 4;
			*codechar++ = base64_encode_value(result);
 8005f0c:	1c5f      	adds	r7, r3, #1
 8005f0e:	ea46 1015 	orr.w	r0, r6, r5, lsr #4
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	f7ff ffbc 	bl	8005e90 <base64_encode_value>
 8005f18:	9b01      	ldr	r3, [sp, #4]
			result = (fragment & 0x00f) << 2;
 8005f1a:	f005 060f 	and.w	r6, r5, #15
				state_in->step = step_B;
				return codechar - code_out;
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0f0) >> 4;
			*codechar++ = base64_encode_value(result);
 8005f1e:	7018      	strb	r0, [r3, #0]
			result = (fragment & 0x00f) << 2;
 8005f20:	00b6      	lsls	r6, r6, #2
	case step_C:
			if (plainchar == plaintextend)
 8005f22:	45da      	cmp	sl, fp
 8005f24:	d105      	bne.n	8005f32 <base64_encode_block+0x92>
			{
				state_in->result = result;
				state_in->step = step_C;
 8005f26:	2302      	movs	r3, #2
			*codechar++ = base64_encode_value(result);
			result = (fragment & 0x00f) << 2;
	case step_C:
			if (plainchar == plaintextend)
			{
				state_in->result = result;
 8005f28:	7066      	strb	r6, [r4, #1]
				state_in->step = step_C;
 8005f2a:	7023      	strb	r3, [r4, #0]
				return codechar - code_out;
 8005f2c:	ebc8 0007 	rsb	r0, r8, r7
 8005f30:	e01e      	b.n	8005f70 <base64_encode_block+0xd0>
			}
			fragment = *plainchar++;
 8005f32:	f89a 9000 	ldrb.w	r9, [sl]
 8005f36:	f10a 0501 	add.w	r5, sl, #1
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
 8005f3a:	ea46 1099 	orr.w	r0, r6, r9, lsr #6
 8005f3e:	f7ff ffa7 	bl	8005e90 <base64_encode_value>
			result  = (fragment & 0x03f) >> 0;
 8005f42:	f009 063f 	and.w	r6, r9, #63	; 0x3f
				state_in->step = step_C;
				return codechar - code_out;
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
 8005f46:	7038      	strb	r0, [r7, #0]
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff ffa1 	bl	8005e90 <base64_encode_value>
 8005f4e:	7078      	strb	r0, [r7, #1]
			
			++(state_in->stepcount);
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	3301      	adds	r3, #1
			if (state_in->stepcount == CHARS_PER_LINE/4)
 8005f54:	2b12      	cmp	r3, #18
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
			
			++(state_in->stepcount);
 8005f56:	6063      	str	r3, [r4, #4]
			if (state_in->stepcount == CHARS_PER_LINE/4)
 8005f58:	d002      	beq.n	8005f60 <base64_encode_block+0xc0>
			}
			fragment = *plainchar++;
			result |= (fragment & 0x0c0) >> 6;
			*codechar++ = base64_encode_value(result);
			result  = (fragment & 0x03f) >> 0;
			*codechar++ = base64_encode_value(result);
 8005f5a:	f107 0902 	add.w	r9, r7, #2
 8005f5e:	e7b1      	b.n	8005ec4 <base64_encode_block+0x24>
			
			++(state_in->stepcount);
			if (state_in->stepcount == CHARS_PER_LINE/4)
			{
				*codechar++ = '\n';
 8005f60:	230a      	movs	r3, #10
 8005f62:	70bb      	strb	r3, [r7, #2]
				state_in->stepcount = 0;
 8005f64:	2300      	movs	r3, #0
			*codechar++ = base64_encode_value(result);
			
			++(state_in->stepcount);
			if (state_in->stepcount == CHARS_PER_LINE/4)
			{
				*codechar++ = '\n';
 8005f66:	f107 0903 	add.w	r9, r7, #3
				state_in->stepcount = 0;
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	e7aa      	b.n	8005ec4 <base64_encode_block+0x24>
			}
		}
	}
	/* control should not reach here */
	return codechar - code_out;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	b003      	add	sp, #12
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f76 <base64_encode_blockend>:

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f76:	780b      	ldrb	r3, [r1, #0]
	/* control should not reach here */
	return codechar - code_out;
}

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
 8005f78:	b510      	push	{r4, lr}
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f7a:	2b01      	cmp	r3, #1
	/* control should not reach here */
	return codechar - code_out;
}

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
 8005f7c:	4604      	mov	r4, r0
	char* codechar = code_out;
	
	switch (state_in->step)
 8005f7e:	d00a      	beq.n	8005f96 <base64_encode_blockend+0x20>
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d111      	bne.n	8005fa8 <base64_encode_blockend+0x32>
		*codechar++ = base64_encode_value(state_in->result);
		*codechar++ = '=';
		*codechar++ = '=';
		break;
	case step_C:
		*codechar++ = base64_encode_value(state_in->result);
 8005f84:	7848      	ldrb	r0, [r1, #1]
 8005f86:	f7ff ff83 	bl	8005e90 <base64_encode_value>
 8005f8a:	4623      	mov	r3, r4
		*codechar++ = '=';
 8005f8c:	223d      	movs	r2, #61	; 0x3d
		*codechar++ = base64_encode_value(state_in->result);
		*codechar++ = '=';
		*codechar++ = '=';
		break;
	case step_C:
		*codechar++ = base64_encode_value(state_in->result);
 8005f8e:	f803 0b02 	strb.w	r0, [r3], #2
		*codechar++ = '=';
 8005f92:	7062      	strb	r2, [r4, #1]
		break;
 8005f94:	e009      	b.n	8005faa <base64_encode_blockend+0x34>
	char* codechar = code_out;
	
	switch (state_in->step)
	{
	case step_B:
		*codechar++ = base64_encode_value(state_in->result);
 8005f96:	7848      	ldrb	r0, [r1, #1]
 8005f98:	f7ff ff7a 	bl	8005e90 <base64_encode_value>
		*codechar++ = '=';
 8005f9c:	223d      	movs	r2, #61	; 0x3d
	char* codechar = code_out;
	
	switch (state_in->step)
	{
	case step_B:
		*codechar++ = base64_encode_value(state_in->result);
 8005f9e:	7020      	strb	r0, [r4, #0]
		*codechar++ = '=';
 8005fa0:	7062      	strb	r2, [r4, #1]
		*codechar++ = '=';
 8005fa2:	1ce3      	adds	r3, r4, #3
 8005fa4:	70a2      	strb	r2, [r4, #2]
		break;
 8005fa6:	e000      	b.n	8005faa <base64_encode_blockend+0x34>

int base64_encode_blockend(char* code_out, base64_encodestate* state_in)
{
	char* codechar = code_out;
	
	switch (state_in->step)
 8005fa8:	4603      	mov	r3, r0
		*codechar++ = '=';
		break;
	case step_A:
		break;
	}
	*codechar++ = '\n';
 8005faa:	4618      	mov	r0, r3
 8005fac:	220a      	movs	r2, #10
 8005fae:	f800 2b01 	strb.w	r2, [r0], #1
	
	return codechar - code_out;
}
 8005fb2:	1b00      	subs	r0, r0, r4
 8005fb4:	bd10      	pop	{r4, pc}
	...

08005fb8 <failErase>:
    for (i = 0; i < len; i++)
        uart_printf("%02x", data[i]);
    uart_printf("\n");
}

void failErase () {
 8005fb8:	b508      	push	{r3, lr}
	// for whatever reason this only flashes upto 0x08008800
	flashErasePage((u32)(0x08008000));
 8005fba:	480a      	ldr	r0, [pc, #40]	; (8005fe4 <failErase+0x2c>)
 8005fbc:	f7fb fb30 	bl	8001620 <flashErasePage>
	flashErasePage((u32)(0x08008000+1024));
 8005fc0:	4809      	ldr	r0, [pc, #36]	; (8005fe8 <failErase+0x30>)
 8005fc2:	f7fb fb2d 	bl	8001620 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*2)));
 8005fc6:	4809      	ldr	r0, [pc, #36]	; (8005fec <failErase+0x34>)
 8005fc8:	f7fb fb2a 	bl	8001620 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*3)));
 8005fcc:	4808      	ldr	r0, [pc, #32]	; (8005ff0 <failErase+0x38>)
 8005fce:	f7fb fb27 	bl	8001620 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
 8005fd2:	4808      	ldr	r0, [pc, #32]	; (8005ff4 <failErase+0x3c>)
 8005fd4:	f7fb fb24 	bl	8001620 <flashErasePage>
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
}
 8005fd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	flashErasePage((u32)(0x08008000));
	flashErasePage((u32)(0x08008000+1024));
	flashErasePage((u32)(0x08008000+(u32)(0x190*2)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*3)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
 8005fdc:	4806      	ldr	r0, [pc, #24]	; (8005ff8 <failErase+0x40>)
 8005fde:	f7fb bb1f 	b.w	8001620 <flashErasePage>
 8005fe2:	bf00      	nop
 8005fe4:	08008000 	stmdaeq	r0, {pc}
 8005fe8:	08008400 	stmdaeq	r0, {sl, pc}
 8005fec:	08008320 	stmdaeq	r0, {r5, r8, r9, pc}
 8005ff0:	080084b0 	stmdaeq	r0, {r4, r5, r7, sl, pc}
 8005ff4:	08008640 	stmdaeq	r0, {r6, r9, sl, pc}
 8005ff8:	080087d0 	stmdaeq	r0, {r4, r6, r7, r8, r9, sl, pc}

08005ffc <imageCheckFromAddress>:
}

int imageCheckFromAddress(ImageObjectHandle *newHandle, vu32 flashAddress, bool shouldEraseFlashOnFail)
{
 8005ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006000:	b0f8      	sub	sp, #480	; 0x1e0
 8006002:	9103      	str	r1, [sp, #12]
 8006004:	4607      	mov	r7, r0
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 8006006:	21ff      	movs	r1, #255	; 0xff
	flashErasePage((u32)(0x08008000+(u32)(0x190*4)));
	flashErasePage((u32)(0x08008000+(u32)(0x190*5)));
}

int imageCheckFromAddress(ImageObjectHandle *newHandle, vu32 flashAddress, bool shouldEraseFlashOnFail)
{
 8006008:	4690      	mov	r8, r2
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
 800600a:	a85e      	add	r0, sp, #376	; 0x178
 800600c:	2268      	movs	r2, #104	; 0x68
 800600e:	f000 fe7e 	bl	8006d0e <memset>
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
    memset(&state, 0, sizeof(state));
 8006012:	ae07      	add	r6, sp, #28
	ImageRootHeader		*hdr;
	ImageInternalState		state;
	int bufferSize = 0x28+0x40;
	unsigned char imageBuffer[bufferSize];
    memset(imageBuffer, 0xFF, sizeof(imageBuffer));
    memcpy(imageBuffer, (vu32 *)flashAddress, bufferSize);
 8006014:	9903      	ldr	r1, [sp, #12]
 8006016:	2268      	movs	r2, #104	; 0x68
 8006018:	a85e      	add	r0, sp, #376	; 0x178
 800601a:	f000 fe6f 	bl	8006cfc <memcpy>
    memset(&state, 0, sizeof(state));
 800601e:	2100      	movs	r1, #0
 8006020:	2214      	movs	r2, #20
 8006022:	4630      	mov	r0, r6
 8006024:	f000 fe73 	bl	8006d0e <memset>
		{
			failErase();
		}
		return(EINVAL);		/* buffer too small to really contain header */
	}
	if ((hdr->header.magic) != kImageHeaderMagic) {
 8006028:	995e      	ldr	r1, [sp, #376]	; 0x178
 800602a:	4a5e      	ldr	r2, [pc, #376]	; (80061a4 <imageCheckFromAddress+0x1a8>)
 800602c:	4291      	cmp	r1, r2
 800602e:	d001      	beq.n	8006034 <imageCheckFromAddress+0x38>
		debug_print("bad magic 0x%08x expecting 0x%08x\n", (hdr->header.magic), kImageHeaderMagic);
 8006030:	485d      	ldr	r0, [pc, #372]	; (80061a8 <imageCheckFromAddress+0x1ac>)
 8006032:	e004      	b.n	800603e <imageCheckFromAddress+0x42>
			failErase();
		}
		*newHandle = &state;
		return(kImageImageMissingMagic);		/* magic must match */
	}
	if ((hdr->signing.imageType) != 0x45444f53)
 8006034:	9962      	ldr	r1, [sp, #392]	; 0x188
 8006036:	4a5d      	ldr	r2, [pc, #372]	; (80061ac <imageCheckFromAddress+0x1b0>)
 8006038:	4291      	cmp	r1, r2
 800603a:	d00c      	beq.n	8006056 <imageCheckFromAddress+0x5a>
	{
		debug_print("bad magic 0x%08x expecting 0x%X\n", (hdr->signing.imageType), 0x45444f53);
 800603c:	485c      	ldr	r0, [pc, #368]	; (80061b0 <imageCheckFromAddress+0x1b4>)
 800603e:	f7fb f94b 	bl	80012d8 <uart_printf>
		state.flags = kImageImageMissingMagic;
 8006042:	2304      	movs	r3, #4
 8006044:	6073      	str	r3, [r6, #4]
		if (shouldEraseFlashOnFail)
 8006046:	f1b8 0f00 	cmp.w	r8, #0
 800604a:	d001      	beq.n	8006050 <imageCheckFromAddress+0x54>
		{
			failErase();
 800604c:	f7ff ffb4 	bl	8005fb8 <failErase>
		}
		*newHandle = &state;
 8006050:	603e      	str	r6, [r7, #0]
		return(kImageImageMissingMagic);		/* magic must match */
 8006052:	2004      	movs	r0, #4
 8006054:	e0a2      	b.n	800619c <imageCheckFromAddress+0x1a0>
	}
	state.flags = kImageImageWasInstantiated;
 8006056:	2301      	movs	r3, #1
 8006058:	6073      	str	r3, [r6, #4]

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));
 800605a:	4856      	ldr	r0, [pc, #344]	; (80061b4 <imageCheckFromAddress+0x1b8>)
 800605c:	9960      	ldr	r1, [sp, #384]	; 0x180
 800605e:	f7fb f93b 	bl	80012d8 <uart_printf>

	state.cursor = hdr->header.dataSize;
 8006062:	9b60      	ldr	r3, [sp, #384]	; 0x180
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8006064:	2220      	movs	r2, #32
 8006066:	21ff      	movs	r1, #255	; 0xff
	}
	state.flags = kImageImageWasInstantiated;

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));

	state.cursor = hdr->header.dataSize;
 8006068:	60f3      	str	r3, [r6, #12]
	state.lastTag = -1;

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 800606a:	a812      	add	r0, sp, #72	; 0x48
	state.flags = kImageImageWasInstantiated;

	debug_print("dataSize: 0x%X\n", (hdr->header.dataSize));

	state.cursor = hdr->header.dataSize;
	state.lastTag = -1;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	6133      	str	r3, [r6, #16]

	unsigned char sha256sum[32];

    memset(sha256sum, 0xFF, sizeof(sha256sum));
 8006072:	f000 fe4c 	bl	8006d0e <memset>

    sha256_context ctx;
    sha256_starts(&ctx);
 8006076:	a82a      	add	r0, sp, #168	; 0xa8
 8006078:	f7fd f9f8 	bl	800346c <sha256_starts>

    int buffSize = 0x1;
    char buff[buffSize];

    int i = 0x84;
    hexdump((flashAddress+i), 0x10);
 800607c:	9803      	ldr	r0, [sp, #12]
 800607e:	2110      	movs	r1, #16
 8006080:	3084      	adds	r0, #132	; 0x84
 8006082:	f7fb f937 	bl	80012f4 <hexdump>

    int finish = hdr->header.dataSize + 0x84;
 8006086:	9d60      	ldr	r5, [sp, #384]	; 0x180
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
 8006088:	9903      	ldr	r1, [sp, #12]
 800608a:	9a03      	ldr	r2, [sp, #12]
    char buff[buffSize];

    int i = 0x84;
    hexdump((flashAddress+i), 0x10);

    int finish = hdr->header.dataSize + 0x84;
 800608c:	3584      	adds	r5, #132	; 0x84
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
 800608e:	484a      	ldr	r0, [pc, #296]	; (80061b8 <imageCheckFromAddress+0x1bc>)
 8006090:	3184      	adds	r1, #132	; 0x84
 8006092:	442a      	add	r2, r5
 8006094:	f7fb f920 	bl	80012d8 <uart_printf>
    sha256_starts(&ctx);

    int buffSize = 0x1;
    char buff[buffSize];

    int i = 0x84;
 8006098:	2484      	movs	r4, #132	; 0x84
    hexdump((flashAddress+i), 0x10);

    int finish = hdr->header.dataSize + 0x84;
    debug_print("Start: %X\nFinish: %X\n", (flashAddress+i), (flashAddress+ finish));
    while (i < finish)
 800609a:	42ac      	cmp	r4, r5
 800609c:	da08      	bge.n	80060b0 <imageCheckFromAddress+0xb4>
    {
    	memset(buff, 0xFF, buffSize);
    	memcpy(buff, (unsigned char *)(flashAddress+i), buffSize);
 800609e:	9b03      	ldr	r3, [sp, #12]
		sha256_update(&ctx, (vu32 *)(flashAddress+i), buffSize);
 80060a0:	9903      	ldr	r1, [sp, #12]
 80060a2:	a82a      	add	r0, sp, #168	; 0xa8
 80060a4:	4421      	add	r1, r4
 80060a6:	2201      	movs	r2, #1
 80060a8:	f7ff f9be 	bl	8005428 <sha256_update>
		i += 0x1;
 80060ac:	3401      	adds	r4, #1
 80060ae:	e7f4      	b.n	800609a <imageCheckFromAddress+0x9e>
    }
    debug_print("Ended at: %X\n", (flashAddress+i));
 80060b0:	9903      	ldr	r1, [sp, #12]
 80060b2:	4842      	ldr	r0, [pc, #264]	; (80061bc <imageCheckFromAddress+0x1c0>)
 80060b4:	4421      	add	r1, r4
 80060b6:	f7fb f90f 	bl	80012d8 <uart_printf>
    hexdump((vu32 *)(flashAddress+i), 0x10);
 80060ba:	9803      	ldr	r0, [sp, #12]
 80060bc:	2110      	movs	r1, #16
 80060be:	4420      	add	r0, r4
 80060c0:	f7fb f918 	bl	80012f4 <hexdump>
    if ((flashAddress+i) != (flashAddress+finish))
 80060c4:	9a03      	ldr	r2, [sp, #12]
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	4414      	add	r4, r2
 80060ca:	441d      	add	r5, r3
 80060cc:	42ac      	cmp	r4, r5
 80060ce:	d005      	beq.n	80060dc <imageCheckFromAddress+0xe0>
    {
    	debug_print("Calculated hash is probably wrong...\n");
 80060d0:	483b      	ldr	r0, [pc, #236]	; (80061c0 <imageCheckFromAddress+0x1c4>)
 80060d2:	f7fb f901 	bl	80012d8 <uart_printf>
    	state.flags = kImageImageHashCalcFailed;
    	*newHandle = &state;
 80060d6:	603e      	str	r6, [r7, #0]
		return(kImageImageHashCalcFailed);
 80060d8:	2005      	movs	r0, #5
 80060da:	e05f      	b.n	800619c <imageCheckFromAddress+0x1a0>
    	struct u_id id;
		unsigned char uniqueID[0x17];
		unsigned char temp_sha256sum[32];  
		uint8_t publickey[EDSIGN_PUBLIC_KEY_SIZE];
		// read our unique id
		uid_read(&id);
 80060dc:	a804      	add	r0, sp, #16
 80060de:	f7fb fa1b 	bl	8001518 <uid_read>
		sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
 80060e2:	9905      	ldr	r1, [sp, #20]
 80060e4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80060e8:	9100      	str	r1, [sp, #0]
 80060ea:	9906      	ldr	r1, [sp, #24]
 80060ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80060f0:	9101      	str	r1, [sp, #4]
 80060f2:	a80c      	add	r0, sp, #48	; 0x30
 80060f4:	4933      	ldr	r1, [pc, #204]	; (80061c4 <imageCheckFromAddress+0x1c8>)
 80060f6:	f000 fe13 	bl	8006d20 <siprintf>
		// start sha256 context
		sha256_context ctx2;
		sha256_starts(&ctx2);
 80060fa:	a844      	add	r0, sp, #272	; 0x110
 80060fc:	f7fd f9b6 	bl	800346c <sha256_starts>
		// hash in our unique id
		sha256_update(&ctx2, uniqueID, 0x17);
 8006100:	2217      	movs	r2, #23
 8006102:	a844      	add	r0, sp, #272	; 0x110
 8006104:	a90c      	add	r1, sp, #48	; 0x30
 8006106:	f7ff f98f 	bl	8005428 <sha256_update>
		sha256_finish(&ctx2, temp_sha256sum);
 800610a:	a844      	add	r0, sp, #272	; 0x110
 800610c:	a91a      	add	r1, sp, #104	; 0x68
 800610e:	f7ff f9d3 	bl	80054b8 <sha256_finish>
		// get our public key
		memset(publickey, 0, EDSIGN_PUBLIC_KEY_SIZE);
 8006112:	2220      	movs	r2, #32
 8006114:	2100      	movs	r1, #0
 8006116:	a822      	add	r0, sp, #136	; 0x88
 8006118:	f000 fdf9 	bl	8006d0e <memset>
		edsign_sec_to_pub(publickey, temp_sha256sum);
 800611c:	a91a      	add	r1, sp, #104	; 0x68
 800611e:	a822      	add	r0, sp, #136	; 0x88
 8006120:	f7fb ff82 	bl	8002028 <edsign_sec_to_pub>
		debug_print("publickey:\n");
 8006124:	4828      	ldr	r0, [pc, #160]	; (80061c8 <imageCheckFromAddress+0x1cc>)
 8006126:	f7fb f8d7 	bl	80012d8 <uart_printf>
		hexdump(publickey, 32);
 800612a:	a822      	add	r0, sp, #136	; 0x88
 800612c:	2120      	movs	r1, #32
 800612e:	f7fb f8e1 	bl	80012f4 <hexdump>
    	/*
    	struct u_id id;
	    uid_read(&id);
	    sprintf(uniqueID,"%X%X%X%X", id.off0, id.off2, id.off4, id.off8);
	    */
	    sha256_update(&ctx, (unsigned char*)publickey, 32);
 8006132:	2220      	movs	r2, #32
 8006134:	a82a      	add	r0, sp, #168	; 0xa8
 8006136:	a922      	add	r1, sp, #136	; 0x88
 8006138:	f7ff f976 	bl	8005428 <sha256_update>
    }

    //debug_print("%s\n", uniqueID);
    
    sha256_finish(&ctx, sha256sum);
 800613c:	a912      	add	r1, sp, #72	; 0x48
 800613e:	a82a      	add	r0, sp, #168	; 0xa8
 8006140:	f7ff f9ba 	bl	80054b8 <sha256_finish>
    // verify signature against recalc hash
    debug_print("Signature:\n");
 8006144:	4821      	ldr	r0, [pc, #132]	; (80061cc <imageCheckFromAddress+0x1d0>)
 8006146:	f7fb f8c7 	bl	80012d8 <uart_printf>
    hexdump(hdr->signing.imageSignature, 0x40);
 800614a:	2140      	movs	r1, #64	; 0x40
 800614c:	a863      	add	r0, sp, #396	; 0x18c
 800614e:	f7fb f8d1 	bl	80012f4 <hexdump>
	debug_print("sha256sum:\n");
 8006152:	481f      	ldr	r0, [pc, #124]	; (80061d0 <imageCheckFromAddress+0x1d4>)
 8006154:	f7fb f8c0 	bl	80012d8 <uart_printf>
	print_hash(sha256sum);

	char sigbuff[64];
	memcpy(sigbuff, hdr->signing.imageSignature, 64);
 8006158:	ac44      	add	r4, sp, #272	; 0x110
    sha256_finish(&ctx, sha256sum);
    // verify signature against recalc hash
    debug_print("Signature:\n");
    hexdump(hdr->signing.imageSignature, 0x40);
	debug_print("sha256sum:\n");
	print_hash(sha256sum);
 800615a:	a812      	add	r0, sp, #72	; 0x48

	char sigbuff[64];
	memcpy(sigbuff, hdr->signing.imageSignature, 64);
 800615c:	ad63      	add	r5, sp, #396	; 0x18c
    sha256_finish(&ctx, sha256sum);
    // verify signature against recalc hash
    debug_print("Signature:\n");
    hexdump(hdr->signing.imageSignature, 0x40);
	debug_print("sha256sum:\n");
	print_hash(sha256sum);
 800615e:	f7fb f917 	bl	8001390 <print_hash>

	char sigbuff[64];
	memcpy(sigbuff, hdr->signing.imageSignature, 64);
 8006162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800616c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (edsign_verify(sigbuff, rootCA, sha256sum, 32) <= 0) {
 8006176:	a844      	add	r0, sp, #272	; 0x110
 8006178:	4916      	ldr	r1, [pc, #88]	; (80061d4 <imageCheckFromAddress+0x1d8>)
 800617a:	aa12      	add	r2, sp, #72	; 0x48
 800617c:	2320      	movs	r3, #32
 800617e:	f7fb ffbf 	bl	8002100 <edsign_verify>
 8006182:	b948      	cbnz	r0, 8006198 <imageCheckFromAddress+0x19c>
    	state.flags = kImageImageRejectSignature;
 8006184:	2302      	movs	r3, #2
 8006186:	6073      	str	r3, [r6, #4]
    	if (shouldEraseFlashOnFail)
 8006188:	f1b8 0f00 	cmp.w	r8, #0
 800618c:	d001      	beq.n	8006192 <imageCheckFromAddress+0x196>
		{
			failErase();
 800618e:	f7ff ff13 	bl	8005fb8 <failErase>
		}
    	*newHandle = &state;
 8006192:	603e      	str	r6, [r7, #0]
    	return kImageImageRejectSignature;
 8006194:	2002      	movs	r0, #2
 8006196:	e001      	b.n	800619c <imageCheckFromAddress+0x1a0>
    } else {
    	state.flags = kImageImageIsTrusted;
    	*newHandle = &state;
 8006198:	603e      	str	r6, [r7, #0]
    	return kImageImageIsTrusted;
 800619a:	2003      	movs	r0, #3
    }
	*newHandle = &state;
	return(0);
}
 800619c:	b078      	add	sp, #480	; 0x1e0
 800619e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a2:	bf00      	nop
 80061a4:	45626332 	strbmi	r6, [r2, #-818]!	; 0x332
 80061a8:	08007bd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 80061ac:	45444f53 	strbmi	r4, [r4, #-3923]	; 0xf53
 80061b0:	08007bfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 80061b4:	08007c1d 	stmdaeq	r0, {r0, r2, r3, r4, sl, fp, ip, sp, lr}
 80061b8:	08007c2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, ip, sp, lr}
 80061bc:	08007c43 	stmdaeq	r0, {r0, r1, r6, sl, fp, ip, sp, lr}
 80061c0:	08007c51 	stmdaeq	r0, {r0, r4, r6, sl, fp, ip, sp, lr}
 80061c4:	08007598 	stmdaeq	r0, {r3, r4, r7, r8, sl, ip, sp, lr}
 80061c8:	08007c77 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp, lr}
 80061cc:	08007c83 	stmdaeq	r0, {r0, r1, r7, sl, fp, ip, sp, lr}
 80061d0:	08007c8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, sl, fp, ip, sp, lr}
 80061d4:	20000404 	andcs	r0, r0, r4, lsl #8

080061d8 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 80061d8:	0080      	lsls	r0, r0, #2
 80061da:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80061de:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 80061e2:	6803      	ldr	r3, [r0, #0]
 80061e4:	06ca      	lsls	r2, r1, #27
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	bf48      	it	mi
 80061f2:	f083 0310 	eormi.w	r3, r3, #16
 80061f6:	068a      	lsls	r2, r1, #26
 80061f8:	bf48      	it	mi
 80061fa:	f083 0320 	eormi.w	r3, r3, #32
 80061fe:	6003      	str	r3, [r0, #0]
 8006200:	4770      	bx	lr

08006202 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8006202:	0080      	lsls	r0, r0, #2
 8006204:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006208:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800620c:	6803      	ldr	r3, [r0, #0]
 800620e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	b29b      	uxth	r3, r3
 8006218:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800621c:	6003      	str	r3, [r0, #0]
 800621e:	4770      	bx	lr

08006220 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8006220:	0080      	lsls	r0, r0, #2
 8006222:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006226:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800622a:	6803      	ldr	r3, [r0, #0]
 800622c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	041b      	lsls	r3, r3, #16
 8006236:	0c1b      	lsrs	r3, r3, #16
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	4770      	bx	lr

0800623c <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 800623c:	0080      	lsls	r0, r0, #2
 800623e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006242:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8006246:	6803      	ldr	r3, [r0, #0]
 8006248:	045b      	lsls	r3, r3, #17
 800624a:	d506      	bpl.n	800625a <ClearDTOG_RX+0x1e>
 800624c:	6802      	ldr	r2, [r0, #0]
 800624e:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8006252:	4013      	ands	r3, r2
 8006254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006258:	6003      	str	r3, [r0, #0]
 800625a:	4770      	bx	lr

0800625c <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 800625c:	0080      	lsls	r0, r0, #2
 800625e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8006262:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	065b      	lsls	r3, r3, #25
 800626a:	d506      	bpl.n	800627a <ClearDTOG_TX+0x1e>
 800626c:	6802      	ldr	r2, [r0, #0]
 800626e:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8006272:	4013      	ands	r3, r2
 8006274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006278:	6003      	str	r3, [r0, #0]
 800627a:	4770      	bx	lr

0800627c <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 800627c:	4b05      	ldr	r3, [pc, #20]	; (8006294 <GetEPTxAddr+0x18>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006286:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 800628a:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 800628e:	0040      	lsls	r0, r0, #1
}
 8006290:	8800      	ldrh	r0, [r0, #0]
 8006292:	4770      	bx	lr
 8006294:	40005c50 	andmi	r5, r0, r0, asr ip

08006298 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8006298:	4b04      	ldr	r3, [pc, #16]	; (80062ac <GetEPRxAddr+0x14>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80062a2:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <GetEPRxAddr+0x18>)
 80062a4:	4403      	add	r3, r0
 80062a6:	005b      	lsls	r3, r3, #1
}
 80062a8:	8818      	ldrh	r0, [r3, #0]
 80062aa:	4770      	bx	lr
 80062ac:	40005c50 	andmi	r5, r0, r0, asr ip
 80062b0:	20003004 	andcs	r3, r0, r4

080062b4 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80062b4:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <SetEPTxCount+0x14>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80062be:	4b03      	ldr	r3, [pc, #12]	; (80062cc <SetEPTxCount+0x18>)
 80062c0:	4403      	add	r3, r0
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	4770      	bx	lr
 80062c8:	40005c50 	andmi	r5, r0, r0, asr ip
 80062cc:	20003002 	andcs	r3, r0, r2

080062d0 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <SetEPRxCount+0x38>)
 80062d2:	293e      	cmp	r1, #62	; 0x3e
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <SetEPRxCount+0x3c>)
 80062de:	4403      	add	r3, r0
 80062e0:	ea4f 0243 	mov.w	r2, r3, lsl #1
 80062e4:	d909      	bls.n	80062fa <SetEPRxCount+0x2a>
 80062e6:	094b      	lsrs	r3, r1, #5
 80062e8:	06c8      	lsls	r0, r1, #27
 80062ea:	bf04      	itt	eq
 80062ec:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80062f0:	b29b      	uxtheq	r3, r3
 80062f2:	029b      	lsls	r3, r3, #10
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f8:	e004      	b.n	8006304 <SetEPRxCount+0x34>
 80062fa:	084b      	lsrs	r3, r1, #1
 80062fc:	07c9      	lsls	r1, r1, #31
 80062fe:	bf48      	it	mi
 8006300:	3301      	addmi	r3, #1
 8006302:	029b      	lsls	r3, r3, #10
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	4770      	bx	lr
 8006308:	40005c50 	andmi	r5, r0, r0, asr ip
 800630c:	20003006 	andcs	r3, r0, r6

08006310 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8006310:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8006312:	4a4c      	ldr	r2, [pc, #304]	; (8006444 <CTR_LP+0x134>)
 8006314:	4b4c      	ldr	r3, [pc, #304]	; (8006448 <CTR_LP+0x138>)
 8006316:	6811      	ldr	r1, [r2, #0]
 8006318:	b288      	uxth	r0, r1
 800631a:	040c      	lsls	r4, r1, #16
 800631c:	8018      	strh	r0, [r3, #0]
 800631e:	f140 8090 	bpl.w	8006442 <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8006322:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006326:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	4c48      	ldr	r4, [pc, #288]	; (800644c <CTR_LP+0x13c>)
 800632c:	f002 020f 	and.w	r2, r2, #15
 8006330:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8006332:	2a00      	cmp	r2, #0
 8006334:	d15f      	bne.n	80063f6 <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8006336:	4c46      	ldr	r4, [pc, #280]	; (8006450 <CTR_LP+0x140>)
 8006338:	4d46      	ldr	r5, [pc, #280]	; (8006454 <CTR_LP+0x144>)
 800633a:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 800633c:	4e46      	ldr	r6, [pc, #280]	; (8006458 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 800633e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006342:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800634a:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006352:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006356:	b292      	uxth	r2, r2
 8006358:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800635c:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006368:	b292      	uxth	r2, r2
 800636a:	f082 0220 	eor.w	r2, r2, #32
 800636e:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	06d8      	lsls	r0, r3, #27
 8006374:	d502      	bpl.n	800637c <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8006376:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8006378:	0619      	lsls	r1, r3, #24
 800637a:	d507      	bpl.n	800638c <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8006382:	4013      	ands	r3, r2
 8006384:	6023      	str	r3, [r4, #0]
          In0_Process();
 8006386:	f000 fc61 	bl	8006c4c <In0_Process>
 800638a:	e012      	b.n	80063b2 <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 800638c:	051a      	lsls	r2, r3, #20
 800638e:	d507      	bpl.n	80063a0 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006396:	4013      	ands	r3, r2
 8006398:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800639a:	f000 fa69 	bl	8006870 <Setup0_Process>
 800639e:	e008      	b.n	80063b2 <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 80063a0:	0418      	lsls	r0, r3, #16
 80063a2:	d5b6      	bpl.n	8006312 <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063aa:	4013      	ands	r3, r2
 80063ac:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80063ae:	f000 fbcd 	bl	8006b4c <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	882a      	ldrh	r2, [r5, #0]
 80063b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	b29b      	uxth	r3, r3
 80063c0:	04d1      	lsls	r1, r2, #19
 80063c2:	bf48      	it	mi
 80063c4:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 80063c8:	0495      	lsls	r5, r2, #18
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <CTR_LP+0x140>)
 80063cc:	bf48      	it	mi
 80063ce:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 80063d2:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	8831      	ldrh	r1, [r6, #0]
 80063d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	06cc      	lsls	r4, r1, #27
 80063e4:	bf48      	it	mi
 80063e6:	f083 0310 	eormi.w	r3, r3, #16
 80063ea:	0688      	lsls	r0, r1, #26
 80063ec:	bf48      	it	mi
 80063ee:	f083 0320 	eormi.w	r3, r3, #32
 80063f2:	6013      	str	r3, [r2, #0]
          return;
 80063f4:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80063f6:	0093      	lsls	r3, r2, #2
 80063f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006400:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8006402:	0429      	lsls	r1, r5, #16
 8006404:	d509      	bpl.n	800641a <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	f640 718f 	movw	r1, #3983	; 0xf8f
 800640c:	4001      	ands	r1, r0
 800640e:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <CTR_LP+0x14c>)
 8006412:	3a01      	subs	r2, #1
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 800641a:	062b      	lsls	r3, r5, #24
 800641c:	f57f af79 	bpl.w	8006312 <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8006420:	7821      	ldrb	r1, [r4, #0]
 8006422:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8006426:	008b      	lsls	r3, r1, #2
 8006428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800642c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006430:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8006432:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8006434:	4002      	ands	r2, r0
 8006436:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <CTR_LP+0x150>)
 800643a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800643e:	4798      	blx	r3
 8006440:	e767      	b.n	8006312 <CTR_LP+0x2>
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	40005c44 	andmi	r5, r0, r4, asr #24
 8006448:	2000048c 	andcs	r0, r0, ip, lsl #9
 800644c:	20000584 	andcs	r0, r0, r4, lsl #11
 8006450:	40005c00 	andmi	r5, r0, r0, lsl #24
 8006454:	20000576 	andcs	r0, r0, r6, ror r5
 8006458:	20000578 	andcs	r0, r0, r8, ror r5
 800645c:	20000064 	andcs	r0, r0, r4, rrx
 8006460:	20000048 	andcs	r0, r0, r8, asr #32

08006464 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8006464:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 8006466:	4a07      	ldr	r2, [pc, #28]	; (8006484 <USB_Init+0x20>)
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800646a:	4908      	ldr	r1, [pc, #32]	; (800648c <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 800646c:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 800646e:	2202      	movs	r2, #2
 8006470:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <USB_Init+0x2c>)
 8006474:	4a07      	ldr	r2, [pc, #28]	; (8006494 <USB_Init+0x30>)
 8006476:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8006478:	4a07      	ldr	r2, [pc, #28]	; (8006498 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 800647a:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 800647c:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 800647e:	4798      	blx	r3
 8006480:	bd08      	pop	{r3, pc}
 8006482:	bf00      	nop
 8006484:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006488:	20000588 	andcs	r0, r0, r8, lsl #11
 800648c:	20000080 	andcs	r0, r0, r0, lsl #1
 8006490:	20000014 	andcs	r0, r0, r4, lsl r0
 8006494:	20000580 	andcs	r0, r0, r0, lsl #11
 8006498:	200005a4 	andcs	r0, r0, r4, lsr #11

0800649c <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 800649c:	b510      	push	{r4, lr}
 800649e:	4c06      	ldr	r4, [pc, #24]	; (80064b8 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 80064a0:	b918      	cbnz	r0, 80064aa <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80064a8:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80064aa:	4b04      	ldr	r3, [pc, #16]	; (80064bc <Standard_GetConfiguration+0x20>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 80064b2:	6820      	ldr	r0, [r4, #0]
 80064b4:	300a      	adds	r0, #10
}
 80064b6:	bd10      	pop	{r4, pc}
 80064b8:	200005a8 	andcs	r0, r0, r8, lsr #11
 80064bc:	200005a4 	andcs	r0, r0, r4, lsr #11

080064c0 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4c06      	ldr	r4, [pc, #24]	; (80064dc <Standard_GetInterface+0x1c>)
  if (Length == 0)
 80064c4:	b918      	cbnz	r0, 80064ce <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80064cc:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 80064ce:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <Standard_GetInterface+0x20>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	300c      	adds	r0, #12
}
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	200005a8 	andcs	r0, r0, r8, lsr #11
 80064e0:	200005a4 	andcs	r0, r0, r4, lsr #11

080064e4 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4b20      	ldr	r3, [pc, #128]	; (8006568 <Standard_GetStatus+0x84>)
  if (Length == 0)
 80064e8:	b918      	cbnz	r0, 80064f2 <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2202      	movs	r2, #2
 80064ee:	821a      	strh	r2, [r3, #16]
    return 0;
 80064f0:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064f4:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 80064f6:	2000      	movs	r0, #0
 80064f8:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80064fa:	780c      	ldrb	r4, [r1, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 8006502:	d10d      	bne.n	8006520 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 8006504:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8006506:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8006508:	bf44      	itt	mi
 800650a:	2102      	movmi	r1, #2
 800650c:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800650e:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	bf14      	ite	ne
 8006516:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 800651a:	f042 0201 	orreq.w	r2, r2, #1
 800651e:	e014      	b.n	800654a <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006520:	2c01      	cmp	r4, #1
 8006522:	d01f      	beq.n	8006564 <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8006524:	2c02      	cmp	r4, #2
 8006526:	d11e      	bne.n	8006566 <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8006528:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 800652a:	f001 020f 	and.w	r2, r1, #15
 800652e:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006530:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006534:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8006538:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800653c:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800653e:	d006      	beq.n	800654e <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8006540:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006544:	2a10      	cmp	r2, #16
 8006546:	d107      	bne.n	8006558 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e004      	b.n	8006558 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800654e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8006552:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006556:	e7f6      	b.n	8006546 <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <Standard_GetStatus+0x8c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8006560:	4802      	ldr	r0, [pc, #8]	; (800656c <Standard_GetStatus+0x88>)
 8006562:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 8006564:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 8006566:	bd10      	pop	{r4, pc}
 8006568:	200005a8 	andcs	r0, r0, r8, lsr #11
 800656c:	200005ae 	andcs	r0, r0, lr, lsr #11
 8006570:	200005a4 	andcs	r0, r0, r4, lsr #11

08006574 <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8006574:	4a23      	ldr	r2, [pc, #140]	; (8006604 <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 8006576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800657a:	6814      	ldr	r4, [r2, #0]
 800657c:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 800657e:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8006580:	7a26      	ldrb	r6, [r4, #8]
 8006582:	4f21      	ldr	r7, [pc, #132]	; (8006608 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 8006584:	b9a3      	cbnz	r3, 80065b0 <DataStageIn+0x3c>
 8006586:	2e04      	cmp	r6, #4
 8006588:	d112      	bne.n	80065b0 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 800658a:	4920      	ldr	r1, [pc, #128]	; (800660c <DataStageIn+0x98>)
 800658c:	780a      	ldrb	r2, [r1, #0]
 800658e:	2a01      	cmp	r2, #1
 8006590:	d10a      	bne.n	80065a8 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8006592:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <DataStageIn+0x9c>)
 8006594:	6810      	ldr	r0, [r2, #0]
 8006596:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <DataStageIn+0xa0>)
 8006598:	b280      	uxth	r0, r0
 800659a:	4402      	add	r2, r0
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	2230      	movs	r2, #48	; 0x30
 80065a2:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 80065a4:	700b      	strb	r3, [r1, #0]
 80065a6:	e027      	b.n	80065f8 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80065a8:	2310      	movs	r3, #16
 80065aa:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80065ac:	2607      	movs	r6, #7
 80065ae:	e023      	b.n	80065f8 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80065b0:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80065b2:	42ab      	cmp	r3, r5
 80065b4:	bf8c      	ite	hi
 80065b6:	2602      	movhi	r6, #2
 80065b8:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80065ba:	429d      	cmp	r5, r3
 80065bc:	bf28      	it	cs
 80065be:	461d      	movcs	r5, r3
 80065c0:	4628      	mov	r0, r5
 80065c2:	69a3      	ldr	r3, [r4, #24]
 80065c4:	4798      	blx	r3
 80065c6:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff fe57 	bl	800627c <GetEPTxAddr>
 80065ce:	462a      	mov	r2, r5
 80065d0:	4601      	mov	r1, r0
 80065d2:	4648      	mov	r0, r9
 80065d4:	f000 fb68 	bl	8006ca8 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 80065d8:	4629      	mov	r1, r5
 80065da:	2000      	movs	r0, #0
 80065dc:	f7ff fe6a 	bl	80062b4 <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 80065e0:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80065e2:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80065e6:	1b5b      	subs	r3, r3, r5
 80065e8:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80065ea:	8a63      	ldrh	r3, [r4, #18]
 80065ec:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80065ee:	2330      	movs	r3, #48	; 0x30
 80065f0:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80065f2:	4b09      	ldr	r3, [pc, #36]	; (8006618 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80065f4:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80065f6:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80065f8:	f8d8 3000 	ldr.w	r3, [r8]
 80065fc:	721e      	strb	r6, [r3, #8]
 80065fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006602:	bf00      	nop
 8006604:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006608:	20000578 	andcs	r0, r0, r8, ror r5
 800660c:	20000dcc 	andcs	r0, r0, ip, asr #27
 8006610:	40005c50 	andmi	r5, r0, r0, asr ip
 8006614:	20003002 	andcs	r3, r0, r2
 8006618:	20000576 	andcs	r0, r0, r6, ror r5

0800661c <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 800661c:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 800661e:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8006620:	490a      	ldr	r1, [pc, #40]	; (800664c <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	7849      	ldrb	r1, [r1, #1]
 8006626:	789a      	ldrb	r2, [r3, #2]
 8006628:	4291      	cmp	r1, r2
 800662a:	d30a      	bcc.n	8006642 <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 800662c:	78d9      	ldrb	r1, [r3, #3]
 800662e:	b941      	cbnz	r1, 8006642 <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8006630:	889c      	ldrh	r4, [r3, #4]
 8006632:	b934      	cbnz	r4, 8006642 <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 8006634:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 8006636:	4b06      	ldr	r3, [pc, #24]	; (8006650 <Standard_SetConfiguration+0x34>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4798      	blx	r3
    return USB_SUCCESS;
 800663e:	4620      	mov	r0, r4
 8006640:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 8006642:	2002      	movs	r0, #2
  }
}
 8006644:	bd10      	pop	{r4, pc}
 8006646:	bf00      	nop
 8006648:	200005a8 	andcs	r0, r0, r8, lsr #11
 800664c:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006650:	200005a4 	andcs	r0, r0, r4, lsr #11

08006654 <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 8006654:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 8006656:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <Standard_SetInterface+0x3c>)
 8006658:	4c0e      	ldr	r4, [pc, #56]	; (8006694 <Standard_SetInterface+0x40>)
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	6992      	ldr	r2, [r2, #24]
 8006660:	7918      	ldrb	r0, [r3, #4]
 8006662:	7899      	ldrb	r1, [r3, #2]
 8006664:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	7a9a      	ldrb	r2, [r3, #10]
 800666a:	b17a      	cbz	r2, 800668c <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 800666c:	b970      	cbnz	r0, 800668c <Standard_SetInterface+0x38>
 800666e:	795a      	ldrb	r2, [r3, #5]
 8006670:	b962      	cbnz	r2, 800668c <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 8006672:	78dd      	ldrb	r5, [r3, #3]
 8006674:	b955      	cbnz	r5, 800668c <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <Standard_SetInterface+0x44>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800667e:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8006680:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8006682:	791a      	ldrb	r2, [r3, #4]
 8006684:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8006686:	789a      	ldrb	r2, [r3, #2]
 8006688:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800668a:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 800668c:	2002      	movs	r0, #2
}
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	20000580 	andcs	r0, r0, r0, lsl #11
 8006694:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006698:	200005a4 	andcs	r0, r0, r4, lsr #11

0800669c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800669c:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 800669e:	4b2f      	ldr	r3, [pc, #188]	; (800675c <Standard_ClearFeature+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80066a4:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80066a8:	d104      	bne.n	80066b4 <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80066aa:	7a5a      	ldrb	r2, [r3, #9]
 80066ac:	f022 0220 	bic.w	r2, r2, #32
 80066b0:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80066b4:	2802      	cmp	r0, #2
 80066b6:	d14e      	bne.n	8006756 <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80066b8:	885a      	ldrh	r2, [r3, #2]
 80066ba:	2a00      	cmp	r2, #0
 80066bc:	d14c      	bne.n	8006758 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 80066be:	795a      	ldrb	r2, [r3, #5]
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	d149      	bne.n	8006758 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80066c4:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80066c6:	4d26      	ldr	r5, [pc, #152]	; (8006760 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80066c8:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80066cc:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80066ce:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80066d2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80066d6:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80066d8:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80066da:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80066de:	bf14      	ite	ne
 80066e0:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80066e4:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80066e8:	42a8      	cmp	r0, r5
 80066ea:	d234      	bcs.n	8006756 <Standard_ClearFeature+0xba>
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d032      	beq.n	8006756 <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 80066f0:	7a9b      	ldrb	r3, [r3, #10]
 80066f2:	b383      	cbz	r3, 8006756 <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80066f4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80066f8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80066fc:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80066fe:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 8006700:	d50c      	bpl.n	800671c <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 8006702:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006706:	2b10      	cmp	r3, #16
 8006708:	d11f      	bne.n	800674a <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 800670a:	b2c4      	uxtb	r4, r0
 800670c:	4620      	mov	r0, r4
 800670e:	f7ff fda5 	bl	800625c <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8006712:	4620      	mov	r0, r4
 8006714:	2130      	movs	r1, #48	; 0x30
 8006716:	f7ff fd5f 	bl	80061d8 <SetEPTxStatus>
 800671a:	e016      	b.n	800674a <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 800671c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006724:	d111      	bne.n	800674a <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 8006726:	b928      	cbnz	r0, 8006734 <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <Standard_ClearFeature+0xc8>)
 800672a:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800672e:	f7ff fdcf 	bl	80062d0 <SetEPRxCount>
 8006732:	e001      	b.n	8006738 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8006734:	f7ff fd82 	bl	800623c <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	b29b      	uxth	r3, r3
 8006744:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006748:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <Standard_ClearFeature+0xcc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	4798      	blx	r3
    return USB_SUCCESS;
 8006752:	2000      	movs	r0, #0
 8006754:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 8006756:	2002      	movs	r0, #2
}
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006760:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006764:	20000014 	andcs	r0, r0, r4, lsl r0
 8006768:	200005a4 	andcs	r0, r0, r4, lsr #11

0800676c <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 800676c:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800676e:	4b1d      	ldr	r3, [pc, #116]	; (80067e4 <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006770:	4d1d      	ldr	r5, [pc, #116]	; (80067e8 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8006772:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006774:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8006776:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 8006778:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 800677c:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800677e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8006782:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8006786:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8006788:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 800678c:	bf14      	ite	ne
 800678e:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8006792:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8006796:	42ac      	cmp	r4, r5
 8006798:	d222      	bcs.n	80067e0 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 800679a:	884c      	ldrh	r4, [r1, #2]
 800679c:	bb04      	cbnz	r4, 80067e0 <Standard_SetEndPointFeature+0x74>
 800679e:	b1f8      	cbz	r0, 80067e0 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 80067a0:	7a89      	ldrb	r1, [r1, #10]
 80067a2:	b1e9      	cbz	r1, 80067e0 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80067a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80067ac:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80067b0:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80067b2:	d007      	beq.n	80067c4 <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80067b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80067b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067bc:	b292      	uxth	r2, r2
 80067be:	f082 0210 	eor.w	r2, r2, #16
 80067c2:	e006      	b.n	80067d2 <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80067c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067cc:	b292      	uxth	r2, r2
 80067ce:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80067d2:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <Standard_SetEndPointFeature+0x80>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	4798      	blx	r3
  return USB_SUCCESS;
 80067dc:	2000      	movs	r0, #0
 80067de:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80067e0:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	200005a8 	andcs	r0, r0, r8, lsr #11
 80067e8:	200000a4 	andcs	r0, r0, r4, lsr #1
 80067ec:	200005a4 	andcs	r0, r0, r4, lsr #11

080067f0 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80067f0:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <Standard_SetDeviceFeature+0x1c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	7a5a      	ldrb	r2, [r3, #9]
 80067f8:	f042 0220 	orr.w	r2, r2, #32
 80067fc:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <Standard_SetDeviceFeature+0x20>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	4798      	blx	r3
  return USB_SUCCESS;
}
 8006806:	2000      	movs	r0, #0
 8006808:	bd08      	pop	{r3, pc}
 800680a:	bf00      	nop
 800680c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006810:	200005a4 	andcs	r0, r0, r4, lsr #11

08006814 <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <Standard_GetDescriptorData+0x18>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 800681a:	b918      	cbnz	r0, 8006824 <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 800681c:	8889      	ldrh	r1, [r1, #4]
 800681e:	1acb      	subs	r3, r1, r3
 8006820:	8213      	strh	r3, [r2, #16]
    return 0;
 8006822:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	4418      	add	r0, r3
}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200005a8 	andcs	r0, r0, r8, lsr #11

08006830 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8006830:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8006832:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <Post0_Process+0x30>)
 8006834:	2000      	movs	r0, #0
 8006836:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800683a:	f7ff fd49 	bl	80062d0 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <Post0_Process+0x34>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	7a18      	ldrb	r0, [r3, #8]
 8006844:	2808      	cmp	r0, #8
 8006846:	d106      	bne.n	8006856 <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <Post0_Process+0x38>)
 800684a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800684e:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <Post0_Process+0x3c>)
 8006852:	2210      	movs	r2, #16
 8006854:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8006856:	f1b0 0309 	subs.w	r3, r0, #9
 800685a:	4258      	negs	r0, r3
 800685c:	4158      	adcs	r0, r3
 800685e:	bd08      	pop	{r3, pc}
 8006860:	20000014 	andcs	r0, r0, r4, lsl r0
 8006864:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006868:	20000576 	andcs	r0, r0, r6, ror r5
 800686c:	20000578 	andcs	r0, r0, r8, ror r5

08006870 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8006870:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8006872:	4e96      	ldr	r6, [pc, #600]	; (8006acc <Setup0_Process+0x25c>)
 8006874:	4b96      	ldr	r3, [pc, #600]	; (8006ad0 <Setup0_Process+0x260>)
 8006876:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 8006878:	4d96      	ldr	r5, [pc, #600]	; (8006ad4 <Setup0_Process+0x264>)
 800687a:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800687c:	4413      	add	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	7a19      	ldrb	r1, [r3, #8]
 8006886:	2909      	cmp	r1, #9
 8006888:	d00f      	beq.n	80068aa <Setup0_Process+0x3a>
 800688a:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800688c:	0052      	lsls	r2, r2, #1
 800688e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006892:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8006896:	7811      	ldrb	r1, [r2, #0]
 8006898:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 800689a:	7851      	ldrb	r1, [r2, #1]
 800689c:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 800689e:	8891      	ldrh	r1, [r2, #4]
 80068a0:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 80068a2:	8911      	ldrh	r1, [r2, #8]
 80068a4:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 80068a6:	8992      	ldrh	r2, [r2, #12]
 80068a8:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80068aa:	2201      	movs	r2, #1
 80068ac:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80068ae:	88da      	ldrh	r2, [r3, #6]
 80068b0:	785c      	ldrb	r4, [r3, #1]
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	d161      	bne.n	800697a <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80068bc:	d13a      	bne.n	8006934 <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80068be:	2c09      	cmp	r4, #9
 80068c0:	d102      	bne.n	80068c8 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 80068c2:	f7ff feab 	bl	800661c <Standard_SetConfiguration>
 80068c6:	e044      	b.n	8006952 <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80068c8:	2c05      	cmp	r4, #5
 80068ca:	d10f      	bne.n	80068ec <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80068cc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	da01      	bge.n	80068d8 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80068d4:	2308      	movs	r3, #8
 80068d6:	e04d      	b.n	8006974 <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80068d8:	78da      	ldrb	r2, [r3, #3]
 80068da:	2a00      	cmp	r2, #0
 80068dc:	d1fa      	bne.n	80068d4 <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 80068de:	889a      	ldrh	r2, [r3, #4]
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	d1f7      	bne.n	80068d4 <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 80068e4:	7a9b      	ldrb	r3, [r3, #10]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d037      	beq.n	800695a <Setup0_Process+0xea>
 80068ea:	e7f3      	b.n	80068d4 <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80068ec:	2c03      	cmp	r4, #3
 80068ee:	d113      	bne.n	8006918 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80068f0:	789a      	ldrb	r2, [r3, #2]
 80068f2:	2a01      	cmp	r2, #1
 80068f4:	d007      	beq.n	8006906 <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80068f6:	4b78      	ldr	r3, [pc, #480]	; (8006ad8 <Setup0_Process+0x268>)
 80068f8:	4620      	mov	r0, r4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8006900:	2803      	cmp	r0, #3
 8006902:	d128      	bne.n	8006956 <Setup0_Process+0xe6>
 8006904:	e035      	b.n	8006972 <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 8006906:	889a      	ldrh	r2, [r3, #4]
 8006908:	2a00      	cmp	r2, #0
 800690a:	d1f4      	bne.n	80068f6 <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 800690c:	7a5b      	ldrb	r3, [r3, #9]
 800690e:	0698      	lsls	r0, r3, #26
 8006910:	d5f1      	bpl.n	80068f6 <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 8006912:	f7ff ff6d 	bl	80067f0 <Standard_SetDeviceFeature>
 8006916:	e01c      	b.n	8006952 <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8006918:	2c01      	cmp	r4, #1
 800691a:	d1ec      	bne.n	80068f6 <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 800691c:	789a      	ldrb	r2, [r3, #2]
 800691e:	2a01      	cmp	r2, #1
 8006920:	d1e9      	bne.n	80068f6 <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 8006922:	889a      	ldrh	r2, [r3, #4]
 8006924:	2a00      	cmp	r2, #0
 8006926:	d1e6      	bne.n	80068f6 <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8006928:	7a5b      	ldrb	r3, [r3, #9]
 800692a:	0699      	lsls	r1, r3, #26
 800692c:	d5e3      	bpl.n	80068f6 <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 800692e:	f7ff feb5 	bl	800669c <Standard_ClearFeature>
 8006932:	e00e      	b.n	8006952 <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006934:	2a01      	cmp	r2, #1
 8006936:	d104      	bne.n	8006942 <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8006938:	2c0b      	cmp	r4, #11
 800693a:	d1dc      	bne.n	80068f6 <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 800693c:	f7ff fe8a 	bl	8006654 <Standard_SetInterface>
 8006940:	e007      	b.n	8006952 <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8006942:	2a02      	cmp	r2, #2
 8006944:	d1d7      	bne.n	80068f6 <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8006946:	2c01      	cmp	r4, #1
 8006948:	d0f1      	beq.n	800692e <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 800694a:	2c03      	cmp	r4, #3
 800694c:	d1d3      	bne.n	80068f6 <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 800694e:	f7ff ff0d 	bl	800676c <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8006952:	b110      	cbz	r0, 800695a <Setup0_Process+0xea>
 8006954:	e7cf      	b.n	80068f6 <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8006956:	2800      	cmp	r0, #0
 8006958:	d1bc      	bne.n	80068d4 <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 800695a:	6832      	ldr	r2, [r6, #0]
 800695c:	4b5f      	ldr	r3, [pc, #380]	; (8006adc <Setup0_Process+0x26c>)
 800695e:	b292      	uxth	r2, r2
 8006960:	4413      	add	r3, r2
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	4b5d      	ldr	r3, [pc, #372]	; (8006ae0 <Setup0_Process+0x270>)
 800696a:	2230      	movs	r2, #48	; 0x30
 800696c:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 800696e:	2306      	movs	r3, #6
 8006970:	e000      	b.n	8006974 <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 8006972:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8006974:	682a      	ldr	r2, [r5, #0]
 8006976:	7213      	strb	r3, [r2, #8]
 8006978:	e0d4      	b.n	8006b24 <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 800697a:	2c06      	cmp	r4, #6
 800697c:	d118      	bne.n	80069b0 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	0652      	lsls	r2, r2, #25
 8006982:	d17c      	bne.n	8006a7e <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 8006984:	78da      	ldrb	r2, [r3, #3]
 8006986:	4b54      	ldr	r3, [pc, #336]	; (8006ad8 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8006988:	2a01      	cmp	r2, #1
 800698a:	d102      	bne.n	8006992 <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	e06c      	b.n	8006a6c <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8006992:	2a02      	cmp	r2, #2
 8006994:	d102      	bne.n	800699c <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	e067      	b.n	8006a6c <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 800699c:	2a03      	cmp	r2, #3
 800699e:	d102      	bne.n	80069a6 <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	e062      	b.n	8006a6c <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 80069a6:	2a21      	cmp	r2, #33	; 0x21
 80069a8:	d169      	bne.n	8006a7e <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	e05d      	b.n	8006a6c <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80069b0:	2c00      	cmp	r4, #0
 80069b2:	d13c      	bne.n	8006a2e <Setup0_Process+0x1be>
 80069b4:	8859      	ldrh	r1, [r3, #2]
 80069b6:	2900      	cmp	r1, #0
 80069b8:	d161      	bne.n	8006a7e <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069c0:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80069c4:	d15b      	bne.n	8006a7e <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80069cc:	d104      	bne.n	80069d8 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 80069ce:	889b      	ldrh	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 80ab 	beq.w	8006b2c <Setup0_Process+0x2bc>
 80069d6:	e052      	b.n	8006a7e <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80069d8:	2a01      	cmp	r2, #1
 80069da:	d10c      	bne.n	80069f6 <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80069dc:	4a3e      	ldr	r2, [pc, #248]	; (8006ad8 <Setup0_Process+0x268>)
 80069de:	7918      	ldrb	r0, [r3, #4]
 80069e0:	6812      	ldr	r2, [r2, #0]
 80069e2:	6992      	ldr	r2, [r2, #24]
 80069e4:	4790      	blx	r2
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d149      	bne.n	8006a7e <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	7a9b      	ldrb	r3, [r3, #10]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f040 809c 	bne.w	8006b2c <Setup0_Process+0x2bc>
 80069f4:	e043      	b.n	8006a7e <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80069f6:	2a02      	cmp	r2, #2
 80069f8:	d141      	bne.n	8006a7e <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80069fa:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80069fc:	4839      	ldr	r0, [pc, #228]	; (8006ae4 <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80069fe:	f003 010f 	and.w	r1, r3, #15
 8006a02:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8006a04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006a08:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8006a0c:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006a0e:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8006a10:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8006a14:	bf14      	ite	ne
 8006a16:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8006a1a:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8006a1e:	4281      	cmp	r1, r0
 8006a20:	d22d      	bcs.n	8006a7e <Setup0_Process+0x20e>
 8006a22:	f013 0f70 	tst.w	r3, #112	; 0x70
 8006a26:	d12a      	bne.n	8006a7e <Setup0_Process+0x20e>
          && (Status != 0))
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d17f      	bne.n	8006b2c <Setup0_Process+0x2bc>
 8006a2c:	e027      	b.n	8006a7e <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8006a2e:	2c08      	cmp	r4, #8
 8006a30:	d103      	bne.n	8006a3a <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	065b      	lsls	r3, r3, #25
 8006a36:	d07b      	beq.n	8006b30 <Setup0_Process+0x2c0>
 8006a38:	e021      	b.n	8006a7e <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8006a3a:	2c0a      	cmp	r4, #10
 8006a3c:	d11f      	bne.n	8006a7e <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	d11a      	bne.n	8006a7e <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8006a48:	7a9a      	ldrb	r2, [r3, #10]
 8006a4a:	b1c2      	cbz	r2, 8006a7e <Setup0_Process+0x20e>
 8006a4c:	8859      	ldrh	r1, [r3, #2]
 8006a4e:	b9b1      	cbnz	r1, 8006a7e <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a56:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006a5a:	d110      	bne.n	8006a7e <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <Setup0_Process+0x268>)
 8006a5e:	7918      	ldrb	r0, [r3, #4]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	6992      	ldr	r2, [r2, #24]
 8006a64:	4790      	blx	r2
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d064      	beq.n	8006b34 <Setup0_Process+0x2c4>
 8006a6a:	e008      	b.n	8006a7e <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8006a6c:	b13b      	cbz	r3, 8006a7e <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8006a6e:	682a      	ldr	r2, [r5, #0]
 8006a70:	2400      	movs	r4, #0
 8006a72:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8006a74:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8006a76:	4620      	mov	r0, r4
 8006a78:	4798      	blx	r3
    Result = USB_SUCCESS;
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	e00a      	b.n	8006a94 <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <Setup0_Process+0x268>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	6912      	ldr	r2, [r2, #16]
 8006a86:	7858      	ldrb	r0, [r3, #1]
 8006a88:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8006a8a:	2803      	cmp	r0, #3
 8006a8c:	d102      	bne.n	8006a94 <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <Setup0_Process+0x264>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	e005      	b.n	8006aa0 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8006a94:	682b      	ldr	r3, [r5, #0]
 8006a96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a9a:	8a1a      	ldrh	r2, [r3, #16]
 8006a9c:	428a      	cmp	r2, r1
 8006a9e:	d101      	bne.n	8006aa4 <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8006aa0:	2209      	movs	r2, #9
 8006aa2:	e003      	b.n	8006aac <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8006aa4:	2802      	cmp	r0, #2
 8006aa6:	d000      	beq.n	8006aaa <Setup0_Process+0x23a>
 8006aa8:	b912      	cbnz	r2, 8006ab0 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8006aaa:	2208      	movs	r2, #8
 8006aac:	721a      	strb	r2, [r3, #8]
 8006aae:	e039      	b.n	8006b24 <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8006ab0:	f993 1000 	ldrsb.w	r1, [r3]
 8006ab4:	2900      	cmp	r1, #0
 8006ab6:	da2f      	bge.n	8006b18 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8006ab8:	88d9      	ldrh	r1, [r3, #6]
 8006aba:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8006abc:	9801      	ldr	r0, [sp, #4]
 8006abe:	4282      	cmp	r2, r0
 8006ac0:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <Setup0_Process+0x268>)
 8006ac2:	d911      	bls.n	8006ae8 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	821a      	strh	r2, [r3, #16]
 8006ac8:	e01f      	b.n	8006b0a <Setup0_Process+0x29a>
 8006aca:	bf00      	nop
 8006acc:	40005c50 	andmi	r5, r0, r0, asr ip
 8006ad0:	20003004 	andcs	r3, r0, r4
 8006ad4:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006ad8:	20000580 	andcs	r0, r0, r0, lsl #11
 8006adc:	20003002 	andcs	r3, r0, r2
 8006ae0:	20000578 	andcs	r0, r0, r8, ror r5
 8006ae4:	200000a4 	andcs	r0, r0, r4, lsr #1
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8006ae8:	428a      	cmp	r2, r1
 8006aea:	d20e      	bcs.n	8006b0a <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8006aec:	6801      	ldr	r1, [r0, #0]
 8006aee:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8006af2:	428a      	cmp	r2, r1
 8006af4:	d201      	bcs.n	8006afa <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8006af6:	2100      	movs	r1, #0
 8006af8:	e005      	b.n	8006b06 <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8006afa:	fb92 f4f1 	sdiv	r4, r2, r1
 8006afe:	fb01 2214 	mls	r2, r1, r4, r2
 8006b02:	b912      	cbnz	r2, 8006b0a <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8006b04:	2101      	movs	r1, #1
 8006b06:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <Setup0_Process+0x2c8>)
 8006b08:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8006b0a:	6802      	ldr	r2, [r0, #0]
 8006b0c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006b10:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8006b12:	f7ff fd2f 	bl	8006574 <DataStageIn>
 8006b16:	e005      	b.n	8006b24 <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8006b18:	2203      	movs	r2, #3
 8006b1a:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <Setup0_Process+0x2cc>)
 8006b1e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8006b22:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8006b24:	f7ff fe84 	bl	8006830 <Post0_Process>
}
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8006b2c:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <Setup0_Process+0x2d0>)
 8006b2e:	e79e      	b.n	8006a6e <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8006b30:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <Setup0_Process+0x2d4>)
 8006b32:	e79c      	b.n	8006a6e <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 8006b34:	4b04      	ldr	r3, [pc, #16]	; (8006b48 <Setup0_Process+0x2d8>)
 8006b36:	e79a      	b.n	8006a6e <Setup0_Process+0x1fe>
 8006b38:	20000dcc 	andcs	r0, r0, ip, asr #27
 8006b3c:	20000576 	andcs	r0, r0, r6, ror r5
 8006b40:	080064e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, sp, lr}
 8006b44:	0800649d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, sp, lr}
 8006b48:	080064c1 	stmdaeq	r0, {r0, r6, r7, sl, sp, lr}

08006b4c <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8006b4e:	4d2b      	ldr	r5, [pc, #172]	; (8006bfc <Out0_Process+0xb0>)
 8006b50:	682c      	ldr	r4, [r5, #0]
 8006b52:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8006b54:	2b03      	cmp	r3, #3
 8006b56:	d001      	beq.n	8006b5c <Out0_Process+0x10>
 8006b58:	2b05      	cmp	r3, #5
 8006b5a:	d141      	bne.n	8006be0 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8006b5c:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8006b5e:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8006b60:	b1ab      	cbz	r3, 8006b8e <Out0_Process+0x42>
 8006b62:	b1a2      	cbz	r2, 8006b8e <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 8006b64:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8006b66:	4296      	cmp	r6, r2
 8006b68:	bf28      	it	cs
 8006b6a:	4616      	movcs	r6, r2
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8006b70:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8006b72:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 8006b74:	1b9b      	subs	r3, r3, r6
 8006b76:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8006b78:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006b7a:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8006b7c:	4433      	add	r3, r6
 8006b7e:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8006b80:	f7ff fb8a 	bl	8006298 <GetEPRxAddr>
 8006b84:	4632      	mov	r2, r6
 8006b86:	4601      	mov	r1, r0
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f000 f8a5 	bl	8006cd8 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8006b8e:	8a23      	ldrh	r3, [r4, #16]
 8006b90:	b153      	cbz	r3, 8006ba8 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b92:	4b1b      	ldr	r3, [pc, #108]	; (8006c00 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 8006b94:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b96:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8006b9a:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8006b9c:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8006b9e:	f7ff fb89 	bl	80062b4 <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8006ba2:	4b18      	ldr	r3, [pc, #96]	; (8006c04 <Out0_Process+0xb8>)
 8006ba4:	2230      	movs	r2, #48	; 0x30
 8006ba6:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8006ba8:	8a23      	ldrh	r3, [r4, #16]
 8006baa:	8aa2      	ldrh	r2, [r4, #20]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d802      	bhi.n	8006bb6 <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	e002      	b.n	8006bbc <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8006bb6:	b11b      	cbz	r3, 8006bc0 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	2205      	movs	r2, #5
 8006bbc:	721a      	strb	r2, [r3, #8]
 8006bbe:	e00c      	b.n	8006bda <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8006bc0:	682a      	ldr	r2, [r5, #0]
 8006bc2:	2106      	movs	r1, #6
 8006bc4:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 8006bc6:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <Out0_Process+0xbc>)
 8006bc8:	6811      	ldr	r1, [r2, #0]
 8006bca:	4a10      	ldr	r2, [pc, #64]	; (8006c0c <Out0_Process+0xc0>)
 8006bcc:	b289      	uxth	r1, r1
 8006bce:	440a      	add	r2, r1
 8006bd0:	0052      	lsls	r2, r2, #1
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <Out0_Process+0xb8>)
 8006bd6:	2230      	movs	r2, #48	; 0x30
 8006bd8:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	7a1b      	ldrb	r3, [r3, #8]
 8006bde:	e006      	b.n	8006bee <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d103      	bne.n	8006bec <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <Out0_Process+0xc4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 8006bec:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8006bee:	682a      	ldr	r2, [r5, #0]
 8006bf0:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8006bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8006bf6:	f7ff be1b 	b.w	8006830 <Post0_Process>
 8006bfa:	bf00      	nop
 8006bfc:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006c00:	20000576 	andcs	r0, r0, r6, ror r5
 8006c04:	20000578 	andcs	r0, r0, r8, ror r5
 8006c08:	40005c50 	andmi	r5, r0, r0, asr ip
 8006c0c:	20003002 	andcs	r3, r0, r2
 8006c10:	20000580 	andcs	r0, r0, r0, lsl #11

08006c14 <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 8006c14:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 8006c16:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <SetDeviceAddress+0x30>)
 8006c18:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d20c      	bcs.n	8006c3a <SetDeviceAddress+0x26>
 8006c20:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 8006c24:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8006c28:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8006c2a:	680d      	ldr	r5, [r1, #0]
 8006c2c:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8006c30:	402a      	ands	r2, r5
 8006c32:	431a      	orrs	r2, r3
 8006c34:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8006c36:	3301      	adds	r3, #1
 8006c38:	e7f0      	b.n	8006c1c <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8006c3a:	4b03      	ldr	r3, [pc, #12]	; (8006c48 <SetDeviceAddress+0x34>)
 8006c3c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006c40:	6018      	str	r0, [r3, #0]
 8006c42:	bd30      	pop	{r4, r5, pc}
 8006c44:	200000a4 	andcs	r0, r0, r4, lsr #1
 8006c48:	40005c4c 	andmi	r5, r0, ip, asr #24

08006c4c <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8006c4c:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8006c4e:	4c13      	ldr	r4, [pc, #76]	; (8006c9c <In0_Process+0x50>)
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8006c54:	2a02      	cmp	r2, #2
 8006c56:	d001      	beq.n	8006c5c <In0_Process+0x10>
 8006c58:	2a04      	cmp	r2, #4
 8006c5a:	d104      	bne.n	8006c66 <In0_Process+0x1a>
  {
    DataStageIn();
 8006c5c:	f7ff fc8a 	bl	8006574 <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	7a1b      	ldrb	r3, [r3, #8]
 8006c64:	e013      	b.n	8006c8e <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 8006c66:	2a06      	cmp	r2, #6
 8006c68:	d110      	bne.n	8006c8c <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8006c6a:	785a      	ldrb	r2, [r3, #1]
 8006c6c:	2a05      	cmp	r2, #5
 8006c6e:	d109      	bne.n	8006c84 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8006c70:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8006c72:	0652      	lsls	r2, r2, #25
 8006c74:	d106      	bne.n	8006c84 <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8006c76:	7898      	ldrb	r0, [r3, #2]
 8006c78:	f7ff ffcc 	bl	8006c14 <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <In0_Process+0x54>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <In0_Process+0x58>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8006c8c:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 8006c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 8006c96:	f7ff bdcb 	b.w	8006830 <Post0_Process>
 8006c9a:	bf00      	nop
 8006c9c:	200005a8 	andcs	r0, r0, r8, lsr #11
 8006ca0:	200005a4 	andcs	r0, r0, r4, lsr #11
 8006ca4:	20000580 	andcs	r0, r0, r0, lsl #11

08006ca8 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8006ca8:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006caa:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8006cae:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006cb0:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8006cb4:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8006cb6:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	f100 0002 	add.w	r0, r0, #2
 8006cc0:	d009      	beq.n	8006cd6 <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8006cc2:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 8006cc6:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 8006cca:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 8006cce:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	e7f1      	b.n	8006cba <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 8006cd6:	bd30      	pop	{r4, r5, pc}

08006cd8 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8006cd8:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006cda:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8006cde:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006ce0:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 8006ce4:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 8006ce6:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d005      	beq.n	8006cfa <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 8006cee:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8006cf2:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	e7f7      	b.n	8006cea <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 8006cfa:	bd10      	pop	{r4, pc}

08006cfc <memcpy>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d003      	beq.n	8006d0c <memcpy+0x10>
 8006d04:	5ccc      	ldrb	r4, [r1, r3]
 8006d06:	54c4      	strb	r4, [r0, r3]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	e7f9      	b.n	8006d00 <memcpy+0x4>
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <memset>:
 8006d0e:	4402      	add	r2, r0
 8006d10:	4603      	mov	r3, r0
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d002      	beq.n	8006d1c <memset+0xe>
 8006d16:	f803 1b01 	strb.w	r1, [r3], #1
 8006d1a:	e7fa      	b.n	8006d12 <memset+0x4>
 8006d1c:	4770      	bx	lr
	...

08006d20 <siprintf>:
 8006d20:	b40e      	push	{r1, r2, r3}
 8006d22:	b500      	push	{lr}
 8006d24:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006d28:	b09c      	sub	sp, #112	; 0x70
 8006d2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006d2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d32:	9104      	str	r1, [sp, #16]
 8006d34:	9107      	str	r1, [sp, #28]
 8006d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8006d3c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006d40:	4908      	ldr	r1, [pc, #32]	; (8006d64 <siprintf+0x44>)
 8006d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d46:	9002      	str	r0, [sp, #8]
 8006d48:	9006      	str	r0, [sp, #24]
 8006d4a:	6808      	ldr	r0, [r1, #0]
 8006d4c:	a902      	add	r1, sp, #8
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	f000 f86e 	bl	8006e30 <_svfiprintf_r>
 8006d54:	9b02      	ldr	r3, [sp, #8]
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	b01c      	add	sp, #112	; 0x70
 8006d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d60:	b003      	add	sp, #12
 8006d62:	4770      	bx	lr
 8006d64:	20000484 	andcs	r0, r0, r4, lsl #9

08006d68 <strlen>:
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	d1fb      	bne.n	8006d6a <strlen+0x2>
 8006d72:	1a18      	subs	r0, r3, r0
 8006d74:	3801      	subs	r0, #1
 8006d76:	4770      	bx	lr

08006d78 <__ssputs_r>:
 8006d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	688d      	ldr	r5, [r1, #8]
 8006d7e:	4681      	mov	r9, r0
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	460c      	mov	r4, r1
 8006d84:	4692      	mov	sl, r2
 8006d86:	461f      	mov	r7, r3
 8006d88:	d343      	bcc.n	8006e12 <__ssputs_r+0x9a>
 8006d8a:	898b      	ldrh	r3, [r1, #12]
 8006d8c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006d90:	d03d      	beq.n	8006e0e <__ssputs_r+0x96>
 8006d92:	6826      	ldr	r6, [r4, #0]
 8006d94:	6909      	ldr	r1, [r1, #16]
 8006d96:	2202      	movs	r2, #2
 8006d98:	ebc1 0806 	rsb	r8, r1, r6
 8006d9c:	6966      	ldr	r6, [r4, #20]
 8006d9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006da2:	fb96 f6f2 	sdiv	r6, r6, r2
 8006da6:	f108 0201 	add.w	r2, r8, #1
 8006daa:	443a      	add	r2, r7
 8006dac:	4296      	cmp	r6, r2
 8006dae:	bf38      	it	cc
 8006db0:	4616      	movcc	r6, r2
 8006db2:	055b      	lsls	r3, r3, #21
 8006db4:	d50f      	bpl.n	8006dd6 <__ssputs_r+0x5e>
 8006db6:	4631      	mov	r1, r6
 8006db8:	f000 fb40 	bl	800743c <_malloc_r>
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	b198      	cbz	r0, 8006de8 <__ssputs_r+0x70>
 8006dc0:	6921      	ldr	r1, [r4, #16]
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	f7ff ff9a 	bl	8006cfc <memcpy>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	e013      	b.n	8006dfe <__ssputs_r+0x86>
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	f000 fb84 	bl	80074e4 <_realloc_r>
 8006ddc:	4605      	mov	r5, r0
 8006dde:	b970      	cbnz	r0, 8006dfe <__ssputs_r+0x86>
 8006de0:	4648      	mov	r0, r9
 8006de2:	6921      	ldr	r1, [r4, #16]
 8006de4:	f000 fae6 	bl	80073b4 <_free_r>
 8006de8:	230c      	movs	r3, #12
 8006dea:	f8c9 3000 	str.w	r3, [r9]
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfe:	6125      	str	r5, [r4, #16]
 8006e00:	6166      	str	r6, [r4, #20]
 8006e02:	4445      	add	r5, r8
 8006e04:	ebc8 0606 	rsb	r6, r8, r6
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	60a6      	str	r6, [r4, #8]
 8006e0c:	463d      	mov	r5, r7
 8006e0e:	42af      	cmp	r7, r5
 8006e10:	d200      	bcs.n	8006e14 <__ssputs_r+0x9c>
 8006e12:	463d      	mov	r5, r7
 8006e14:	462a      	mov	r2, r5
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	4651      	mov	r1, sl
 8006e1a:	f000 faaf 	bl	800737c <memmove>
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	2000      	movs	r0, #0
 8006e22:	1b5b      	subs	r3, r3, r5
 8006e24:	60a3      	str	r3, [r4, #8]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	441d      	add	r5, r3
 8006e2a:	6025      	str	r5, [r4, #0]
 8006e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006e30 <_svfiprintf_r>:
 8006e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e34:	b09d      	sub	sp, #116	; 0x74
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	898b      	ldrh	r3, [r1, #12]
 8006e3a:	4607      	mov	r7, r0
 8006e3c:	061c      	lsls	r4, r3, #24
 8006e3e:	460d      	mov	r5, r1
 8006e40:	4616      	mov	r6, r2
 8006e42:	d50c      	bpl.n	8006e5e <_svfiprintf_r+0x2e>
 8006e44:	690b      	ldr	r3, [r1, #16]
 8006e46:	b953      	cbnz	r3, 8006e5e <_svfiprintf_r+0x2e>
 8006e48:	2140      	movs	r1, #64	; 0x40
 8006e4a:	f000 faf7 	bl	800743c <_malloc_r>
 8006e4e:	6028      	str	r0, [r5, #0]
 8006e50:	6128      	str	r0, [r5, #16]
 8006e52:	b910      	cbnz	r0, 8006e5a <_svfiprintf_r+0x2a>
 8006e54:	230c      	movs	r3, #12
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	e0c7      	b.n	8006fea <_svfiprintf_r+0x1ba>
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	616b      	str	r3, [r5, #20]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9309      	str	r3, [sp, #36]	; 0x24
 8006e62:	2320      	movs	r3, #32
 8006e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e68:	2330      	movs	r3, #48	; 0x30
 8006e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e6e:	4633      	mov	r3, r6
 8006e70:	461c      	mov	r4, r3
 8006e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e76:	b91a      	cbnz	r2, 8006e80 <_svfiprintf_r+0x50>
 8006e78:	ebb4 0906 	subs.w	r9, r4, r6
 8006e7c:	d00f      	beq.n	8006e9e <_svfiprintf_r+0x6e>
 8006e7e:	e002      	b.n	8006e86 <_svfiprintf_r+0x56>
 8006e80:	2a25      	cmp	r2, #37	; 0x25
 8006e82:	d1f5      	bne.n	8006e70 <_svfiprintf_r+0x40>
 8006e84:	e7f8      	b.n	8006e78 <_svfiprintf_r+0x48>
 8006e86:	4638      	mov	r0, r7
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	f7ff ff73 	bl	8006d78 <__ssputs_r>
 8006e92:	3001      	adds	r0, #1
 8006e94:	f000 80a4 	beq.w	8006fe0 <_svfiprintf_r+0x1b0>
 8006e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9a:	444b      	add	r3, r9
 8006e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9e:	7823      	ldrb	r3, [r4, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 809d 	beq.w	8006fe0 <_svfiprintf_r+0x1b0>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	9304      	str	r3, [sp, #16]
 8006eae:	9307      	str	r3, [sp, #28]
 8006eb0:	9205      	str	r2, [sp, #20]
 8006eb2:	9306      	str	r3, [sp, #24]
 8006eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eba:	f104 0901 	add.w	r9, r4, #1
 8006ebe:	4e4d      	ldr	r6, [pc, #308]	; (8006ff4 <_svfiprintf_r+0x1c4>)
 8006ec0:	464c      	mov	r4, r9
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	7821      	ldrb	r1, [r4, #0]
 8006ec6:	2205      	movs	r2, #5
 8006ec8:	f000 fa4a 	bl	8007360 <memchr>
 8006ecc:	f109 0901 	add.w	r9, r9, #1
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	b128      	cbz	r0, 8006ee0 <_svfiprintf_r+0xb0>
 8006ed4:	1b86      	subs	r6, r0, r6
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	40b0      	lsls	r0, r6
 8006eda:	4303      	orrs	r3, r0
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	e7ee      	b.n	8006ebe <_svfiprintf_r+0x8e>
 8006ee0:	06d9      	lsls	r1, r3, #27
 8006ee2:	bf44      	itt	mi
 8006ee4:	2220      	movmi	r2, #32
 8006ee6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006eea:	071a      	lsls	r2, r3, #28
 8006eec:	bf44      	itt	mi
 8006eee:	222b      	movmi	r2, #43	; 0x2b
 8006ef0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ef4:	7822      	ldrb	r2, [r4, #0]
 8006ef6:	2a2a      	cmp	r2, #42	; 0x2a
 8006ef8:	d002      	beq.n	8006f00 <_svfiprintf_r+0xd0>
 8006efa:	9b07      	ldr	r3, [sp, #28]
 8006efc:	4621      	mov	r1, r4
 8006efe:	e00e      	b.n	8006f1e <_svfiprintf_r+0xee>
 8006f00:	9a03      	ldr	r2, [sp, #12]
 8006f02:	1d11      	adds	r1, r2, #4
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	9103      	str	r1, [sp, #12]
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	db01      	blt.n	8006f10 <_svfiprintf_r+0xe0>
 8006f0c:	9207      	str	r2, [sp, #28]
 8006f0e:	e004      	b.n	8006f1a <_svfiprintf_r+0xea>
 8006f10:	4252      	negs	r2, r2
 8006f12:	f043 0302 	orr.w	r3, r3, #2
 8006f16:	9207      	str	r2, [sp, #28]
 8006f18:	9304      	str	r3, [sp, #16]
 8006f1a:	3401      	adds	r4, #1
 8006f1c:	e00a      	b.n	8006f34 <_svfiprintf_r+0x104>
 8006f1e:	460c      	mov	r4, r1
 8006f20:	7822      	ldrb	r2, [r4, #0]
 8006f22:	3101      	adds	r1, #1
 8006f24:	3a30      	subs	r2, #48	; 0x30
 8006f26:	2a09      	cmp	r2, #9
 8006f28:	d803      	bhi.n	8006f32 <_svfiprintf_r+0x102>
 8006f2a:	200a      	movs	r0, #10
 8006f2c:	fb00 2303 	mla	r3, r0, r3, r2
 8006f30:	e7f5      	b.n	8006f1e <_svfiprintf_r+0xee>
 8006f32:	9307      	str	r3, [sp, #28]
 8006f34:	7823      	ldrb	r3, [r4, #0]
 8006f36:	2b2e      	cmp	r3, #46	; 0x2e
 8006f38:	d119      	bne.n	8006f6e <_svfiprintf_r+0x13e>
 8006f3a:	7863      	ldrb	r3, [r4, #1]
 8006f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3e:	d109      	bne.n	8006f54 <_svfiprintf_r+0x124>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	3402      	adds	r4, #2
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	9203      	str	r2, [sp, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfb8      	it	lt
 8006f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f52:	e00b      	b.n	8006f6c <_svfiprintf_r+0x13c>
 8006f54:	1c61      	adds	r1, r4, #1
 8006f56:	2300      	movs	r3, #0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	7822      	ldrb	r2, [r4, #0]
 8006f5c:	3101      	adds	r1, #1
 8006f5e:	3a30      	subs	r2, #48	; 0x30
 8006f60:	2a09      	cmp	r2, #9
 8006f62:	d803      	bhi.n	8006f6c <_svfiprintf_r+0x13c>
 8006f64:	200a      	movs	r0, #10
 8006f66:	fb00 2303 	mla	r3, r0, r3, r2
 8006f6a:	e7f5      	b.n	8006f58 <_svfiprintf_r+0x128>
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	4e22      	ldr	r6, [pc, #136]	; (8006ff8 <_svfiprintf_r+0x1c8>)
 8006f70:	7821      	ldrb	r1, [r4, #0]
 8006f72:	4630      	mov	r0, r6
 8006f74:	2203      	movs	r2, #3
 8006f76:	f000 f9f3 	bl	8007360 <memchr>
 8006f7a:	b130      	cbz	r0, 8006f8a <_svfiprintf_r+0x15a>
 8006f7c:	1b86      	subs	r6, r0, r6
 8006f7e:	2040      	movs	r0, #64	; 0x40
 8006f80:	40b0      	lsls	r0, r6
 8006f82:	9b04      	ldr	r3, [sp, #16]
 8006f84:	3401      	adds	r4, #1
 8006f86:	4303      	orrs	r3, r0
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	7821      	ldrb	r1, [r4, #0]
 8006f8c:	481b      	ldr	r0, [pc, #108]	; (8006ffc <_svfiprintf_r+0x1cc>)
 8006f8e:	2206      	movs	r2, #6
 8006f90:	1c66      	adds	r6, r4, #1
 8006f92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f96:	f000 f9e3 	bl	8007360 <memchr>
 8006f9a:	b188      	cbz	r0, 8006fc0 <_svfiprintf_r+0x190>
 8006f9c:	4b18      	ldr	r3, [pc, #96]	; (8007000 <_svfiprintf_r+0x1d0>)
 8006f9e:	b933      	cbnz	r3, 8006fae <_svfiprintf_r+0x17e>
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	3307      	adds	r3, #7
 8006fa4:	f023 0307 	bic.w	r3, r3, #7
 8006fa8:	3308      	adds	r3, #8
 8006faa:	9303      	str	r3, [sp, #12]
 8006fac:	e014      	b.n	8006fd8 <_svfiprintf_r+0x1a8>
 8006fae:	ab03      	add	r3, sp, #12
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	a904      	add	r1, sp, #16
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <_svfiprintf_r+0x1d4>)
 8006fba:	f3af 8000 	nop.w
 8006fbe:	e007      	b.n	8006fd0 <_svfiprintf_r+0x1a0>
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	a904      	add	r1, sp, #16
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4b0e      	ldr	r3, [pc, #56]	; (8007004 <_svfiprintf_r+0x1d4>)
 8006fcc:	f000 f88e 	bl	80070ec <_printf_i>
 8006fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006fd4:	4680      	mov	r8, r0
 8006fd6:	d003      	beq.n	8006fe0 <_svfiprintf_r+0x1b0>
 8006fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fda:	4443      	add	r3, r8
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fde:	e746      	b.n	8006e6e <_svfiprintf_r+0x3e>
 8006fe0:	89ab      	ldrh	r3, [r5, #12]
 8006fe2:	065b      	lsls	r3, r3, #25
 8006fe4:	d401      	bmi.n	8006fea <_svfiprintf_r+0x1ba>
 8006fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe8:	e001      	b.n	8006fee <_svfiprintf_r+0x1be>
 8006fea:	f04f 30ff 	mov.w	r0, #4294967295
 8006fee:	b01d      	add	sp, #116	; 0x74
 8006ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	08007c9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, fp, ip, sp, lr}
 8006ff8:	08007ca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, sp, lr}
 8006ffc:	08007ca5 	stmdaeq	r0, {r0, r2, r5, r7, sl, fp, ip, sp, lr}
 8007000:	00000000 	andeq	r0, r0, r0
 8007004:	08006d79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp, sp, lr}

08007008 <_printf_common>:
 8007008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800700c:	4615      	mov	r5, r2
 800700e:	461f      	mov	r7, r3
 8007010:	688a      	ldr	r2, [r1, #8]
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	4606      	mov	r6, r0
 8007016:	429a      	cmp	r2, r3
 8007018:	bfa8      	it	ge
 800701a:	4613      	movge	r3, r2
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007022:	460c      	mov	r4, r1
 8007024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007028:	b10a      	cbz	r2, 800702e <_printf_common+0x26>
 800702a:	3301      	adds	r3, #1
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	0699      	lsls	r1, r3, #26
 8007032:	d502      	bpl.n	800703a <_printf_common+0x32>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	3302      	adds	r3, #2
 8007038:	602b      	str	r3, [r5, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	f013 0906 	ands.w	r9, r3, #6
 8007040:	d01d      	beq.n	800707e <_printf_common+0x76>
 8007042:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	3300      	adds	r3, #0
 800704a:	bf18      	it	ne
 800704c:	2301      	movne	r3, #1
 800704e:	0692      	lsls	r2, r2, #26
 8007050:	d51f      	bpl.n	8007092 <_printf_common+0x8a>
 8007052:	18e1      	adds	r1, r4, r3
 8007054:	2030      	movs	r0, #48	; 0x30
 8007056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007060:	4422      	add	r2, r4
 8007062:	3302      	adds	r3, #2
 8007064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007068:	e013      	b.n	8007092 <_printf_common+0x8a>
 800706a:	4630      	mov	r0, r6
 800706c:	4639      	mov	r1, r7
 800706e:	f104 0219 	add.w	r2, r4, #25
 8007072:	2301      	movs	r3, #1
 8007074:	47c0      	blx	r8
 8007076:	3001      	adds	r0, #1
 8007078:	d007      	beq.n	800708a <_printf_common+0x82>
 800707a:	f109 0901 	add.w	r9, r9, #1
 800707e:	68e2      	ldr	r2, [r4, #12]
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	4599      	cmp	r9, r3
 8007086:	dbf0      	blt.n	800706a <_printf_common+0x62>
 8007088:	e7db      	b.n	8007042 <_printf_common+0x3a>
 800708a:	f04f 30ff 	mov.w	r0, #4294967295
 800708e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800709a:	47c0      	blx	r8
 800709c:	3001      	adds	r0, #1
 800709e:	d0f4      	beq.n	800708a <_printf_common+0x82>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	682a      	ldr	r2, [r5, #0]
 80070a4:	f003 0306 	and.w	r3, r3, #6
 80070a8:	68e1      	ldr	r1, [r4, #12]
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf08      	it	eq
 80070ae:	ebc2 0501 	rsbeq	r5, r2, r1
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	68a2      	ldr	r2, [r4, #8]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	429a      	cmp	r2, r3
 80070c0:	bfc4      	itt	gt
 80070c2:	ebc3 0302 	rsbgt	r3, r3, r2
 80070c6:	18ed      	addgt	r5, r5, r3
 80070c8:	f04f 0900 	mov.w	r9, #0
 80070cc:	45a9      	cmp	r9, r5
 80070ce:	da0a      	bge.n	80070e6 <_printf_common+0xde>
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f104 021a 	add.w	r2, r4, #26
 80070d8:	2301      	movs	r3, #1
 80070da:	47c0      	blx	r8
 80070dc:	3001      	adds	r0, #1
 80070de:	d0d4      	beq.n	800708a <_printf_common+0x82>
 80070e0:	f109 0901 	add.w	r9, r9, #1
 80070e4:	e7f2      	b.n	80070cc <_printf_common+0xc4>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080070ec <_printf_i>:
 80070ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f0:	7e0e      	ldrb	r6, [r1, #24]
 80070f2:	4680      	mov	r8, r0
 80070f4:	2e6e      	cmp	r6, #110	; 0x6e
 80070f6:	460c      	mov	r4, r1
 80070f8:	4691      	mov	r9, r2
 80070fa:	469a      	mov	sl, r3
 80070fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070fe:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8007102:	f000 80a5 	beq.w	8007250 <_printf_i+0x164>
 8007106:	d811      	bhi.n	800712c <_printf_i+0x40>
 8007108:	2e63      	cmp	r6, #99	; 0x63
 800710a:	d022      	beq.n	8007152 <_printf_i+0x66>
 800710c:	d809      	bhi.n	8007122 <_printf_i+0x36>
 800710e:	2e00      	cmp	r6, #0
 8007110:	f000 80af 	beq.w	8007272 <_printf_i+0x186>
 8007114:	2e58      	cmp	r6, #88	; 0x58
 8007116:	f040 80bf 	bne.w	8007298 <_printf_i+0x1ac>
 800711a:	f881 6045 	strb.w	r6, [r1, #69]	; 0x45
 800711e:	4a7b      	ldr	r2, [pc, #492]	; (800730c <_printf_i+0x220>)
 8007120:	e04f      	b.n	80071c2 <_printf_i+0xd6>
 8007122:	2e64      	cmp	r6, #100	; 0x64
 8007124:	d01e      	beq.n	8007164 <_printf_i+0x78>
 8007126:	2e69      	cmp	r6, #105	; 0x69
 8007128:	d01c      	beq.n	8007164 <_printf_i+0x78>
 800712a:	e0b5      	b.n	8007298 <_printf_i+0x1ac>
 800712c:	2e73      	cmp	r6, #115	; 0x73
 800712e:	f000 80a4 	beq.w	800727a <_printf_i+0x18e>
 8007132:	d809      	bhi.n	8007148 <_printf_i+0x5c>
 8007134:	2e6f      	cmp	r6, #111	; 0x6f
 8007136:	d02b      	beq.n	8007190 <_printf_i+0xa4>
 8007138:	2e70      	cmp	r6, #112	; 0x70
 800713a:	f040 80ad 	bne.w	8007298 <_printf_i+0x1ac>
 800713e:	680b      	ldr	r3, [r1, #0]
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	600b      	str	r3, [r1, #0]
 8007146:	e038      	b.n	80071ba <_printf_i+0xce>
 8007148:	2e75      	cmp	r6, #117	; 0x75
 800714a:	d021      	beq.n	8007190 <_printf_i+0xa4>
 800714c:	2e78      	cmp	r6, #120	; 0x78
 800714e:	d034      	beq.n	80071ba <_printf_i+0xce>
 8007150:	e0a2      	b.n	8007298 <_printf_i+0x1ac>
 8007152:	682b      	ldr	r3, [r5, #0]
 8007154:	f101 0742 	add.w	r7, r1, #66	; 0x42
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	f881 3042 	strb.w	r3, [r1, #66]	; 0x42
 8007162:	e09d      	b.n	80072a0 <_printf_i+0x1b4>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	682b      	ldr	r3, [r5, #0]
 8007168:	f012 0f80 	tst.w	r2, #128	; 0x80
 800716c:	d003      	beq.n	8007176 <_printf_i+0x8a>
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	681d      	ldr	r5, [r3, #0]
 8007174:	e005      	b.n	8007182 <_printf_i+0x96>
 8007176:	0651      	lsls	r1, r2, #25
 8007178:	d5f9      	bpl.n	800716e <_printf_i+0x82>
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007182:	2d00      	cmp	r5, #0
 8007184:	da39      	bge.n	80071fa <_printf_i+0x10e>
 8007186:	232d      	movs	r3, #45	; 0x2d
 8007188:	426d      	negs	r5, r5
 800718a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800718e:	e034      	b.n	80071fa <_printf_i+0x10e>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007198:	d003      	beq.n	80071a2 <_printf_i+0xb6>
 800719a:	1d1a      	adds	r2, r3, #4
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	681d      	ldr	r5, [r3, #0]
 80071a0:	e004      	b.n	80071ac <_printf_i+0xc0>
 80071a2:	0652      	lsls	r2, r2, #25
 80071a4:	d5f9      	bpl.n	800719a <_printf_i+0xae>
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	602a      	str	r2, [r5, #0]
 80071aa:	881d      	ldrh	r5, [r3, #0]
 80071ac:	7e23      	ldrb	r3, [r4, #24]
 80071ae:	4a57      	ldr	r2, [pc, #348]	; (800730c <_printf_i+0x220>)
 80071b0:	2b6f      	cmp	r3, #111	; 0x6f
 80071b2:	bf14      	ite	ne
 80071b4:	230a      	movne	r3, #10
 80071b6:	2308      	moveq	r3, #8
 80071b8:	e01b      	b.n	80071f2 <_printf_i+0x106>
 80071ba:	2378      	movs	r3, #120	; 0x78
 80071bc:	4a54      	ldr	r2, [pc, #336]	; (8007310 <_printf_i+0x224>)
 80071be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	6829      	ldr	r1, [r5, #0]
 80071c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071ca:	f101 0604 	add.w	r6, r1, #4
 80071ce:	602e      	str	r6, [r5, #0]
 80071d0:	d001      	beq.n	80071d6 <_printf_i+0xea>
 80071d2:	680d      	ldr	r5, [r1, #0]
 80071d4:	e002      	b.n	80071dc <_printf_i+0xf0>
 80071d6:	065f      	lsls	r7, r3, #25
 80071d8:	d5fb      	bpl.n	80071d2 <_printf_i+0xe6>
 80071da:	880d      	ldrh	r5, [r1, #0]
 80071dc:	07de      	lsls	r6, r3, #31
 80071de:	bf44      	itt	mi
 80071e0:	f043 0320 	orrmi.w	r3, r3, #32
 80071e4:	6023      	strmi	r3, [r4, #0]
 80071e6:	b91d      	cbnz	r5, 80071f0 <_printf_i+0x104>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	f023 0320 	bic.w	r3, r3, #32
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	2310      	movs	r3, #16
 80071f2:	2100      	movs	r1, #0
 80071f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071f8:	e001      	b.n	80071fe <_printf_i+0x112>
 80071fa:	4a44      	ldr	r2, [pc, #272]	; (800730c <_printf_i+0x220>)
 80071fc:	230a      	movs	r3, #10
 80071fe:	6866      	ldr	r6, [r4, #4]
 8007200:	2e00      	cmp	r6, #0
 8007202:	60a6      	str	r6, [r4, #8]
 8007204:	db03      	blt.n	800720e <_printf_i+0x122>
 8007206:	6821      	ldr	r1, [r4, #0]
 8007208:	f021 0104 	bic.w	r1, r1, #4
 800720c:	6021      	str	r1, [r4, #0]
 800720e:	b905      	cbnz	r5, 8007212 <_printf_i+0x126>
 8007210:	b16e      	cbz	r6, 800722e <_printf_i+0x142>
 8007212:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8007216:	fbb5 f6f3 	udiv	r6, r5, r3
 800721a:	fb03 5516 	mls	r5, r3, r6, r5
 800721e:	5d55      	ldrb	r5, [r2, r5]
 8007220:	460f      	mov	r7, r1
 8007222:	f801 5901 	strb.w	r5, [r1], #-1
 8007226:	4635      	mov	r5, r6
 8007228:	2e00      	cmp	r6, #0
 800722a:	d1f4      	bne.n	8007216 <_printf_i+0x12a>
 800722c:	e000      	b.n	8007230 <_printf_i+0x144>
 800722e:	4607      	mov	r7, r0
 8007230:	2b08      	cmp	r3, #8
 8007232:	d10a      	bne.n	800724a <_printf_i+0x15e>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	07dd      	lsls	r5, r3, #31
 8007238:	d507      	bpl.n	800724a <_printf_i+0x15e>
 800723a:	6862      	ldr	r2, [r4, #4]
 800723c:	6923      	ldr	r3, [r4, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	dc03      	bgt.n	800724a <_printf_i+0x15e>
 8007242:	2330      	movs	r3, #48	; 0x30
 8007244:	f807 3c01 	strb.w	r3, [r7, #-1]
 8007248:	3f01      	subs	r7, #1
 800724a:	1bc0      	subs	r0, r0, r7
 800724c:	6120      	str	r0, [r4, #16]
 800724e:	e02c      	b.n	80072aa <_printf_i+0x1be>
 8007250:	6809      	ldr	r1, [r1, #0]
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007258:	6962      	ldr	r2, [r4, #20]
 800725a:	d004      	beq.n	8007266 <_printf_i+0x17a>
 800725c:	1d19      	adds	r1, r3, #4
 800725e:	6029      	str	r1, [r5, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	e005      	b.n	8007272 <_printf_i+0x186>
 8007266:	0649      	lsls	r1, r1, #25
 8007268:	d5f8      	bpl.n	800725c <_printf_i+0x170>
 800726a:	1d19      	adds	r1, r3, #4
 800726c:	6029      	str	r1, [r5, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	2300      	movs	r3, #0
 8007274:	6123      	str	r3, [r4, #16]
 8007276:	4607      	mov	r7, r0
 8007278:	e017      	b.n	80072aa <_printf_i+0x1be>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	1d1a      	adds	r2, r3, #4
 800727e:	602a      	str	r2, [r5, #0]
 8007280:	681f      	ldr	r7, [r3, #0]
 8007282:	4638      	mov	r0, r7
 8007284:	f7ff fd70 	bl	8006d68 <strlen>
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	6120      	str	r0, [r4, #16]
 800728c:	4298      	cmp	r0, r3
 800728e:	bf88      	it	hi
 8007290:	6123      	strhi	r3, [r4, #16]
 8007292:	6923      	ldr	r3, [r4, #16]
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	e005      	b.n	80072a4 <_printf_i+0x1b8>
 8007298:	f104 0742 	add.w	r7, r4, #66	; 0x42
 800729c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 80072a0:	2301      	movs	r3, #1
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	2300      	movs	r3, #0
 80072a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072aa:	f8cd a000 	str.w	sl, [sp]
 80072ae:	4640      	mov	r0, r8
 80072b0:	4621      	mov	r1, r4
 80072b2:	aa03      	add	r2, sp, #12
 80072b4:	464b      	mov	r3, r9
 80072b6:	f7ff fea7 	bl	8007008 <_printf_common>
 80072ba:	3001      	adds	r0, #1
 80072bc:	d102      	bne.n	80072c4 <_printf_i+0x1d8>
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	e01f      	b.n	8007304 <_printf_i+0x218>
 80072c4:	4640      	mov	r0, r8
 80072c6:	4649      	mov	r1, r9
 80072c8:	463a      	mov	r2, r7
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	47d0      	blx	sl
 80072ce:	3001      	adds	r0, #1
 80072d0:	d0f5      	beq.n	80072be <_printf_i+0x1d2>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	079b      	lsls	r3, r3, #30
 80072d6:	d405      	bmi.n	80072e4 <_printf_i+0x1f8>
 80072d8:	68e0      	ldr	r0, [r4, #12]
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	4298      	cmp	r0, r3
 80072de:	bfb8      	it	lt
 80072e0:	4618      	movlt	r0, r3
 80072e2:	e00f      	b.n	8007304 <_printf_i+0x218>
 80072e4:	2500      	movs	r5, #0
 80072e6:	68e2      	ldr	r2, [r4, #12]
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	429d      	cmp	r5, r3
 80072ee:	daf3      	bge.n	80072d8 <_printf_i+0x1ec>
 80072f0:	4640      	mov	r0, r8
 80072f2:	4649      	mov	r1, r9
 80072f4:	f104 0219 	add.w	r2, r4, #25
 80072f8:	2301      	movs	r3, #1
 80072fa:	47d0      	blx	sl
 80072fc:	3001      	adds	r0, #1
 80072fe:	d0de      	beq.n	80072be <_printf_i+0x1d2>
 8007300:	3501      	adds	r5, #1
 8007302:	e7f0      	b.n	80072e6 <_printf_i+0x1fa>
 8007304:	b004      	add	sp, #16
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	bf00      	nop
 800730c:	08007cac 	stmdaeq	r0, {r2, r3, r5, r7, sl, fp, ip, sp, lr}
 8007310:	08007cbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, ip, sp, lr}

08007314 <_vsiprintf_r>:
 8007314:	b510      	push	{r4, lr}
 8007316:	b09a      	sub	sp, #104	; 0x68
 8007318:	9100      	str	r1, [sp, #0]
 800731a:	9104      	str	r1, [sp, #16]
 800731c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007320:	9102      	str	r1, [sp, #8]
 8007322:	9105      	str	r1, [sp, #20]
 8007324:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007328:	f8ad 100e 	strh.w	r1, [sp, #14]
 800732c:	f44f 7402 	mov.w	r4, #520	; 0x208
 8007330:	4669      	mov	r1, sp
 8007332:	f8ad 400c 	strh.w	r4, [sp, #12]
 8007336:	f7ff fd7b 	bl	8006e30 <_svfiprintf_r>
 800733a:	9b00      	ldr	r3, [sp, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	701a      	strb	r2, [r3, #0]
 8007340:	b01a      	add	sp, #104	; 0x68
 8007342:	bd10      	pop	{r4, pc}

08007344 <vsiprintf>:
 8007344:	b530      	push	{r4, r5, lr}
 8007346:	4613      	mov	r3, r2
 8007348:	4a04      	ldr	r2, [pc, #16]	; (800735c <vsiprintf+0x18>)
 800734a:	4605      	mov	r5, r0
 800734c:	460c      	mov	r4, r1
 800734e:	6810      	ldr	r0, [r2, #0]
 8007350:	4629      	mov	r1, r5
 8007352:	4622      	mov	r2, r4
 8007354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007358:	f7ff bfdc 	b.w	8007314 <_vsiprintf_r>
 800735c:	20000484 	andcs	r0, r0, r4, lsl #9

08007360 <memchr>:
 8007360:	b510      	push	{r4, lr}
 8007362:	b2c9      	uxtb	r1, r1
 8007364:	4402      	add	r2, r0
 8007366:	4290      	cmp	r0, r2
 8007368:	4603      	mov	r3, r0
 800736a:	d005      	beq.n	8007378 <memchr+0x18>
 800736c:	781c      	ldrb	r4, [r3, #0]
 800736e:	3001      	adds	r0, #1
 8007370:	428c      	cmp	r4, r1
 8007372:	d1f8      	bne.n	8007366 <memchr+0x6>
 8007374:	4618      	mov	r0, r3
 8007376:	bd10      	pop	{r4, pc}
 8007378:	2000      	movs	r0, #0
 800737a:	bd10      	pop	{r4, pc}

0800737c <memmove>:
 800737c:	4281      	cmp	r1, r0
 800737e:	b570      	push	{r4, r5, r6, lr}
 8007380:	d301      	bcc.n	8007386 <memmove+0xa>
 8007382:	2300      	movs	r3, #0
 8007384:	e00e      	b.n	80073a4 <memmove+0x28>
 8007386:	188c      	adds	r4, r1, r2
 8007388:	42a0      	cmp	r0, r4
 800738a:	d2fa      	bcs.n	8007382 <memmove+0x6>
 800738c:	1885      	adds	r5, r0, r2
 800738e:	4613      	mov	r3, r2
 8007390:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007394:	d305      	bcc.n	80073a2 <memmove+0x26>
 8007396:	4251      	negs	r1, r2
 8007398:	1866      	adds	r6, r4, r1
 800739a:	5cf6      	ldrb	r6, [r6, r3]
 800739c:	4429      	add	r1, r5
 800739e:	54ce      	strb	r6, [r1, r3]
 80073a0:	e7f6      	b.n	8007390 <memmove+0x14>
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <memmove+0x34>
 80073a8:	5ccc      	ldrb	r4, [r1, r3]
 80073aa:	54c4      	strb	r4, [r0, r3]
 80073ac:	3301      	adds	r3, #1
 80073ae:	e7f9      	b.n	80073a4 <memmove+0x28>
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080073b4 <_free_r>:
 80073b4:	b530      	push	{r4, r5, lr}
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d03c      	beq.n	8007434 <_free_r+0x80>
 80073ba:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80073be:	1f0b      	subs	r3, r1, #4
 80073c0:	491d      	ldr	r1, [pc, #116]	; (8007438 <_free_r+0x84>)
 80073c2:	2a00      	cmp	r2, #0
 80073c4:	bfb8      	it	lt
 80073c6:	189b      	addlt	r3, r3, r2
 80073c8:	680a      	ldr	r2, [r1, #0]
 80073ca:	460c      	mov	r4, r1
 80073cc:	b912      	cbnz	r2, 80073d4 <_free_r+0x20>
 80073ce:	605a      	str	r2, [r3, #4]
 80073d0:	600b      	str	r3, [r1, #0]
 80073d2:	bd30      	pop	{r4, r5, pc}
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d20d      	bcs.n	80073f4 <_free_r+0x40>
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	1858      	adds	r0, r3, r1
 80073dc:	4290      	cmp	r0, r2
 80073de:	d103      	bne.n	80073e8 <_free_r+0x34>
 80073e0:	585a      	ldr	r2, [r3, r1]
 80073e2:	4411      	add	r1, r2
 80073e4:	6842      	ldr	r2, [r0, #4]
 80073e6:	6019      	str	r1, [r3, #0]
 80073e8:	605a      	str	r2, [r3, #4]
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	bd30      	pop	{r4, r5, pc}
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d803      	bhi.n	80073fa <_free_r+0x46>
 80073f2:	460a      	mov	r2, r1
 80073f4:	6851      	ldr	r1, [r2, #4]
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d1f9      	bne.n	80073ee <_free_r+0x3a>
 80073fa:	6814      	ldr	r4, [r2, #0]
 80073fc:	1915      	adds	r5, r2, r4
 80073fe:	429d      	cmp	r5, r3
 8007400:	d10a      	bne.n	8007418 <_free_r+0x64>
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4423      	add	r3, r4
 8007406:	18d0      	adds	r0, r2, r3
 8007408:	4288      	cmp	r0, r1
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	d112      	bne.n	8007434 <_free_r+0x80>
 800740e:	6808      	ldr	r0, [r1, #0]
 8007410:	4403      	add	r3, r0
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	684b      	ldr	r3, [r1, #4]
 8007416:	e00c      	b.n	8007432 <_free_r+0x7e>
 8007418:	d902      	bls.n	8007420 <_free_r+0x6c>
 800741a:	230c      	movs	r3, #12
 800741c:	6003      	str	r3, [r0, #0]
 800741e:	bd30      	pop	{r4, r5, pc}
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	181c      	adds	r4, r3, r0
 8007424:	428c      	cmp	r4, r1
 8007426:	d103      	bne.n	8007430 <_free_r+0x7c>
 8007428:	680c      	ldr	r4, [r1, #0]
 800742a:	6849      	ldr	r1, [r1, #4]
 800742c:	4420      	add	r0, r4
 800742e:	6018      	str	r0, [r3, #0]
 8007430:	6059      	str	r1, [r3, #4]
 8007432:	6053      	str	r3, [r2, #4]
 8007434:	bd30      	pop	{r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20000dd4 	ldrdcs	r0, [r0], -r4

0800743c <_malloc_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	1ccd      	adds	r5, r1, #3
 8007440:	f025 0503 	bic.w	r5, r5, #3
 8007444:	3508      	adds	r5, #8
 8007446:	2d0c      	cmp	r5, #12
 8007448:	bf38      	it	cc
 800744a:	250c      	movcc	r5, #12
 800744c:	2d00      	cmp	r5, #0
 800744e:	4606      	mov	r6, r0
 8007450:	db3f      	blt.n	80074d2 <_malloc_r+0x96>
 8007452:	428d      	cmp	r5, r1
 8007454:	d33d      	bcc.n	80074d2 <_malloc_r+0x96>
 8007456:	4b21      	ldr	r3, [pc, #132]	; (80074dc <_malloc_r+0xa0>)
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	4621      	mov	r1, r4
 800745e:	b1a1      	cbz	r1, 800748a <_malloc_r+0x4e>
 8007460:	680b      	ldr	r3, [r1, #0]
 8007462:	1b5b      	subs	r3, r3, r5
 8007464:	d40e      	bmi.n	8007484 <_malloc_r+0x48>
 8007466:	2b0b      	cmp	r3, #11
 8007468:	d903      	bls.n	8007472 <_malloc_r+0x36>
 800746a:	600b      	str	r3, [r1, #0]
 800746c:	18cc      	adds	r4, r1, r3
 800746e:	50cd      	str	r5, [r1, r3]
 8007470:	e01f      	b.n	80074b2 <_malloc_r+0x76>
 8007472:	428c      	cmp	r4, r1
 8007474:	d102      	bne.n	800747c <_malloc_r+0x40>
 8007476:	6862      	ldr	r2, [r4, #4]
 8007478:	6002      	str	r2, [r0, #0]
 800747a:	e01a      	b.n	80074b2 <_malloc_r+0x76>
 800747c:	684b      	ldr	r3, [r1, #4]
 800747e:	6063      	str	r3, [r4, #4]
 8007480:	460c      	mov	r4, r1
 8007482:	e016      	b.n	80074b2 <_malloc_r+0x76>
 8007484:	460c      	mov	r4, r1
 8007486:	6849      	ldr	r1, [r1, #4]
 8007488:	e7e9      	b.n	800745e <_malloc_r+0x22>
 800748a:	4c15      	ldr	r4, [pc, #84]	; (80074e0 <_malloc_r+0xa4>)
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	b91b      	cbnz	r3, 8007498 <_malloc_r+0x5c>
 8007490:	4630      	mov	r0, r6
 8007492:	f000 f84d 	bl	8007530 <_sbrk_r>
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	4629      	mov	r1, r5
 800749a:	4630      	mov	r0, r6
 800749c:	f000 f848 	bl	8007530 <_sbrk_r>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	4601      	mov	r1, r0
 80074a4:	d015      	beq.n	80074d2 <_malloc_r+0x96>
 80074a6:	1cc4      	adds	r4, r0, #3
 80074a8:	f024 0403 	bic.w	r4, r4, #3
 80074ac:	4284      	cmp	r4, r0
 80074ae:	d10a      	bne.n	80074c6 <_malloc_r+0x8a>
 80074b0:	6025      	str	r5, [r4, #0]
 80074b2:	f104 000b 	add.w	r0, r4, #11
 80074b6:	1d23      	adds	r3, r4, #4
 80074b8:	f020 0007 	bic.w	r0, r0, #7
 80074bc:	1ac3      	subs	r3, r0, r3
 80074be:	d00b      	beq.n	80074d8 <_malloc_r+0x9c>
 80074c0:	425a      	negs	r2, r3
 80074c2:	50e2      	str	r2, [r4, r3]
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	4630      	mov	r0, r6
 80074c8:	1a61      	subs	r1, r4, r1
 80074ca:	f000 f831 	bl	8007530 <_sbrk_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	d1ee      	bne.n	80074b0 <_malloc_r+0x74>
 80074d2:	230c      	movs	r3, #12
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	2000      	movs	r0, #0
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	bf00      	nop
 80074dc:	20000dd4 	ldrdcs	r0, [r0], -r4
 80074e0:	20000dd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

080074e4 <_realloc_r>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	4606      	mov	r6, r0
 80074e8:	4614      	mov	r4, r2
 80074ea:	460d      	mov	r5, r1
 80074ec:	b921      	cbnz	r1, 80074f8 <_realloc_r+0x14>
 80074ee:	4611      	mov	r1, r2
 80074f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074f4:	f7ff bfa2 	b.w	800743c <_malloc_r>
 80074f8:	b91a      	cbnz	r2, 8007502 <_realloc_r+0x1e>
 80074fa:	f7ff ff5b 	bl	80073b4 <_free_r>
 80074fe:	4620      	mov	r0, r4
 8007500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007502:	f000 f825 	bl	8007550 <_malloc_usable_size_r>
 8007506:	42a0      	cmp	r0, r4
 8007508:	d20e      	bcs.n	8007528 <_realloc_r+0x44>
 800750a:	4630      	mov	r0, r6
 800750c:	4621      	mov	r1, r4
 800750e:	f7ff ff95 	bl	800743c <_malloc_r>
 8007512:	4607      	mov	r7, r0
 8007514:	b150      	cbz	r0, 800752c <_realloc_r+0x48>
 8007516:	4629      	mov	r1, r5
 8007518:	4622      	mov	r2, r4
 800751a:	f7ff fbef 	bl	8006cfc <memcpy>
 800751e:	4630      	mov	r0, r6
 8007520:	4629      	mov	r1, r5
 8007522:	f7ff ff47 	bl	80073b4 <_free_r>
 8007526:	e001      	b.n	800752c <_realloc_r+0x48>
 8007528:	4628      	mov	r0, r5
 800752a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800752c:	4638      	mov	r0, r7
 800752e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007530 <_sbrk_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4c06      	ldr	r4, [pc, #24]	; (800754c <_sbrk_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4605      	mov	r5, r0
 8007538:	4608      	mov	r0, r1
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	f000 f812 	bl	8007564 <_sbrk>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_sbrk_r+0x1a>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	b103      	cbz	r3, 800754a <_sbrk_r+0x1a>
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	200005b0 			; <UNDEFINED> instruction: 0x200005b0

08007550 <_malloc_usable_size_r>:
 8007550:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007554:	2800      	cmp	r0, #0
 8007556:	da02      	bge.n	800755e <_malloc_usable_size_r+0xe>
 8007558:	3904      	subs	r1, #4
 800755a:	580b      	ldr	r3, [r1, r0]
 800755c:	4418      	add	r0, r3
 800755e:	3804      	subs	r0, #4
 8007560:	4770      	bx	lr
	...

08007564 <_sbrk>:
 8007564:	4a09      	ldr	r2, [pc, #36]	; (800758c <_sbrk+0x28>)
 8007566:	6813      	ldr	r3, [r2, #0]
 8007568:	b163      	cbz	r3, 8007584 <_sbrk+0x20>
 800756a:	4418      	add	r0, r3
 800756c:	4669      	mov	r1, sp
 800756e:	4288      	cmp	r0, r1
 8007570:	d802      	bhi.n	8007578 <_sbrk+0x14>
 8007572:	6010      	str	r0, [r2, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	4770      	bx	lr
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <_sbrk+0x2c>)
 800757a:	220c      	movs	r2, #12
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f04f 30ff 	mov.w	r0, #4294967295
 8007582:	4770      	bx	lr
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <_sbrk+0x30>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	e7ef      	b.n	800756a <_sbrk+0x6>
 800758a:	bf00      	nop
 800758c:	20000dd8 	ldrdcs	r0, [r0], -r8
 8007590:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 8007594:	200005b4 			; <UNDEFINED> instruction: 0x200005b4
 8007598:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 800759c:	58255825 	stmdapl	r5!, {r0, r2, r5, fp, ip, lr}
 80075a0:	45425b00 	strbmi	r5, [r2, #-2816]	; 0xb00
 80075a4:	5f4e4947 	svcpl	0x004e4947
 80075a8:	5f425550 	svcpl	0x00425550
 80075ac:	41544144 	cmpmi	r4, r4, asr #2
 80075b0:	45425b5d 	strbmi	r5, [r2, #-2909]	; 0xb5d
 80075b4:	5f4e4947 	svcpl	0x004e4947
 80075b8:	5d425550 	cfstr64pl	mvdx5, [r2, #-320]	; 0xfffffec0
 80075bc:	455b7325 	ldrbmi	r7, [fp, #-805]	; 0x325
 80075c0:	505f444e 	subspl	r4, pc, lr, asr #8
 80075c4:	5b5d4255 	blpl	9757f20 <_etext+0x1750250>
 80075c8:	5f444e45 	svcpl	0x00444e45
 80075cc:	5f425550 	svcpl	0x00425550
 80075d0:	41544144 	cmpmi	r4, r4, asr #2
 80075d4:	425b005d 	subsmi	r0, fp, #93	; 0x5d
 80075d8:	4e494745 	cdpmi	7, 4, cr4, cr9, cr5, {2}
 80075dc:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
 80075e0:	5554414e 	ldrbpl	r4, [r4, #-334]	; 0x14e
 80075e4:	445f4552 	ldrbmi	r4, [pc], #-1362	; 80075ec <_sbrk+0x88>
 80075e8:	5d415441 	cfstrdpl	mvd5, [r1, #-260]	; 0xfffffefc
 80075ec:	4745425b 	smlsldmi	r4, r5, fp, r2
 80075f0:	535f4e49 	cmppl	pc, #1168	; 0x490
 80075f4:	414e4749 	cmpmi	lr, r9, asr #14
 80075f8:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
 80075fc:	7325005d 	teqvc	r5, #93	; 0x5d
 8007600:	4e455b00 	vmlami.f64	d21, d5, d0
 8007604:	49535f44 	ldmdbmi	r3, {r2, r6, r8, r9, sl, fp, ip, lr}^
 8007608:	54414e47 	strbpl	r4, [r1], #-3655	; 0xe47
 800760c:	5d455255 	sfmpl	f5, 2, [r5, #-340]	; 0xfffffeac
 8007610:	444e455b 	strbmi	r4, [lr], #-1371	; 0x55b
 8007614:	4749535f 	smlsldmi	r5, r9, pc, r3	; <UNPREDICTABLE>
 8007618:	5554414e 	ldrbpl	r4, [r4, #-334]	; 0x14e
 800761c:	445f4552 	ldrbmi	r4, [pc], #-1362	; 8007624 <_sbrk+0xc0>
 8007620:	5d415441 	cfstrdpl	mvd5, [r1, #-260]	; 0xfffffefc
 8007624:	6f420a00 	svcvs	0x00420a00
 8007628:	6f6c746f 	svcvs	0x006c746f
 800762c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8007630:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
 8007634:	2e2e2e74 	mcrcs	14, 1, r2, cr14, cr4, {3}
 8007638:	6863000a 	stmdavs	r3!, {r1, r3}^
 800763c:	696b6365 	stmdbvs	fp!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8007640:	6320676e 	teqvs	r0, #28835840	; 0x1b80000
 8007644:	6e696168 	powvsez	f6, f1, #0.0
 8007648:	0a2e2e2e 	beq	8b92f08 <_etext+0xb8b238>
 800764c:	616d6900 	cmnvs	sp, r0, lsl #18
 8007650:	63206567 	teqvs	r0, #432013312	; 0x19c00000
 8007654:	6b636568 	blvs	98e0bfc <_etext+0x18d8f2c>
 8007658:	74657220 	strbtvc	r7, [r5], #-544	; 0x220
 800765c:	5825203a 	stmdapl	r5!, {r1, r3, r4, r5, sp}
 8007660:	6f42000a 	svcvs	0x0042000a
 8007664:	4f20746f 	svcmi	0x0020746f
 8007668:	0a000a4b 	beq	8009f9c <_etext+0x22cc>
 800766c:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
 8007670:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
 8007674:	73696d20 	cmnvc	r9, #32, 26	; 0x800
 8007678:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
 800767c:	202e2e2e 	eorcs	r2, lr, lr, lsr #28
 8007680:	74696177 	strbtvc	r6, [r9], #-375	; 0x177
 8007684:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007688:	44206e69 	strtmi	r6, [r0], #-3689	; 0xe69
 800768c:	000a5546 	andeq	r5, sl, r6, asr #10
 8007690:	6769530a 	strbvs	r5, [r9, -sl, lsl #6]!
 8007694:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
 8007698:	75206572 	strvc	r6, [r0, #-1394]!	; 0x572
 800769c:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
 80076a0:	65696669 	strbvs	r6, [r9, #-1641]!	; 0x669
 80076a4:	2e2e2e64 	cdpcs	14, 2, cr2, cr14, cr4, {3}
 80076a8:	69617720 	stmdbvs	r1!, {r5, r8, r9, sl, ip, sp, lr}^
 80076ac:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80076b0:	206e6920 	rsbcs	r6, lr, r0, lsr #18
 80076b4:	0a554644 	beq	9558fcc <_etext+0x15512fc>
 80076b8:	61480a00 	cmpvs	r8, r0, lsl #20
 80076bc:	63206873 	teqvs	r0, #7536640	; 0x730000
 80076c0:	75636c61 	strbvc	r6, [r3, #-3169]!	; 0xc61
 80076c4:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
 80076c8:	66206e6f 	strtvs	r6, [r0], -pc, ror #28
 80076cc:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0x961
 80076d0:	2e2e2e64 	cdpcs	14, 2, cr2, cr14, cr4, {3}
 80076d4:	69617720 	stmdbvs	r1!, {r5, r8, r9, sl, ip, sp, lr}^
 80076d8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80076dc:	206e6920 	rsbcs	r6, lr, r0, lsr #18
 80076e0:	0a554644 	beq	9558ff8 <_etext+0x1551328>
 80076e4:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
 80076e8:	6e696620 	cdpvs	6, 6, cr6, cr9, cr0, {1}
 80076ec:	65687369 	strbvs	r7, [r8, #-873]!	; 0x369
 80076f0:	70752064 	rsbsvc	r2, r5, r4, rrx
 80076f4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
 80076f8:	754a000a 	strbvc	r0, [sl, #-10]
 80076fc:	6e69706d 	cdpvs	0, 6, cr7, cr9, cr13, {3}
 8007700:	6f742067 	svcvs	0x00742067
 8007704:	2e534f20 	cdpcs	15, 5, cr4, cr3, cr0, {1}
 8007708:	7c20000a 	stcvc	0, cr0, [r0], #-40	; 0xffffffd8
 800770c:	0a7c7325 	beq	9f243a8 <_etext+0x1f1c6d8>
 8007710:	32302500 	eorscc	r2, r0, #0, 10
 8007714:	20002058 	andcs	r2, r0, r8, asr r0
 8007718:	25002020 	strcs	r2, [r0, #-32]
 800771c:	00783230 	rsbseq	r3, r8, r0, lsr r2
 8007720:	6f6c7055 	svcvs	0x006c7055
 8007724:	64656461 	strbtvs	r6, [r5], #-1121	; 0x461
 8007728:	67697320 	strbvs	r7, [r9, -r0, lsr #6]!
 800772c:	7574616e 	ldrbvc	r6, [r4, #-366]!	; 0x16e
 8007730:	76206572 			; <UNDEFINED> instruction: 0x76206572
 8007734:	66697265 	strbtvs	r7, [r9], -r5, ror #4
 8007738:	21646569 	cmncs	r4, r9, ror #10
 800773c:	6d49000a 	stclvs	0, cr0, [r9, #-40]	; 0xffffffd8
 8007740:	20656761 	rsbcs	r6, r5, r1, ror #14
 8007744:	65766e75 	ldrbvs	r6, [r6, #-3701]!	; 0xe75
 8007748:	69666972 	stmdbvs	r6!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 800774c:	2e2e6465 	cdpcs	4, 2, cr6, cr14, cr5, {3}
 8007750:	00000a2e 	andeq	r0, r0, lr, lsr #20

08007754 <ed25519_k>:
 8007754:	26b2f159 	ssatcs	pc, #19, r9, asr #2	; <UNPREDICTABLE>
 8007758:	ebd69b94 	bl	75ae5b0 <__Stack_Size+0x75addb0>
 800775c:	8283b156 	addhi	fp, r3, #-2147483627	; 0x80000015
 8007760:	00e0149a 	smlaleq	r1, r0, sl, r4
 8007764:	eef3d130 	mrc	1, 7, sp, cr3, cr0, {1}
 8007768:	198e80f2 	stmibne	lr, {r1, r4, r5, r6, r7, pc}
 800776c:	56dffce7 	ldrbpl	pc, [pc], r7, ror #25	; <UNPREDICTABLE>
 8007770:	2406d9dc 	strcs	sp, [r6], #-2524	; 0x9dc

08007774 <ed25519_neutral>:
	...
 8007794:	00000001 	andeq	r0, r0, r1
	...
 80077d4:	00000001 	andeq	r0, r0, r1
	...

080077f4 <ed25519_base>:
 80077f4:	8f25d51a 	svchi	0x0025d51a
 80077f8:	c9562d60 	ldmdbgt	r6, {r5, r6, r8, sl, fp, sp}^
 80077fc:	9525a7b2 	strls	sl, [r5, #-1970]!	; 0x7b2
 8007800:	692cc760 	stmdbvs	ip!, {r5, r6, r8, r9, sl, lr, pc}
 8007804:	fdd6dc5c 	ldc2l	12, cr13, [r6, #368]	; 0x170
 8007808:	c0a4e231 	adcgt	lr, r4, r1, lsr r2
 800780c:	cd6e53fe 	stclgt	3, cr5, [lr, #-1016]!	; 0xfffffc08
 8007810:	216936d3 	ldrdcs	r3, [r9, #-99]!	; 0xffffff9d
 8007814:	66666658 			; <UNDEFINED> instruction: 0x66666658
 8007818:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800781c:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007820:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007824:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007828:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 800782c:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007830:	66666666 	strbtvs	r6, [r6], -r6, ror #12
 8007834:	a5b7dda3 	ldrge	sp, [r7, #3491]!	; 0xda3
 8007838:	6dde8ab3 	vldrvs	s17, [lr, #716]	; 0x2cc
 800783c:	775152f5 	smmlsrvc	r1, r5, r2, r5
 8007840:	20f09f80 	rscscs	r9, r0, r0, lsl #31
 8007844:	64abe37d 	strtvs	lr, [fp], #893	; 0x37d
 8007848:	66ea4e8e 	strbtvs	r4, [sl], lr, lsl #29
 800784c:	d78b7665 	strle	r7, [fp, r5, ror #12]
 8007850:	67875f0f 	strvs	r5, [r7, pc, lsl #30]
 8007854:	00000001 	andeq	r0, r0, r1
	...

08007874 <ed25519_d>:
 8007874:	135978a3 	cmpne	r9, #10682368	; 0xa30000
 8007878:	75eb4dca 	strbvc	r4, [fp, #3530]!	; 0xdca
 800787c:	4141d8ab 	smlaltbmi	sp, r1, fp, r8
 8007880:	00700a4d 	rsbseq	r0, r0, sp, asr #20
 8007884:	7779e898 			; <UNDEFINED> instruction: 0x7779e898
 8007888:	8cc74079 	stclhi	0, cr4, [r7], {121}	; 0x79
 800788c:	2b6ffe73 	blcs	9c07260 <_etext+0x1bff590>
 8007890:	52036cee 	andpl	r6, r3, #60928	; 0xee00

08007894 <ed25519_order>:
 8007894:	5cf5d3ed 	ldclpl	3, cr13, [r5], #948	; 0x3b4
 8007898:	5812631a 	ldmdapl	r2, {r1, r3, r4, r8, r9, sp, lr}
 800789c:	a2f79cd6 	rscsge	r9, r7, #54784	; 0xd600
 80078a0:	14def9de 	ldrbne	pc, [lr], #2526	; 0x9de	; <UNPREDICTABLE>
	...
 80078b0:	10000000 	andne	r0, r0, r0

080078b4 <f25519_one>:
 80078b4:	00000001 	andeq	r0, r0, r1
	...

080078d8 <sha512_initial_state>:
 80078d8:	f3bcc908 	vtbl.8	d12, {d12-d13}, d8
 80078dc:	6a09e667 	bvs	8281280 <_etext+0x2795b0>
 80078e0:	84caa73b 	strbhi	sl, [sl], #1851	; 0x73b
 80078e4:	bb67ae85 	bllt	99f3300 <_etext+0x19eb630>
 80078e8:	fe94f82b 	cdp2	8, 9, cr15, cr4, cr11, {1}
 80078ec:	3c6ef372 	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
 80078f0:	5f1d36f1 	svcpl	0x001d36f1
 80078f4:	a54ff53a 	strbge	pc, [pc, #-1338]	; 80073c2 <_free_r+0xe>	; <UNPREDICTABLE>
 80078f8:	ade682d1 	sfmge	f0, 3, [r6, #836]!	; 0x344
 80078fc:	510e527f 	tstpl	lr, pc, ror r2
 8007900:	2b3e6c1f 	blcs	8fa2984 <_etext+0xf9acb4>
 8007904:	9b05688c 	blls	8161b3c <_etext+0x159e6c>
 8007908:	fb41bd6b 	blx	9076ebe <_etext+0x106f1ee>
 800790c:	1f83d9ab 	svcne	0x0083d9ab
 8007910:	137e2179 	cmnne	lr, #1073741854	; 0x4000001e
 8007914:	5be0cd19 	blpl	783ad80 <__Stack_Size+0x783a580>

08007918 <round_k>:
 8007918:	d728ae22 	strle	sl, [r8, -r2, lsr #28]!
 800791c:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
 8007920:	23ef65cd 	mvncs	r6, #859832320	; 0x33400000
 8007924:	71374491 			; <UNDEFINED> instruction: 0x71374491
 8007928:	ec4d3b2f 	mcrr	11, 2, r3, sp, cr15
 800792c:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
 8007930:	8189dbbc 			; <UNDEFINED> instruction: 0x8189dbbc
 8007934:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
 8007938:	f348b538 	vqrshl.u8	d27, d24, d8
 800793c:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
 8007940:	b605d019 			; <UNDEFINED> instruction: 0xb605d019
 8007944:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
 8007948:	af194f9b 	svcge	0x00194f9b
 800794c:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
 8007950:	da6d8118 	ble	9b67db8 <_etext+0x1b600e8>
 8007954:	ab1c5ed5 	blge	871f4b0 <_etext+0x7177e0>
 8007958:	a3030242 	movwge	r0, #12866	; 0x3242
 800795c:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
 8007960:	45706fbe 	ldrbmi	r6, [r0, #-4030]!	; 0xfbe
 8007964:	12835b01 	addne	r5, r3, #1024	; 0x400
 8007968:	4ee4b28c 	cdpmi	2, 14, cr11, cr4, cr12, {4}
 800796c:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
 8007970:	d5ffb4e2 	ldrble	fp, [pc, #1250]!	; 8007e5a <_etext+0x18a>
 8007974:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
 8007978:	f27b896f 	vmla.i<illegal width 64>	q12, <illegal reg q5.5>, <illegal reg q15.5>
 800797c:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
 8007980:	3b1696b1 	blcc	85ad44c <_etext+0x5a577c>
 8007984:	80deb1fe 	ldrshhi	fp, [lr], #30
 8007988:	25c71235 	strbcs	r1, [r7, #565]	; 0x235
 800798c:	9bdc06a7 	blls	7709430 <__Stack_Size+0x7708c30>
 8007990:	cf692694 	svcgt	0x00692694
 8007994:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
 8007998:	9ef14ad2 	mrcls	10, 7, r4, cr1, cr2, {6}
 800799c:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
 80079a0:	384f25e3 	stmdacc	pc, {r0, r1, r5, r6, r7, r8, sl, sp}^	; <UNPREDICTABLE>
 80079a4:	efbe4786 	svc	0x00be4786
 80079a8:	8b8cd5b5 	blhi	633d084 <__Stack_Size+0x633c884>
 80079ac:	0fc19dc6 	svceq	0x00c19dc6
 80079b0:	77ac9c65 	strvc	r9, [ip, r5, ror #24]!
 80079b4:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
 80079b8:	592b0275 	stmdbpl	fp!, {r0, r2, r4, r5, r6, r9}
 80079bc:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
 80079c0:	6ea6e483 	cdpvs	4, 10, cr14, cr6, cr3, {4}
 80079c4:	4a7484aa 	bmi	9d28c74 <_etext+0x1d20fa4>
 80079c8:	bd41fbd4 	vstrlt	d31, [r1, #-848]	; 0xfffffcb0
 80079cc:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
 80079d0:	831153b5 	tsthi	r1, #-738197502	; 0xd4000002
 80079d4:	76f988da 	usatvc	r8, #25, sl, asr #17
 80079d8:	ee66dfab 	cdp	15, 6, cr13, cr6, cr11, {5}
 80079dc:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
 80079e0:	2db43210 	lfmcs	f3, 4, [r4, #64]!	; 0x40
 80079e4:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
 80079e8:	98fb213f 	ldmls	fp!, {r0, r1, r2, r3, r4, r5, r8, sp}^
 80079ec:	b00327c8 	andlt	r2, r3, r8, asr #15
 80079f0:	beef0ee4 	cdplt	14, 14, cr0, cr15, cr4, {7}
 80079f4:	bf597fc7 	svclt	0x00597fc7
 80079f8:	3da88fc2 	stccc	15, cr8, [r8, #776]!	; 0x308
 80079fc:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
 8007a00:	930aa725 	movwls	sl, #42789	; 0xa725
 8007a04:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
 8007a08:	e003826f 	and	r8, r3, pc, ror #4
 8007a0c:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
 8007a10:	0a0e6e70 	beq	83a33d8 <_etext+0x39b708>
 8007a14:	14292967 	strtne	r2, [r9], #-2407	; 0x967
 8007a18:	46d22ffc 			; <UNDEFINED> instruction: 0x46d22ffc
 8007a1c:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
 8007a20:	5c26c926 	stcpl	9, cr12, [r6], #-152	; 0xffffff68
 8007a24:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
 8007a28:	5ac42aed 	bpl	71125e4 <__Stack_Size+0x7111de4>
 8007a2c:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
 8007a30:	9d95b3df 	ldcls	3, cr11, [r5, #892]	; 0x37c
 8007a34:	53380d13 	teqpl	r8, #1216	; 0x4c0
 8007a38:	8baf63de 	blhi	6be09b8 <__Stack_Size+0x6be01b8>
 8007a3c:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
 8007a40:	3c77b2a8 	lfmcc	f3, 3, [r7], #-672	; 0xfffffd60
 8007a44:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
 8007a48:	47edaee6 	strbmi	sl, [sp, r6, ror #29]!
 8007a4c:	81c2c92e 	bichi	ip, r2, lr, lsr #18
 8007a50:	1482353b 	strne	r3, [r2], #1339	; 0x53b
 8007a54:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
 8007a58:	4cf10364 	ldclmi	3, cr0, [r1], #400	; 0x190
 8007a5c:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
 8007a60:	bc423001 	mcrrlt	0, 0, r3, r2, cr1
 8007a64:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
 8007a68:	d0f89791 	smlalsle	r9, r8, r1, r7
 8007a6c:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
 8007a70:	0654be30 			; <UNDEFINED> instruction: 0x0654be30
 8007a74:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
 8007a78:	d6ef5218 	usatle	r5, #15, r8, lsl #4
 8007a7c:	d192e819 	orrsle	lr, r2, r9, lsl r8
 8007a80:	5565a910 	strbpl	sl, [r5, #-2320]!	; 0x910
 8007a84:	d6990624 	ldrle	r0, [r9], r4, lsr #12
 8007a88:	5771202a 	ldrbpl	r2, [r1, -sl, lsr #32]!
 8007a8c:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
 8007a90:	32bbd1b8 	adcscc	sp, fp, #184, 2	; 0x2e
 8007a94:	106aa070 	rsbne	sl, sl, r0, ror r0
 8007a98:	b8d2d0c8 	ldmlt	r2, {r3, r6, r7, ip, lr, pc}^
 8007a9c:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
 8007aa0:	5141ab53 	cmppl	r1, r3, asr fp
 8007aa4:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
 8007aa8:	df8eeb99 	svcle	0x008eeb99
 8007aac:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
 8007ab0:	e19b48a8 	orrs	r4, fp, r8, lsr #17
 8007ab4:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
 8007ab8:	c5c95a63 	strbgt	r5, [r9, #2659]	; 0xa63
 8007abc:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
 8007ac0:	e3418acb 	movt	r8, #6859	; 0x1acb
 8007ac4:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
 8007ac8:	7763e373 			; <UNDEFINED> instruction: 0x7763e373
 8007acc:	5b9cca4f 	blpl	673a410 <__Stack_Size+0x6739c10>
 8007ad0:	d6b2b8a3 	ldrtle	fp, [r2], r3, lsr #17
 8007ad4:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8007ad8:	5defb2fc 	sfmpl	f3, 3, [pc, #1008]!	; 8007ed0 <_etext+0x200>
 8007adc:	748f82ee 	strvc	r8, [pc], #750	; 8007ae4 <round_k+0x1cc>
 8007ae0:	43172f60 	tstmi	r7, #96, 30	; 0x180
 8007ae4:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
 8007ae8:	a1f0ab72 	mvnsge	sl, r2, ror fp
 8007aec:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
 8007af0:	1a6439ec 	bne	99162a8 <_etext+0x190e5d8>
 8007af4:	8cc70208 	sfmhi	f0, 2, [r7], {8}
 8007af8:	23631e28 	cmncs	r3, #40, 28	; 0x280
 8007afc:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
 8007b00:	de82bde9 	cdple	13, 8, cr11, cr2, cr9, {7}
 8007b04:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
 8007b08:	b2c67915 	sbclt	r7, r6, #344064	; 0x54000
 8007b0c:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
 8007b10:	e372532b 	cmn	r2, #-1409286144	; 0xac000000
 8007b14:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2
 8007b18:	ea26619c 	b	89a0190 <_etext+0x9984c0>
 8007b1c:	ca273ece 	bgt	89d765c <_etext+0x9cf98c>
 8007b20:	21c0c207 	biccs	ip, r0, r7, lsl #4
 8007b24:	d186b8c7 	orrle	fp, r6, r7, asr #17
 8007b28:	cde0eb1e 	stclgt	11, cr14, [r0, #120]!	; 0x78
 8007b2c:	eada7dd6 	b	76a728c <__Stack_Size+0x76a6a8c>
 8007b30:	ee6ed178 	mcr	1, 3, sp, cr14, cr8, {3}
 8007b34:	f57d4f7f 			; <UNDEFINED> instruction: 0xf57d4f7f
 8007b38:	72176fba 	andsvc	r6, r7, #744	; 0x2e8
 8007b3c:	06f067aa 	ldrbteq	r6, [r0], sl, lsr #15
 8007b40:	a2c898a6 	sbcge	r9, r8, #10878976	; 0xa60000
 8007b44:	0a637dc5 	beq	98e7260 <_etext+0x18df590>
 8007b48:	bef90dae 	cdplt	13, 15, cr0, cr9, cr14, {5}
 8007b4c:	113f9804 	teqne	pc, r4, lsl #16
 8007b50:	131c471b 	tstne	ip, #7077888	; 0x6c0000
 8007b54:	1b710b35 	blne	9c4a830 <_etext+0x1c42b60>
 8007b58:	23047d84 	movwcs	r7, #19844	; 0x4d84
 8007b5c:	28db77f5 	ldmcs	fp, {r0, r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}^
 8007b60:	40c72493 	smullmi	r2, r7, r3, r4
 8007b64:	32caab7b 	sbccc	sl, sl, #125952	; 0x1ec00
 8007b68:	15c9bebc 	strbne	fp, [r9, #3772]	; 0xebc
 8007b6c:	3c9ebe0a 	ldccc	14, cr11, [lr], {10}
 8007b70:	9c100d4c 	ldcls	13, cr0, [r0], {76}	; 0x4c
 8007b74:	431d67c4 	tstmi	sp, #196, 14	; 0x3100000
 8007b78:	cb3e42b6 	blgt	8f98658 <_etext+0xf90988>
 8007b7c:	4cc5d4be 	cfstrdmi	mvd13, [r5], {190}	; 0xbe
 8007b80:	fc657e2a 	stc2l	14, cr7, [r5], #-168	; 0xffffff58
 8007b84:	597f299c 	ldmdbpl	pc!, {r2, r3, r4, r7, r8, fp, sp}^	; <UNPREDICTABLE>
 8007b88:	3ad6faec 	bcc	75c6740 <__Stack_Size+0x75c5f40>
 8007b8c:	5fcb6fab 	svcpl	0x00cb6fab
 8007b90:	4a475817 	bmi	91ddbf4 <_etext+0x11d5f24>
 8007b94:	6c44198c 	mcrrvs	9, 8, r1, r4, cr12
 8007b98:	44434241 	strbmi	r4, [r3], #-577	; 0x241
 8007b9c:	48474645 	stmdami	r7, {r0, r2, r6, r9, sl, lr}^
 8007ba0:	4c4b4a49 	mcrrmi	10, 4, r4, fp, cr9
 8007ba4:	504f4e4d 	subpl	r4, pc, sp, asr #28
 8007ba8:	54535251 	ldrbpl	r5, [r3], #-593	; 0x251
 8007bac:	58575655 	ldmdapl	r7, {r0, r2, r4, r6, r9, sl, ip, lr}^
 8007bb0:	62615a59 	rsbvs	r5, r1, #364544	; 0x59000
 8007bb4:	66656463 	strbtvs	r6, [r5], -r3, ror #8
 8007bb8:	6a696867 	bvs	9a61d5c <_etext+0x1a5a08c>
 8007bbc:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
 8007bc0:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
 8007bc4:	76757473 			; <UNDEFINED> instruction: 0x76757473
 8007bc8:	7a797877 	bvc	9e65dac <_etext+0x1e5e0dc>
 8007bcc:	33323130 	teqcc	r2, #48, 2
 8007bd0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8007bd4:	2f2b3938 	svccs	0x002b3938
 8007bd8:	64616200 	strbtvs	r6, [r1], #-512	; 0x200
 8007bdc:	67616d20 	strbvs	r6, [r1, -r0, lsr #26]!
 8007be0:	30206369 	eorcc	r6, r0, r9, ror #6
 8007be4:	38302578 	ldmdacc	r0!, {r3, r4, r5, r6, r8, sl, sp}
 8007be8:	78652078 	stmdavc	r5!, {r3, r4, r5, r6, sp}^
 8007bec:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
 8007bf0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8007bf4:	30257830 	eorcc	r7, r5, r0, lsr r8
 8007bf8:	000a7838 	andeq	r7, sl, r8, lsr r8
 8007bfc:	20646162 	rsbcs	r6, r4, r2, ror #2
 8007c00:	6967616d 	stmdbvs	r7!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8007c04:	78302063 	ldmdavc	r0!, {r0, r1, r5, r6, sp}
 8007c08:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8007c0c:	70786520 	rsbsvc	r6, r8, r0, lsr #10
 8007c10:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8007c14:	3020676e 	eorcc	r6, r0, lr, ror #14
 8007c18:	0a582578 	beq	9611200 <_etext+0x1609530>
 8007c1c:	74616400 	strbtvc	r6, [r1], #-1024	; 0x400
 8007c20:	7a695361 	bvc	9a5c9ac <_etext+0x1a54cdc>
 8007c24:	30203a65 	eorcc	r3, r0, r5, ror #20
 8007c28:	0a582578 	beq	9611210 <_etext+0x1609540>
 8007c2c:	61745300 	cmnvs	r4, r0, lsl #6
 8007c30:	203a7472 	eorscs	r7, sl, r2, ror r4
 8007c34:	460a5825 	strmi	r5, [sl], -r5, lsr #16
 8007c38:	73696e69 	cmnvc	r9, #1680	; 0x690
 8007c3c:	25203a68 	strcs	r3, [r0, #-2664]!	; 0xa68
 8007c40:	45000a58 	strmi	r0, [r0, #-2648]	; 0xa58
 8007c44:	6465646e 	strbtvs	r6, [r5], #-1134	; 0x46e
 8007c48:	3a746120 	bcc	9d200d0 <_etext+0x1d18400>
 8007c4c:	0a582520 	beq	96110d4 <_etext+0x1609404>
 8007c50:	6c614300 	stclvs	3, cr4, [r1], #-0
 8007c54:	616c7563 	cmnvs	ip, r3, ror #10
 8007c58:	20646574 	rsbcs	r6, r4, r4, ror r5
 8007c5c:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
 8007c60:	20736920 	rsbscs	r6, r3, r0, lsr #18
 8007c64:	626f7270 	rsbvs	r7, pc, #112, 4
 8007c68:	796c6261 	stmdbvc	ip!, {r0, r5, r6, r9, sp, lr}^
 8007c6c:	6f727720 	svcvs	0x00727720
 8007c70:	2e2e676e 	cdpcs	7, 2, cr6, cr14, cr14, {3}
 8007c74:	70000a2e 	andvc	r0, r0, lr, lsr #20
 8007c78:	696c6275 	stmdbvs	ip!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8007c7c:	79656b63 	stmdbvc	r5!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
 8007c80:	53000a3a 	movwpl	r0, #2618	; 0xa3a
 8007c84:	616e6769 	cmnvs	lr, r9, ror #14
 8007c88:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
 8007c8c:	73000a3a 	movwvc	r0, #2618	; 0xa3a
 8007c90:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
 8007c94:	6d757336 	ldclvs	3, cr7, [r5, #-216]!	; 0xffffff28
 8007c98:	23000a3a 	movwcs	r0, #2618	; 0xa3a
 8007c9c:	202b302d 	eorcs	r3, fp, sp, lsr #32
 8007ca0:	4c6c6800 	stclmi	8, cr6, [ip], #-0
 8007ca4:	67666500 	strbvs	r6, [r6, -r0, lsl #10]!
 8007ca8:	00474645 	subeq	r4, r7, r5, asr #12
 8007cac:	33323130 	teqcc	r2, #48, 2
 8007cb0:	37363534 			; <UNDEFINED> instruction: 0x37363534
 8007cb4:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
 8007cb8:	46454443 	strbmi	r4, [r5], -r3, asr #8
 8007cbc:	32313000 	eorscc	r3, r1, #0
 8007cc0:	36353433 			; <UNDEFINED> instruction: 0x36353433
 8007cc4:	61393837 	teqvs	r9, r7, lsr r8
 8007cc8:	65646362 	strbvs	r6, [r4, #-866]!	; 0x362
 8007ccc:	00430066 	subeq	r0, r3, r6, rrx

Disassembly of section .data:

20000000 <_sdata>:
20000000:	00000000 	andeq	r0, r0, r0
20000004:	04030201 	streq	r0, [r3], #-513	; 0x201
20000008:	04030201 	streq	r0, [r3], #-513	; 0x201
2000000c:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}

20000010 <ADCPrescTable>:
20000010:	08060402 	stmdaeq	r6, {r1, sl}

20000014 <Device_Property>:
20000014:	08000f1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, sl, fp}
20000018:	08000bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp}
2000001c:	08000b9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, fp}
20000020:	08000b9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp}
20000024:	08000c85 	stmdaeq	r0, {r0, r2, r7, sl, fp}
20000028:	08000d29 	stmdaeq	r0, {r0, r3, r5, r8, sl, fp}
2000002c:	08000b9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, r9, fp}
20000030:	08000ce5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp}
20000034:	08000cf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp}
20000038:	08000cfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, fp}
2000003c:	08000d1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, fp}
20000040:	00000000 	andeq	r0, r0, r0
20000044:	00000040 	andeq	r0, r0, r0, asr #32

20000048 <pEpInt_IN>:
20000048:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000004c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000050:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000054:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000058:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000005c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000060:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000064 <pEpInt_OUT>:
20000064:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000068:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000006c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000070:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000074:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
20000078:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}
2000007c:	08000b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp}

20000080 <User_Standard_Requests>:
20000080:	08000ba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp}
20000084:	08000bad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp}
20000088:	08000bc5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, fp}
2000008c:	08000bc7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, r9, fp}
20000090:	08000bc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp}
20000094:	08000bcb 	stmdaeq	r0, {r0, r1, r3, r6, r7, r8, r9, fp}
20000098:	08000bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp}
2000009c:	08000bcf 	stmdaeq	r0, {r0, r1, r2, r3, r6, r7, r8, r9, fp}
200000a0:	08000bd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp}

200000a4 <Device_Table>:
200000a4:	00000101 	andeq	r0, r0, r1, lsl #2

200000a8 <usbStringDescriptor>:
200000a8:	200000fc 	strdcs	r0, [r0], -ip
200000ac:	00000004 	andeq	r0, r0, r4
200000b0:	20000146 	andcs	r0, r0, r6, asr #2
200000b4:	00000012 	andeq	r0, r0, r2, lsl r0
200000b8:	20000160 	andcs	r0, r0, r0, ror #2
200000bc:	00000014 	andeq	r0, r0, r4, lsl r0
200000c0:	2000012d 	andcs	r0, r0, sp, lsr #2
200000c4:	00000010 	andeq	r0, r0, r0, lsl r0
200000c8:	20000174 	andcs	r0, r0, r4, ror r1
200000cc:	00000078 	andeq	r0, r0, r8, ror r0
200000d0:	200001ec 	andcs	r0, r0, ip, ror #3
200000d4:	00000064 	andeq	r0, r0, r4, rrx
200000d8:	20000250 	andcs	r0, r0, r0, asr r2
200000dc:	00000064 	andeq	r0, r0, r4, rrx

200000e0 <u8_usbDeviceDescriptorDFU>:
200000e0:	01000112 	tsteq	r0, r2, lsl r1
200000e4:	40000000 	andmi	r0, r0, r0
200000e8:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000ec:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000f0:	00000103 	andeq	r0, r0, r3, lsl #2

200000f4 <usbFunctionalDescriptor>:
200000f4:	2000013d 	andcs	r0, r0, sp, lsr r1
200000f8:	00000009 	andeq	r0, r0, r9

200000fc <u8_usbStringLangId>:
200000fc:	04090304 	streq	r0, [r9], #-772	; 0x304

20000100 <u8_usbConfigDescriptorDFU>:
20000100:	002d0209 	eoreq	r0, sp, r9, lsl #4
20000104:	80000101 	andhi	r0, r0, r1, lsl #2
20000108:	00040932 	andeq	r0, r4, r2, lsr r9
2000010c:	01fe0000 	mvnseq	r0, r0
20000110:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000114:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000118:	09050201 	stmdbeq	r5, {r0, r9}
2000011c:	00020004 	andeq	r0, r2, r4
20000120:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000124:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000128:	10080000 	andne	r0, r8, r0
2000012c:	44031001 	strmi	r1, [r3], #-1

2000012d <u8_usbStringSerial>:
2000012d:	00440310 	subeq	r0, r4, r0, lsl r3
20000131:	00560045 	subseq	r0, r6, r5, asr #32
20000135:	00300020 	eorseq	r0, r0, r0, lsr #32
20000139:	00310030 	eorseq	r0, r1, r0, lsr r0

2000013d <u8_usbFunctionalDescriptor>:
2000013d:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000141:	10080000 	andne	r0, r8, r0
20000145:	4c031201 	sfmmi	f1, 4, [r3], {1}

20000146 <u8_usbStringVendor>:
20000146:	004c0312 	subeq	r0, ip, r2, lsl r3
2000014a:	00610065 	rsbeq	r0, r1, r5, rrx
2000014e:	004c0066 	subeq	r0, ip, r6, rrx
20000152:	00620061 	rsbeq	r0, r2, r1, rrx
20000156:	00e00073 	rsceq	r0, r0, r3, ror r0

20000158 <usbDeviceDescriptorDFU>:
20000158:	200000e0 	andcs	r0, r0, r0, ror #1
2000015c:	00000012 	andeq	r0, r0, r2, lsl r0

20000160 <u8_usbStringProduct>:
20000160:	004d0314 	subeq	r0, sp, r4, lsl r3
20000164:	00700061 	rsbseq	r0, r0, r1, rrx
20000168:	0065006c 	rsbeq	r0, r5, ip, rrx
2000016c:	00300020 	eorseq	r0, r0, r0, lsr #32
20000170:	00330030 	eorseq	r0, r3, r0, lsr r0

20000174 <u8_usbStringAlt0>:
20000174:	00450378 	subeq	r0, r5, r8, ror r3
20000178:	0063006e 	rsbeq	r0, r3, lr, rrx
2000017c:	0061006c 	rsbeq	r0, r1, ip, rrx
20000180:	00650076 	rsbeq	r0, r5, r6, ror r0
20000184:	00440020 	subeq	r0, r4, r0, lsr #32
20000188:	00550046 	subseq	r0, r5, r6, asr #32
2000018c:	00420020 	subeq	r0, r2, r0, lsr #32
20000190:	006f006f 	rsbeq	r0, pc, pc, rrx
20000194:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000198:	0061006f 	rsbeq	r0, r1, pc, rrx
2000019c:	00650064 	rsbeq	r0, r5, r4, rrx
200001a0:	00200072 	eoreq	r0, r0, r2, ror r0
200001a4:	00450020 	subeq	r0, r5, r0, lsr #32
200001a8:	00520052 	subseq	r0, r2, r2, asr r0
200001ac:	0052004f 	subseq	r0, r2, pc, asr #32
200001b0:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001b4:	00700055 	rsbseq	r0, r0, r5, asr r0
200001b8:	006f006c 	rsbeq	r0, pc, ip, rrx
200001bc:	00640061 	rsbeq	r0, r4, r1, rrx
200001c0:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001c4:	0020006f 	eoreq	r0, r0, pc, rrx
200001c8:	00410052 	subeq	r0, r1, r2, asr r0
200001cc:	0020004d 	eoreq	r0, r0, sp, asr #32
200001d0:	006f006e 	rsbeq	r0, pc, lr, rrx
200001d4:	00200074 	eoreq	r0, r0, r4, ror r0
200001d8:	00750073 	rsbseq	r0, r5, r3, ror r0
200001dc:	00700070 	rsbseq	r0, r0, r0, ror r0
200001e0:	0072006f 	rsbseq	r0, r2, pc, rrx
200001e4:	00650074 	rsbeq	r0, r5, r4, ror r0
200001e8:	002e0064 	eoreq	r0, lr, r4, rrx

200001ec <u8_usbStringAlt1>:
200001ec:	00450364 	subeq	r0, r5, r4, ror #6
200001f0:	0063006e 	rsbeq	r0, r3, lr, rrx
200001f4:	0061006c 	rsbeq	r0, r1, ip, rrx
200001f8:	00650076 	rsbeq	r0, r5, r6, ror r0
200001fc:	00440020 	subeq	r0, r4, r0, lsr #32
20000200:	00550046 	subseq	r0, r5, r6, asr #32
20000204:	00420020 	subeq	r0, r2, r0, lsr #32
20000208:	006f006f 	rsbeq	r0, pc, pc, rrx
2000020c:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000210:	0061006f 	rsbeq	r0, r1, pc, rrx
20000214:	00650064 	rsbeq	r0, r5, r4, rrx
20000218:	00200072 	eoreq	r0, r0, r2, ror r0
2000021c:	00550020 	subseq	r0, r5, r0, lsr #32
20000220:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000224:	0061006f 	rsbeq	r0, r1, pc, rrx
20000228:	00200064 	eoreq	r0, r0, r4, rrx
2000022c:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000230:	00460020 	subeq	r0, r6, r0, lsr #32
20000234:	0061006c 	rsbeq	r0, r1, ip, rrx
20000238:	00680073 	rsbeq	r0, r8, r3, ror r0
2000023c:	00300020 	eorseq	r0, r0, r0, lsr #32
20000240:	00380078 	eorseq	r0, r8, r8, ror r0
20000244:	00300030 	eorseq	r0, r0, r0, lsr r0
20000248:	00300037 	eorseq	r0, r0, r7, lsr r0
2000024c:	00300030 	eorseq	r0, r0, r0, lsr r0

20000250 <u8_usbStringAlt2>:
20000250:	00450364 	subeq	r0, r5, r4, ror #6
20000254:	0063006e 	rsbeq	r0, r3, lr, rrx
20000258:	0061006c 	rsbeq	r0, r1, ip, rrx
2000025c:	00650076 	rsbeq	r0, r5, r6, ror r0
20000260:	00440020 	subeq	r0, r4, r0, lsr #32
20000264:	00550046 	subseq	r0, r5, r6, asr #32
20000268:	00420020 	subeq	r0, r2, r0, lsr #32
2000026c:	006f006f 	rsbeq	r0, pc, pc, rrx
20000270:	006c0074 	rsbeq	r0, ip, r4, ror r0
20000274:	0061006f 	rsbeq	r0, r1, pc, rrx
20000278:	00650064 	rsbeq	r0, r5, r4, rrx
2000027c:	00200072 	eoreq	r0, r0, r2, ror r0
20000280:	00550020 	subseq	r0, r5, r0, lsr #32
20000284:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000288:	0061006f 	rsbeq	r0, r1, pc, rrx
2000028c:	00200064 	eoreq	r0, r0, r4, rrx
20000290:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000294:	00460020 	subeq	r0, r6, r0, lsr #32
20000298:	0061006c 	rsbeq	r0, r1, ip, rrx
2000029c:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a0:	00300020 	eorseq	r0, r0, r0, lsr #32
200002a4:	00380078 	eorseq	r0, r8, r8, ror r0
200002a8:	00300030 	eorseq	r0, r0, r0, lsr r0
200002ac:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b0:	00300030 	eorseq	r0, r0, r0, lsr r0

200002b4 <usbConfigDescriptorDFU>:
200002b4:	20000100 	andcs	r0, r0, r0, lsl #2
200002b8:	0000002d 	andeq	r0, r0, sp, lsr #32

200002bc <userAppEnd>:
200002bc:	20005000 	andcs	r5, r0, r0

200002c0 <userAppAddr>:
200002c0:	20000c00 	andcs	r0, r0, r0, lsl #24

200002c4 <sha256_padding>:
200002c4:	00000080 	andeq	r0, r0, r0, lsl #1
	...

20000304 <k>:
20000304:	428a2f98 	addmi	r2, sl, #152, 30	; 0x260
20000308:	71374491 			; <UNDEFINED> instruction: 0x71374491
2000030c:	b5c0fbcf 	strblt	pc, [r0, #3023]	; 0xbcf	; <UNPREDICTABLE>
20000310:	e9b5dba5 	ldmib	r5!, {r0, r2, r5, r7, r8, r9, fp, ip, lr, pc}
20000314:	3956c25b 	ldmdbcc	r6, {r0, r1, r3, r4, r6, r9, lr, pc}^
20000318:	59f111f1 	ldmibpl	r1!, {r0, r4, r5, r6, r7, r8, ip}^
2000031c:	923f82a4 	eorsls	r8, pc, #164, 4	; 0x4000000a
20000320:	ab1c5ed5 	blge	20717e7c <_estack+0x712e7c>
20000324:	d807aa98 	stmdale	r7, {r3, r4, r7, r9, fp, sp, pc}
20000328:	12835b01 	addne	r5, r3, #1024	; 0x400
2000032c:	243185be 	ldrtcs	r8, [r1], #-1470	; 0x5be
20000330:	550c7dc3 	strpl	r7, [ip, #-3523]	; 0xdc3
20000334:	72be5d74 	adcsvc	r5, lr, #116, 26	; 0x1d00
20000338:	80deb1fe 	ldrshhi	fp, [lr], #30
2000033c:	9bdc06a7 	blls	1f701de0 <_etext+0x176fa110>
20000340:	c19bf174 	orrsgt	pc, fp, r4, ror r1	; <UNPREDICTABLE>
20000344:	e49b69c1 	ldr	r6, [fp], #2497	; 0x9c1
20000348:	efbe4786 	svc	0x00be4786
2000034c:	0fc19dc6 	svceq	0x00c19dc6
20000350:	240ca1cc 	strcs	sl, [ip], #-460	; 0x1cc
20000354:	2de92c6f 	stclcs	12, cr2, [r9, #444]!	; 0x1bc
20000358:	4a7484aa 	bmi	21d21608 <_estack+0x1d1c608>
2000035c:	5cb0a9dc 	ldcpl	9, cr10, [r0], #880	; 0x370
20000360:	76f988da 	usatvc	r8, #25, sl, asr #17
20000364:	983e5152 	ldmdals	lr!, {r1, r4, r6, r8, ip, lr}
20000368:	a831c66d 	ldmdage	r1!, {r0, r2, r3, r5, r6, r9, sl, lr, pc}
2000036c:	b00327c8 	andlt	r2, r3, r8, asr #15
20000370:	bf597fc7 	svclt	0x00597fc7
20000374:	c6e00bf3 			; <UNDEFINED> instruction: 0xc6e00bf3
20000378:	d5a79147 	strle	r9, [r7, #327]!	; 0x147
2000037c:	06ca6351 			; <UNDEFINED> instruction: 0x06ca6351
20000380:	14292967 	strtne	r2, [r9], #-2407	; 0x967
20000384:	27b70a85 	ldrcs	r0, [r7, r5, lsl #21]!
20000388:	2e1b2138 	mrccs	1, 0, r2, cr11, cr8, {1}
2000038c:	4d2c6dfc 	stcmi	13, cr6, [ip, #-1008]!	; 0xfffffc10
20000390:	53380d13 	teqpl	r8, #1216	; 0x4c0
20000394:	650a7354 	strvs	r7, [sl, #-852]	; 0x354
20000398:	766a0abb 			; <UNDEFINED> instruction: 0x766a0abb
2000039c:	81c2c92e 	bichi	ip, r2, lr, lsr #18
200003a0:	92722c85 	rsbsls	r2, r2, #34048	; 0x8500
200003a4:	a2bfe8a1 	adcsge	lr, pc, #10551296	; 0xa10000
200003a8:	a81a664b 	ldmdage	sl, {r0, r1, r3, r6, r9, sl, sp, lr}
200003ac:	c24b8b70 	subgt	r8, fp, #112, 22	; 0x1c000
200003b0:	c76c51a3 	strbgt	r5, [ip, -r3, lsr #3]!
200003b4:	d192e819 	orrsle	lr, r2, r9, lsl r8
200003b8:	d6990624 	ldrle	r0, [r9], r4, lsr #12
200003bc:	f40e3585 	vst3.32	{d3,d5,d7}, [lr], r5
200003c0:	106aa070 	rsbne	sl, sl, r0, ror r0
200003c4:	19a4c116 	stmibne	r4!, {r1, r2, r4, r8, lr, pc}
200003c8:	1e376c08 	cdpne	12, 3, cr6, cr7, cr8, {0}
200003cc:	2748774c 	strbcs	r7, [r8, -ip, asr #14]
200003d0:	34b0bcb5 	ldrtcc	fp, [r0], #3253	; 0xcb5
200003d4:	391c0cb3 	ldmdbcc	ip, {r0, r1, r4, r5, r7, sl, fp}
200003d8:	4ed8aa4a 	vfnmami.f32	s21, s16, s20
200003dc:	5b9cca4f 	blpl	1e732d20 <_etext+0x1672b050>
200003e0:	682e6ff3 	stmdavs	lr!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
200003e4:	748f82ee 	strvc	r8, [pc], #750	; 200003ec <k+0xe8>
200003e8:	78a5636f 	stmiavc	r5!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}
200003ec:	84c87814 	strbhi	r7, [r8], #2068	; 0x814
200003f0:	8cc70208 	sfmhi	f0, 2, [r7], {8}
200003f4:	90befffa 	ldrshtls	pc, [lr], sl	; <UNPREDICTABLE>
200003f8:	a4506ceb 	ldrbge	r6, [r0], #-3307	; 0xceb
200003fc:	bef9a3f7 	mrclt	3, 7, sl, cr9, cr7, {7}
20000400:	c67178f2 			; <UNDEFINED> instruction: 0xc67178f2

20000404 <rootCA>:
20000404:	d1eb720f 	mvnle	r7, pc, lsl #4
20000408:	54ab3e64 	strtpl	r3, [fp], #3684	; 0xe64
2000040c:	e660cfc8 	strbt	ip, [r0], -r8, asr #31
20000410:	649dc36f 	ldrvs	ip, [sp], #879	; 0x36f
20000414:	7743cfa4 	strbvc	ip, [r3, -r4, lsr #31]
20000418:	52097b46 	andpl	r7, r9, #71680	; 0x11800
2000041c:	6c06c719 	stcvs	7, cr12, [r6], {25}
20000420:	863c1d72 			; <UNDEFINED> instruction: 0x863c1d72

20000424 <impure_data>:
	...
20000444:	08007cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, ip, sp, lr}
	...

20000484 <_impure_ptr>:
20000484:	20000424 	andcs	r0, r0, r4, lsr #8

Disassembly of section .bss:

20000488 <_sbss>:
20000488:	00000000 	andeq	r0, r0, r0

2000048c <wIstr>:
	...

2000048e <ResumeS>:
	...

20000490 <input>:
	...

200004ec <sha256sum>:
	...

2000050c <ctx>:
	...

20000574 <code_copy_lock>:
	...

20000576 <SaveRState>:
	...

20000578 <SaveTState>:
20000578:	00000000 	andeq	r0, r0, r0

2000057c <SaveState>:
2000057c:	00000000 	andeq	r0, r0, r0

20000580 <pProperty>:
20000580:	00000000 	andeq	r0, r0, r0

20000584 <EPindex>:
20000584:	00000000 	andeq	r0, r0, r0

20000588 <Device_Info>:
	...

200005a4 <pUser_Standard_Requests>:
200005a4:	00000000 	andeq	r0, r0, r0

200005a8 <pInformation>:
200005a8:	00000000 	andeq	r0, r0, r0

200005ac <wInterrupt_Mask>:
	...

200005ae <StatusInfo>:
	...

200005b0 <errno>:
200005b0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.bIntPackSOF:

200005b4 <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

200005b8 <bDeviceState>:
200005b8:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

200005bc <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000dbc <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000dbe <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000dc0 <userFirmwareLen>:
20000dc0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000dc4 <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000dc5 <dfuAppStatus>:
20000dc5:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000dcb <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000dcc <Data_Mul_MaxPacketSize>:
	...

Disassembly of section .bss.__malloc_sbrk_start:

20000dd0 <__malloc_sbrk_start>:
20000dd0:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.__malloc_free_list:

20000dd4 <__malloc_free_list>:
20000dd4:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.heap_end.4246:

20000dd8 <heap_end.4246>:
20000dd8:	00000000 	andeq	r0, r0, r0

Disassembly of section ._usrstack:

20000ddc <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0524>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220342e 	eorcc	r3, r0, #771751936	; 0x2e000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20353237 	eorscs	r3, r5, r7, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	31333132 	teqcc	r3, r2, lsr r1
  6c:	005d3734 	subseq	r3, sp, r4, lsr r7

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x4583c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007c0002 	rsbseq	r0, ip, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
	...

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	0000011c 	andeq	r0, r0, ip, lsl r1
  4c:	00fe0002 	rscseq	r0, lr, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  5c:	00000002 	andeq	r0, r0, r2
  60:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
  64:	00000002 	andeq	r0, r0, r2
  68:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
  74:	0000000a 	andeq	r0, r0, sl
  78:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
  7c:	00000002 	andeq	r0, r0, r2
  80:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
  8c:	00000002 	andeq	r0, r0, r2
  90:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  94:	00000002 	andeq	r0, r0, r2
  98:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  a4:	00000002 	andeq	r0, r0, r2
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  a8:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ac:	00000002 	andeq	r0, r0, r2
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  b0:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  b4:	00000002 	andeq	r0, r0, r2
			*plainchar    = (fragment & 0x003) << 6;
  b8:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  bc:	0000000c 	andeq	r0, r0, ip
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
  c0:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
				{
					state_in->step = step_d;
  cc:	00000060 	andeq	r0, r0, r0, rrx
					state_in->plainchar = *plainchar;
  d0:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
					return plainchar - plaintext_out;
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ec:	0000000c 	andeq	r0, r0, ip
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  f0:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
		}
  f8:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
  fc:	00000068 	andeq	r0, r0, r8, rrx
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4

	f25519_sub(a, x1sq, z1sq);
 108:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
	f25519_mul__distinct(x3, a, a);
 110:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}

	f25519_mul_c(a, x1z1, 486662);
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
	f25519_add(a, x1sq, a);
 124:	00000048 	andeq	r0, r0, r8, asr #32
 128:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
	f25519_add(a, z1sq, a);
 130:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
 134:	00000004 	andeq	r0, r0, r4
	f25519_mul__distinct(x1sq, x1z1, a);
 138:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
	f25519_mul_c(z3, x1sq, 4);
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}
 154:	000000b4 	strheq	r0, [r0], -r4
	f25519_sub(b, x3, z3); /* D */
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000000c 	andeq	r0, r0, ip
	...
	f25519_mul__distinct(da, a, b);
 168:	00000014 	andeq	r0, r0, r4, lsl r0

	f25519_sub(b, x2, z2);
 16c:	0f0a0002 	svceq	0x000a0002
 170:	00040000 	andeq	r0, r4, r0
	...
	f25519_add(a, x3, z3); /* C */
	f25519_mul__distinct(cb, a, b);
 180:	00000034 	andeq	r0, r0, r4, lsr r0
 184:	11670002 	cmnne	r7, r2

	f25519_add(a, da, cb);
 188:	00040000 	andeq	r0, r4, r0
	...
	f25519_mul__distinct(b, a, a);
 194:	00000026 	andeq	r0, r0, r6, lsr #32
 198:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	0000002e 	andeq	r0, r0, lr, lsr #32
 1a0:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
 1a4:	000000b8 	strheq	r0, [r0], -r8

	f25519_sub(a, da, cb);
 1a8:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 1ac:	000000fc 	strdeq	r0, [r0], -ip
	...
	f25519_mul__distinct(b, a, a);
 1b8:	00000104 	andeq	r0, r0, r4, lsl #2

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	1d110002 	ldcne	0, cr0, [r1, #-8]
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	00040000 	andeq	r0, r4, r0
 1c4:	00000000 	andeq	r0, r0, r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
 1cc:	00000016 	andeq	r0, r0, r6, lsl r0
 1d0:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
 1d4:	00000012 	andeq	r0, r0, r2, lsl r0
		f25519_select(zm1, zm1, zm, bit);
 1d8:	08001240 	stmdaeq	r0, {r6, r9, ip}
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
		f25519_select(xm, xm, xms, bit);
 1e4:	0000000a 	andeq	r0, r0, sl
 1e8:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
 1ec:	00000016 	andeq	r0, r0, r6, lsl r0
		f25519_select(zm, zm, zms, bit);
 1f0:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 1f4:	00000028 	andeq	r0, r0, r8, lsr #32
 1f8:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	0000001a 	andeq	r0, r0, sl, lsl r0
 200:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	0000009c 	muleq	r0, ip, r0
 208:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	00000028 	andeq	r0, r0, r8, lsr #32
 210:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
	f25519_normalize(result);
 214:	00000088 	andeq	r0, r0, r8, lsl #1
 218:	08001440 	stmdaeq	r0, {r6, sl, ip}
}
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
 224:	00000060 	andeq	r0, r0, r0, rrx
 228:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 22c:	00000014 	andeq	r0, r0, r4, lsl r0
 230:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
 23c:	0000002c 	andeq	r0, r0, ip, lsr #32
 240:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 244:	00000018 	andeq	r0, r0, r8, lsl r0
 248:	00000000 	andeq	r0, r0, r0
 24c:	0000002c 	andeq	r0, r0, ip, lsr #32
 250:	00000000 	andeq	r0, r0, r0
 254:	00000048 	andeq	r0, r0, r8, asr #32
 258:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
 25c:	0000006c 	andeq	r0, r0, ip, rrx
 260:	080015c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip}
 264:	00000024 	andeq	r0, r0, r4, lsr #32
 268:	080015ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip}
 26c:	0000001e 	andeq	r0, r0, lr, lsl r0
 270:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
 274:	00000014 	andeq	r0, r0, r4, lsl r0
 278:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
 27c:	00000034 	andeq	r0, r0, r4, lsr r0
 280:	00000000 	andeq	r0, r0, r0
 284:	00000030 	andeq	r0, r0, r0, lsr r0
 288:	08001654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip}
 28c:	0000004c 	andeq	r0, r0, ip, asr #32
 290:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
 294:	0000000c 	andeq	r0, r0, ip
 298:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 2a4:	00000012 	andeq	r0, r0, r2, lsl r0
 2a8:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
 2ac:	00000010 	andeq	r0, r0, r0, lsl r0
 2b0:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 2b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 2c0:	00000084 	andeq	r0, r0, r4, lsl #1
 2c4:	2fad0002 	svccs	0x00ad0002
 2c8:	00040000 	andeq	r0, r4, r0
 2cc:	00000000 	andeq	r0, r0, r0
 2d0:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
 2d4:	00000088 	andeq	r0, r0, r8, lsl #1
 2d8:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 2dc:	00000044 	andeq	r0, r0, r4, asr #32
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000002 	andeq	r0, r0, r2
 2e8:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
 2ec:	00000018 	andeq	r0, r0, r8, lsl r0
 2f0:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
 2f4:	00000018 	andeq	r0, r0, r8, lsl r0
 2f8:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 2fc:	00000028 	andeq	r0, r0, r8, lsr #32
 300:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 304:	00000034 	andeq	r0, r0, r4, lsr r0
 308:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
 30c:	00000058 	andeq	r0, r0, r8, asr r0
 310:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 314:	00000260 	andeq	r0, r0, r0, ror #4
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	0000000c 	andeq	r0, r0, ip
 328:	08001b10 	stmdaeq	r0, {r4, r8, r9, fp, ip}
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	08001b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip}
 33c:	00000002 	andeq	r0, r0, r2
	...
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	39620002 	stmdbcc	r2!, {r1}^
 350:	00040000 	andeq	r0, r4, r0
	...
 35c:	00000228 	andeq	r0, r0, r8, lsr #4
	...
 368:	0000004c 	andeq	r0, r0, ip, asr #32
 36c:	43990002 	orrsmi	r0, r9, #2
 370:	00040000 	andeq	r0, r4, r0
 374:	00000000 	andeq	r0, r0, r0
 378:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
 37c:	00000070 	andeq	r0, r0, r0, ror r0
 380:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
 384:	0000003a 	andeq	r0, r0, sl, lsr r0
 388:	08001bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip}
 38c:	0000005e 	andeq	r0, r0, lr, asr r0
 390:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
 394:	000000c8 	andeq	r0, r0, r8, asr #1
 398:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
 39c:	000000e0 	andeq	r0, r0, r0, ror #1
 3a0:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
 3a4:	000000b4 	strheq	r0, [r0], -r4
 3a8:	08001e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip}
 3ac:	00000084 	andeq	r0, r0, r4, lsl #1
	...
 3b8:	00000044 	andeq	r0, r0, r4, asr #32
 3bc:	524f0002 	subpl	r0, pc, #2
 3c0:	00040000 	andeq	r0, r4, r0
 3c4:	00000000 	andeq	r0, r0, r0
 3c8:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
 3cc:	00000054 	andeq	r0, r0, r4, asr r0
 3d0:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
 3d4:	0000009c 	muleq	r0, ip, r0
 3d8:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 3dc:	0000002c 	andeq	r0, r0, ip, lsr #32
 3e0:	08002028 	stmdaeq	r0, {r3, r5, sp}
 3e4:	00000018 	andeq	r0, r0, r8, lsl r0
 3e8:	08002040 	stmdaeq	r0, {r6, sp}
 3ec:	000000c0 	andeq	r0, r0, r0, asr #1
 3f0:	08002100 	stmdaeq	r0, {r8, sp}
 3f4:	000000c0 	andeq	r0, r0, r0, asr #1
	...
 400:	0000007c 	andeq	r0, r0, ip, ror r0
 404:	5f990002 	svcpl	0x00990002
 408:	00040000 	andeq	r0, r4, r0
 40c:	00000000 	andeq	r0, r0, r0
 410:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
 414:	0000001e 	andeq	r0, r0, lr, lsl r0
 418:	080021e0 	stmdaeq	r0, {r5, r6, r7, r8, sp}
 41c:	0000006e 	andeq	r0, r0, lr, rrx
 420:	08002250 	stmdaeq	r0, {r4, r6, r9, sp}
 424:	0000009a 	muleq	r0, sl, r0
 428:	080022ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp}
 42c:	000000c2 	andeq	r0, r0, r2, asr #1
 430:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
 434:	00000046 	andeq	r0, r0, r6, asr #32
 438:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
 43c:	0000004c 	andeq	r0, r0, ip, asr #32
 440:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
 444:	00000046 	andeq	r0, r0, r6, asr #32
 448:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
 44c:	00000088 	andeq	r0, r0, r8, lsl #1
 450:	00000000 	andeq	r0, r0, r0
 454:	000000b8 	strheq	r0, [r0], -r8
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000040 	andeq	r0, r0, r0, asr #32
 460:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
 464:	000005ea 	andeq	r0, r0, sl, ror #11
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000026 	andeq	r0, r0, r6, lsr #32
 470:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
 474:	00000634 	andeq	r0, r0, r4, lsr r6
	...
 480:	0000005c 	andeq	r0, r0, ip, asr r0
 484:	6f400002 	svcvs	0x00400002
 488:	00040000 	andeq	r0, r4, r0
	...
 494:	0000001e 	andeq	r0, r0, lr, lsl r0
 498:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
 49c:	000001a0 	andeq	r0, r0, r0, lsr #3
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000002c 	andeq	r0, r0, ip, lsr #32
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0000009a 	muleq	r0, sl, r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	000000c2 	andeq	r0, r0, r2, asr #1
 4b8:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
 4bc:	00000058 	andeq	r0, r0, r8, asr r0
 4c0:	00000000 	andeq	r0, r0, r0
 4c4:	0000008e 	andeq	r0, r0, lr, lsl #1
 4c8:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
 4cc:	0000013e 	andeq	r0, r0, lr, lsr r1
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	000000d2 	ldrdeq	r0, [r0], -r2
	...
 4e0:	00000024 	andeq	r0, r0, r4, lsr #32
 4e4:	7cb40002 	ldcvc	0, cr0, [r4], #8
 4e8:	00040000 	andeq	r0, r4, r0
	...
 4f4:	00000040 	andeq	r0, r0, r0, asr #32
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	000000d4 	ldrdeq	r0, [r0], -r4
	...
 508:	00000034 	andeq	r0, r0, r4, lsr r0
 50c:	82de0002 	sbcshi	r0, lr, #2
 510:	00040000 	andeq	r0, r4, r0
 514:	00000000 	andeq	r0, r0, r0
 518:	0800346c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, sp}
 51c:	00000058 	andeq	r0, r0, r8, asr r0
 520:	080034c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, sp}
 524:	00001f64 	andeq	r1, r0, r4, ror #30
 528:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
 52c:	0000008e 	andeq	r0, r0, lr, lsl #1
 530:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
 534:	00000218 	andeq	r0, r0, r8, lsl r2
	...
 540:	0000002c 	andeq	r0, r0, ip, lsr #32
 544:	888e0002 	stmhi	lr, {r1}
 548:	00040000 	andeq	r0, r4, r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
 554:	00000494 	muleq	r0, r4, r4
 558:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
 55c:	00000088 	andeq	r0, r0, r8, lsl #1
 560:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 564:	00000296 	muleq	r0, r6, r2
	...
 570:	0000002c 	andeq	r0, r0, ip, lsr #32
 574:	90110002 	andsls	r0, r1, r2
 578:	00040000 	andeq	r0, r4, r0
	...
 584:	00000018 	andeq	r0, r0, r8, lsl r0
 588:	00000000 	andeq	r0, r0, r0
 58c:	00000008 	andeq	r0, r0, r8
 590:	00000000 	andeq	r0, r0, r0
 594:	00000100 	andeq	r0, r0, r0, lsl #2
	...
 5a0:	00000034 	andeq	r0, r0, r4, lsr r0
 5a4:	91e10002 	mvnls	r0, r2
 5a8:	00040000 	andeq	r0, r4, r0
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 5b4:	0000000a 	andeq	r0, r0, sl
 5b8:	08005e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, lr}
 5bc:	00000010 	andeq	r0, r0, r0, lsl r0
 5c0:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
 5c4:	000000d6 	ldrdeq	r0, [r0], -r6
 5c8:	08005f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 5cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
 5d8:	00000024 	andeq	r0, r0, r4, lsr #32
 5dc:	944c0002 	strbls	r0, [ip], #-2
 5e0:	00040000 	andeq	r0, r4, r0
 5e4:	00000000 	andeq	r0, r0, r0
 5e8:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 5ec:	00000044 	andeq	r0, r0, r4, asr #32
 5f0:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 5f4:	000001dc 	ldrdeq	r0, [r0], -ip
	...
 600:	000001ec 	andeq	r0, r0, ip, ror #3
 604:	9e9b0002 	cdpls	0, 9, cr0, cr11, cr2, {0}
 608:	00040000 	andeq	r0, r4, r0
	...
 614:	0000000c 	andeq	r0, r0, ip
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000000c 	andeq	r0, r0, ip
 620:	00000000 	andeq	r0, r0, r0
 624:	0000000c 	andeq	r0, r0, ip
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000000c 	andeq	r0, r0, ip
 630:	00000000 	andeq	r0, r0, r0
 634:	0000000c 	andeq	r0, r0, ip
 638:	00000000 	andeq	r0, r0, r0
 63c:	0000000c 	andeq	r0, r0, ip
 640:	00000000 	andeq	r0, r0, r0
 644:	0000000c 	andeq	r0, r0, ip
 648:	00000000 	andeq	r0, r0, r0
 64c:	00000010 	andeq	r0, r0, r0, lsl r0
 650:	00000000 	andeq	r0, r0, r0
 654:	0000000c 	andeq	r0, r0, ip
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000000e 	andeq	r0, r0, lr
 660:	00000000 	andeq	r0, r0, r0
 664:	00000010 	andeq	r0, r0, r0, lsl r0
 668:	00000000 	andeq	r0, r0, r0
 66c:	0000001c 	andeq	r0, r0, ip, lsl r0
 670:	00000000 	andeq	r0, r0, r0
 674:	00000012 	andeq	r0, r0, r2, lsl r0
 678:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
 67c:	0000002a 	andeq	r0, r0, sl, lsr #32
 680:	00000000 	andeq	r0, r0, r0
 684:	0000002a 	andeq	r0, r0, sl, lsr #32
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000024 	andeq	r0, r0, r4, lsr #32
 690:	00000000 	andeq	r0, r0, r0
 694:	00000012 	andeq	r0, r0, r2, lsl r0
 698:	00000000 	andeq	r0, r0, r0
 69c:	00000012 	andeq	r0, r0, r2, lsl r0
 6a0:	00000000 	andeq	r0, r0, r0
 6a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6a8:	08006202 	stmdaeq	r0, {r1, r9, sp, lr}
 6ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 6b0:	00000000 	andeq	r0, r0, r0
 6b4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c0:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
 6c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	0000001e 	andeq	r0, r0, lr, lsl r0
 6d0:	00000000 	andeq	r0, r0, r0
 6d4:	0000001e 	andeq	r0, r0, lr, lsl r0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e0:	00000000 	andeq	r0, r0, r0
 6e4:	0000001a 	andeq	r0, r0, sl, lsl r0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000001a 	andeq	r0, r0, sl, lsl r0
 6f0:	00000000 	andeq	r0, r0, r0
 6f4:	00000018 	andeq	r0, r0, r8, lsl r0
 6f8:	00000000 	andeq	r0, r0, r0
 6fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 700:	00000000 	andeq	r0, r0, r0
 704:	00000020 	andeq	r0, r0, r0, lsr #32
 708:	00000000 	andeq	r0, r0, r0
 70c:	00000020 	andeq	r0, r0, r0, lsr #32
 710:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
 714:	00000020 	andeq	r0, r0, r0, lsr #32
 718:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
 71c:	00000020 	andeq	r0, r0, r0, lsr #32
 720:	00000000 	andeq	r0, r0, r0
 724:	0000001e 	andeq	r0, r0, lr, lsl r0
 728:	00000000 	andeq	r0, r0, r0
 72c:	00000012 	andeq	r0, r0, r2, lsl r0
 730:	00000000 	andeq	r0, r0, r0
 734:	00000020 	andeq	r0, r0, r0, lsr #32
 738:	00000000 	andeq	r0, r0, r0
 73c:	00000020 	andeq	r0, r0, r0, lsr #32
 740:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
 744:	0000001c 	andeq	r0, r0, ip, lsl r0
 748:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 74c:	0000001c 	andeq	r0, r0, ip, lsl r0
 750:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000000 	andeq	r0, r0, r0
 75c:	00000026 	andeq	r0, r0, r6, lsr #32
 760:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
 764:	00000040 	andeq	r0, r0, r0, asr #32
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000020 	andeq	r0, r0, r0, lsr #32
 770:	00000000 	andeq	r0, r0, r0
 774:	00000020 	andeq	r0, r0, r0, lsr #32
 778:	00000000 	andeq	r0, r0, r0
 77c:	00000038 	andeq	r0, r0, r8, lsr r0
 780:	00000000 	andeq	r0, r0, r0
 784:	00000020 	andeq	r0, r0, r0, lsr #32
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000020 	andeq	r0, r0, r0, lsr #32
 790:	00000000 	andeq	r0, r0, r0
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000000 	andeq	r0, r0, r0
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	00000000 	andeq	r0, r0, r0
 7a4:	000000a8 	andeq	r0, r0, r8, lsr #1
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	0000005c 	andeq	r0, r0, ip, asr r0
 7b0:	00000000 	andeq	r0, r0, r0
 7b4:	0000005c 	andeq	r0, r0, ip, asr r0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000020 	andeq	r0, r0, r0, lsr #32
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000020 	andeq	r0, r0, r0, lsr #32
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000044 	andeq	r0, r0, r4, asr #32
 7d0:	00000000 	andeq	r0, r0, r0
 7d4:	0000003a 	andeq	r0, r0, sl, lsr r0
 7d8:	00000000 	andeq	r0, r0, r0
 7dc:	00000006 	andeq	r0, r0, r6
 7e0:	00000000 	andeq	r0, r0, r0
 7e4:	0000000a 	andeq	r0, r0, sl
	...
 7f0:	00000024 	andeq	r0, r0, r4, lsr #32
 7f4:	ab270002 	blge	9c0804 <__Stack_Size+0x9c0004>
 7f8:	00040000 	andeq	r0, r4, r0
 7fc:	00000000 	andeq	r0, r0, r0
 800:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
 804:	00000154 	andeq	r0, r0, r4, asr r1
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000070 	andeq	r0, r0, r0, ror r0
	...
 818:	0000001c 	andeq	r0, r0, ip, lsl r0
 81c:	ad030002 	stcge	0, cr0, [r3, #-8]
 820:	00040000 	andeq	r0, r4, r0
 824:	00000000 	andeq	r0, r0, r0
 828:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
 82c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 838:	00000094 	muleq	r0, r4, r0
 83c:	b1000002 	tstlt	r0, r2
 840:	00040000 	andeq	r0, r4, r0
 844:	00000000 	andeq	r0, r0, r0
 848:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
 84c:	00000024 	andeq	r0, r0, r4, lsr #32
 850:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 854:	00000024 	andeq	r0, r0, r4, lsr #32
 858:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
 85c:	00000090 	muleq	r0, r0, r0
 860:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 864:	000000a8 	andeq	r0, r0, r8, lsr #1
 868:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
 86c:	00000038 	andeq	r0, r0, r8, lsr r0
 870:	08006654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, lr}
 874:	00000048 	andeq	r0, r0, r8, asr #32
 878:	0800669c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp, lr}
 87c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 880:	0800676c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, sp, lr}
 884:	00000084 	andeq	r0, r0, r4, lsl #1
 888:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
 88c:	00000024 	andeq	r0, r0, r4, lsr #32
 890:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
 894:	0000001c 	andeq	r0, r0, ip, lsl r0
 898:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
 89c:	00000040 	andeq	r0, r0, r0, asr #32
 8a0:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 8a4:	000002dc 	ldrdeq	r0, [r0], -ip
 8a8:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
 8ac:	000000c8 	andeq	r0, r0, r8, asr #1
 8b0:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
 8b4:	00000038 	andeq	r0, r0, r8, lsr r0
 8b8:	08006c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, sp, lr}
 8bc:	0000005c 	andeq	r0, r0, ip, asr r0
 8c0:	00000000 	andeq	r0, r0, r0
 8c4:	00000002 	andeq	r0, r0, r2
	...
 8d0:	00000024 	andeq	r0, r0, r4, lsr #32
 8d4:	bee40002 	cdplt	0, 14, cr0, cr4, cr2, {0}
 8d8:	00040000 	andeq	r0, r4, r0
 8dc:	00000000 	andeq	r0, r0, r0
 8e0:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
 8e4:	00000030 	andeq	r0, r0, r0, lsr r0
 8e8:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
 8ec:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000078 	andeq	r0, r0, r8, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	66696168 	strbtvs	r6, [r9], -r8, ror #2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	706f746b 	rsbvc	r7, pc, fp, ror #8
      48:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
      4c:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6f72705f 	svcvs	0x0072705f
      54:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
      58:	6f6f625c 	svcvs	0x006f625c
      5c:	616f6c74 	smcvs	63172	; 0xf6c4
      60:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
      64:	334d5453 	movtcc	r5, #54355	; 0xd453
      68:	00314632 	eorseq	r4, r1, r2, lsr r6
      6c:	20554e47 	subscs	r4, r5, r7, asr #28
      70:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      74:	2e33322e 	cdpcs	2, 3, cr3, cr3, cr14, {1}
      78:	80010032 	andhi	r0, r1, r2, lsr r0
      7c:	0000007e 	andeq	r0, r0, lr, ror r0
      80:	00120002 	andseq	r0, r2, r2
      84:	01040000 	mrseq	r0, (UNDEF: 4)
      88:	00000075 	andeq	r0, r0, r5, ror r0
	...
      94:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      98:	5f32336d 	svcpl	0x0032336d
      9c:	2f62696c 	svccs	0x0062696c
      a0:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
      a4:	336d7865 	cmncc	sp, #6619136	; 0x650000
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	532e6f72 	teqpl	lr, #456	; 0x1c8
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
      b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
			*plainchar    = (fragment & 0x003) << 6;
      b8:	61685c73 	smcvs	34243	; 0x85c3
      bc:	73696669 	cmnvc	r9, #110100480	; 0x6900000
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	445c6863 	ldrbmi	r6, [ip], #-2147	; 0x863
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0x365
      c8:	655c706f 	ldrbvs	r7, [ip, #-111]	; 0x6f
				{
					state_in->step = step_d;
      cc:	616c636e 	cmnvs	ip, lr, ror #6
					state_in->plainchar = *plainchar;
      d0:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
					return plainchar - plaintext_out;
      d4:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
      d8:	625c7463 	subsvs	r7, ip, #1660944384	; 0x63000000
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
      e0:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	54535c72 	ldrbpl	r5, [r3], #-3186	; 0xc72
      e8:	4632334d 	ldrtmi	r3, [r2], -sp, asr #6
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	53412055 	movtpl	r2, #4181	; 0x1055
      f4:	322e3220 	eorcc	r3, lr, #32, 4
		}
      f8:	00322e33 	eorseq	r2, r2, r3, lsr lr
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0e088001 	cdpeq	0, 0, cr8, cr8, cr1, {0}
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00040000 	andeq	r0, r4, r0
     104:	00000026 	andeq	r0, r0, r6, lsr #32

	f25519_sub(a, x1sq, z1sq);
     108:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
     10c:	eb010000 	bl	40114 <__Stack_Size+0x3f914>
	f25519_mul__distinct(x3, a, a);
     110:	93000003 	movwls	r0, #3
     114:	20000008 	andcs	r0, r0, r8
     118:	00000000 	andeq	r0, r0, r0

	f25519_mul_c(a, x1z1, 486662);
     11c:	1b000000 	blne	124 <_Minimum_Stack_Size+0x24>
     120:	02000001 	andeq	r0, r0, #1
	f25519_add(a, x1sq, a);
     124:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
     128:	04030000 	streq	r0, [r3], #-0
     12c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
	f25519_add(a, z1sq, a);
     130:	06010200 	streq	r0, [r1], -r0, lsl #4
     134:	0000081a 	andeq	r0, r0, sl, lsl r8
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	18080102 	stmdane	r8, {r1, r8}
     13c:	02000008 	andeq	r0, r0, #8
     140:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
	f25519_mul_c(z3, x1sq, 4);
     144:	02020000 	andeq	r0, r2, #0
     148:	00094907 	andeq	r4, r9, r7, lsl #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	05040200 	streq	r0, [r4, #-512]	; 0x200
     150:	000004da 	ldrdeq	r0, [r0], -sl
     154:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
	f25519_sub(b, x3, z3); /* D */
     158:	02000002 	andeq	r0, r0, #2
     15c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
	f25519_mul__distinct(da, a, b);
     160:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     164:	00024d07 	andeq	r4, r2, r7, lsl #26
     168:	07040200 	streq	r0, [r4, -r0, lsl #4]

	f25519_sub(b, x2, z2);
     16c:	0000078b 	andeq	r0, r0, fp, lsl #15
     170:	00780404 	rsbseq	r0, r8, r4, lsl #8
	f25519_add(a, x3, z3); /* C */
     174:	02050000 	andeq	r0, r5, #0
     178:	08210801 	stmdaeq	r1!, {r0, fp}
     17c:	75060000 	strvc	r0, [r6, #-0]
	f25519_mul__distinct(cb, a, b);
     180:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
     184:	00005627 	andeq	r5, r0, r7, lsr #12

	f25519_add(a, da, cb);
     188:	31750600 	cmncc	r5, r0, lsl #12
     18c:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
     190:	00000048 	andeq	r0, r0, r8, asr #32
	f25519_mul__distinct(b, a, a);
     194:	00387506 	eorseq	r7, r8, r6, lsl #10
     198:	003a2902 	eorseq	r2, sl, r2, lsl #18
	f25519_mul__distinct(x5, z1, b);
     19c:	5a070000 	bpl	1c01a4 <__Stack_Size+0x1bf9a4>
     1a0:	02000003 	andeq	r0, r0, #3
     1a4:	0000ab2f 	andeq	sl, r0, pc, lsr #22

	f25519_sub(a, da, cb);
     1a8:	00560800 	subseq	r0, r6, r0, lsl #16
     1ac:	e3070000 	movw	r0, #28672	; 0x7000
	f25519_mul__distinct(b, a, a);
     1b0:	02000001 	andeq	r0, r0, #1
     1b4:	0000bb30 	andeq	fp, r0, r0, lsr fp
     1b8:	00480800 	subeq	r0, r8, r0, lsl #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	76060000 	strvc	r0, [r6], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	02003875 	andeq	r3, r0, #7667712	; 0x750000
     1c4:	0000cb31 	andeq	ip, r0, r1, lsr fp

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	003a0800 	eorseq	r0, sl, r0, lsl #16
     1cc:	01090000 	mrseq	r0, (UNDEF: 9)
     1d0:	00e53702 	rsceq	r3, r5, r2, lsl #14
     1d4:	530a0000 	movwpl	r0, #40960	; 0xa000
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00000007 	andeq	r0, r0, r7
     1dc:	0001a70a 	andeq	sl, r1, sl, lsl #14
     1e0:	07000100 	streq	r0, [r0, -r0, lsl #2]
		f25519_select(xm, xm, xms, bit);
     1e4:	0000052d 	andeq	r0, r0, sp, lsr #10
     1e8:	00d03702 	sbcseq	r3, r0, r2, lsl #14
     1ec:	040b0000 	streq	r0, [fp], #-0
		f25519_select(zm, zm, zms, bit);
     1f0:	0129ae03 	teqeq	r9, r3, lsl #28
     1f4:	b60c0000 	strlt	r0, [ip], -r0
     1f8:	03000005 	movweq	r0, #5
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	000096af 	andeq	r9, r0, pc, lsr #13
     200:	700c0000 	andvc	r0, ip, r0
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	03000009 	movweq	r0, #9
     208:	000096b0 			; <UNDEFINED> instruction: 0x000096b0
	f25519_mul__distinct(result, zm1, xm);
     20c:	dd0c0100 	stfles	f0, [ip, #-0]
     210:	03000008 	movweq	r0, #8
	f25519_normalize(result);
     214:	000096b1 			; <UNDEFINED> instruction: 0x000096b1
     218:	960c0200 	strls	r0, [ip], -r0, lsl #4
}
     21c:	03000003 	movweq	r0, #3
     220:	0000e5b2 			; <UNDEFINED> instruction: 0x0000e5b2
     224:	07000300 	streq	r0, [r0, -r0, lsl #6]
     228:	000001f5 	strdeq	r0, [r0], -r5
     22c:	00f0b303 	rscseq	fp, r0, r3, lsl #6
     230:	280b0000 	stmdacs	fp, {}	; <UNPREDICTABLE>
     234:	01b4d903 			; <UNDEFINED> instruction: 0x01b4d903
     238:	430d0000 	movwmi	r0, #53248	; 0xd000
     23c:	da030052 	ble	c038c <__Stack_Size+0xbfb8c>
     240:	000000a0 	andeq	r0, r0, r0, lsr #1
     244:	07590c00 	ldrbeq	r0, [r9, -r0, lsl #24]
     248:	db030000 	blle	c0250 <__Stack_Size+0xbfa50>
     24c:	000000a0 	andeq	r0, r0, r0, lsr #1
     250:	49430d04 	stmdbmi	r3, {r2, r8, sl, fp}^
     254:	dc030052 	stcle	0, cr0, [r3], {82}	; 0x52
     258:	000000a0 	andeq	r0, r0, r0, lsr #1
     25c:	002a0c08 	eoreq	r0, sl, r8, lsl #24
     260:	dd030000 	stcle	0, cr0, [r3, #-0]
     264:	000000a0 	andeq	r0, r0, r0, lsr #1
     268:	00f10c0c 	rscseq	r0, r1, ip, lsl #24
     26c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     270:	000000a0 	andeq	r0, r0, r0, lsr #1
     274:	04450c10 	strbeq	r0, [r5], #-3088	; 0xc10
     278:	df030000 	svcle	0x00030000
     27c:	000000a0 	andeq	r0, r0, r0, lsr #1
     280:	05ef0c14 	strbeq	r0, [pc, #3092]!	; e9c <__Stack_Size+0x69c>
     284:	e0030000 	and	r0, r3, r0
     288:	000000a0 	andeq	r0, r0, r0, lsr #1
     28c:	00000c18 	andeq	r0, r0, r8, lsl ip
     290:	e1030000 	mrs	r0, (UNDEF: 3)
     294:	000000a0 	andeq	r0, r0, r0, lsr #1
     298:	061a0c1c 			; <UNDEFINED> instruction: 0x061a0c1c
     29c:	e2030000 	and	r0, r3, #0
     2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
     2a4:	53430d20 	movtpl	r0, #15648	; 0x3d20
     2a8:	e3030052 	movw	r0, #12370	; 0x3052
     2ac:	000000a0 	andeq	r0, r0, r0, lsr #1
     2b0:	33070024 	movwcc	r0, #28708	; 0x7024
     2b4:	03000003 	movweq	r0, #3
     2b8:	000134e4 	andeq	r3, r1, r4, ror #9
     2bc:	023d0e00 	eorseq	r0, sp, #0, 28
     2c0:	05010000 	streq	r0, [r1, #-0]
     2c4:	0001e416 	andeq	lr, r1, r6, lsl r4
     2c8:	05320a00 	ldreq	r0, [r2, #-2560]!	; 0xa00
     2cc:	0a000000 	beq	2d4 <_Minimum_Stack_Size+0x1d4>
     2d0:	00000724 	andeq	r0, r0, r4, lsr #14
     2d4:	017e0a01 	cmneq	lr, r1, lsl #20
     2d8:	0a020000 	beq	802e0 <__Stack_Size+0x7fae0>
     2dc:	00000920 	andeq	r0, r0, r0, lsr #18
     2e0:	330f0003 	movwcc	r0, #61443	; 0xf003
     2e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     2e8:	02092404 	andeq	r2, r9, #4, 8	; 0x4000000
     2ec:	e00c0000 	and	r0, ip, r0
     2f0:	04000002 	streq	r0, [r0], #-2
     2f4:	00020926 	andeq	r0, r2, r6, lsr #18
     2f8:	f10c0000 	cpsid	
     2fc:	04000003 	streq	r0, [r0], #-3
     300:	00008b27 	andeq	r8, r0, r7, lsr #22
     304:	04000400 	streq	r0, [r0], #-1024	; 0x400
     308:	00009604 	andeq	r9, r0, r4, lsl #12
     30c:	05720700 	ldrbeq	r0, [r2, #-1792]!	; 0x700
     310:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
     314:	000001e4 	andeq	r0, r0, r4, ror #3
     318:	00057107 	andeq	r7, r5, r7, lsl #2
     31c:	25290400 	strcs	r0, [r9, #-1024]!	; 0x400
     320:	04000002 	streq	r0, [r0], #-2
     324:	0001e404 	andeq	lr, r1, r4, lsl #8
     328:	07c00e00 	strbeq	r0, [r0, r0, lsl #28]
     32c:	04010000 	streq	r0, [r1], #-0
     330:	0002502d 	andeq	r5, r2, sp, lsr #32
     334:	02860a00 	addeq	r0, r6, #0, 20
     338:	0a000000 	beq	340 <_Minimum_Stack_Size+0x240>
     33c:	000009a9 	andeq	r0, r0, r9, lsr #19
     340:	01300a01 	teqeq	r0, r1, lsl #20
     344:	0a020000 	beq	8034c <__Stack_Size+0x7fb4c>
     348:	0000062b 	andeq	r0, r0, fp, lsr #12
     34c:	c1070003 	tstgt	r7, r3
     350:	04000007 	streq	r0, [r0], #-7
     354:	00022b34 	andeq	r2, r2, r4, lsr fp
     358:	05ff0f00 	ldrbeq	r0, [pc, #3840]!	; 1260 <__Stack_Size+0xa60>
     35c:	040c0000 	streq	r0, [ip], #-0
     360:	00029838 	andeq	r9, r2, r8, lsr r8
     364:	01d70c00 	bicseq	r0, r7, r0, lsl #24
     368:	50040000 	andpl	r0, r4, r0
     36c:	0000008b 	andeq	r0, r0, fp, lsl #1
     370:	086d0c00 	stmdaeq	sp!, {sl, fp}^
     374:	51040000 	mrspl	r0, (UNDEF: 4)
     378:	0000008b 	andeq	r0, r0, fp, lsl #1
     37c:	23670c02 	cmncs	r7, #512	; 0x200
     380:	52040000 	andpl	r0, r4, #0
     384:	0000008b 	andeq	r0, r0, fp, lsl #1
     388:	07380c04 	ldreq	r0, [r8, -r4, lsl #24]!
     38c:	53040000 	movwpl	r0, #16384	; 0x4000
     390:	000002a7 	andeq	r0, r0, r7, lsr #5
     394:	09100008 	ldmdbeq	r0, {r3}
     398:	a7000002 	strge	r0, [r0, -r2]
     39c:	11000002 	tstne	r0, r2
     3a0:	0000008b 	andeq	r0, r0, fp, lsl #1
     3a4:	98040400 	stmdals	r4, {sl}
     3a8:	07000002 	streq	r0, [r0, -r2]
     3ac:	00000600 	andeq	r0, r0, r0, lsl #12
     3b0:	025b5404 	subseq	r5, fp, #4, 8	; 0x4000000
     3b4:	230f0000 	movwcs	r0, #61440	; 0xf000
     3b8:	02000006 	andeq	r0, r0, #6
     3bc:	02dd5804 	sbcseq	r5, sp, #4, 16	; 0x40000
     3c0:	700c0000 	andvc	r0, ip, r0
     3c4:	04000003 	streq	r0, [r0], #-3
     3c8:	0000965a 	andeq	r9, r0, sl, asr r6
     3cc:	8c0c0000 	stchi	0, cr0, [ip], {-0}
     3d0:	04000005 	streq	r0, [r0], #-5
     3d4:	0000965b 	andeq	r9, r0, fp, asr r6
     3d8:	07000100 	streq	r0, [r0, -r0, lsl #2]
     3dc:	00000624 	andeq	r0, r0, r4, lsr #12
     3e0:	02b85d04 	adcseq	r5, r8, #4, 26	; 0x100
     3e4:	42120000 	andsmi	r0, r2, #0
     3e8:	04020057 	streq	r0, [r2], #-87	; 0x57
     3ec:	00030c62 	andeq	r0, r3, r2, ror #24
     3f0:	62620d00 	rsbvs	r0, r2, #0, 26
     3f4:	65040030 	strvs	r0, [r4, #-48]	; 0x30
     3f8:	00000096 	muleq	r0, r6, r0
     3fc:	62620d00 	rsbvs	r0, r2, #0, 26
     400:	66040031 			; <UNDEFINED> instruction: 0x66040031
     404:	00000096 	muleq	r0, r6, r0
     408:	02130001 	andseq	r0, r3, #1
     40c:	03285f04 	teqeq	r8, #4, 30
     410:	77140000 	ldrvc	r0, [r4, -r0]
     414:	8b610400 	blhi	184141c <__Stack_Size+0x1840c1c>
     418:	14000000 	strne	r0, [r0], #-0
     41c:	04007762 	streq	r7, [r0], #-1890	; 0x762
     420:	0002e868 	andeq	lr, r2, r8, ror #16
     424:	30070000 	andcc	r0, r7, r0
     428:	04000009 	streq	r0, [r0], #-9
     42c:	00030c69 	andeq	r0, r3, r9, ror #24
     430:	01140f00 	tsteq	r4, r0, lsl #30
     434:	041c0000 	ldreq	r0, [ip], #-0
     438:	0003c46b 	andeq	ip, r3, fp, ror #8
     43c:	07670c00 	strbeq	r0, [r7, -r0, lsl #24]!
     440:	6d040000 	stcvs	0, cr0, [r4, #-0]
     444:	00000096 	muleq	r0, r6, r0
     448:	00150c00 	andseq	r0, r5, r0, lsl #24
     44c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
     450:	00000096 	muleq	r0, r6, r0
     454:	03110c01 	tsteq	r1, #256	; 0x100
     458:	6f040000 	svcvs	0x00040000
     45c:	00000328 	andeq	r0, r0, r8, lsr #6
     460:	01480c02 	cmpeq	r8, r2, lsl #24
     464:	70040000 	andvc	r0, r4, r0
     468:	00000328 	andeq	r0, r0, r8, lsr #6
     46c:	04eb0c04 	strbteq	r0, [fp], #3076	; 0xc04
     470:	71040000 	mrsvc	r0, (UNDEF: 4)
     474:	00000328 	andeq	r0, r0, r8, lsr #6
     478:	06ef0c06 	strbteq	r0, [pc], r6, lsl #24
     47c:	73040000 	movwvc	r0, #16384	; 0x4000
     480:	00000096 	muleq	r0, r6, r0
     484:	08080c08 	stmdaeq	r8, {r3, sl, fp}
     488:	74040000 	strvc	r0, [r4], #-0
     48c:	00000096 	muleq	r0, r6, r0
     490:	05070c09 	streq	r0, [r7, #-3081]	; 0xc09
     494:	75040000 	strvc	r0, [r4, #-0]
     498:	00000096 	muleq	r0, r6, r0
     49c:	054f0c0a 	strbeq	r0, [pc, #-3082]	; fffff89a <BootRAM+0xef7003b>
     4a0:	76040000 	strvc	r0, [r4], -r0
     4a4:	00000096 	muleq	r0, r6, r0
     4a8:	05d60c0b 	ldrbeq	r0, [r6, #3083]	; 0xc0b
     4ac:	77040000 	strvc	r0, [r4, -r0]
     4b0:	00000096 	muleq	r0, r6, r0
     4b4:	07c80c0c 	strbeq	r0, [r8, ip, lsl #24]
     4b8:	7a040000 	bvc	1004c0 <__Stack_Size+0xffcc0>
     4bc:	000002ad 	andeq	r0, r0, sp, lsr #5
     4c0:	15070010 	strne	r0, [r7, #-16]
     4c4:	04000001 	streq	r0, [r0], #-1
     4c8:	0003337b 	andeq	r3, r3, fp, ror r3
     4cc:	03a90f00 			; <UNDEFINED> instruction: 0x03a90f00
     4d0:	04340000 	ldrteq	r0, [r4], #-0
     4d4:	0004787d 	andeq	r7, r4, sp, ror r8
     4d8:	02960c00 	addseq	r0, r6, #0, 24
     4dc:	7f040000 	svcvc	0x00040000
     4e0:	00000072 	andeq	r0, r0, r2, ror r0
     4e4:	04b80c00 	ldrteq	r0, [r8], #3072	; 0xc00
     4e8:	80040000 	andhi	r0, r4, r0
     4ec:	00000072 	andeq	r0, r0, r2, ror r0
     4f0:	09370c04 	ldmdbeq	r7!, {r2, sl, fp}
     4f4:	83040000 	movwhi	r0, #16384	; 0x4000
     4f8:	00000072 	andeq	r0, r0, r2, ror r0
     4fc:	07780c08 	ldrbeq	r0, [r8, -r8, lsl #24]!
     500:	84040000 	strhi	r0, [r4], #-0
     504:	00000072 	andeq	r0, r0, r2, ror r0
     508:	02c30c0c 	sbceq	r0, r3, #12, 24	; 0xc00
     50c:	96040000 	strls	r0, [r4], -r0
     510:	00000487 	andeq	r0, r0, r7, lsl #9
     514:	006d0c10 	rsbeq	r0, sp, r0, lsl ip
     518:	a1040000 	mrsge	r0, (UNDEF: 4)
     51c:	00000487 	andeq	r0, r0, r7, lsl #9
     520:	09c50c14 	stmibeq	r5, {r2, r4, sl, fp}^
     524:	ab040000 	blge	10052c <__Stack_Size+0xffd2c>
     528:	000004a1 	andeq	r0, r0, r1, lsr #9
     52c:	02d70c18 	sbcseq	r0, r7, #24, 24	; 0x1800
     530:	ad040000 	stcge	0, cr0, [r4, #-0]
     534:	000002a7 	andeq	r0, r0, r7, lsr #5
     538:	03b90c1c 			; <UNDEFINED> instruction: 0x03b90c1c
     53c:	ae040000 	cdpge	0, 0, cr0, cr4, cr0, {0}
     540:	000002a7 	andeq	r0, r0, r7, lsr #5
     544:	01c30c20 	biceq	r0, r3, r0, lsr #24
     548:	af040000 	svcge	0x00040000
     54c:	000002a7 	andeq	r0, r0, r7, lsr #5
     550:	03420c24 	movteq	r0, #11300	; 0x2c24
     554:	b0040000 	andlt	r0, r4, r0
     558:	000002a7 	andeq	r0, r0, r7, lsr #5
     55c:	04670c28 	strbteq	r0, [r7], #-3112	; 0xc28
     560:	b2040000 	andlt	r0, r4, #0
     564:	00000209 	andeq	r0, r0, r9, lsl #4
     568:	23640c2c 	cmncs	r4, #44, 24	; 0x2c00
     56c:	b3040000 	movwlt	r0, #16384	; 0x4000
     570:	00000096 	muleq	r0, r6, r0
     574:	50100030 	andspl	r0, r0, r0, lsr r0
     578:	87000002 	strhi	r0, [r0, -r2]
     57c:	11000004 	tstne	r0, r4
     580:	00000096 	muleq	r0, r6, r0
     584:	78040400 	stmdavc	r4, {sl}
     588:	10000004 	andne	r0, r0, r4
     58c:	00000250 	andeq	r0, r0, r0, asr r2
     590:	000004a1 	andeq	r0, r0, r1, lsr #9
     594:	00009611 	andeq	r9, r0, r1, lsl r6
     598:	00961100 	addseq	r1, r6, r0, lsl #2
     59c:	04000000 	streq	r0, [r0], #-0
     5a0:	00048d04 	andeq	r8, r4, r4, lsl #26
     5a4:	03aa0700 			; <UNDEFINED> instruction: 0x03aa0700
     5a8:	b5040000 	strlt	r0, [r4, #-0]
     5ac:	000003cf 	andeq	r0, r0, pc, asr #7
     5b0:	00008a0f 	andeq	r8, r0, pc, lsl #20
     5b4:	b7042400 	strlt	r2, [r4, -r0, lsl #8]
     5b8:	0000052b 	andeq	r0, r0, fp, lsr #10
     5bc:	0005a00c 	andeq	sl, r5, ip
     5c0:	72b90400 	adcsvc	r0, r9, #0, 8
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	00041d0c 	andeq	r1, r4, ip, lsl #26
     5cc:	72ba0400 	adcsvc	r0, sl, #0, 8
     5d0:	04000000 	streq	r0, [r0], #-0
     5d4:	00029b0c 	andeq	r9, r2, ip, lsl #22
     5d8:	72bb0400 	adcsvc	r0, fp, #0, 8
     5dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     5e0:	0004330c 	andeq	r3, r4, ip, lsl #6
     5e4:	72bc0400 	adcsvc	r0, ip, #0, 8
     5e8:	0c000000 	stceq	0, cr0, [r0], {-0}
     5ec:	0000a20c 	andeq	sl, r0, ip, lsl #4
     5f0:	72bd0400 	adcsvc	r0, sp, #0, 8
     5f4:	10000000 	andne	r0, r0, r0
     5f8:	0007410c 	andeq	r4, r7, ip, lsl #2
     5fc:	72be0400 	adcsvc	r0, lr, #0, 8
     600:	14000000 	strne	r0, [r0], #-0
     604:	0008f80c 	andeq	pc, r8, ip, lsl #16
     608:	72bf0400 	adcsvc	r0, pc, #0, 8
     60c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     610:	0001910c 	andeq	r9, r1, ip, lsl #2
     614:	72c00400 	sbcvc	r0, r0, #0, 8
     618:	1c000000 	stcne	0, cr0, [r0], {-0}
     61c:	0002ad0c 	andeq	sl, r2, ip, lsl #26
     620:	72c10400 	sbcvc	r0, r1, #0, 8
     624:	20000000 	andcs	r0, r0, r0
     628:	008b0700 	addeq	r0, fp, r0, lsl #14
     62c:	c3040000 	movwgt	r0, #16384	; 0x4000
     630:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
     634:	0000fa0e 	andeq	pc, r0, lr, lsl #20
     638:	3d060100 	stfccs	f0, [r6, #-0]
     63c:	00000573 	andeq	r0, r0, r3, ror r5
     640:	0005c60a 	andeq	ip, r5, sl, lsl #12
     644:	570a0000 	strpl	r0, [sl, -r0]
     648:	01000004 	tsteq	r0, r4
     64c:	0000080a 	andeq	r0, r0, sl, lsl #16
     650:	670a0200 	strvs	r0, [sl, -r0, lsl #4]
     654:	03000001 	movweq	r0, #1
     658:	0008d00a 	andeq	sp, r8, sl
     65c:	8c0a0400 	cfstrshi	mvf0, [sl], {-0}
     660:	05000003 	streq	r0, [r0, #-3]
     664:	0004ca0a 	andeq	ip, r4, sl, lsl #20
     668:	1c0a0600 	stcne	6, cr0, [sl], {-0}
     66c:	07000003 	streq	r0, [r0, -r3]
     670:	00fb0700 	rscseq	r0, fp, r0, lsl #14
     674:	46060000 	strmi	r0, [r6], -r0
     678:	00000536 	andeq	r0, r0, r6, lsr r5
     67c:	0008790e 	andeq	r7, r8, lr, lsl #18
     680:	48060100 	stmdami	r6, {r8}
     684:	000005af 	andeq	r0, r0, pc, lsr #11
     688:	0008870a 	andeq	r8, r8, sl, lsl #14
     68c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     690:	01000009 	tsteq	r0, r9
     694:	0004e30a 	andeq	lr, r4, sl, lsl #6
     698:	920a0200 	andls	r0, sl, #0, 4
     69c:	03000009 	movweq	r0, #9
     6a0:	0003cd0a 	andeq	ip, r3, sl, lsl #26
     6a4:	f70a0400 			; <UNDEFINED> instruction: 0xf70a0400
     6a8:	05000007 	streq	r0, [r0, #-7]
     6ac:	087a0700 	ldmdaeq	sl!, {r8, r9, sl}^
     6b0:	4f060000 	svcmi	0x00060000
     6b4:	0000057e 	andeq	r0, r0, lr, ror r5
     6b8:	6301020b 	movwvs	r0, #4619	; 0x120b
     6bc:	000005db 	ldrdeq	r0, [r0], -fp
     6c0:	0003010c 	andeq	r0, r3, ip, lsl #2
     6c4:	db640100 	blle	1900acc <__Stack_Size+0x19002cc>
     6c8:	00000005 	andeq	r0, r0, r5
     6cc:	0003080c 	andeq	r0, r3, ip, lsl #16
     6d0:	e0650100 	rsb	r0, r5, r0, lsl #2
     6d4:	01000005 	tsteq	r0, r5
     6d8:	05730800 	ldrbeq	r0, [r3, #-2048]!	; 0x800
     6dc:	96080000 	strls	r0, [r8], -r0
     6e0:	15000000 	strne	r0, [r0, #-0]
     6e4:	00000121 	andeq	r0, r0, r1, lsr #2
     6e8:	50018801 	andpl	r8, r1, r1, lsl #16
     6ec:	01000002 	tsteq	r0, r2
     6f0:	00000603 	andeq	r0, r0, r3, lsl #12
     6f4:	0005f716 	andeq	pc, r5, r6, lsl r7	; <UNPREDICTABLE>
     6f8:	01880100 	orreq	r0, r8, r0, lsl #2
     6fc:	00000096 	muleq	r0, r6, r0
     700:	03281700 	teqeq	r8, #0, 14
     704:	ad010000 	stcge	0, cr0, [r1, #-0]
     708:	01081801 	tsteq	r8, r1, lsl #16
     70c:	a7010000 	strge	r0, [r1, -r0]
     710:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
     714:	00000002 	andeq	r0, r0, r2
     718:	be199c01 	cdplt	12, 1, cr9, cr9, cr1, {0}
     71c:	01000004 	tsteq	r0, r4
     720:	0b9a0157 	bleq	fe680c84 <BootRAM+0xd5f1425>
     724:	00020800 	andeq	r0, r2, r0, lsl #16
     728:	9c010000 	stcls	0, cr0, [r1], {-0}
     72c:	00049a19 	andeq	r9, r4, r9, lsl sl
     730:	015c0100 	cmpeq	ip, r0, lsl #2
     734:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
     738:	00000002 	andeq	r0, r0, r2
     73c:	da1a9c01 	ble	6a7748 <__Stack_Size+0x6a6f48>
     740:	01000000 	mrseq	r0, (UNDEF: 0)
     744:	02500193 	subseq	r0, r0, #-1073741788	; 0xc0000024
     748:	0b9e0000 	bleq	fe780750 <BootRAM+0xd6f0ef1>
     74c:	000a0800 	andeq	r0, sl, r0, lsl #16
     750:	9c010000 	stcls	0, cr0, [r1], {-0}
     754:	00000679 	andeq	r0, r0, r9, ror r6
     758:	0000631b 	andeq	r6, r0, fp, lsl r3
     75c:	01930100 	orrseq	r0, r3, r0, lsl #2
     760:	00000096 	muleq	r0, r6, r0
     764:	00000000 	andeq	r0, r0, r0
     768:	0001731c 	andeq	r7, r1, ip, lsl r3
     76c:	01930100 	orrseq	r0, r3, r0, lsl #2
     770:	00000096 	muleq	r0, r6, r0
     774:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
     778:	00000206 	andeq	r0, r0, r6, lsl #4
     77c:	a801bf01 	stmdage	r1, {r0, r8, r9, sl, fp, ip, sp, pc}
     780:	0208000b 	andeq	r0, r8, #11
     784:	01000000 	mrseq	r0, (UNDEF: 0)
     788:	0153199c 			; <UNDEFINED> instruction: 0x0153199c
     78c:	c4010000 	strgt	r0, [r1], #-0
     790:	000bac01 	andeq	sl, fp, r1, lsl #24
     794:	00001808 	andeq	r1, r0, r8, lsl #16
     798:	199c0100 	ldmibne	ip, {r8}
     79c:	00000706 	andeq	r0, r0, r6, lsl #14
     7a0:	c401cb01 	strgt	ip, [r1], #-2817	; 0xb01
     7a4:	0208000b 	andeq	r0, r8, #11
     7a8:	01000000 	mrseq	r0, (UNDEF: 0)
     7ac:	04f7199c 	ldrbteq	r1, [r7], #2460	; 0x99c
     7b0:	d0010000 	andle	r0, r1, r0
     7b4:	000bc601 	andeq	ip, fp, r1, lsl #12
     7b8:	00000208 	andeq	r0, r0, r8, lsl #4
     7bc:	199c0100 	ldmibne	ip, {r8}
     7c0:	0000084c 	andeq	r0, r0, ip, asr #16
     7c4:	c801d501 	stmdagt	r1, {r0, r8, sl, ip, lr, pc}
     7c8:	0208000b 	andeq	r0, r8, #11
     7cc:	01000000 	mrseq	r0, (UNDEF: 0)
     7d0:	0910199c 	ldmdbeq	r0, {r2, r3, r4, r7, r8, fp, ip}
     7d4:	da010000 	ble	407dc <__Stack_Size+0x3ffdc>
     7d8:	000bca01 	andeq	ip, fp, r1, lsl #20
     7dc:	00000208 	andeq	r0, r0, r8, lsl #4
     7e0:	199c0100 	ldmibne	ip, {r8}
     7e4:	00000227 	andeq	r0, r0, r7, lsr #4
     7e8:	cc01df01 	stcgt	15, cr13, [r1], {1}
     7ec:	0208000b 	andeq	r0, r8, #11
     7f0:	01000000 	mrseq	r0, (UNDEF: 0)
     7f4:	0859199c 	ldmdaeq	r9, {r2, r3, r4, r7, r8, fp, ip}^
     7f8:	e4010000 	str	r0, [r1], #-0
     7fc:	000bce01 	andeq	ip, fp, r1, lsl #28
     800:	00000208 	andeq	r0, r0, r8, lsl #4
     804:	199c0100 	ldmibne	ip, {r8}
     808:	000001ac 	andeq	r0, r0, ip, lsr #3
     80c:	d001e901 	andle	lr, r1, r1, lsl #18
     810:	0c08000b 	stceq	0, cr0, [r8], {11}
     814:	01000000 	mrseq	r0, (UNDEF: 0)
     818:	04b51d9c 	ldrteq	r1, [r5], #3484	; 0xd9c
     81c:	3d010000 	stccc	0, cr0, [r1, #-0]
     820:	000bdc01 	andeq	sp, fp, r1, lsl #24
     824:	0000a808 	andeq	sl, r0, r8, lsl #16
     828:	a49c0100 	ldrge	r0, [ip], #256	; 0x100
     82c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
     830:	08000c0c 	stmdaeq	r0, {r2, r3, sl, fp}
     834:	00000012 	andeq	r0, r0, r2, lsl r0
     838:	0000074f 	andeq	r0, r0, pc, asr #14
     83c:	00075e1f 	andeq	r5, r7, pc, lsl lr
     840:	01480100 	mrseq	r0, (UNDEF: 88)
     844:	0000008b 	andeq	r0, r0, fp, lsl #1
     848:	00000021 	andeq	r0, r0, r1, lsr #32
     84c:	0be22000 	bleq	ff888854 <BootRAM+0xe7f8ff5>
     850:	0d280800 	stceq	8, cr0, [r8, #-0]
     854:	42210000 	eormi	r0, r1, #0
     858:	2f08000c 	svccs	0x0008000c
     85c:	6c00000d 	stcvs	0, cr0, [r0], {13}
     860:	22000007 	andcs	r0, r0, #7
     864:	74025001 	strvc	r5, [r2], #-1
     868:	50210000 	eorpl	r0, r1, r0
     86c:	4108000c 	tstmi	r8, ip
     870:	8000000d 	andhi	r0, r0, sp
     874:	22000007 	andcs	r0, r0, #7
     878:	74025001 	strvc	r5, [r2], #-1
     87c:	56210000 	strtpl	r0, [r1], -r0
     880:	5808000c 	stmdapl	r8, {r2, r3}
     884:	9400000d 	strls	r0, [r0], #-13
     888:	22000007 	andcs	r0, r0, #7
     88c:	74025001 	strvc	r5, [r2], #-1
     890:	66230000 	strtvs	r0, [r3], -r0
     894:	6a08000c 	bvs	2008cc <__Stack_Size+0x2000cc>
     898:	2200000d 	andcs	r0, r0, #13
     89c:	30015001 	andcc	r5, r1, r1
     8a0:	ea1a0000 	b	6808a8 <__Stack_Size+0x6800a8>
     8a4:	01000007 	tsteq	r0, r7
     8a8:	02500161 	subseq	r0, r0, #1073741848	; 0x40000018
     8ac:	0c840000 	stceq	0, cr0, [r4], {0}
     8b0:	00600800 	rsbeq	r0, r0, r0, lsl #16
     8b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8b8:	000007f4 	strdeq	r0, [r0], -r4
     8bc:	0005f71b 	andeq	pc, r5, fp, lsl r7	; <UNPREDICTABLE>
     8c0:	01610100 	cmneq	r1, r0, lsl #2
     8c4:	00000096 	muleq	r0, r6, r0
     8c8:	00000070 	andeq	r0, r0, r0, ror r0
     8cc:	00060e1f 	andeq	r0, r6, pc, lsl lr
     8d0:	01620100 	cmneq	r2, r0, lsl #2
     8d4:	000002a7 	andeq	r0, r0, r7, lsr #5
     8d8:	00000091 	muleq	r0, r1, r0
     8dc:	000c9c20 	andeq	r9, ip, r0, lsr #24
     8e0:	000d7b08 	andeq	r7, sp, r8, lsl #22
     8e4:	0cc82400 	cfstrdeq	mvd2, [r8], {0}
     8e8:	01220800 	teqeq	r2, r0, lsl #16
     8ec:	00740250 	rsbseq	r0, r4, r0, asr r2
     8f0:	d41a0000 	ldrle	r0, [sl], #-0
     8f4:	01000002 	tsteq	r0, r2
     8f8:	0209019d 	andeq	r0, r9, #1073741863	; 0x40000027
     8fc:	0ce40000 	stcleq	0, cr0, [r4]
     900:	000c0800 	andeq	r0, ip, r0, lsl #16
     904:	9c010000 	stcls	0, cr0, [r1], {-0}
     908:	00000828 	andeq	r0, r0, r8, lsr #16
     90c:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     910:	019d0100 	orrseq	r0, sp, r0, lsl #2
     914:	0000008b 	andeq	r0, r0, fp, lsl #1
     918:	000000c8 	andeq	r0, r0, r8, asr #1
     91c:	000cea26 	andeq	lr, ip, r6, lsr #20
     920:	000d8608 	andeq	r8, sp, r8, lsl #12
     924:	b61a0000 	ldrlt	r0, [sl], -r0
     928:	01000003 	tsteq	r0, r3
     92c:	020901a2 	andeq	r0, r9, #-2147483608	; 0x80000028
     930:	0cf00000 	ldcleq	0, cr0, [r0]
     934:	000c0800 	andeq	r0, ip, r0, lsl #16
     938:	9c010000 	stcls	0, cr0, [r1], {-0}
     93c:	0000085c 	andeq	r0, r0, ip, asr r8
     940:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     944:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
     948:	0000008b 	andeq	r0, r0, fp, lsl #1
     94c:	000000e9 	andeq	r0, r0, r9, ror #1
     950:	000cf626 	andeq	pc, ip, r6, lsr #12
     954:	000d8608 	andeq	r8, sp, r8, lsl #12
     958:	c01a0000 	andsgt	r0, sl, r0
     95c:	01000001 	tsteq	r0, r1
     960:	020901a7 	andeq	r0, r9, #-1073741783	; 0xc0000029
     964:	0cfc0000 	ldcleq	0, cr0, [ip]
     968:	00200800 	eoreq	r0, r0, r0, lsl #16
     96c:	9c010000 	stcls	0, cr0, [r1], {-0}
     970:	0000089c 	muleq	r0, ip, r8
     974:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     978:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     97c:	0000008b 	andeq	r0, r0, fp, lsl #1
     980:	0000010a 	andeq	r0, r0, sl, lsl #2
     984:	00002127 	andeq	r2, r0, r7, lsr #2
     988:	01a90100 			; <UNDEFINED> instruction: 0x01a90100
     98c:	00000096 	muleq	r0, r6, r0
     990:	000d1026 	andeq	r1, sp, r6, lsr #32
     994:	000d8608 	andeq	r8, sp, r8, lsl #12
     998:	3f1a0000 	svccc	0x001a0000
     99c:	01000003 	tsteq	r0, r3
     9a0:	020901b1 	andeq	r0, r9, #1073741868	; 0x4000002c
     9a4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     9a8:	000c0800 	andeq	r0, ip, r0, lsl #16
     9ac:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b0:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     9b4:	6e656c25 	cdpvs	12, 6, cr6, cr5, cr5, {1}
     9b8:	01b10100 			; <UNDEFINED> instruction: 0x01b10100
     9bc:	0000008b 	andeq	r0, r0, fp, lsl #1
     9c0:	00000144 	andeq	r0, r0, r4, asr #2
     9c4:	000d2226 	andeq	r2, sp, r6, lsr #4
     9c8:	000d8608 	andeq	r8, sp, r8, lsl #12
     9cc:	e5280000 	str	r0, [r8, #-0]!
     9d0:	28000005 	stmdacs	r0, {r0, r2}
     9d4:	2808000d 	stmdacs	r8, {r0, r2, r3}
     9d8:	01000000 	mrseq	r0, (UNDEF: 0)
     9dc:	0009099c 	muleq	r9, ip, r9
     9e0:	05f62900 	ldrbeq	r2, [r6, #2304]!	; 0x900
     9e4:	01650000 	cmneq	r5, r0
     9e8:	382a0000 	stmdacc	sl!, {}	; <UNPREDICTABLE>
     9ec:	0e08000d 	cdpeq	0, 0, cr0, cr8, cr13, {0}
     9f0:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     9f4:	000005f6 	strdeq	r0, [r0], -r6
     9f8:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
     9fc:	000d3c20 	andeq	r3, sp, r0, lsr #24
     a00:	000d7b08 	andeq	r7, sp, r8, lsl #22
     a04:	2b000000 	blcs	a0c <__Stack_Size+0x20c>
     a08:	000007d2 	ldrdeq	r0, [r0], -r2
     a0c:	0d506c01 	ldcleq	12, cr6, [r0, #-4]
     a10:	00680800 	rsbeq	r0, r8, r0, lsl #16
     a14:	9c010000 	stcls	0, cr0, [r1], {-0}
     a18:	00000987 	andeq	r0, r0, r7, lsl #19
     a1c:	00071e2c 	andeq	r1, r7, ip, lsr #28
     a20:	878d0100 	strhi	r0, [sp, r0, lsl #2]
     a24:	02000009 	andeq	r0, r0, #9
     a28:	032d6c91 	teqeq	sp, #37120	; 0x9100
     a2c:	9c000006 	stcls	0, cr0, [r0], {6}
     a30:	0408000d 	streq	r0, [r8], #-13
     a34:	01000000 	mrseq	r0, (UNDEF: 0)
     a38:	0009499c 	muleq	r9, ip, r9
     a3c:	0da02000 	stceq	0, cr2, [r0]
     a40:	0da00800 	stceq	8, cr0, [r0]
     a44:	21000000 	mrscs	r0, (UNDEF: 0)
     a48:	08000d5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, fp}
     a4c:	00000da7 	andeq	r0, r0, r7, lsr #27
     a50:	0000096a 	andeq	r0, r0, sl, ror #18
     a54:	01520122 	cmpeq	r2, r2, lsr #2
     a58:	51012230 	tstpl	r1, r0, lsr r2
     a5c:	01223c01 	teqeq	r2, r1, lsl #24
     a60:	000c0550 	andeq	r0, ip, r0, asr r5
     a64:	00400108 	subeq	r0, r0, r8, lsl #2
     a68:	000d6621 	andeq	r6, sp, r1, lsr #12
     a6c:	000dc308 	andeq	ip, sp, r8, lsl #6
     a70:	00097d00 	andeq	r7, r9, r0, lsl #26
     a74:	50012200 	andpl	r2, r1, r0, lsl #4
     a78:	20003c01 	andcs	r3, r0, r1, lsl #24
     a7c:	08000d82 	stmdaeq	r0, {r1, r7, r8, sl, fp}
     a80:	00000dd9 	ldrdeq	r0, [r0], -r9
     a84:	00800800 	addeq	r0, r0, r0, lsl #16
     a88:	03280000 	teqeq	r8, #0
     a8c:	00000006 	andeq	r0, r0, r6
     a90:	04000000 	streq	r0, [r0], #-0
     a94:	01000000 	mrseq	r0, (UNDEF: 0)
     a98:	0009a99c 	muleq	r9, ip, r9
     a9c:	00002600 	andeq	r2, r0, r0, lsl #12
     aa0:	0da00000 	stceq	0, cr0, [r0]
     aa4:	2b000000 	blcs	aac <__Stack_Size+0x2ac>
     aa8:	00000581 	andeq	r0, r0, r1, lsl #11
     aac:	0db8b301 	ldceq	3, cr11, [r8, #4]!
     ab0:	001c0800 	andseq	r0, ip, r0, lsl #16
     ab4:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab8:	000009ce 	andeq	r0, r0, lr, asr #19
     abc:	0005612e 	andeq	r6, r5, lr, lsr #2
     ac0:	8bb50100 	blhi	fed40ec8 <BootRAM+0xdcb1669>
     ac4:	b5000000 	strlt	r0, [r0, #-0]
     ac8:	00000001 	andeq	r0, r0, r1
     acc:	0004a72b 	andeq	sl, r4, fp, lsr #14
     ad0:	d4be0100 	ldrtle	r0, [lr], #256	; 0x100
     ad4:	1808000d 	stmdane	r8, {r0, r2, r3}
     ad8:	01000000 	mrseq	r0, (UNDEF: 0)
     adc:	0009f69c 	muleq	r9, ip, r6
     ae0:	05612c00 	strbeq	r2, [r1, #-3072]!	; 0xc00
     ae4:	c0010000 	andgt	r0, r1, r0
     ae8:	0000008b 	andeq	r0, r0, fp, lsl #1
     aec:	09007106 	stmdbeq	r0, {r1, r2, r8, ip, sp, lr}
     af0:	009f1afb 			; <UNDEFINED> instruction: 0x009f1afb
     af4:	00047d2b 	andeq	r7, r4, fp, lsr #26
     af8:	eccb0100 	stfe	f0, [fp], {0}
     afc:	8408000d 	strhi	r0, [r8], #-13
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
     b04:	000a3c9c 	muleq	sl, ip, ip
     b08:	08262f00 	stmdaeq	r6!, {r8, r9, sl, fp, sp}
     b0c:	cb010000 	blgt	40b14 <__Stack_Size+0x40314>
     b10:	00000573 	andeq	r0, r0, r3, ror r5
     b14:	000001cc 	andeq	r0, r0, ip, asr #3
     b18:	0005612e 	andeq	r6, r5, lr, lsr #2
     b1c:	8bcd0100 	blhi	ff340f24 <BootRAM+0xe2b16c5>
     b20:	1f000000 	svcne	0x00000000
     b24:	20000002 	andcs	r0, r0, r2
     b28:	08000e0a 	stmdaeq	r0, {r1, r3, r9, sl, fp}
     b2c:	000009ce 	andeq	r0, r0, lr, asr #19
     b30:	000e1020 	andeq	r1, lr, r0, lsr #32
     b34:	0009ce08 	andeq	ip, r9, r8, lsl #28
     b38:	4c300000 	ldcmi	0, cr0, [r0], #-0
     b3c:	01000004 	tsteq	r0, r4
     b40:	000250fc 	strdeq	r5, [r2], -ip
     b44:	000e7000 	andeq	r7, lr, r0
     b48:	00004808 	andeq	r4, r0, r8, lsl #16
     b4c:	739c0100 	orrsvc	r0, ip, #0, 2
     b50:	3100000a 	tstcc	r0, sl
     b54:	08000ea2 	stmdaeq	r0, {r1, r5, r7, r9, sl, fp}
     b58:	00000da7 	andeq	r0, r0, r7, lsr #27
     b5c:	01520122 	cmpeq	r2, r2, lsr #2
     b60:	51012231 	tstpl	r1, r1, lsr r2
     b64:	01223c01 	teqeq	r2, r1, lsl #24
     b68:	000c0550 	andeq	r0, ip, r0, asr r5
     b6c:	00400108 	subeq	r0, r0, r8, lsl #2
     b70:	06e31a00 	strbteq	r1, [r3], r0, lsl #20
     b74:	14010000 	strne	r0, [r1], #-0
     b78:	00025001 	andeq	r5, r2, r1
     b7c:	000eb800 	andeq	fp, lr, r0, lsl #16
     b80:	00003c08 	andeq	r3, r0, r8, lsl #24
     b84:	ac9c0100 	ldfges	f0, [ip], {0}
     b88:	3100000a 	tstcc	r0, sl
     b8c:	08000ed4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sl, fp}
     b90:	00000da7 	andeq	r0, r0, r7, lsr #27
     b94:	02520122 	subseq	r0, r2, #-2147483640	; 0x80000008
     b98:	01220074 	teqeq	r2, r4, ror r0
     b9c:	223c0151 	eorscs	r0, ip, #1073741844	; 0x40000014
     ba0:	0c055001 	stceq	0, cr5, [r5], {1}
     ba4:	40010800 	andmi	r0, r1, r0, lsl #16
     ba8:	672b0000 	strvs	r0, [fp, -r0]!
     bac:	01000005 	tsteq	r0, r5
     bb0:	000ef4a0 	andeq	pc, lr, r0, lsr #9
     bb4:	00000408 	andeq	r0, r0, r8, lsl #8
     bb8:	cb9c0100 	blgt	fe700fc0 <BootRAM+0xd671761>
     bbc:	2600000a 	strcs	r0, [r0], -sl
     bc0:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
     bc4:	00000a73 	andeq	r0, r0, r3, ror sl
     bc8:	04731d00 	ldrbteq	r1, [r3], #-3328	; 0xd00
     bcc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     bd0:	000ef801 	andeq	pc, lr, r1, lsl #16
     bd4:	00002408 	andeq	r2, r0, r8, lsl #8
     bd8:	019c0100 	orrseq	r0, ip, r0, lsl #2
     bdc:	3200000b 	andcc	r0, r0, #11
     be0:	00000401 	andeq	r0, r0, r1, lsl #8
     be4:	2901f201 	stmdbcs	r1, {r0, r9, ip, sp, lr, pc}
     be8:	02000001 	andeq	r0, r0, #1
     bec:	16317491 			; <UNDEFINED> instruction: 0x16317491
     bf0:	e508000f 	str	r0, [r8, #-15]
     bf4:	2200000d 	andcs	r0, r0, #13
     bf8:	7d025001 	stcvc	0, cr5, [r2, #-4]
     bfc:	1d000004 	stcne	0, cr0, [r0, #-16]
     c00:	0000005b 	andeq	r0, r0, fp, asr r0
     c04:	1c012d01 	stcne	13, cr2, [r1], {1}
     c08:	4008000f 	andmi	r0, r8, pc
     c0c:	01000000 	mrseq	r0, (UNDEF: 0)
     c10:	000b339c 	muleq	fp, ip, r3
     c14:	0f222000 	svceq	0x00222000
     c18:	0dfd0800 	ldcleq	8, cr0, [sp]
     c1c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
     c20:	3c08000f 	stccc	0, cr0, [r8], {15}
     c24:	2000000a 	andcs	r0, r0, sl
     c28:	08000f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp}
     c2c:	00000acb 	andeq	r0, r0, fp, asr #21
     c30:	00801d00 	addeq	r1, r0, r0, lsl #26
     c34:	fb010000 	blx	40c3e <__Stack_Size+0x4043e>
     c38:	000f5c01 	andeq	r5, pc, r1, lsl #24
     c3c:	00002208 	andeq	r2, r0, r8, lsl #4
     c40:	699c0100 	ldmibvs	ip, {r8}
     c44:	3200000b 	andcc	r0, r0, #11
     c48:	00000401 	andeq	r0, r0, r1, lsl #8
     c4c:	2901fd01 	stmdbcs	r1, {r0, r8, sl, fp, ip, sp, lr, pc}
     c50:	02000001 	andeq	r0, r0, #1
     c54:	78317491 	ldmdavc	r1!, {r0, r4, r7, sl, ip, sp, lr}
     c58:	e508000f 	str	r0, [r8, #-15]
     c5c:	2200000d 	andcs	r0, r0, #13
     c60:	7d025001 	stcvc	0, cr5, [r2, #-4]
     c64:	33000004 	movwcc	r0, #4
     c68:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c6c:	80020501 	andhi	r0, r2, r1, lsl #10
     c70:	b408000f 	strlt	r0, [r8], #-15
     c74:	01000000 	mrseq	r0, (UNDEF: 0)
     c78:	000bb49c 	muleq	fp, ip, r4
     c7c:	0f9c2000 	svceq	0x009c2000
     c80:	0e040800 	cdpeq	8, 0, cr0, cr4, cr0, {0}
     c84:	d6210000 	strtle	r0, [r1], -r0
     c88:	f608000f 			; <UNDEFINED> instruction: 0xf608000f
     c8c:	9b000009 	blls	cb8 <__Stack_Size+0x4b8>
     c90:	2200000b 	andcs	r0, r0, #11
     c94:	30015001 	andcc	r5, r1, r1
     c98:	0fe42000 	svceq	0x00e42000
     c9c:	09a90800 	stmibeq	r9!, {fp}
     ca0:	1c230000 	stcne	0, cr0, [r3], #-0
     ca4:	f6080010 			; <UNDEFINED> instruction: 0xf6080010
     ca8:	22000009 	andcs	r0, r0, #9
     cac:	37015001 	strcc	r5, [r1, -r1]
     cb0:	43340000 	teqmi	r4, #0
     cb4:	01000005 	tsteq	r0, r5
     cb8:	05af0255 	streq	r0, [pc, #597]!	; f15 <__Stack_Size+0x715>
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	000c0000 	andeq	r0, ip, r0
     cc4:	9c010000 	stcls	0, cr0, [r1], {-0}
     cc8:	00041435 	andeq	r1, r4, r5, lsr r4
     ccc:	d9690100 	stmdble	r9!, {r8}^
     cd0:	0000000b 	andeq	r0, r0, fp
     cd4:	36400210 			; <UNDEFINED> instruction: 0x36400210
     cd8:	00000bde 	ldrdeq	r0, [r0], -lr
     cdc:	01b40404 			; <UNDEFINED> instruction: 0x01b40404
     ce0:	02370000 	eorseq	r0, r7, #0
     ce4:	01000008 	tsteq	r0, r8
     ce8:	0000b02b 	andeq	fp, r0, fp, lsr #32
     cec:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
     cf0:	37200004 	strcc	r0, [r0, -r4]!
     cf4:	000002eb 	andeq	r0, r0, fp, ror #5
     cf8:	04a73301 	strteq	r3, [r7], #769	; 0x301
     cfc:	03050000 	movweq	r0, #20480	; 0x5000
     d00:	20000014 	andcs	r0, r0, r4, lsl r0
     d04:	0021af37 	eoreq	sl, r1, r7, lsr pc
     d08:	2b430100 	blcs	10c1110 <__Stack_Size+0x10c0910>
     d0c:	05000005 	streq	r0, [r0, #-5]
     d10:	00008003 	andeq	r8, r0, r3
     d14:	021a3720 	andseq	r3, sl, #32, 14	; 0x800000
     d18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     d1c:	000002dd 	ldrdeq	r0, [r0], -sp
     d20:	00a40305 	adceq	r0, r4, r5, lsl #6
     d24:	e8382000 	ldmda	r8!, {sp}
     d28:	07000001 	streq	r0, [r0, -r1]
     d2c:	000c3322 	andeq	r3, ip, r2, lsr #6
     d30:	c4040400 	strgt	r0, [r4], #-1024	; 0x400
     d34:	38000003 	stmdacc	r0, {r0, r1}
     d38:	0000013e 	andeq	r0, r0, lr, lsr r1
     d3c:	0c442507 	cfstr64eq	mvdx2, [r4], {7}
     d40:	04040000 	streq	r0, [r4], #-0
     d44:	000004a7 	andeq	r0, r0, r7, lsr #9
     d48:	00051d38 	andeq	r1, r5, r8, lsr sp
     d4c:	8b2d0700 	blhi	b42954 <__Stack_Size+0xb42154>
     d50:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d54:	00000a27 	andeq	r0, r0, r7, lsr #20
     d58:	020f2308 	andeq	r2, pc, #8, 6	; 0x20000000
     d5c:	44380000 	ldrtmi	r0, [r8], #-0
     d60:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d64:	00020f24 	andeq	r0, r2, r4, lsr #30
     d68:	020f3900 	andeq	r3, pc, #0, 18
     d6c:	0c7b0000 	ldcleq	0, cr0, [fp], #-0
     d70:	6b3a0000 	blvs	e80d78 <__Stack_Size+0xe80578>
     d74:	06000000 	streq	r0, [r0], -r0
     d78:	03d73800 	bicseq	r3, r7, #0, 16
     d7c:	25080000 	strcs	r0, [r8, #-0]
     d80:	00000c6b 	andeq	r0, r0, fp, ror #24
     d84:	0007a838 	andeq	sl, r7, r8, lsr r8
     d88:	0f260800 	svceq	0x00260800
     d8c:	37000002 	strcc	r0, [r0, -r2]
     d90:	000000b1 	strheq	r0, [r0], -r1
     d94:	002c2c06 	eoreq	r2, ip, r6, lsl #24
     d98:	03050000 	movweq	r0, #20480	; 0x5000
     d9c:	20000488 	andcs	r0, r0, r8, lsl #9
     da0:	00009639 	andeq	r9, r0, r9, lsr r6
     da4:	000cad00 	andeq	sl, ip, r0, lsl #26
     da8:	38003b00 	stmdacc	r0, {r8, r9, fp, ip, sp}
     dac:	00000041 	andeq	r0, r0, r1, asr #32
     db0:	0ca22501 	cfstr32eq	mvfx2, [r2], #4
     db4:	a5380000 	ldrge	r0, [r8, #-0]!
     db8:	01000007 	tsteq	r0, r7
     dbc:	000ca226 	andeq	sl, ip, r6, lsr #4
     dc0:	02fb3700 	rscseq	r3, fp, #0, 14
     dc4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
     dc8:	000000a0 	andeq	r0, r0, r0, lsr #1
     dcc:	05b80305 	ldreq	r0, [r8, #773]!	; 0x305
     dd0:	d7372000 	ldrle	r2, [r7, -r0]!
     dd4:	01000006 	tsteq	r0, r6
     dd8:	0000c02c 	andeq	ip, r0, ip, lsr #32
     ddc:	b4030500 	strlt	r0, [r3], #-1280	; 0x500
     de0:	39200005 	stmdbcc	r0!, {r0, r2}
     de4:	00000072 	andeq	r0, r0, r2, ror r0
     de8:	00000cf5 	strdeq	r0, [r0], -r5
     dec:	00006b3a 	andeq	r6, r0, sl, lsr fp
     df0:	37000600 	strcc	r0, [r0, -r0, lsl #12]
     df4:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     df8:	0ce54f01 	stcleq	15, cr4, [r5], #4
     dfc:	03050000 	movweq	r0, #20480	; 0x5000
     e00:	20000048 	andcs	r0, r0, r8, asr #32
     e04:	00096537 	andeq	r6, r9, r7, lsr r5
     e08:	e5590100 	ldrb	r0, [r9, #-256]	; 0x100
     e0c:	0500000c 	streq	r0, [r0, #-12]
     e10:	00006403 	andeq	r6, r0, r3, lsl #8
     e14:	07163720 	ldreq	r3, [r6, -r0, lsr #14]
     e18:	66010000 	strvs	r0, [r1], -r0
     e1c:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
     e20:	048e0305 	streq	r0, [lr], #773	; 0x305
     e24:	3b3c2000 	blcc	f08e2c <__Stack_Size+0xf0862c>
     e28:	09000008 	stmdbeq	r0, {r3}
     e2c:	07943d6e 	ldreq	r3, [r4, lr, ror #26]
     e30:	460a0000 	strmi	r0, [sl], -r0
     e34:	000d4102 	andeq	r4, sp, r2, lsl #2
     e38:	00961100 	addseq	r1, r6, r0, lsl #2
     e3c:	3d000000 	stccc	0, cr0, [r0, #-0]
     e40:	0000099c 	muleq	r0, ip, r9
     e44:	5802570a 	stmdapl	r2, {r1, r3, r8, r9, sl, ip, lr}
     e48:	1100000d 	tstne	r0, sp
     e4c:	00000096 	muleq	r0, r6, r0
     e50:	00008b11 	andeq	r8, r0, r1, lsl fp
     e54:	7f3d0000 	svcvc	0x003d0000
     e58:	0a000003 	beq	e6c <__Stack_Size+0x66c>
     e5c:	0d6a0240 	sfmeq	f0, 2, [sl, #-256]!	; 0xffffff00
     e60:	96110000 	ldrls	r0, [r1], -r0
     e64:	00000000 	andeq	r0, r0, r0
     e68:	0002b23e 	andeq	fp, r2, lr, lsr r2
     e6c:	7be90400 	blvc	ffa41e74 <BootRAM+0xe9b2615>
     e70:	1100000d 	tstne	r0, sp
     e74:	00000096 	muleq	r0, r6, r0
     e78:	04873f00 	streq	r3, [r7], #3840	; 0xf00
     e7c:	6d090000 	stcvs	0, cr0, [r9, #-0]
     e80:	000000e5 	andeq	r0, r0, r5, ror #1
     e84:	00026440 	andeq	r6, r2, r0, asr #8
     e88:	09e50400 	stmibeq	r5!, {sl}^
     e8c:	a0000002 	andge	r0, r0, r2
     e90:	1100000d 	tstne	r0, sp
     e94:	0000008b 	andeq	r0, r0, fp, lsl #1
     e98:	00021a11 	andeq	r1, r2, r1, lsl sl
     e9c:	923c0000 	eorsls	r0, ip, #0
     ea0:	07000002 	streq	r0, [r0, -r2]
     ea4:	07db3d19 	bfieq	r3, r9, #26, #2
     ea8:	24030000 	strcs	r0, [r3], #-0
     eac:	000dc301 	andeq	ip, sp, r1, lsl #6
     eb0:	00801100 	addeq	r1, r0, r0, lsl #2
     eb4:	96110000 	ldrls	r0, [r1], -r0
     eb8:	11000000 	mrsne	r0, (UNDEF: 0)
     ebc:	00000096 	muleq	r0, r6, r0
     ec0:	027f4100 	rsbseq	r4, pc, #0, 2
     ec4:	25030000 	strcs	r0, [r3, #-0]
     ec8:	00002501 	andeq	r2, r0, r1, lsl #10
     ecc:	000dd900 	andeq	sp, sp, r0, lsl #18
     ed0:	002c1100 	eoreq	r1, ip, r0, lsl #2
     ed4:	42000000 	andmi	r0, r0, #0
     ed8:	0000035f 	andeq	r0, r0, pc, asr r3
     edc:	2c013c03 	stccs	12, cr3, [r1], {3}
     ee0:	3d000000 	stccc	0, cr0, [r0, #-0]
     ee4:	000009e1 	andeq	r0, r0, r1, ror #19
     ee8:	f7013803 			; <UNDEFINED> instruction: 0xf7013803
     eec:	1100000d 	tstne	r0, sp
     ef0:	00000df7 	strdeq	r0, [r0], -r7
     ef4:	29040400 	stmdbcs	r4, {sl}
     ef8:	3c000001 	stccc	0, cr0, [r0], {1}
     efc:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
     f00:	343c6a09 	ldrtcc	r6, [ip], #-2569	; 0xa09
     f04:	0b000008 	bleq	f2c <__Stack_Size+0x72c>
     f08:	0259001a 	subseq	r0, r9, #26
     f0c:	00040000 	andeq	r0, r4, r0
     f10:	0000040b 	andeq	r0, r0, fp, lsl #8
     f14:	06390104 	ldrteq	r0, [r9], -r4, lsl #2
     f18:	9a010000 	bls	40f20 <__Stack_Size+0x40720>
     f1c:	9300000a 	movwls	r0, #10
     f20:	c6000008 	strgt	r0, [r0], -r8
     f24:	02000004 	andeq	r0, r0, #4
     f28:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     f2c:	04030074 	streq	r0, [r3], #-116	; 0x74
     f30:	00025707 	andeq	r5, r2, r7, lsl #14
     f34:	06010300 	streq	r0, [r1], -r0, lsl #6
     f38:	0000081a 	andeq	r0, r0, sl, lsl r8
     f3c:	18080103 	stmdane	r8, {r0, r1, r8}
     f40:	03000008 	movweq	r0, #8
     f44:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
     f48:	02030000 	andeq	r0, r3, #0
     f4c:	00094907 	andeq	r4, r9, r7, lsl #18
     f50:	05040300 	streq	r0, [r4, #-768]	; 0x300
     f54:	000004da 	ldrdeq	r0, [r0], -sl
     f58:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
     f5c:	03000002 	movweq	r0, #2
     f60:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
     f64:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     f68:	00024d07 	andeq	r4, r2, r7, lsl #26
     f6c:	07040300 	streq	r0, [r4, -r0, lsl #6]
     f70:	0000078b 	andeq	r0, r0, fp, lsl #15
     f74:	21080103 	tstcs	r8, r3, lsl #2
     f78:	04000008 	streq	r0, [r0], #-8
     f7c:	00363175 	eorseq	r3, r6, r5, ror r1
     f80:	00402801 	subeq	r2, r0, r1, lsl #16
     f84:	75040000 	strvc	r0, [r4, #-0]
     f88:	29010038 	stmdbcs	r1, {r3, r4, r5}
     f8c:	00000032 	andeq	r0, r0, r2, lsr r0
     f90:	00003305 	andeq	r3, r0, r5, lsl #6
     f94:	24020800 	strcs	r0, [r2], #-2048	; 0x800
     f98:	000000ab 	andeq	r0, r0, fp, lsr #1
     f9c:	0002e006 	andeq	lr, r2, r6
     fa0:	ab260200 	blge	9817a8 <__Stack_Size+0x980fa8>
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	0003f106 	andeq	pc, r3, r6, lsl #2
     fac:	71270200 	teqvc	r7, r0, lsl #4
     fb0:	04000000 	streq	r0, [r0], #-0
     fb4:	7c040700 	stcvc	7, cr0, [r4], {-0}
     fb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     fbc:	00000572 	andeq	r0, r0, r2, ror r5
     fc0:	00862902 	addeq	r2, r6, r2, lsl #18
     fc4:	b1090000 	mrslt	r0, (UNDEF: 9)
     fc8:	03000000 	movweq	r0, #0
     fcc:	00001d2c 	andeq	r1, r0, ip, lsr #26
     fd0:	88030500 	stmdahi	r3, {r8, sl}
     fd4:	09200004 	stmdbeq	r0!, {r2}
     fd8:	00000a27 	andeq	r0, r0, r7, lsr #20
     fdc:	00b13d04 	adcseq	r3, r1, r4, lsl #26
     fe0:	03050000 	movweq	r0, #20480	; 0x5000
     fe4:	20000158 	andcs	r0, r0, r8, asr r1
     fe8:	00004409 	andeq	r4, r0, r9, lsl #8
     fec:	b1970400 	orrslt	r0, r7, r0, lsl #8
     ff0:	05000000 	streq	r0, [r0, #-0]
     ff4:	0002b403 	andeq	fp, r2, r3, lsl #8
     ff8:	00b10a20 	adcseq	r0, r1, r0, lsr #20
     ffc:	00ff0000 	rscseq	r0, pc, r0
    1000:	630b0000 	movwvs	r0, #45056	; 0xb000
    1004:	06000000 	streq	r0, [r0], -r0
    1008:	03d70900 	bicseq	r0, r7, #0, 18
    100c:	cc040000 	stcgt	0, cr0, [r4], {-0}
    1010:	000000ef 	andeq	r0, r0, pc, ror #1
    1014:	00a80305 	adceq	r0, r8, r5, lsl #6
    1018:	a8092000 	stmdage	r9, {sp}
    101c:	04000007 	streq	r0, [r0], #-7
    1020:	0000b14f 	andeq	fp, r0, pc, asr #2
    1024:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
    1028:	0a200000 	beq	801030 <__Stack_Size+0x800830>
    102c:	0000007c 	andeq	r0, r0, ip, ror r0
    1030:	00000131 	andeq	r0, r0, r1, lsr r1
    1034:	0000630b 	andeq	r6, r0, fp, lsl #6
    1038:	09001100 	stmdbeq	r0, {r8, ip}
    103c:	00000a24 	andeq	r0, r0, r4, lsr #20
    1040:	01212604 	teqeq	r1, r4, lsl #12
    1044:	03050000 	movweq	r0, #20480	; 0x5000
    1048:	200000e0 	andcs	r0, r0, r0, ror #1
    104c:	00007c0a 	andeq	r7, r0, sl, lsl #24
    1050:	00015200 	andeq	r5, r1, r0, lsl #4
    1054:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    1058:	00080000 	andeq	r0, r8, r0
    105c:	0007a509 	andeq	sl, r7, r9, lsl #10
    1060:	42420400 	submi	r0, r2, #0, 8
    1064:	05000001 	streq	r0, [r0, #-1]
    1068:	00013d03 	andeq	r3, r1, r3, lsl #26
    106c:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    1070:	01730000 	cmneq	r3, r0
    1074:	630b0000 	movwvs	r0, #45056	; 0xb000
    1078:	2c000000 	stccs	0, cr0, [r0], {-0}
    107c:	00410900 	subeq	r0, r1, r0, lsl #18
    1080:	55040000 	strpl	r0, [r4, #-0]
    1084:	00000163 	andeq	r0, r0, r3, ror #2
    1088:	01000305 	tsteq	r0, r5, lsl #6
    108c:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1090:	94000000 	strls	r0, [r0], #-0
    1094:	0b000001 	bleq	10a0 <__Stack_Size+0x8a0>
    1098:	00000063 	andeq	r0, r0, r3, rrx
    109c:	87090003 	strhi	r0, [r9, -r3]
    10a0:	0400000a 	streq	r0, [r0], #-10
    10a4:	0001849d 	muleq	r1, sp, r4
    10a8:	fc030500 	stc2	5, cr0, [r3], {-0}
    10ac:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    10b0:	000009ea 	andeq	r0, r0, sl, ror #19
    10b4:	0121a404 	teqeq	r1, r4, lsl #8
    10b8:	03050000 	movweq	r0, #20480	; 0x5000
    10bc:	20000146 	andcs	r0, r0, r6, asr #2
    10c0:	00007c0a 	andeq	r7, r0, sl, lsl #24
    10c4:	0001c600 	andeq	ip, r1, r0, lsl #12
    10c8:	00630b00 	rsbeq	r0, r3, r0, lsl #22
    10cc:	00130000 	andseq	r0, r3, r0
    10d0:	000a7309 	andeq	r7, sl, r9, lsl #6
    10d4:	b6aa0400 	strtlt	r0, [sl], r0, lsl #8
    10d8:	05000001 	streq	r0, [r0, #-1]
    10dc:	00016003 	andeq	r6, r1, r3
    10e0:	007c0a20 	rsbseq	r0, ip, r0, lsr #20
    10e4:	01e70000 	mvneq	r0, r0
    10e8:	630b0000 	movwvs	r0, #45056	; 0xb000
    10ec:	0f000000 	svceq	0x00000000
    10f0:	0a4f0900 	beq	13c34f8 <__Stack_Size+0x13c2cf8>
    10f4:	b0040000 	andlt	r0, r4, r0
    10f8:	000001d7 	ldrdeq	r0, [r0], -r7
    10fc:	012d0305 	teqeq	sp, r5, lsl #6
    1100:	7c0a2000 	stcvc	0, cr2, [sl], {-0}
    1104:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1108:	0b000002 	bleq	1118 <__Stack_Size+0x918>
    110c:	00000063 	andeq	r0, r0, r3, rrx
    1110:	62090077 	andvs	r0, r9, #119	; 0x77
    1114:	0400000a 	streq	r0, [r0], #-10
    1118:	0001f8b6 			; <UNDEFINED> instruction: 0x0001f8b6
    111c:	74030500 	strvc	r0, [r3], #-1280	; 0x500
    1120:	0a200001 	beq	80112c <__Stack_Size+0x80092c>
    1124:	0000007c 	andeq	r0, r0, ip, ror r0
    1128:	00000229 	andeq	r0, r0, r9, lsr #4
    112c:	0000630b 	andeq	r6, r0, fp, lsl #6
    1130:	09006300 	stmdbeq	r0, {r8, r9, sp, lr}
    1134:	00000a13 	andeq	r0, r0, r3, lsl sl
    1138:	0219bd04 	andseq	fp, r9, #4, 26	; 0x100
    113c:	03050000 	movweq	r0, #20480	; 0x5000
    1140:	200001ec 	andcs	r0, r0, ip, ror #3
    1144:	000a3e09 	andeq	r3, sl, r9, lsl #28
    1148:	19c40400 	stmibne	r4, {sl}^
    114c:	05000002 	streq	r0, [r0, #-2]
    1150:	00025003 	andeq	r5, r2, r3
    1154:	09fd0920 	ldmibeq	sp!, {r5, r8, fp}^
    1158:	ca040000 	bgt	101160 <__Stack_Size+0x100960>
    115c:	0000007c 	andeq	r0, r0, ip, ror r0
    1160:	00000305 	andeq	r0, r0, r5, lsl #6
    1164:	a6000000 	strge	r0, [r0], -r0
    1168:	0400000b 	streq	r0, [r0], #-11
    116c:	00049500 	andeq	r9, r4, r0, lsl #10
    1170:	39010400 	stmdbcc	r1, {sl}
    1174:	01000006 	tsteq	r0, r6
    1178:	00000d48 	andeq	r0, r0, r8, asr #26
    117c:	00000893 	muleq	r0, r3, r8
    1180:	00000130 	andeq	r0, r0, r0, lsr r1
    1184:	00000000 	andeq	r0, r0, r0
    1188:	00000538 	andeq	r0, r0, r8, lsr r5
    118c:	000b1f02 	andeq	r1, fp, r2, lsl #30
    1190:	30d40200 	sbcscc	r0, r4, r0, lsl #4
    1194:	03000000 	movweq	r0, #0
    1198:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    119c:	04040000 	streq	r0, [r4], #-0
    11a0:	69050405 	stmdbvs	r5, {r0, r2, sl}
    11a4:	0300746e 	movweq	r7, #1134	; 0x46e
    11a8:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    11ac:	36020000 	strcc	r0, [r2], -r0
    11b0:	0300000c 	movweq	r0, #12
    11b4:	0000521c 	andeq	r5, r0, ip, lsl r2
    11b8:	08010300 	stmdaeq	r1, {r8, r9}
    11bc:	00000818 	andeq	r0, r0, r8, lsl r8
    11c0:	fc050203 	stc2	2, cr0, [r5], {3}
    11c4:	02000006 	andeq	r0, r0, #6
    11c8:	00000b67 	andeq	r0, r0, r7, ror #22
    11cc:	006b2603 	rsbeq	r2, fp, r3, lsl #12
    11d0:	02030000 	andeq	r0, r3, #0
    11d4:	00094907 	andeq	r4, r9, r7, lsl #18
    11d8:	05040300 	streq	r0, [r4, #-768]	; 0x300
    11dc:	000004da 	ldrdeq	r0, [r0], -sl
    11e0:	000b4e02 	andeq	r4, fp, r2, lsl #28
    11e4:	84380300 	ldrthi	r0, [r8], #-768	; 0x300
    11e8:	03000000 	movweq	r0, #0
    11ec:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    11f0:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    11f4:	0004d505 	andeq	sp, r4, r5, lsl #10
    11f8:	07080300 	streq	r0, [r8, -r0, lsl #6]
    11fc:	0000024d 	andeq	r0, r0, sp, asr #4
    1200:	8b070403 	blhi	1c2214 <__Stack_Size+0x1c1a14>
    1204:	06000007 	streq	r0, [r0], -r7
    1208:	00005204 	andeq	r5, r0, r4, lsl #4
    120c:	ac040600 	stcge	6, cr0, [r4], {-0}
    1210:	03000000 	movweq	r0, #0
    1214:	08210801 	stmdaeq	r1!, {r0, fp}
    1218:	04060000 	streq	r0, [r6], #-0
    121c:	000000b9 	strheq	r0, [r0], -r9
    1220:	0000ac07 	andeq	sl, r0, r7, lsl #24
    1224:	0c380200 	lfmeq	f0, 4, [r8], #-0
    1228:	2a040000 	bcs	101230 <__Stack_Size+0x100a30>
    122c:	00000047 	andeq	r0, r0, r7, asr #32
    1230:	000b6902 	andeq	r6, fp, r2, lsl #18
    1234:	60360400 	eorsvs	r0, r6, r0, lsl #8
    1238:	02000000 	andeq	r0, r0, #0
    123c:	00000b50 	andeq	r0, r0, r0, asr fp
    1240:	00794204 	rsbseq	r4, r9, r4, lsl #4
    1244:	75080000 	strvc	r0, [r8, #-0]
    1248:	05003233 	streq	r3, [r0, #-563]	; 0x233
    124c:	00008427 	andeq	r8, r0, r7, lsr #8
    1250:	38750800 	ldmdacc	r5!, {fp}^
    1254:	52290500 	eorpl	r0, r9, #0, 10
    1258:	02000000 	andeq	r0, r0, #0
    125c:	0000035a 	andeq	r0, r0, sl, asr r3
    1260:	00ff2f05 	rscseq	r2, pc, r5, lsl #30
    1264:	84090000 	strhi	r0, [r9], #-0
    1268:	0a000000 	beq	1270 <__Stack_Size+0xa70>
    126c:	19370501 	ldmdbne	r7!, {r0, r8, sl}
    1270:	0b000001 	bleq	127c <__Stack_Size+0xa7c>
    1274:	00000753 	andeq	r0, r0, r3, asr r7
    1278:	01a70b00 			; <UNDEFINED> instruction: 0x01a70b00
    127c:	00010000 	andeq	r0, r1, r0
    1280:	00052d02 	andeq	r2, r5, r2, lsl #26
    1284:	04370500 	ldrteq	r0, [r7], #-1280	; 0x500
    1288:	0c000001 	stceq	0, cr0, [r0], {1}
    128c:	00000d4f 	andeq	r0, r0, pc, asr #26
    1290:	0115060c 	tsteq	r5, ip, lsl #12
    1294:	00000166 	andeq	r0, r0, r6, ror #2
    1298:	000c310d 	andeq	r3, ip, sp, lsl #2
    129c:	01160600 	tsteq	r6, r0, lsl #12
    12a0:	000000c9 	andeq	r0, r0, r9, asr #1
    12a4:	0ae30d00 	beq	ff8c46ac <BootRAM+0xe834e4d>
    12a8:	17060000 	strne	r0, [r6, -r0]
    12ac:	0000c901 	andeq	ip, r0, r1, lsl #18
    12b0:	fb0d0200 	blx	341aba <__Stack_Size+0x3412ba>
    12b4:	0600000a 	streq	r0, [r0], -sl
    12b8:	00d40118 	sbcseq	r0, r4, r8, lsl r1
    12bc:	0d040000 	stceq	0, cr0, [r4, #-0]
    12c0:	00000b11 	andeq	r0, r0, r1, lsl fp
    12c4:	d4011906 	strle	r1, [r1], #-2310	; 0x906
    12c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    12cc:	0ae80e00 	beq	ffa04ad4 <BootRAM+0xe975275>
    12d0:	07140000 	ldreq	r0, [r4, -r0]
    12d4:	0001bb0d 	andeq	fp, r1, sp, lsl #22
    12d8:	0c4b0f00 	mcrreq	15, 0, r0, fp, cr0
    12dc:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
    12e0:	000000d4 	ldrdeq	r0, [r0], -r4
    12e4:	0df70f00 	ldcleq	15, cr0, [r7]
    12e8:	10070000 	andne	r0, r7, r0
    12ec:	000000d4 	ldrdeq	r0, [r0], -r4
    12f0:	0ce00f04 	stcleq	15, cr0, [r0], #16
    12f4:	11070000 	mrsne	r0, (UNDEF: 7)
    12f8:	000000d4 	ldrdeq	r0, [r0], -r4
    12fc:	0de00f08 	stcleq	15, cr0, [r0, #32]!
    1300:	13070000 	movwne	r0, #28672	; 0x7000
    1304:	000000d4 	ldrdeq	r0, [r0], -r4
    1308:	0d2a0f0c 	stceq	15, cr0, [sl, #-48]!	; 0xffffffd0
    130c:	14070000 	strne	r0, [r7], #-0
    1310:	000000d4 	ldrdeq	r0, [r0], -r4
    1314:	0be20f10 	bleq	ff884f5c <BootRAM+0xe7f56fd>
    1318:	15070000 	strne	r0, [r7, #-0]
    131c:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    1320:	be100014 	mrclt	0, 0, r0, cr0, cr4, {0}
    1324:	ca000000 	bgt	132c <__Stack_Size+0xb2c>
    1328:	11000001 	tstne	r0, r1
    132c:	00000099 	muleq	r0, r9, r0
    1330:	0ae90200 	beq	ffa41b38 <BootRAM+0xe9b22d9>
    1334:	16070000 	strne	r0, [r7], -r0
    1338:	00000166 	andeq	r0, r0, r6, ror #2
    133c:	000c670e 	andeq	r6, ip, lr, lsl #14
    1340:	18071400 	stmdane	r7, {sl, ip}
    1344:	0000021e 	andeq	r0, r0, lr, lsl r2
    1348:	000d540f 	andeq	r5, sp, pc, lsl #8
    134c:	1e190700 	cdpne	7, 1, cr0, cr9, cr0, {0}
    1350:	00000002 	andeq	r0, r0, r2
    1354:	000cc80f 	andeq	ip, ip, pc, lsl #16
    1358:	d41a0700 	ldrle	r0, [sl], #-1792	; 0x700
    135c:	04000000 	streq	r0, [r0], #-0
    1360:	000d070f 	andeq	r0, sp, pc, lsl #14
    1364:	25200700 	strcs	r0, [r0, #-1792]!	; 0x700
    1368:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    136c:	000c940f 	andeq	r9, ip, pc, lsl #8
    1370:	39220700 	stmdbcc	r2!, {r8, r9, sl}
    1374:	0c000000 	stceq	0, cr0, [r0], {-0}
    1378:	000def0f 	andeq	lr, sp, pc, lsl #30
    137c:	39230700 	stmdbcc	r3!, {r8, r9, sl}
    1380:	10000000 	andne	r0, r0, r0
    1384:	ca040600 	bgt	102b8c <__Stack_Size+0x10238c>
    1388:	02000001 	andeq	r0, r0, #1
    138c:	00000bf3 	strdeq	r0, [r0], -r3
    1390:	022f2707 	eoreq	r2, pc, #1835008	; 0x1c0000
    1394:	04060000 	streq	r0, [r6], #-0
    1398:	000001d5 	ldrdeq	r0, [r0], -r5
    139c:	0c086812 	stceq	8, cr6, [r8], {18}
    13a0:	00000262 	andeq	r0, r0, r2, ror #4
    13a4:	001a8a0f 	andseq	r8, sl, pc, lsl #20
    13a8:	620e0800 	andvs	r0, lr, #0, 16
    13ac:	00000002 	andeq	r0, r0, r2
    13b0:	0019500f 	andseq	r5, r9, pc
    13b4:	720f0800 	andvc	r0, pc, #0, 16
    13b8:	08000002 	stmdaeq	r0, {r1}
    13bc:	00046c0f 	andeq	r6, r4, pc, lsl #24
    13c0:	82100800 	andshi	r0, r0, #0, 16
    13c4:	28000002 	stmdacs	r0, {r1}
    13c8:	00841000 	addeq	r1, r4, r0
    13cc:	02720000 	rsbseq	r0, r2, #0
    13d0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00841000 	addeq	r1, r4, r0
    13dc:	02820000 	addeq	r0, r2, #0
    13e0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13e4:	07000000 	streq	r0, [r0, -r0]
    13e8:	00521000 	subseq	r1, r2, r0
    13ec:	02920000 	addseq	r0, r2, #0
    13f0:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    13f4:	3f000000 	svccc	0x00000000
    13f8:	0cef0200 	sfmeq	f0, 2, [pc]	; 1400 <__Stack_Size+0xc00>
    13fc:	12080000 	andne	r0, r8, #0
    1400:	00000235 	andeq	r0, r0, r5, lsr r2
    1404:	0c09010a 	stfeqs	f0, [r9], {10}
    1408:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    140c:	000aca0b 	andeq	ip, sl, fp, lsl #20
    1410:	050b0000 	streq	r0, [fp, #-0]
    1414:	0100000c 	tsteq	r0, ip
    1418:	000adc0b 	andeq	sp, sl, fp, lsl #24
    141c:	02000200 	andeq	r0, r0, #0, 4
    1420:	00000d18 	andeq	r0, r0, r8, lsl sp
    1424:	029d0e09 	addseq	r0, sp, #9, 28	; 0x90
    1428:	08120000 	ldmdaeq	r2, {}	; <UNPREDICTABLE>
    142c:	02f01009 	rscseq	r1, r0, #9
    1430:	db0f0000 	blle	3c1438 <__Stack_Size+0x3c0c38>
    1434:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1438:	0002b812 	andeq	fp, r2, r2, lsl r8
    143c:	c30f0000 	movwgt	r0, #61440	; 0xf000
    1440:	0900000a 	stmdbeq	r0, {r1, r3}
    1444:	0000ac13 	andeq	sl, r0, r3, lsl ip
    1448:	060f0100 	streq	r0, [pc], -r0, lsl #2
    144c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1450:	00003914 	andeq	r3, r0, r4, lsl r9
    1454:	02000400 	andeq	r0, r0, #0, 8
    1458:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    145c:	02c31509 	sbceq	r1, r3, #37748736	; 0x2400000
    1460:	010a0000 	mrseq	r0, (UNDEF: 10)
    1464:	031c0c0a 	tsteq	ip, #2560	; 0xa00
    1468:	590b0000 	stmdbpl	fp, {}	; <UNPREDICTABLE>
    146c:	0000000b 	andeq	r0, r0, fp
    1470:	000b600b 	andeq	r6, fp, fp
    1474:	110b0100 	mrsne	r0, (UNDEF: 27)
    1478:	0200000d 	andeq	r0, r0, #13
    147c:	000b720b 	andeq	r7, fp, fp, lsl #4
    1480:	02000300 	andeq	r0, r0, #0, 6
    1484:	00000dce 	andeq	r0, r0, lr, asr #27
    1488:	02fb0e0a 	rscseq	r0, fp, #10, 28	; 0xa0
    148c:	02120000 	andseq	r0, r2, #0
    1490:	0348100a 	movteq	r1, #32778	; 0x800a
    1494:	db0f0000 	blle	3c149c <__Stack_Size+0x3c0c9c>
    1498:	0a00000d 	beq	14d4 <__Stack_Size+0xcd4>
    149c:	00031c12 	andeq	r1, r3, r2, lsl ip
    14a0:	870f0000 	strhi	r0, [pc, -r0]
    14a4:	0a00000b 	beq	14d8 <__Stack_Size+0xcd8>
    14a8:	0000ac13 	andeq	sl, r0, r3, lsl ip
    14ac:	02000100 	andeq	r0, r0, #0, 2
    14b0:	00000b9d 	muleq	r0, sp, fp
    14b4:	0327140a 	teqeq	r7, #167772160	; 0xa000000
    14b8:	40140000 	andsmi	r0, r4, r0
    14bc:	0100000c 	tsteq	r0, ip
    14c0:	00002532 	andeq	r2, r0, r2, lsr r5
    14c4:	00000000 	andeq	r0, r0, r0
    14c8:	00002600 	andeq	r2, r0, r0, lsl #12
    14cc:	e89c0100 	ldm	ip, {r8}
    14d0:	15000003 	strne	r0, [r0, #-3]
    14d4:	00000b26 	andeq	r0, r0, r6, lsr #22
    14d8:	00b33201 	adcseq	r3, r3, r1, lsl #4
    14dc:	02460000 	subeq	r0, r6, #0
    14e0:	c7150000 	ldrgt	r0, [r5, -r0]
    14e4:	0100000d 	tsteq	r0, sp
    14e8:	0000a632 	andeq	sl, r0, r2, lsr r6
    14ec:	00026400 	andeq	r6, r2, r0, lsl #8
    14f0:	00731600 	rsbseq	r1, r3, r0, lsl #12
    14f4:	03483401 	movteq	r3, #33793	; 0x8401
    14f8:	91020000 	mrsls	r0, (UNDEF: 2)
    14fc:	6e63166c 	cdpvs	6, 6, cr1, cr3, cr12, {3}
    1500:	35010074 	strcc	r0, [r1, #-116]	; 0x74
    1504:	00000025 	andeq	r0, r0, r5, lsr #32
    1508:	00175001 	andseq	r5, r7, r1
    150c:	47000000 	strmi	r0, [r0, -r0]
    1510:	b7000009 	strlt	r0, [r0, -r9]
    1514:	18000003 	stmdane	r0, {r0, r1}
    1518:	7d025001 	stcvc	0, cr5, [r2, #-4]
    151c:	00170004 	andseq	r0, r7, r4
    1520:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    1524:	cb000009 	blgt	1550 <__Stack_Size+0xd50>
    1528:	18000003 	stmdane	r0, {r0, r1}
    152c:	75025001 	strvc	r5, [r2, #-1]
    1530:	00190000 	andseq	r0, r9, r0
    1534:	73000000 	movwvc	r0, #0
    1538:	18000009 	stmdane	r0, {r0, r3}
    153c:	7d025301 	stcvc	3, cr5, [r2, #-4]
    1540:	52011804 	andpl	r1, r1, #4, 16	; 0x40000
    1544:	18007402 	stmdane	r0, {r1, sl, ip, sp, lr}
    1548:	75025001 	strvc	r5, [r2, #-1]
    154c:	14000000 	strne	r0, [r0], #-0
    1550:	00000b43 	andeq	r0, r0, r3, asr #22
    1554:	00253e01 	eoreq	r3, r5, r1, lsl #28
    1558:	10340000 	eorsne	r0, r4, r0
    155c:	002e0800 	eoreq	r0, lr, r0, lsl #16
    1560:	9c010000 	stcls	0, cr0, [r1], {-0}
    1564:	0000049d 	muleq	r0, sp, r4
    1568:	000b2615 	andeq	r2, fp, r5, lsl r6
    156c:	b33e0100 	teqlt	lr, #0, 2
    1570:	82000000 	andhi	r0, r0, #0
    1574:	15000002 	strne	r0, [r0, #-2]
    1578:	00000dc7 	andeq	r0, r0, r7, asr #27
    157c:	00a63e01 	adceq	r3, r6, r1, lsl #28
    1580:	02ae0000 	adceq	r0, lr, #0
    1584:	5d150000 	ldcpl	0, cr0, [r5, #-0]
    1588:	0100000c 	tsteq	r0, ip
    158c:	0000393e 	andeq	r3, r0, lr, lsr r9
    1590:	0002cc00 	andeq	ip, r2, r0, lsl #24
    1594:	00731600 	rsbseq	r1, r3, r0, lsl #12
    1598:	02f04001 	rscseq	r4, r0, #1
    159c:	91020000 	mrsls	r0, (UNDEF: 2)
    15a0:	6e631a68 	vnmulvs.f32	s3, s6, s17
    15a4:	41010074 	tstmi	r1, r4, ror r0
    15a8:	00000025 	andeq	r0, r0, r5, lsr #32
    15ac:	000002ea 	andeq	r0, r0, sl, ror #5
    15b0:	00104217 	andseq	r4, r0, r7, lsl r2
    15b4:	00099c08 	andeq	r9, r9, r8, lsl #24
    15b8:	00045d00 	andeq	r5, r4, r0, lsl #26
    15bc:	50011800 	andpl	r1, r1, r0, lsl #16
    15c0:	00007d02 	andeq	r7, r0, r2, lsl #26
    15c4:	00104e17 	andseq	r4, r0, r7, lsl lr
    15c8:	0009b308 	andeq	fp, r9, r8, lsl #6
    15cc:	00048300 	andeq	r8, r4, r0, lsl #6
    15d0:	53011800 	movwpl	r1, #6144	; 0x1800
    15d4:	18007d02 	stmdane	r0, {r1, r8, sl, fp, ip, sp, lr}
    15d8:	74025201 	strvc	r5, [r2], #-513	; 0x201
    15dc:	51011800 	tstpl	r1, r0, lsl #16
    15e0:	18007602 	stmdane	r0, {r1, r9, sl, ip, sp, lr}
    15e4:	75025001 	strvc	r5, [r2, #-1]
    15e8:	58190000 	ldmdapl	r9, {}	; <UNPREDICTABLE>
    15ec:	d7080010 	smladle	r8, r0, r0, r0
    15f0:	18000009 	stmdane	r0, {r0, r3}
    15f4:	7d025101 	stfvcs	f5, [r2, #-4]
    15f8:	50011800 	andpl	r1, r1, r0, lsl #16
    15fc:	75007405 	strvc	r7, [r0, #-1029]	; 0x405
    1600:	00002200 	andeq	r2, r0, r0, lsl #4
    1604:	000d771b 	andeq	r7, sp, fp, lsl r7
    1608:	644f0100 	strbvs	r0, [pc], #-256	; 1610 <__Stack_Size+0xe10>
    160c:	b8080010 	stmdalt	r8, {r4}
    1610:	01000000 	mrseq	r0, (UNDEF: 0)
    1614:	0006e89c 	muleq	r6, ip, r8
    1618:	64691600 	strbtvs	r1, [r9], #-1536	; 0x600
    161c:	24500100 	ldrbcs	r0, [r0], #-256	; 0x100
    1620:	03000001 	movweq	r0, #1
    1624:	1c79ec91 	ldclne	12, cr14, [r9], #-580	; 0xfffffdbc
    1628:	00000d9b 	muleq	r0, fp, sp
    162c:	06e85101 	strbteq	r5, [r8], r1, lsl #2
    1630:	91030000 	mrsls	r0, (UNDEF: 3)
    1634:	051c79f8 	ldreq	r7, [ip, #-2552]	; 0x9f8
    1638:	0100001d 	tsteq	r0, sp, lsl r0
    163c:	0006f852 	andeq	pc, r6, r2, asr r8	; <UNPREDICTABLE>
    1640:	90910300 	addsls	r0, r1, r0, lsl #6
    1644:	0b071c7a 	bleq	1c8834 <__Stack_Size+0x1c8034>
    1648:	53010000 	movwpl	r0, #4096	; 0x1000
    164c:	00000708 	andeq	r0, r0, r8, lsl #14
    1650:	7ad09103 	bvc	ff425a64 <BootRAM+0xe396205>
    1654:	000c531c 	andeq	r5, ip, ip, lsl r3
    1658:	18540100 	ldmdane	r4, {r8}^
    165c:	03000007 	movweq	r0, #7
    1660:	1c7ab091 	ldclne	0, cr11, [sl], #-580	; 0xfffffdbc
    1664:	00000ad1 	ldrdeq	r0, [r0], -r1
    1668:	07285501 	streq	r5, [r8, -r1, lsl #10]!
    166c:	91030000 	mrsls	r0, (UNDEF: 3)
    1670:	001c7bf8 			; <UNDEFINED> instruction: 0x001c7bf8
    1674:	0100000b 	tsteq	r0, fp
    1678:	00072856 	andeq	r2, r7, r6, asr r8
    167c:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    1680:	7463167d 	strbtvc	r1, [r3], #-1661	; 0x67d
    1684:	5c010078 	stcpl	0, cr0, [r1], {120}	; 0x78
    1688:	00000292 	muleq	r0, r2, r2
    168c:	7b909103 	blvc	fe425aa0 <BootRAM+0xd396241>
    1690:	00107017 	andseq	r7, r0, r7, lsl r0
    1694:	0009f108 	andeq	pc, r9, r8, lsl #2
    1698:	00053e00 	andeq	r3, r5, r0, lsl #28
    169c:	50011800 	andpl	r1, r1, r0, lsl #16
    16a0:	79ec9103 	stmibvc	ip!, {r0, r1, r8, ip, pc}^
    16a4:	10881700 	addne	r1, r8, r0, lsl #14
    16a8:	0a090800 	beq	2436b0 <__Stack_Size+0x242eb0>
    16ac:	055c0000 	ldrbeq	r0, [ip, #-0]
    16b0:	01180000 	tsteq	r8, r0
    16b4:	98030551 	stmdals	r3, {r0, r4, r6, r8, sl}
    16b8:	18080075 	stmdane	r8, {r0, r2, r4, r5, r6}
    16bc:	91035001 	tstls	r3, r1
    16c0:	170079f8 			; <UNDEFINED> instruction: 0x170079f8
    16c4:	0800108e 	stmdaeq	r0, {r1, r2, r3, r7, ip}
    16c8:	00000a24 	andeq	r0, r0, r4, lsr #20
    16cc:	00000571 	andeq	r0, r0, r1, ror r5
    16d0:	03500118 	cmpeq	r0, #24, 2
    16d4:	007b9091 			; <UNDEFINED> instruction: 0x007b9091
    16d8:	00109817 	andseq	r9, r0, r7, lsl r8
    16dc:	000a3b08 	andeq	r3, sl, r8, lsl #22
    16e0:	00059200 	andeq	r9, r5, r0, lsl #4
    16e4:	52011800 	andpl	r1, r1, #0, 16
    16e8:	01184701 	tsteq	r8, r1, lsl #14
    16ec:	f8910351 			; <UNDEFINED> instruction: 0xf8910351
    16f0:	50011879 	andpl	r1, r1, r9, ror r8
    16f4:	7b909103 	blvc	fe425b08 <BootRAM+0xd3962a9>
    16f8:	10a21700 	adcne	r1, r2, r0, lsl #14
    16fc:	0a560800 	beq	1583704 <__Stack_Size+0x1582f04>
    1700:	05ae0000 	streq	r0, [lr, #0]!
    1704:	01180000 	tsteq	r8, r0
    1708:	90910351 	addsls	r0, r1, r1, asr r3
    170c:	5001187a 	andpl	r1, r1, sl, ror r8
    1710:	7b909103 	blvc	fe425b24 <BootRAM+0xd3962c5>
    1714:	10ac1700 	adcne	r1, ip, r0, lsl #14
    1718:	0a6c0800 	beq	1b03720 <__Stack_Size+0x1b02f20>
    171c:	05ce0000 	strbeq	r0, [lr]
    1720:	01180000 	tsteq	r8, r0
    1724:	00740252 	rsbseq	r0, r4, r2, asr r2
    1728:	01510118 	cmpeq	r1, r8, lsl r1
    172c:	50011830 	andpl	r1, r1, r0, lsr r8
    1730:	7ab09103 	bvc	fec25b44 <BootRAM+0xdb962e5>
    1734:	10b41700 	adcsne	r1, r4, r0, lsl #14
    1738:	0a890800 	beq	fe243740 <BootRAM+0xd1b3ee1>
    173c:	05ea0000 	strbeq	r0, [sl, #0]!
    1740:	01180000 	tsteq	r8, r0
    1744:	90910351 	addsls	r0, r1, r1, asr r3
    1748:	5001187a 	andpl	r1, r1, sl, ror r8
    174c:	7ab09103 	bvc	fec25b60 <BootRAM+0xdb96301>
    1750:	10be1700 	adcsne	r1, lr, r0, lsl #14
    1754:	03e80800 	mvneq	r0, #0, 16
    1758:	060c0000 	streq	r0, [ip], -r0
    175c:	01180000 	tsteq	r8, r0
    1760:	00740252 	rsbseq	r0, r4, r2, asr r2
    1764:	03510118 	cmpeq	r1, #24, 2
    1768:	187bf891 	ldmdane	fp!, {r0, r4, r7, fp, ip, sp, lr, pc}^
    176c:	91035001 	tstls	r3, r1
    1770:	17007ab0 			; <UNDEFINED> instruction: 0x17007ab0
    1774:	080010c8 	stmdaeq	r0, {r3, r6, r7, ip}
    1778:	00000a6c 	andeq	r0, r0, ip, ror #20
    177c:	0000062c 	andeq	r0, r0, ip, lsr #12
    1780:	02520118 	subseq	r0, r2, #24, 2
    1784:	01184008 	tsteq	r8, r8
    1788:	18300151 	ldmdane	r0!, {r0, r4, r6, r8}
    178c:	91035001 	tstls	r3, r1
    1790:	17007ad0 			; <UNDEFINED> instruction: 0x17007ad0
    1794:	080010d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, ip}
    1798:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    179c:	0000065f 	andeq	r0, r0, pc, asr r6
    17a0:	03530118 	cmpeq	r3, #24, 2
    17a4:	187ab091 	ldmdane	sl!, {r0, r4, r7, ip, sp, pc}^
    17a8:	91035201 	tstls	r3, r1, lsl #4
    17ac:	01187a90 			; <UNDEFINED> instruction: 0x01187a90
    17b0:	04030551 	streq	r0, [r3], #-1361	; 0x551
    17b4:	18200004 	stmdane	r0!, {r2}
    17b8:	91035001 	tstls	r3, r1
    17bc:	02187ad0 	andseq	r7, r8, #208, 20	; 0xd0000
    17c0:	7402007d 	strvc	r0, [r2], #-125	; 0x7d
    17c4:	e0170000 	ands	r0, r7, r0
    17c8:	e8080010 	stmda	r8, {r4}
    17cc:	81000003 	tsthi	r0, r3
    17d0:	18000006 	stmdane	r0, {r1, r2}
    17d4:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    17d8:	51011864 	tstpl	r1, r4, ror #16
    17dc:	7df89103 	ldfvcp	f1, [r8, #12]!
    17e0:	03500118 	cmpeq	r0, #24, 2
    17e4:	007ad091 			; <UNDEFINED> instruction: 0x007ad091
    17e8:	0010e817 	andseq	lr, r0, r7, lsl r8
    17ec:	000ad508 	andeq	sp, sl, r8, lsl #10
    17f0:	00069f00 	andeq	r9, r6, r0, lsl #30
    17f4:	51011800 	tstpl	r1, r0, lsl #16
    17f8:	7bf89103 	blvc	ffe25c0c <BootRAM+0xed963ad>
    17fc:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    1800:	0075a103 	rsbseq	sl, r5, r3, lsl #2
    1804:	ee170008 	cdp	0, 1, cr0, cr7, cr8, {0}
    1808:	d5080010 	strle	r0, [r8, #-16]
    180c:	b600000a 	strlt	r0, [r0], -sl
    1810:	18000006 	stmdane	r0, {r1, r2}
    1814:	03055001 	movweq	r5, #20481	; 0x5001
    1818:	080075d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sl, ip, sp, lr}
    181c:	10f61700 	rscsne	r1, r6, r0, lsl #14
    1820:	0ad50800 	beq	ff543828 <BootRAM+0xe4b3fc9>
    1824:	06d40000 	ldrbeq	r0, [r4], r0
    1828:	01180000 	tsteq	r8, r0
    182c:	f8910351 			; <UNDEFINED> instruction: 0xf8910351
    1830:	5001187d 	andpl	r1, r1, sp, ror r8
    1834:	75fe0305 	ldrbvc	r0, [lr, #773]!	; 0x305
    1838:	19000800 	stmdbne	r0, {fp}
    183c:	080010fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, ip}
    1840:	00000ad5 	ldrdeq	r0, [r0], -r5
    1844:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    1848:	00760103 	rsbseq	r0, r6, r3, lsl #2
    184c:	10000008 	andne	r0, r0, r8
    1850:	00000052 	andeq	r0, r0, r2, asr r0
    1854:	000006f8 	strdeq	r0, [r0], -r8
    1858:	00009913 	andeq	r9, r0, r3, lsl r9
    185c:	10001600 	andne	r1, r0, r0, lsl #12
    1860:	00000052 	andeq	r0, r0, r2, asr r0
    1864:	00000708 	andeq	r0, r0, r8, lsl #14
    1868:	00009913 	andeq	r9, r0, r3, lsl r9
    186c:	10001f00 	andne	r1, r0, r0, lsl #30
    1870:	000000ac 	andeq	r0, r0, ip, lsr #1
    1874:	00000718 	andeq	r0, r0, r8, lsl r7
    1878:	00009913 	andeq	r9, r0, r3, lsl r9
    187c:	10003f00 	andne	r3, r0, r0, lsl #30
    1880:	000000ac 	andeq	r0, r0, ip, lsr #1
    1884:	00000728 	andeq	r0, r0, r8, lsr #14
    1888:	00009913 	andeq	r9, r0, r3, lsl r9
    188c:	10001f00 	andne	r1, r0, r0, lsl #30
    1890:	000000ac 	andeq	r0, r0, ip, lsr #1
    1894:	00000738 	andeq	r0, r0, r8, lsr r7
    1898:	00009913 	andeq	r9, r0, r3, lsl r9
    189c:	1d00ff00 	stcne	15, cr15, [r0, #-0]
    18a0:	00000d31 	andeq	r0, r0, r1, lsr sp
    18a4:	00397501 	eorseq	r7, r9, r1, lsl #10
    18a8:	111c0000 	tstne	ip, r0
    18ac:	00fc0800 	rscseq	r0, ip, r0, lsl #16
    18b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b4:	00000915 	andeq	r0, r0, r5, lsl r9
    18b8:	000cbb1e 	andeq	fp, ip, lr, lsl fp
    18bc:	19770100 	ldmdbne	r7!, {r8}^
    18c0:	13000001 	movwne	r0, #1
    18c4:	1c000003 	stcne	0, cr0, [r0], {3}
    18c8:	00000d8f 	andeq	r0, r0, pc, lsl #27
    18cc:	02248901 	eoreq	r8, r4, #16384	; 0x4000
    18d0:	91020000 	mrsls	r0, (UNDEF: 2)
    18d4:	65721a6c 	ldrbvs	r1, [r2, #-2668]!	; 0xa6c
    18d8:	8a010074 	bhi	41ab0 <__Stack_Size+0x412b0>
    18dc:	00000039 	andeq	r0, r0, r9, lsr r0
    18e0:	00000399 	muleq	r0, r9, r3
    18e4:	0011241f 	andseq	r2, r1, pc, lsl r4
    18e8:	000ae808 	andeq	lr, sl, r8, lsl #16
    18ec:	11281f00 	teqne	r8, r0, lsl #30
    18f0:	0af00800 	beq	ffc038f8 <BootRAM+0xeb74099>
    18f4:	2c1f0000 	ldccs	0, cr0, [pc], {-0}
    18f8:	f8080011 			; <UNDEFINED> instruction: 0xf8080011
    18fc:	1f00000a 	svcne	0x0000000a
    1900:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    1904:	00000b00 	andeq	r0, r0, r0, lsl #22
    1908:	0011341f 	andseq	r3, r1, pc, lsl r4
    190c:	000b0808 	andeq	r0, fp, r8, lsl #16
    1910:	11381f00 	teqne	r8, r0, lsl #30
    1914:	0b100800 	bleq	40391c <__Stack_Size+0x40311c>
    1918:	3e170000 	cdpcc	0, 1, cr0, cr7, cr0, {0}
    191c:	d5080011 	strle	r0, [r8, #-17]
    1920:	ca00000a 	bgt	1950 <__Stack_Size+0x1150>
    1924:	18000007 	stmdane	r0, {r0, r1, r2}
    1928:	03055001 	movweq	r5, #20481	; 0x5001
    192c:	08007625 	stmdaeq	r0, {r0, r2, r5, r9, sl, ip, sp, lr}
    1930:	11461700 	cmpne	r6, r0, lsl #14
    1934:	0b170800 	bleq	5c393c <__Stack_Size+0x5c313c>
    1938:	07e60000 	strbeq	r0, [r6, r0]!
    193c:	01180000 	tsteq	r8, r0
    1940:	183f0151 	ldmdane	pc!, {r0, r4, r6, r8}	; <UNPREDICTABLE>
    1944:	0c055001 	stceq	0, cr5, [r5], {1}
    1948:	40010c00 	andmi	r0, r1, r0, lsl #24
    194c:	114e1700 	cmpne	lr, r0, lsl #14
    1950:	0ad50800 	beq	ff543958 <BootRAM+0xe4b40f9>
    1954:	07fd0000 	ldrbeq	r0, [sp, r0]!
    1958:	01180000 	tsteq	r8, r0
    195c:	3a030550 	bcc	c2ea4 <__Stack_Size+0xc26a4>
    1960:	00080076 	andeq	r0, r8, r6, ror r0
    1964:	00115817 	andseq	r5, r1, r7, lsl r8
    1968:	000b3208 	andeq	r3, fp, r8, lsl #4
    196c:	00081f00 	andeq	r1, r8, r0, lsl #30
    1970:	52011800 	andpl	r1, r1, #0, 16
    1974:	01183001 	tsteq	r8, r1
    1978:	000c0551 	andeq	r0, ip, r1, asr r5
    197c:	18080090 	stmdane	r8, {r4, r7}
    1980:	91025001 	tstls	r2, r1
    1984:	6417006c 	ldrvs	r0, [r7], #-108	; 0x6c
    1988:	d5080011 	strle	r0, [r8, #-17]
    198c:	3c00000a 	stccc	0, cr0, [r0], {10}
    1990:	18000008 	stmdane	r0, {r3}
    1994:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    1998:	50011802 	andpl	r1, r1, r2, lsl #16
    199c:	764d0305 	strbvc	r0, [sp], -r5, lsl #6
    19a0:	17000800 	strne	r0, [r0, -r0, lsl #16]
    19a4:	08001180 	stmdaeq	r0, {r7, r8, ip}
    19a8:	00000ad5 	ldrdeq	r0, [r0], -r5
    19ac:	00000853 	andeq	r0, r0, r3, asr r8
    19b0:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    19b4:	00766203 	rsbseq	r6, r6, r3, lsl #4
    19b8:	881f0008 	ldmdahi	pc, {r3}	; <UNPREDICTABLE>
    19bc:	9d080011 	stcls	0, cr0, [r8, #-68]	; 0xffffffbc
    19c0:	1f000004 	svcne	0x00000004
    19c4:	08001196 	stmdaeq	r0, {r1, r2, r4, r7, r8, ip}
    19c8:	00000ad5 	ldrdeq	r0, [r0], -r5
    19cc:	0011aa17 	andseq	sl, r1, r7, lsl sl
    19d0:	000b5708 	andeq	r5, fp, r8, lsl #14
    19d4:	00089300 	andeq	r9, r8, r0, lsl #6
    19d8:	53011800 	movwpl	r1, #6144	; 0x1800
    19dc:	243e4403 	ldrtcs	r4, [lr], #-1027	; 0x403
    19e0:	01520118 	cmpeq	r2, r8, lsl r1
    19e4:	51011835 	tstpl	r1, r5, lsr r8
    19e8:	01183d01 	tsteq	r8, r1, lsl #26
    19ec:	000c0550 	andeq	r0, ip, r0, asr r5
    19f0:	18400110 	stmdane	r0, {r4, r8}^
    19f4:	01007d02 	tsteq	r0, r2, lsl #26
    19f8:	be170030 	mrclt	0, 0, r0, cr7, cr0, {1}
    19fc:	57080011 	smladpl	r8, r1, r0, r0
    1a00:	c100000b 	tstgt	r0, fp
    1a04:	18000008 	stmdane	r0, {r3}
    1a08:	40035301 	andmi	r5, r3, r1, lsl #6
    1a0c:	01182440 	tsteq	r8, r0, asr #8
    1a10:	18310152 	ldmdane	r1!, {r1, r4, r6, r8}
    1a14:	3d015101 	stfccs	f5, [r1, #-4]
    1a18:	05500118 	ldrbeq	r0, [r0, #-280]	; 0x118
    1a1c:	0110000c 	tsteq	r0, ip
    1a20:	7d021840 	stcvc	8, cr1, [r2, #-256]	; 0xffffff00
    1a24:	00300100 	eorseq	r0, r0, r0, lsl #2
    1a28:	0011c21f 	andseq	ip, r1, pc, lsl r2
    1a2c:	000b7d08 	andeq	r7, fp, r8, lsl #26
    1a30:	11cc1700 	bicne	r1, ip, r0, lsl #14
    1a34:	0ad50800 	beq	ff543a3c <BootRAM+0xe4b41dd>
    1a38:	08e10000 	stmiaeq	r1!, {}^	; <UNPREDICTABLE>
    1a3c:	01180000 	tsteq	r8, r0
    1a40:	e5030550 	str	r0, [r3, #-1360]	; 0x550
    1a44:	00080076 	andeq	r0, r8, r6, ror r0
    1a48:	0011d01f 	andseq	sp, r1, pc, lsl r0
    1a4c:	000b8e08 	andeq	r8, fp, r8, lsl #28
    1a50:	11d81700 	bicsne	r1, r8, r0, lsl #14
    1a54:	0ad50800 	beq	ff543a5c <BootRAM+0xe4b41fd>
    1a58:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1a5c:	01180000 	tsteq	r8, r0
    1a60:	fa030550 	blx	c2fa8 <__Stack_Size+0xc27a8>
    1a64:	00080076 	andeq	r0, r8, r6, ror r0
    1a68:	0011de19 	andseq	sp, r1, r9, lsl lr
    1a6c:	000b9b08 	andeq	r9, fp, r8, lsl #22
    1a70:	50011800 	andpl	r1, r1, r0, lsl #16
    1a74:	90840c05 	addls	r0, r4, r5, lsl #24
    1a78:	00000800 	andeq	r0, r0, r0, lsl #16
    1a7c:	0000b120 	andeq	fp, r0, r0, lsr #2
    1a80:	392c0b00 	stmdbcc	ip!, {r8, r9, fp}
    1a84:	05000000 	streq	r0, [r0, #-0]
    1a88:	00048803 	andeq	r8, r4, r3, lsl #16
    1a8c:	00be1020 	adcseq	r1, lr, r0, lsr #32
    1a90:	09360000 	ldmdbeq	r6!, {}	; <UNPREDICTABLE>
    1a94:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    1a98:	1f000000 	svcne	0x00000000
    1a9c:	0c7b2000 	ldcleq	0, cr2, [fp], #-0
    1aa0:	6b070000 	blvs	1c1aa8 <__Stack_Size+0x1c12a8>
    1aa4:	00000926 	andeq	r0, r0, r6, lsr #18
    1aa8:	04040305 	streq	r0, [r4], #-773	; 0x305
    1aac:	24212000 	strtcs	r2, [r1], #-0
    1ab0:	0a00000e 	beq	1af0 <__Stack_Size+0x12f0>
    1ab4:	00095816 	andeq	r5, r9, r6, lsl r8
    1ab8:	09582200 	ldmdbeq	r8, {r9, sp}^
    1abc:	06000000 	streq	r0, [r0], -r0
    1ac0:	00034804 	andeq	r4, r3, r4, lsl #16
    1ac4:	0d362300 	ldceq	3, cr2, [r6, #-0]
    1ac8:	210c0000 	mrscs	r0, (UNDEF: 12)
    1acc:	00000025 	andeq	r0, r0, r5, lsr #32
    1ad0:	00000973 	andeq	r0, r0, r3, ror r9
    1ad4:	0000b322 	andeq	fp, r0, r2, lsr #6
    1ad8:	c3230000 	teqgt	r3, #0
    1adc:	0a00000b 	beq	1b10 <__Stack_Size+0x1310>
    1ae0:	0000391a 	andeq	r3, r0, sl, lsl r9
    1ae4:	00099700 	andeq	r9, r9, r0, lsl #14
    1ae8:	00b32200 	adcseq	r2, r3, r0, lsl #4
    1aec:	97220000 	strls	r0, [r2, -r0]!
    1af0:	22000009 	andcs	r0, r0, #9
    1af4:	000000a6 	andeq	r0, r0, r6, lsr #1
    1af8:	00095822 	andeq	r5, r9, r2, lsr #16
    1afc:	39070000 	stmdbcc	r7, {}	; <UNPREDICTABLE>
    1b00:	21000000 	mrscs	r0, (UNDEF: 0)
    1b04:	00000aab 	andeq	r0, r0, fp, lsr #21
    1b08:	09ad1709 	stmibeq	sp!, {r0, r3, r8, r9, sl, ip}
    1b0c:	ad220000 	stcge	0, cr0, [r2, #-0]
    1b10:	00000009 	andeq	r0, r0, r9
    1b14:	02f00406 	rscseq	r0, r0, #100663296	; 0x6000000
    1b18:	10230000 	eorne	r0, r3, r0
    1b1c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    1b20:	0000391b 	andeq	r3, r0, fp, lsl r9
    1b24:	0009d700 	andeq	sp, r9, r0, lsl #14
    1b28:	00b32200 	adcseq	r2, r3, r0, lsl #4
    1b2c:	39220000 	stmdbcc	r2!, {}	; <UNPREDICTABLE>
    1b30:	22000000 	andcs	r0, r0, #0
    1b34:	000000a6 	andeq	r0, r0, r6, lsr #1
    1b38:	0009ad22 	andeq	sl, r9, r2, lsr #26
    1b3c:	a4230000 	strtge	r0, [r3], #-0
    1b40:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1b44:	0000391d 	andeq	r3, r0, sp, lsl r9
    1b48:	0009f100 	andeq	pc, r9, r0, lsl #2
    1b4c:	00a62200 	adceq	r2, r6, r0, lsl #4
    1b50:	ad220000 	stcge	0, cr0, [r2, #-0]
    1b54:	00000009 	andeq	r0, r0, r9
    1b58:	000b2c24 	andeq	r2, fp, r4, lsr #24
    1b5c:	01420600 	cmpeq	r2, r0, lsl #12
    1b60:	00000a03 	andeq	r0, r0, r3, lsl #20
    1b64:	000a0322 	andeq	r0, sl, r2, lsr #6
    1b68:	04060000 	streq	r0, [r6], #-0
    1b6c:	00000124 	andeq	r0, r0, r4, lsr #2
    1b70:	000f0323 	andeq	r0, pc, r3, lsr #6
    1b74:	39d90d00 	ldmibcc	r9, {r8, sl, fp}^
    1b78:	24000000 	strcs	r0, [r0], #-0
    1b7c:	2200000a 	andcs	r0, r0, #10
    1b80:	000000a6 	andeq	r0, r0, r6, lsr #1
    1b84:	0000b322 	andeq	fp, r0, r2, lsr #6
    1b88:	21002500 	tstcs	r0, r0, lsl #10
    1b8c:	00000c13 	andeq	r0, r0, r3, lsl ip
    1b90:	0a351408 	beq	d46bb8 <__Stack_Size+0xd463b8>
    1b94:	35220000 	strcc	r0, [r2, #-0]!
    1b98:	0000000a 	andeq	r0, r0, sl
    1b9c:	02920406 	addseq	r0, r2, #100663296	; 0x6000000
    1ba0:	35210000 	strcc	r0, [r1, #-0]!
    1ba4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1ba8:	000a5615 	andeq	r5, sl, r5, lsl r6
    1bac:	0a352200 	beq	d4a3b4 <__Stack_Size+0xd49bb4>
    1bb0:	a0220000 	eorge	r0, r2, r0
    1bb4:	22000000 	andcs	r0, r0, #0
    1bb8:	00000084 	andeq	r0, r0, r4, lsl #1
    1bbc:	0b792100 	bleq	1e49fc4 <__Stack_Size+0x1e497c4>
    1bc0:	16080000 	strne	r0, [r8], -r0
    1bc4:	00000a6c 	andeq	r0, r0, ip, ror #20
    1bc8:	000a3522 	andeq	r3, sl, r2, lsr #10
    1bcc:	00a02200 	adceq	r2, r0, r0, lsl #4
    1bd0:	26000000 	strcs	r0, [r0], -r0
    1bd4:	00000c0c 	andeq	r0, r0, ip, lsl #24
    1bd8:	00000037 	andeq	r0, r0, r7, lsr r0
    1bdc:	00000a89 	andeq	r0, r0, r9, lsl #21
    1be0:	00003722 	andeq	r3, r0, r2, lsr #14
    1be4:	00392200 	eorseq	r2, r9, r0, lsl #4
    1be8:	99220000 	stmdbls	r2!, {}	; <UNPREDICTABLE>
    1bec:	00000000 	andeq	r0, r0, r0
    1bf0:	000c8221 	andeq	r8, ip, r1, lsr #4
    1bf4:	9f250e00 	svcls	0x00250e00
    1bf8:	2200000a 	andcs	r0, r0, #10
    1bfc:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
    1c00:	000aa522 	andeq	sl, sl, r2, lsr #10
    1c04:	04060000 	streq	r0, [r6], #-0
    1c08:	000000be 	strheq	r0, [r0], -lr
    1c0c:	0aab0406 	beq	feac2c2c <BootRAM+0xda333cd>
    1c10:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    1c14:	21000000 	mrscs	r0, (UNDEF: 0)
    1c18:	00000d5a 	andeq	r0, r0, sl, asr sp
    1c1c:	0ad52a0e 	beq	ff54c45c <BootRAM+0xe4bcbfd>
    1c20:	9f220000 	svcls	0x00220000
    1c24:	2200000a 	andcs	r0, r0, #10
    1c28:	00000aa5 	andeq	r0, r0, r5, lsr #21
    1c2c:	000aa522 	andeq	sl, sl, r2, lsr #10
    1c30:	0aa52200 	beq	fe94a438 <BootRAM+0xd8babd9>
    1c34:	25220000 	strcs	r0, [r2, #-0]!
    1c38:	00000000 	andeq	r0, r0, r0
    1c3c:	000dbb24 	andeq	fp, sp, r4, lsr #22
    1c40:	013f0600 	teqeq	pc, r0, lsl #12
    1c44:	00000ae8 	andeq	r0, r0, r8, ror #21
    1c48:	0000b322 	andeq	fp, r0, r2, lsr #6
    1c4c:	27002500 	strcs	r2, [r0, -r0, lsl #10]
    1c50:	00000b91 	muleq	r0, r1, fp
    1c54:	27012c06 	strcs	r2, [r1, -r6, lsl #24]
    1c58:	00000b16 	andeq	r0, r0, r6, lsl fp
    1c5c:	27012d06 	strcs	r2, [r1, -r6, lsl #26]
    1c60:	00000cce 	andeq	r0, r0, lr, asr #25
    1c64:	27012e06 	strcs	r2, [r1, -r6, lsl #28]
    1c68:	00000bd7 	ldrdeq	r0, [r0], -r7
    1c6c:	27012f06 	strcs	r2, [r1, -r6, lsl #30]
    1c70:	00000cfe 	strdeq	r0, [r0], -lr
    1c74:	28012a06 	stmdacs	r1, {r1, r2, r9, fp, sp}
    1c78:	000007d2 	ldrdeq	r0, [r0], -r2
    1c7c:	eb29510b 	bl	a560b0 <__Stack_Size+0xa558b0>
    1c80:	0600000b 	streq	r0, [r0], -fp
    1c84:	01190127 	tsteq	r9, r7, lsr #2
    1c88:	0b320000 	bleq	c81c90 <__Stack_Size+0xc81490>
    1c8c:	df220000 	svcle	0x00220000
    1c90:	22000000 	andcs	r0, r0, #0
    1c94:	000000ea 	andeq	r0, r0, sl, ror #1
    1c98:	0c9b2300 	ldceq	3, cr2, [fp], {0}
    1c9c:	67070000 	strvs	r0, [r7, -r0]
    1ca0:	00000039 	andeq	r0, r0, r9, lsr r0
    1ca4:	00000b51 	andeq	r0, r0, r1, asr fp
    1ca8:	000b5122 	andeq	r5, fp, r2, lsr #2
    1cac:	00f42200 	rscseq	r2, r4, r0, lsl #4
    1cb0:	19220000 	stmdbne	r2!, {}	; <UNPREDICTABLE>
    1cb4:	00000001 	andeq	r0, r0, r1
    1cb8:	02240406 	eoreq	r0, r4, #100663296	; 0x6000000
    1cbc:	b1240000 	teqlt	r4, r0
    1cc0:	0600000c 	streq	r0, [r0], -ip
    1cc4:	0b7d0128 	bleq	1f4216c <__Stack_Size+0x1f4196c>
    1cc8:	df220000 	svcle	0x00220000
    1ccc:	22000000 	andcs	r0, r0, #0
    1cd0:	000000ea 	andeq	r0, r0, sl, ror #1
    1cd4:	0000ea22 	andeq	lr, r0, r2, lsr #20
    1cd8:	00df2200 	sbcseq	r2, pc, r0, lsl #4
    1cdc:	ea220000 	b	881ce4 <__Stack_Size+0x8814e4>
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	000d662a 	andeq	r6, sp, sl, lsr #12
    1ce8:	197c0f00 	ldmdbne	ip!, {r8, r9, sl, fp}^
    1cec:	8e000001 	cdphi	0, 0, cr0, cr0, cr1, {0}
    1cf0:	2500000b 	strcs	r0, [r0, #-11]
    1cf4:	0c212b00 	stceq	11, cr2, [r1], #-0
    1cf8:	7e0f0000 	cdpvc	0, 0, cr0, cr15, cr0, {0}
    1cfc:	00000b9b 	muleq	r0, fp, fp
    1d00:	3d2c0025 	stccc	0, cr0, [ip, #-148]!	; 0xffffff6c
    1d04:	0600000d 	streq	r0, [r0], -sp
    1d08:	df220130 	svcle	0x00220130
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	00129800 	andseq	r9, r2, r0, lsl #16
    1d14:	0e000400 	cfcpyseq	mvf0, mvf0
    1d18:	04000007 	streq	r0, [r0], #-7
    1d1c:	00063901 	andeq	r3, r6, r1, lsl #18
    1d20:	0edc0100 	cdpeq	1, 13, cr0, cr12, cr0, {0}
    1d24:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    1d28:	01580000 	cmpeq	r8, r0
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	07e50000 	strbeq	r0, [r5, r0]!
    1d34:	1f020000 	svcne	0x00020000
    1d38:	0200000b 	andeq	r0, r0, #11
    1d3c:	000030d4 	ldrdeq	r3, [r0], -r4
    1d40:	07040300 	streq	r0, [r4, -r0, lsl #6]
    1d44:	00000257 	andeq	r0, r0, r7, asr r2
    1d48:	000fbb02 	andeq	fp, pc, r2, lsl #22
    1d4c:	42280300 	eormi	r0, r8, #0, 6
    1d50:	04000000 	streq	r0, [r0], #-0
    1d54:	0000122d 	andeq	r1, r0, sp, lsr #4
    1d58:	59000804 	stmdbpl	r0, {r2, fp}
    1d5c:	05000000 	streq	r0, [r0, #-0]
    1d60:	000010ba 	strheq	r1, [r0], -sl
    1d64:	00000059 	andeq	r0, r0, r9, asr r0
    1d68:	04060000 	streq	r0, [r6], #-0
    1d6c:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
    1d70:	0300746e 	movweq	r7, #1134	; 0x46e
    1d74:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    1d78:	36020000 	strcc	r0, [r2], -r0
    1d7c:	0400000c 	streq	r0, [r0], #-12
    1d80:	0000741c 	andeq	r7, r0, ip, lsl r4
    1d84:	08010300 	stmdaeq	r1, {r8, r9}
    1d88:	00000818 	andeq	r0, r0, r8, lsl r8
    1d8c:	fc050203 	stc2	2, cr0, [r5], {3}
    1d90:	02000006 	andeq	r0, r0, #6
    1d94:	00000b67 	andeq	r0, r0, r7, ror #22
    1d98:	008d2604 	addeq	r2, sp, r4, lsl #12
    1d9c:	02030000 	andeq	r0, r3, #0
    1da0:	00094907 	andeq	r4, r9, r7, lsl #18
    1da4:	05040300 	streq	r0, [r4, #-768]	; 0x300
    1da8:	000004da 	ldrdeq	r0, [r0], -sl
    1dac:	000b4e02 	andeq	r4, fp, r2, lsl #28
    1db0:	a6380400 	ldrtge	r0, [r8], -r0, lsl #8
    1db4:	03000000 	movweq	r0, #0
    1db8:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    1dbc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1dc0:	0004d505 	andeq	sp, r4, r5, lsl #10
    1dc4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    1dc8:	0000024d 	andeq	r0, r0, sp, asr #4
    1dcc:	8b070403 	blhi	1c2de0 <__Stack_Size+0x1c25e0>
    1dd0:	08000007 	stmdaeq	r0, {r0, r1, r2}
    1dd4:	0000c804 	andeq	ip, r0, r4, lsl #16
    1dd8:	04080900 	streq	r0, [r8], #-2304	; 0x900
    1ddc:	00000074 	andeq	r0, r0, r4, ror r0
    1de0:	00d50408 	sbcseq	r0, r5, r8, lsl #8
    1de4:	01030000 	mrseq	r0, (UNDEF: 3)
    1de8:	00082108 	andeq	r2, r8, r8, lsl #2
    1dec:	e2040800 	and	r0, r4, #0, 16
    1df0:	0a000000 	beq	1df8 <__Stack_Size+0x15f8>
    1df4:	000000d5 	ldrdeq	r0, [r0], -r5
    1df8:	000c3802 	andeq	r3, ip, r2, lsl #16
    1dfc:	692a0500 	stmdbvs	sl!, {r8, sl}
    1e00:	02000000 	andeq	r0, r0, #0
    1e04:	00000b69 	andeq	r0, r0, r9, ror #22
    1e08:	00823605 	addeq	r3, r2, r5, lsl #12
    1e0c:	50020000 	andpl	r0, r2, r0
    1e10:	0500000b 	streq	r0, [r0, #-11]
    1e14:	00009b42 	andeq	r9, r0, r2, asr #22
    1e18:	122f0200 	eorne	r0, pc, #0, 4
    1e1c:	62030000 	andvs	r0, r3, #0
    1e20:	00000037 	andeq	r0, r0, r7, lsr r0
    1e24:	3233750b 	eorscc	r7, r3, #46137344	; 0x2c00000
    1e28:	a6270600 	strtge	r0, [r7], -r0, lsl #12
    1e2c:	0b000000 	bleq	1e34 <__Stack_Size+0x1634>
    1e30:	00363175 	eorseq	r3, r6, r5, ror r1
    1e34:	008d2806 	addeq	r2, sp, r6, lsl #16
    1e38:	750b0000 	strvc	r0, [fp, #-0]
    1e3c:	29060038 	stmdbcs	r6, {r3, r4, r5}
    1e40:	00000074 	andeq	r0, r0, r4, ror r0
    1e44:	00035a02 	andeq	r5, r3, r2, lsl #20
    1e48:	3e2f0600 	cfmadda32cc	mvax0, mvax0, mvfx15, mvfx0
    1e4c:	0c000001 	stceq	0, cr0, [r0], {1}
    1e50:	000000a6 	andeq	r0, r0, r6, lsr #1
    1e54:	0001e302 	andeq	lr, r1, r2, lsl #6
    1e58:	4e300600 	cfmsuba32mi	mvax0, mvax0, mvfx0, mvfx0
    1e5c:	0c000001 	stceq	0, cr0, [r0], {1}
    1e60:	0000008d 	andeq	r0, r0, sp, lsl #1
    1e64:	0012dd02 	andseq	sp, r2, r2, lsl #26
    1e68:	5e330600 	cfmsuba32pl	mvax0, mvax0, mvfx3, mvfx0
    1e6c:	0a000001 	beq	1e78 <__Stack_Size+0x1678>
    1e70:	0000013e 	andeq	r0, r0, lr, lsr r1
    1e74:	3706010d 	strcc	r0, [r6, -sp, lsl #2]
    1e78:	00000178 	andeq	r0, r0, r8, ror r1
    1e7c:	0007530e 	andeq	r5, r7, lr, lsl #6
    1e80:	a70e0000 	strge	r0, [lr, -r0]
    1e84:	01000001 	tsteq	r0, r1
    1e88:	052d0200 	streq	r0, [sp, #-512]!	; 0x200
    1e8c:	37060000 	strcc	r0, [r6, -r0]
    1e90:	00000163 	andeq	r0, r0, r3, ror #2
    1e94:	3b06010d 	blcc	1822d0 <__Stack_Size+0x181ad0>
    1e98:	00000198 	muleq	r0, r8, r1
    1e9c:	0010360e 	andseq	r3, r0, lr, lsl #12
    1ea0:	370e0000 	strcc	r0, [lr, -r0]
    1ea4:	01000012 	tsteq	r0, r2, lsl r0
    1ea8:	0e840200 	cdpeq	2, 8, cr0, cr4, cr0, {0}
    1eac:	3b060000 	blcc	181eb4 <__Stack_Size+0x1816b4>
    1eb0:	00000183 	andeq	r0, r0, r3, lsl #3
    1eb4:	9207280f 	andls	r2, r7, #983040	; 0xf0000
    1eb8:	00000223 	andeq	r0, r0, r3, lsr #4
    1ebc:	00524310 	subseq	r4, r2, r0, lsl r3
    1ec0:	01339307 	teqeq	r3, r7, lsl #6
    1ec4:	11000000 	mrsne	r0, (UNDEF: 0)
    1ec8:	00000759 	andeq	r0, r0, r9, asr r7
    1ecc:	01339407 	teqeq	r3, r7, lsl #8
    1ed0:	10040000 	andne	r0, r4, r0
    1ed4:	00524943 	subseq	r4, r2, r3, asr #18
    1ed8:	01339507 	teqeq	r3, r7, lsl #10
    1edc:	11080000 	mrsne	r0, (UNDEF: 8)
    1ee0:	0000002a 	andeq	r0, r0, sl, lsr #32
    1ee4:	01339607 	teqeq	r3, r7, lsl #12
    1ee8:	110c0000 	mrsne	r0, (UNDEF: 12)
    1eec:	00000fef 	andeq	r0, r0, pc, ror #31
    1ef0:	01339707 	teqeq	r3, r7, lsl #14
    1ef4:	11100000 	tstne	r0, r0
    1ef8:	00000445 	andeq	r0, r0, r5, asr #8
    1efc:	01339807 	teqeq	r3, r7, lsl #16
    1f00:	11140000 	tstne	r4, r0
    1f04:	000005ef 	andeq	r0, r0, pc, ror #11
    1f08:	01339907 	teqeq	r3, r7, lsl #18
    1f0c:	11180000 	tstne	r8, r0
    1f10:	00000000 	andeq	r0, r0, r0
    1f14:	01339a07 	teqeq	r3, r7, lsl #20
    1f18:	111c0000 	tstne	ip, r0
    1f1c:	0000061e 	andeq	r0, r0, lr, lsl r6
    1f20:	01339b07 	teqeq	r3, r7, lsl #22
    1f24:	10200000 	eorne	r0, r0, r0
    1f28:	00525343 	subseq	r5, r2, r3, asr #6
    1f2c:	01339c07 	teqeq	r3, r7, lsl #24
    1f30:	00240000 	eoreq	r0, r4, r0
    1f34:	0010fa02 	andseq	pc, r0, r2, lsl #20
    1f38:	a39d0700 	orrsge	r0, sp, #0, 14
    1f3c:	12000001 	andne	r0, r0, #1
    1f40:	a007033c 	andge	r0, r7, ip, lsr r3
    1f44:	000002c3 	andeq	r0, r0, r3, asr #5
    1f48:	000f5111 	andeq	r5, pc, r1, lsl r1	; <UNPREDICTABLE>
    1f4c:	d3a10700 			; <UNDEFINED> instruction: 0xd3a10700
    1f50:	00000002 	andeq	r0, r0, r2
    1f54:	00115411 	andseq	r5, r1, r1, lsl r4
    1f58:	d8a20700 	stmiale	r2!, {r8, r9, sl}
    1f5c:	08000002 	stmdaeq	r0, {r1}
    1f60:	0012bc11 	andseq	fp, r2, r1, lsl ip
    1f64:	e8a30700 	stmia	r3!, {r8, r9, sl}
    1f68:	80000002 	andhi	r0, r0, r2
    1f6c:	000f5611 	andeq	r5, pc, r1, lsl r6	; <UNPREDICTABLE>
    1f70:	d8a40700 	stmiale	r4!, {r8, r9, sl}
    1f74:	88000002 	stmdahi	r0, {r1}
    1f78:	00132713 	andseq	r2, r3, r3, lsl r7
    1f7c:	eda50700 	stc	7, cr0, [r5]
    1f80:	00000002 	andeq	r0, r0, r2
    1f84:	11681301 	cmnne	r8, r1, lsl #6
    1f88:	a6070000 	strge	r0, [r7], -r0
    1f8c:	000002d8 	ldrdeq	r0, [r0], -r8
    1f90:	f5130108 			; <UNDEFINED> instruction: 0xf5130108
    1f94:	07000010 	smladeq	r0, r0, r0, r0
    1f98:	0002f2a7 	andeq	pc, r2, r7, lsr #5
    1f9c:	13018000 	movwne	r8, #4096	; 0x1000
    1fa0:	00001172 	andeq	r1, r0, r2, ror r1
    1fa4:	02d8a807 	sbcseq	sl, r8, #458752	; 0x70000
    1fa8:	01880000 	orreq	r0, r8, r0
    1fac:	0012d813 	andseq	sp, r2, r3, lsl r8
    1fb0:	f7a90700 			; <UNDEFINED> instruction: 0xf7a90700
    1fb4:	00000002 	andeq	r0, r0, r2
    1fb8:	117c1302 	cmnne	ip, r2, lsl #6
    1fbc:	aa070000 	bge	1c1fc4 <__Stack_Size+0x1c17c4>
    1fc0:	000002fc 	strdeq	r0, [r0], -ip
    1fc4:	49140208 	ldmdbmi	r4, {r3, r9}
    1fc8:	07005250 	smlsdeq	r0, r0, r2, r5
    1fcc:	00031cab 	andeq	r1, r3, fp, lsr #25
    1fd0:	00030000 	andeq	r0, r3, r0
    1fd4:	00013315 	andeq	r3, r1, r5, lsl r3
    1fd8:	0002d300 	andeq	sp, r2, r0, lsl #6
    1fdc:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    1fe0:	00010000 	andeq	r0, r1, r0
    1fe4:	0002c30c 	andeq	ip, r2, ip, lsl #6
    1fe8:	01131500 	tsteq	r3, r0, lsl #10
    1fec:	02e80000 	rsceq	r0, r8, #0
    1ff0:	bb160000 	bllt	581ff8 <__Stack_Size+0x5817f8>
    1ff4:	1d000000 	stcne	0, cr0, [r0, #-0]
    1ff8:	02c30c00 	sbceq	r0, r3, #0, 24
    1ffc:	c30c0000 	movwgt	r0, #49152	; 0xc000
    2000:	0c000002 	stceq	0, cr0, [r0], {2}
    2004:	000002c3 	andeq	r0, r0, r3, asr #5
    2008:	0002c30c 	andeq	ip, r2, ip, lsl #6
    200c:	01131500 	tsteq	r3, r0, lsl #10
    2010:	030c0000 	movweq	r0, #49152	; 0xc000
    2014:	bb160000 	bllt	58201c <__Stack_Size+0x58181c>
    2018:	3d000000 	stccc	0, cr0, [r0, #-0]
    201c:	01331500 	teqeq	r3, r0, lsl #10
    2020:	031c0000 	tsteq	ip, #0
    2024:	bb160000 	bllt	58202c <__Stack_Size+0x58182c>
    2028:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    202c:	030c0c00 	movweq	r0, #52224	; 0xcc00
    2030:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
    2034:	07000012 	smladeq	r0, r2, r0, r0
    2038:	00022eac 	andeq	r2, r2, ip, lsr #29
    203c:	07040f00 	streq	r0, [r4, -r0, lsl #30]
    2040:	000365ae 	andeq	r6, r3, lr, lsr #11
    2044:	05b61100 	ldreq	r1, [r6, #256]!	; 0x100
    2048:	af070000 	svcge	0x00070000
    204c:	00000129 	andeq	r0, r0, r9, lsr #2
    2050:	09701100 	ldmdbeq	r0!, {r8, ip}^
    2054:	b0070000 	andlt	r0, r7, r0
    2058:	00000129 	andeq	r0, r0, r9, lsr #2
    205c:	08dd1101 	ldmeq	sp, {r0, r8, ip}^
    2060:	b1070000 	mrslt	r0, (UNDEF: 7)
    2064:	00000129 	andeq	r0, r0, r9, lsr #2
    2068:	03961102 	orrseq	r1, r6, #-2147483648	; 0x80000000
    206c:	b2070000 	andlt	r0, r7, #0
    2070:	00000178 	andeq	r0, r0, r8, ror r1
    2074:	f5020003 			; <UNDEFINED> instruction: 0xf5020003
    2078:	07000001 	streq	r0, [r0, -r1]
    207c:	00032cb3 			; <UNDEFINED> instruction: 0x00032cb3
    2080:	07400f00 	strbeq	r0, [r0, -r0, lsl #30]
    2084:	000421b5 			; <UNDEFINED> instruction: 0x000421b5
    2088:	0fca1100 	svceq	0x00ca1100
    208c:	b6070000 	strlt	r0, [r7], -r0
    2090:	00000153 	andeq	r0, r0, r3, asr r1
    2094:	123e1100 	eorsne	r1, lr, #0, 2
    2098:	b7070000 	strlt	r0, [r7, -r0]
    209c:	00000133 	andeq	r0, r0, r3, lsr r1
    20a0:	12031104 	andne	r1, r3, #4, 2
    20a4:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
    20a8:	00000133 	andeq	r0, r0, r3, lsr r1
    20ac:	103e1108 	eorsne	r1, lr, r8, lsl #2
    20b0:	b9070000 	stmdblt	r7, {}	; <UNPREDICTABLE>
    20b4:	00000133 	andeq	r0, r0, r3, lsr r1
    20b8:	4353100c 	cmpmi	r3, #12
    20bc:	ba070052 	blt	1c220c <__Stack_Size+0x1c1a0c>
    20c0:	00000133 	andeq	r0, r0, r3, lsr r1
    20c4:	43431010 	movtmi	r1, #12304	; 0x3010
    20c8:	bb070052 	bllt	1c2218 <__Stack_Size+0x1c1a18>
    20cc:	00000133 	andeq	r0, r0, r3, lsr r1
    20d0:	0fd71114 	svceq	0x00d71114
    20d4:	bc070000 	stclt	0, cr0, [r7], {-0}
    20d8:	00000431 	andeq	r0, r0, r1, lsr r4
    20dc:	10881118 	addne	r1, r8, r8, lsl r1
    20e0:	bd070000 	stclt	0, cr0, [r7, #-0]
    20e4:	00000133 	andeq	r0, r0, r3, lsr r1
    20e8:	10a81124 	adcne	r1, r8, r4, lsr #2
    20ec:	be070000 	cdplt	0, 0, cr0, cr7, cr0, {0}
    20f0:	00000133 	andeq	r0, r0, r3, lsr r1
    20f4:	0ff81128 	svceq	0x00f81128
    20f8:	bf070000 	svclt	0x00070000
    20fc:	00000133 	andeq	r0, r0, r3, lsr r1
    2100:	0eb0112c 	frdeqsp	f1, f0, #4.0
    2104:	c0070000 	andgt	r0, r7, r0
    2108:	00000133 	andeq	r0, r0, r3, lsr r1
    210c:	11401130 	cmpne	r0, r0, lsr r1
    2110:	c1070000 	mrsgt	r0, (UNDEF: 7)
    2114:	00000133 	andeq	r0, r0, r3, lsr r1
    2118:	11f11134 	mvnsne	r1, r4, lsr r1
    211c:	c2070000 	andgt	r0, r7, #0
    2120:	00000133 	andeq	r0, r0, r3, lsr r1
    2124:	0fdc1138 	svceq	0x00dc1138
    2128:	c3070000 	movwgt	r0, #28672	; 0x7000
    212c:	00000133 	andeq	r0, r0, r3, lsr r1
    2130:	3315003c 	tstcc	r5, #60	; 0x3c
    2134:	31000001 	tstcc	r0, r1
    2138:	16000004 	strne	r0, [r0], -r4
    213c:	000000bb 	strheq	r0, [r0], -fp
    2140:	210c0002 	tstcs	ip, r2
    2144:	02000004 	andeq	r0, r0, #4
    2148:	00001243 	andeq	r1, r0, r3, asr #4
    214c:	0370c407 	cmneq	r0, #117440512	; 0x7000000
    2150:	1c0f0000 	stcne	0, cr0, [pc], {-0}
    2154:	04f0c607 	ldrbteq	ip, [r0], #1543	; 0x607
    2158:	53100000 	tstpl	r0, #0
    215c:	c8070052 	stmdagt	r7, {r1, r4, r6}
    2160:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2164:	11541100 	cmpne	r4, r0, lsl #2
    2168:	c9070000 	stmdbgt	r7, {}	; <UNPREDICTABLE>
    216c:	000000f2 	strdeq	r0, [r0], -r2
    2170:	52441002 	subpl	r1, r4, #2
    2174:	f0ca0700 			; <UNDEFINED> instruction: 0xf0ca0700
    2178:	04000004 	streq	r0, [r0], #-4
    217c:	00115e11 	andseq	r5, r1, r1, lsl lr
    2180:	f2cb0700 	vabdl.s8	q8, d11, d0
    2184:	06000000 	streq	r0, [r0], -r0
    2188:	52524210 	subspl	r4, r2, #16, 4
    218c:	f0cc0700 			; <UNDEFINED> instruction: 0xf0cc0700
    2190:	08000004 	stmdaeq	r0, {r2}
    2194:	00116811 	andseq	r6, r1, r1, lsl r8
    2198:	f2cd0700 	vabdl.s8	q8, d13, d0
    219c:	0a000000 	beq	21a4 <__Stack_Size+0x19a4>
    21a0:	31524310 	cmpcc	r2, r0, lsl r3
    21a4:	f0ce0700 			; <UNDEFINED> instruction: 0xf0ce0700
    21a8:	0c000004 	stceq	0, cr0, [r0], {4}
    21ac:	00117211 	andseq	r7, r1, r1, lsl r2
    21b0:	f2cf0700 	vabdl.s8	q8, d15, d0
    21b4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    21b8:	32524310 	subscc	r4, r2, #16, 6	; 0x40000000
    21bc:	f0d00700 			; <UNDEFINED> instruction: 0xf0d00700
    21c0:	10000004 	andne	r0, r0, r4
    21c4:	00117c11 	andseq	r7, r1, r1, lsl ip
    21c8:	f2d10700 	vabdl.s16	q8, d1, d0
    21cc:	12000000 	andne	r0, r0, #0
    21d0:	33524310 	cmpcc	r2, #16, 6	; 0x40000000
    21d4:	f0d20700 			; <UNDEFINED> instruction: 0xf0d20700
    21d8:	14000004 	strne	r0, [r0], #-4
    21dc:	00118611 	andseq	r8, r1, r1, lsl r6
    21e0:	f2d30700 	vabdl.s16	q8, d3, d0
    21e4:	16000000 	strne	r0, [r0], -r0
    21e8:	000f3511 	andeq	r3, pc, r1, lsl r5	; <UNPREDICTABLE>
    21ec:	f0d40700 			; <UNDEFINED> instruction: 0xf0d40700
    21f0:	18000004 	stmdane	r0, {r2}
    21f4:	00119011 	andseq	r9, r1, r1, lsl r0
    21f8:	f2d50700 	vabdl.s16	q8, d5, d0
    21fc:	1a000000 	bne	2204 <__Stack_Size+0x1a04>
    2200:	00f20c00 	rscseq	r0, r2, r0, lsl #24
    2204:	e1020000 	mrs	r0, (UNDEF: 2)
    2208:	0700000f 	streq	r0, [r0, -pc]
    220c:	000441d6 	ldrdeq	r4, [r4], -r6
    2210:	0ef60400 	cdpeq	4, 15, cr0, cr6, cr0, {0}
    2214:	07080000 	streq	r0, [r8, -r0]
    2218:	000524e7 	andeq	r2, r5, r7, ror #9
    221c:	52431000 	subpl	r1, r3, #0
    2220:	33e80700 	mvncc	r0, #0, 14
    2224:	00000001 	andeq	r0, r0, r1
    2228:	52534310 	subspl	r4, r3, #16, 6	; 0x40000000
    222c:	33e90700 	mvncc	r0, #0, 14
    2230:	04000001 	streq	r0, [r0], #-1
    2234:	0f700400 	svceq	0x00700400
    2238:	07380000 	ldreq	r0, [r8, -r0]!
    223c:	00065df4 	strdeq	r5, [r6], -r4
    2240:	115e1100 	cmpne	lr, r0, lsl #2
    2244:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    2248:	0000065d 	andeq	r0, r0, sp, asr r6
    224c:	52441000 	subpl	r1, r4, #0
    2250:	f6070031 			; <UNDEFINED> instruction: 0xf6070031
    2254:	00000143 	andeq	r0, r0, r3, asr #2
    2258:	11681104 	cmnne	r8, r4, lsl #2
    225c:	f7070000 			; <UNDEFINED> instruction: 0xf7070000
    2260:	00000662 	andeq	r0, r0, r2, ror #12
    2264:	52441006 	subpl	r1, r4, #6
    2268:	f8070032 			; <UNDEFINED> instruction: 0xf8070032
    226c:	00000143 	andeq	r0, r0, r3, asr #2
    2270:	11721108 	cmnne	r2, r8, lsl #2
    2274:	f9070000 			; <UNDEFINED> instruction: 0xf9070000
    2278:	00000662 	andeq	r0, r0, r2, ror #12
    227c:	5244100a 	subpl	r1, r4, #10
    2280:	fa070033 	blx	1c2354 <__Stack_Size+0x1c1b54>
    2284:	00000143 	andeq	r0, r0, r3, asr #2
    2288:	117c110c 	cmnne	ip, ip, lsl #2
    228c:	fb070000 	blx	1c2296 <__Stack_Size+0x1c1a96>
    2290:	00000662 	andeq	r0, r0, r2, ror #12
    2294:	5244100e 	subpl	r1, r4, #14
    2298:	fc070034 	stc2	0, cr0, [r7], {52}	; 0x34
    229c:	00000143 	andeq	r0, r0, r3, asr #2
    22a0:	11861110 	orrne	r1, r6, r0, lsl r1
    22a4:	fd070000 	stc2	0, cr0, [r7, #-0]
    22a8:	00000662 	andeq	r0, r0, r2, ror #12
    22ac:	52441012 	subpl	r1, r4, #18
    22b0:	fe070035 	mcr2	0, 0, r0, cr7, cr5, {1}
    22b4:	00000143 	andeq	r0, r0, r3, asr #2
    22b8:	11901114 	orrsne	r1, r0, r4, lsl r1
    22bc:	ff070000 			; <UNDEFINED> instruction: 0xff070000
    22c0:	00000662 	andeq	r0, r0, r2, ror #12
    22c4:	52441716 	subpl	r1, r4, #5767168	; 0x580000
    22c8:	00070036 	andeq	r0, r7, r6, lsr r0
    22cc:	00014301 	andeq	r4, r1, r1, lsl #6
    22d0:	4b181800 	blmi	6082d8 <__Stack_Size+0x607ad8>
    22d4:	07000013 	smladeq	r0, r3, r0, r0
    22d8:	06620101 	strbteq	r0, [r2], -r1, lsl #2
    22dc:	171a0000 	ldrne	r0, [sl, -r0]
    22e0:	00375244 	eorseq	r5, r7, r4, asr #4
    22e4:	43010207 	movwmi	r0, #4615	; 0x1207
    22e8:	1c000001 	stcne	0, cr0, [r0], {1}
    22ec:	00119a18 	andseq	r9, r1, r8, lsl sl
    22f0:	01030700 	tsteq	r3, r0, lsl #14
    22f4:	00000662 	andeq	r0, r0, r2, ror #12
    22f8:	5244171e 	subpl	r1, r4, #7864320	; 0x780000
    22fc:	04070038 	streq	r0, [r7], #-56	; 0x38
    2300:	00014301 	andeq	r4, r1, r1, lsl #6
    2304:	a4182000 	ldrge	r2, [r8], #-0
    2308:	07000011 	smladeq	r0, r1, r0, r0
    230c:	06620105 	strbteq	r0, [r2], -r5, lsl #2
    2310:	17220000 	strne	r0, [r2, -r0]!
    2314:	00395244 	eorseq	r5, r9, r4, asr #4
    2318:	43010607 	movwmi	r0, #5639	; 0x1607
    231c:	24000001 	strcs	r0, [r0], #-1
    2320:	0012a618 	andseq	sl, r2, r8, lsl r6
    2324:	01070700 	tsteq	r7, r0, lsl #14
    2328:	00000662 	andeq	r0, r0, r2, ror #12
    232c:	10f01826 	rscsne	r1, r0, r6, lsr #16
    2330:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    2334:	00014301 	andeq	r4, r1, r1, lsl #6
    2338:	b1182800 	tstlt	r8, r0, lsl #16
    233c:	07000012 	smladeq	r0, r2, r0, r0
    2340:	06620109 	strbteq	r0, [r2], -r9, lsl #2
    2344:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    2348:	000012fa 	strdeq	r1, [r0], -sl
    234c:	33010a07 	movwcc	r0, #6663	; 0x1a07
    2350:	2c000001 	stccs	0, cr0, [r0], {1}
    2354:	00524317 	subseq	r4, r2, r7, lsl r3
    2358:	33010b07 	movwcc	r0, #6919	; 0x1b07
    235c:	30000001 	andcc	r0, r0, r1
    2360:	52534317 	subspl	r4, r3, #1543503872	; 0x5c000000
    2364:	010c0700 	tsteq	ip, r0, lsl #14
    2368:	00000133 	andeq	r0, r0, r3, lsr r1
    236c:	130a0034 	movwne	r0, #41012	; 0xa034
    2370:	0a000001 	beq	237c <__Stack_Size+0x1b7c>
    2374:	0000011e 	andeq	r0, r0, lr, lsl r1
    2378:	000d4f19 	andeq	r4, sp, r9, lsl pc
    237c:	15070c00 	strne	r0, [r7, #-3072]	; 0xc00
    2380:	0006a901 	andeq	sl, r6, r1, lsl #18
    2384:	0c311800 	ldceq	8, cr1, [r1], #-0
    2388:	16070000 	strne	r0, [r7], -r0
    238c:	0000f201 	andeq	pc, r0, r1, lsl #4
    2390:	e3180000 	tst	r8, #0
    2394:	0700000a 	streq	r0, [r0, -sl]
    2398:	00f20117 	rscseq	r0, r2, r7, lsl r1
    239c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
    23a0:	00000afb 	strdeq	r0, [r0], -fp
    23a4:	fd011807 	stc2	8, cr1, [r1, #-28]	; 0xffffffe4
    23a8:	04000000 	streq	r0, [r0], #-0
    23ac:	000b1118 	andeq	r1, fp, r8, lsl r1
    23b0:	01190700 	tsteq	r9, r0, lsl #14
    23b4:	000000fd 	strdeq	r0, [r0], -sp
    23b8:	100f0008 	andne	r0, pc, r8
    23bc:	06fa6001 	ldrbteq	r6, [sl], r1
    23c0:	42110000 	andsmi	r0, r1, #0
    23c4:	0100000f 	tsteq	r0, pc
    23c8:	0000fd62 	andeq	pc, r0, r2, ror #26
    23cc:	cb110000 	blgt	4423d4 <__Stack_Size+0x441bd4>
    23d0:	0100000e 	tsteq	r0, lr
    23d4:	0000f267 	andeq	pc, r0, r7, ror #4
    23d8:	e7110400 	ldr	r0, [r1, -r0, lsl #8]
    23dc:	0100000e 	tsteq	r0, lr
    23e0:	0000f26a 	andeq	pc, r0, sl, ror #4
    23e4:	87110600 	ldrhi	r0, [r1, -r0, lsl #12]
    23e8:	0100000f 	tsteq	r0, pc
    23ec:	0000f26d 	andeq	pc, r0, sp, ror #4
    23f0:	66110800 	ldrvs	r0, [r1], -r0, lsl #16
    23f4:	01000010 	tsteq	r0, r0, lsl r0
    23f8:	0000f274 	andeq	pc, r0, r4, ror r2	; <UNPREDICTABLE>
    23fc:	8e110a00 	vnmlshi.f32	s0, s2, s0
    2400:	01000010 	tsteq	r0, r0, lsl r0
    2404:	0000f277 	andeq	pc, r0, r7, ror r2	; <UNPREDICTABLE>
    2408:	02000c00 	andeq	r0, r0, #0, 24
    240c:	000012c6 	andeq	r1, r0, r6, asr #5
    2410:	06a97a01 	strteq	r7, [r9], r1, lsl #20
    2414:	010d0000 	mrseq	r0, (UNDEF: 13)
    2418:	07209301 	streq	r9, [r0, -r1, lsl #6]!
    241c:	5f0e0000 	svcpl	0x000e0000
    2420:	0100000f 	tsteq	r0, pc
    2424:	000f250e 	andeq	r2, pc, lr, lsl #10
    2428:	7a0e0200 	bvc	382c30 <__Stack_Size+0x382430>
    242c:	03000012 	movweq	r0, #18
    2430:	13000200 	movwne	r0, #512	; 0x200
    2434:	97010000 	strls	r0, [r1, -r0]
    2438:	00000705 	andeq	r0, r0, r5, lsl #14
    243c:	9a01010d 	bls	42878 <__Stack_Size+0x42078>
    2440:	00000765 	andeq	r0, r0, r5, ror #14
    2444:	0011460e 	andseq	r4, r1, lr, lsl #12
    2448:	350e0000 	strcc	r0, [lr, #-0]
    244c:	04000013 	streq	r0, [r0], #-19
    2450:	000f9f0e 	andeq	r9, pc, lr, lsl #30
    2454:	ad0e2800 	stcge	8, cr2, [lr, #-0]
    2458:	c800000f 	stmdagt	r0, {r0, r1, r2, r3}
    245c:	12950e00 	addsne	r0, r5, #0, 28
    2460:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
    2464:	00001020 	andeq	r1, r0, r0, lsr #32
    2468:	11080e10 	tstne	r8, r0, lsl lr
    246c:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
    2470:	000011ae 	andeq	r1, r0, lr, lsr #3
    2474:	08020018 	stmdaeq	r2, {r3, r4}
    2478:	01000012 	tsteq	r0, r2, lsl r0
    247c:	00072ba2 	andeq	r2, r7, r2, lsr #23
    2480:	01040f00 	tsteq	r4, r0, lsl #30
    2484:	00079da4 	andeq	r9, r7, r4, lsr #27
    2488:	0e5a1100 	rdfeqe	f1, f2, f0
    248c:	a6010000 	strge	r0, [r1], -r0
    2490:	000000f2 	strdeq	r0, [r0], -r2
    2494:	11be1100 			; <UNDEFINED> instruction: 0x11be1100
    2498:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    249c:	00000720 	andeq	r0, r0, r0, lsr #14
    24a0:	0e501102 	rdfeqs	f1, f0, f2
    24a4:	ac010000 	stcge	0, cr0, [r1], {-0}
    24a8:	00000765 	andeq	r0, r0, r5, ror #14
    24ac:	4f020003 	svcmi	0x00020003
    24b0:	01000012 	tsteq	r0, r2, lsl r0
    24b4:	000770ae 	andeq	r7, r7, lr, lsr #1
    24b8:	011c0f00 	tsteq	ip, r0, lsl #30
    24bc:	000805b0 			; <UNDEFINED> instruction: 0x000805b0
    24c0:	52431000 	subpl	r1, r3, #0
    24c4:	b201004c 	andlt	r0, r1, #76	; 0x4c
    24c8:	00000805 	andeq	r0, r0, r5, lsl #16
    24cc:	52431000 	subpl	r1, r3, #0
    24d0:	b3010048 	movwlt	r0, #4168	; 0x1048
    24d4:	00000805 	andeq	r0, r0, r5, lsl #16
    24d8:	44491004 	strbmi	r1, [r9], #-4
    24dc:	b4010052 	strlt	r0, [r1], #-82	; 0x52
    24e0:	00000805 	andeq	r0, r0, r5, lsl #16
    24e4:	444f1008 	strbmi	r1, [pc], #-8	; 24ec <__Stack_Size+0x1cec>
    24e8:	b5010052 	strlt	r0, [r1, #-82]	; 0x52
    24ec:	00000805 	andeq	r0, r0, r5, lsl #16
    24f0:	0e4b110c 	dvfeqe	f1, f3, #4.0
    24f4:	b6010000 	strlt	r0, [r1], -r0
    24f8:	00000805 	andeq	r0, r0, r5, lsl #16
    24fc:	52421010 	subpl	r1, r2, #16
    2500:	b7010052 	smlsdlt	r1, r2, r0, r0
    2504:	00000805 	andeq	r0, r0, r5, lsl #16
    2508:	13771114 	cmnne	r7, #20, 2
    250c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    2510:	00000805 	andeq	r0, r0, r5, lsl #16
    2514:	fd0c0018 	stc2	0, cr0, [ip, #-96]	; 0xffffffa0
    2518:	02000000 	andeq	r0, r0, #0
    251c:	000011f6 	strdeq	r1, [r0], -r6
    2520:	07a8b901 	streq	fp, [r8, r1, lsl #18]!
    2524:	db1a0000 	blle	68252c <__Stack_Size+0x681d2c>
    2528:	01000007 	tsteq	r0, r7
    252c:	0012183b 	andseq	r1, r2, fp, lsr r8
    2530:	00001608 	andeq	r1, r0, r8, lsl #12
    2534:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
    2538:	1b000008 	blne	2560 <__Stack_Size+0x1d60>
    253c:	00001312 	andeq	r1, r0, r2, lsl r3
    2540:	01133b01 	tsteq	r3, r1, lsl #22
    2544:	50010000 	andpl	r0, r1, r0
    2548:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    254c:	293b0100 	ldmdbcs	fp!, {r8}
    2550:	c4000001 	strgt	r0, [r0], #-1
    2554:	1c000003 	stcne	0, cr0, [r0], {3}
    2558:	006c6176 	rsbeq	r6, ip, r6, ror r1
    255c:	01293b01 	teqeq	r9, r1, lsl #22
    2560:	03e50000 	mvneq	r0, #0
    2564:	1d000000 	stcne	0, cr0, [r0, #-0]
    2568:	00000beb 	andeq	r0, r0, fp, ror #23
    256c:	01784001 	cmneq	r8, r1
    2570:	122e0000 	eorne	r0, lr, #0
    2574:	00120800 	andseq	r0, r2, r0, lsl #16
    2578:	9c010000 	stcls	0, cr0, [r1], {-0}
    257c:	0000088e 	andeq	r0, r0, lr, lsl #17
    2580:	0013121e 	andseq	r1, r3, lr, lsl r2
    2584:	13400100 	movtne	r0, #256	; 0x100
    2588:	1b000001 	blne	2594 <__Stack_Size+0x1d94>
    258c:	1c000004 	stcne	0, cr0, [r0], {4}
    2590:	006e6970 	rsbeq	r6, lr, r0, ror r9
    2594:	01294001 	teqeq	r9, r1
    2598:	043c0000 	ldrteq	r0, [ip], #-0
    259c:	1a000000 	bne	25a4 <__Stack_Size+0x1da4>
    25a0:	00000cb1 			; <UNDEFINED> instruction: 0x00000cb1
    25a4:	12404901 	subne	r4, r0, #16384	; 0x4000
    25a8:	00500800 	subseq	r0, r0, r0, lsl #16
    25ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    25b0:	00000957 	andeq	r0, r0, r7, asr r9
    25b4:	0013121e 	andseq	r1, r3, lr, lsl r2
    25b8:	13490100 	movtne	r0, #37120	; 0x9100
    25bc:	5d000001 	stcpl	0, cr0, [r0, #-4]
    25c0:	1c000004 	stcne	0, cr0, [r0], {4}
    25c4:	006e6970 	rsbeq	r6, lr, r0, ror r9
    25c8:	01294901 	teqeq	r9, r1, lsl #18
    25cc:	047b0000 	ldrbteq	r0, [fp], #-0
    25d0:	0a1e0000 	beq	7825d8 <__Stack_Size+0x781dd8>
    25d4:	0100000e 	tsteq	r0, lr
    25d8:	00012949 	andeq	r2, r1, r9, asr #18
    25dc:	00049c00 	andeq	r9, r4, r0, lsl #24
    25e0:	10311e00 	eorsne	r1, r1, r0, lsl #28
    25e4:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    25e8:	00000113 	andeq	r0, r0, r3, lsl r1
    25ec:	000004e4 	andeq	r0, r0, r4, ror #9
    25f0:	000f3a1b 	andeq	r3, pc, fp, lsl sl	; <UNPREDICTABLE>
    25f4:	29490100 	stmdbcs	r9, {r8}^
    25f8:	02000001 	andeq	r0, r0, #1
    25fc:	631f0091 	tstvs	pc, #145	; 0x91
    2600:	134d0100 	movtne	r0, #53504	; 0xd100
    2604:	02000001 	andeq	r0, r0, #1
    2608:	20000005 	andcs	r0, r0, r5
    260c:	0800125c 	stmdaeq	r0, {r2, r3, r4, r6, r9, ip}
    2610:	00000815 	andeq	r0, r0, r5, lsl r8
    2614:	0000091a 	andeq	r0, r0, sl, lsl r9
    2618:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
    261c:	01210077 	teqeq	r1, r7, ror r0
    2620:	00790251 	rsbseq	r0, r9, r1, asr r2
    2624:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    2628:	20000078 	andcs	r0, r0, r8, ror r0
    262c:	08001272 	stmdaeq	r0, {r1, r4, r5, r6, r9, ip}
    2630:	00000815 	andeq	r0, r0, r5, lsl r8
    2634:	0000093a 	andeq	r0, r0, sl, lsr r9
    2638:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
    263c:	0121007a 	teqeq	r1, sl, ror r0
    2640:	00790251 	rsbseq	r0, r9, r1, asr r2
    2644:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    2648:	22000078 	andcs	r0, r0, #120	; 0x78
    264c:	08001288 	stmdaeq	r0, {r3, r7, r9, ip}
    2650:	00000815 	andeq	r0, r0, r5, lsl r8
    2654:	02520121 	subseq	r0, r2, #1073741832	; 0x40000008
    2658:	01210077 	teqeq	r1, r7, ror r0
    265c:	00790251 	rsbseq	r0, r9, r1, asr r2
    2660:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
    2664:	00000078 	andeq	r0, r0, r8, ror r0
    2668:	0011c923 	andseq	ip, r1, r3, lsr #18
    266c:	01200100 	teqeq	r0, r0, lsl #2
    2670:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
    2674:	0000000a 	andeq	r0, r0, sl
    2678:	09899c01 	stmibeq	r9, {r0, sl, fp, ip, pc}
    267c:	39240000 	stmdbcc	r4!, {}	; <UNPREDICTABLE>
    2680:	01000011 	tsteq	r0, r1, lsl r0
    2684:	09890120 	stmibeq	r9, {r5, r8}
    2688:	50010000 	andpl	r0, r1, r0
    268c:	00686325 	rsbeq	r6, r8, r5, lsr #6
    2690:	e7012001 	str	r2, [r1, -r1]
    2694:	01000000 	mrseq	r0, (UNDEF: 0)
    2698:	04080051 	streq	r0, [r8], #-81	; 0x51
    269c:	000004f5 	strdeq	r0, [r0], -r5
    26a0:	0010ad23 	andseq	sl, r0, r3, lsr #26
    26a4:	01260100 	teqeq	r6, r0, lsl #2
    26a8:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
    26ac:	00000016 	andeq	r0, r0, r6, lsl r0
    26b0:	09d69c01 	ldmibeq	r6, {r0, sl, fp, ip, pc}^
    26b4:	39260000 	stmdbcc	r6!, {}	; <UNPREDICTABLE>
    26b8:	01000011 	tsteq	r0, r1, lsl r0
    26bc:	09890126 	stmibeq	r9, {r1, r2, r5, r8}
    26c0:	052b0000 	streq	r0, [fp, #-0]!
    26c4:	73270000 	teqvc	r7, #0
    26c8:	01007274 	tsteq	r0, r4, ror r2
    26cc:	09d60126 	ldmibeq	r6, {r1, r2, r5, r8}^
    26d0:	05490000 	strbeq	r0, [r9, #-0]
    26d4:	ac220000 	stcge	0, cr0, [r2], #-0
    26d8:	57080012 	smladpl	r8, r2, r0, r0
    26dc:	21000009 	tstcs	r0, r9
    26e0:	75025001 	strvc	r5, [r2, #-1]
    26e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    26e8:	0000e704 	andeq	lr, r0, r4, lsl #14
    26ec:	11322300 	teqne	r2, r0, lsl #6
    26f0:	2f010000 	svccs	0x00010000
    26f4:	0012b001 	andseq	fp, r2, r1
    26f8:	00002808 	andeq	r2, r0, r8, lsl #16
    26fc:	579c0100 	ldrpl	r0, [ip, r0, lsl #2]
    2700:	2700000a 	strcs	r0, [r0, -sl]
    2704:	00746d66 	rsbseq	r6, r4, r6, ror #26
    2708:	dc012f01 	stcle	15, cr2, [r1], {1}
    270c:	8c000000 	stchi	0, cr0, [r0], {-0}
    2710:	26000005 	strcs	r0, [r0], -r5
    2714:	0000111d 	andeq	r1, r0, sp, lsl r1
    2718:	08012f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, sp}
    271c:	b8000001 	stmdalt	r0, {r0}
    2720:	28000005 	stmdacs	r0, {r0, r2}
    2724:	0000104c 	andeq	r1, r0, ip, asr #32
    2728:	57013101 	strpl	r3, [r1, -r1, lsl #2]
    272c:	0300000a 	movweq	r0, #10
    2730:	207eb091 			; <UNDEFINED> instruction: 0x207eb091
    2734:	080012c0 	stmdaeq	r0, {r6, r7, r9, ip}
    2738:	000011f3 	strdeq	r1, [r0], -r3
    273c:	00000a3d 	andeq	r0, r0, sp, lsr sl
    2740:	03510121 	cmpeq	r1, #1073741832	; 0x40000008
    2744:	215001f3 	ldrshcs	r0, [r0, #-19]	; 0xffffffed
    2748:	7d025001 	stcvc	0, cr5, [r2, #-4]
    274c:	cc220000 	stcgt	0, cr0, [r2], #-0
    2750:	8f080012 	svchi	0x00080012
    2754:	21000009 	tstcs	r0, r9
    2758:	7d025101 	stfvcs	f5, [r2, #-4]
    275c:	50012100 	andpl	r2, r1, r0, lsl #2
    2760:	38000c05 	stmdacc	r0, {r0, r2, sl, fp}
    2764:	00004001 	andeq	r4, r0, r1
    2768:	0000d515 	andeq	sp, r0, r5, lsl r5
    276c:	000a6700 	andeq	r6, sl, r0, lsl #14
    2770:	00bb1600 	adcseq	r1, fp, r0, lsl #12
    2774:	00c70000 	sbceq	r0, r7, r0
    2778:	000dbb23 	andeq	fp, sp, r3, lsr #22
    277c:	01390100 	teqeq	r9, r0, lsl #2
    2780:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
    2784:	0000001a 	andeq	r0, r0, sl, lsl r0
    2788:	0ab49c01 	beq	fed29794 <BootRAM+0xdc99f35>
    278c:	66250000 	strtvs	r0, [r5], -r0
    2790:	0100746d 	tsteq	r0, sp, ror #8
    2794:	00dc0139 	sbcseq	r0, ip, r9, lsr r1
    2798:	91020000 	mrsls	r0, (UNDEF: 2)
    279c:	1d282970 	stcne	9, cr2, [r8, #-448]!	; 0xfffffe40
    27a0:	01000011 	tsteq	r0, r1, lsl r0
    27a4:	0108013b 	tsteq	r8, fp, lsr r1
    27a8:	91020000 	mrsls	r0, (UNDEF: 2)
    27ac:	12e82264 	rscne	r2, r8, #100, 4	; 0x40000006
    27b0:	09dc0800 	ldmibeq	ip, {fp}^
    27b4:	01210000 	teqeq	r1, r0
    27b8:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    27bc:	03500121 	cmpeq	r0, #1073741832	; 0x40000008
    27c0:	00065091 	muleq	r6, r1, r0
    27c4:	0f1d2300 	svceq	0x001d2300
    27c8:	41010000 	mrsmi	r0, (UNDEF: 1)
    27cc:	0012f401 	andseq	pc, r2, r1, lsl #8
    27d0:	00009c08 	andeq	r9, r0, r8, lsl #24
    27d4:	e89c0100 	ldm	ip, {r8}
    27d8:	2600000b 	strcs	r0, [r0], -fp
    27dc:	00000d8a 	andeq	r0, r0, sl, lsl #27
    27e0:	c9014101 	stmdbgt	r1, {r0, r8, lr}
    27e4:	cb000000 	blgt	27ec <__Stack_Size+0x1fec>
    27e8:	26000005 	strcs	r0, [r0], -r5
    27ec:	00001be9 	andeq	r1, r0, r9, ror #23
    27f0:	25014101 	strcs	r4, [r1, #-257]	; 0x101
    27f4:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    27f8:	2a000005 	bcs	2814 <__Stack_Size+0x2014>
    27fc:	43010069 	movwmi	r0, #4201	; 0x1069
    2800:	00005b01 	andeq	r5, r0, r1, lsl #22
    2804:	00060700 	andeq	r0, r6, r0, lsl #14
    2808:	73632b00 	cmnvc	r3, #0, 22
    280c:	01440100 	mrseq	r0, (UNDEF: 84)
    2810:	00000be8 	andeq	r0, r0, r8, ror #23
    2814:	20549102 	subscs	r9, r4, r2, lsl #2
    2818:	08001306 	stmdaeq	r0, {r1, r2, r8, r9, ip}
    281c:	00001212 	andeq	r1, r0, r2, lsl r2
    2820:	00000b24 	andeq	r0, r0, r4, lsr #22
    2824:	01520121 	cmpeq	r2, r1, lsr #2
    2828:	51012141 	tstpl	r1, r1, asr #2
    282c:	01213001 	teqeq	r1, r1
    2830:	54910250 	ldrpl	r0, [r1], #592	; 0x250
    2834:	131c2000 	tstne	ip, #0
    2838:	0a670800 	beq	19c4840 <__Stack_Size+0x19c4040>
    283c:	0b410000 	bleq	1042844 <__Stack_Size+0x1042044>
    2840:	01210000 	teqeq	r1, r0
    2844:	54910251 	ldrpl	r0, [r1], #593	; 0x251
    2848:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    284c:	00770a03 	rsbseq	r0, r7, r3, lsl #20
    2850:	26200008 	strtcs	r0, [r0], -r8
    2854:	12080013 	andne	r0, r8, #19
    2858:	60000012 	andvs	r0, r0, r2, lsl r0
    285c:	2100000b 	tstcs	r0, fp
    2860:	41015201 	tstmi	r1, r1, lsl #4
    2864:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    2868:	01210075 	teqeq	r1, r5, ror r0
    286c:	54910250 	ldrpl	r0, [r1], #592	; 0x250
    2870:	13342000 	teqne	r4, #0
    2874:	0a670800 	beq	19c487c <__Stack_Size+0x19c407c>
    2878:	0b7f0000 	bleq	1fc2880 <__Stack_Size+0x1fc2080>
    287c:	01210000 	teqeq	r1, r0
    2880:	00740451 	rsbseq	r0, r4, r1, asr r4
    2884:	01211a37 	teqeq	r1, r7, lsr sl
    2888:	19030550 	stmdbne	r3, {r4, r6, r8, sl}
    288c:	00080077 	andeq	r0, r8, r7, ror r0
    2890:	00133c20 	andseq	r3, r3, r0, lsr #24
    2894:	000a6708 	andeq	r6, sl, r8, lsl #14
    2898:	000b9600 	andeq	r9, fp, r0, lsl #12
    289c:	50012100 	andpl	r2, r1, r0, lsl #2
    28a0:	77110305 	ldrvc	r0, [r1, -r5, lsl #6]
    28a4:	20000800 	andcs	r0, r0, r0, lsl #16
    28a8:	0800135e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, ip}
    28ac:	00000a67 	andeq	r0, r0, r7, ror #20
    28b0:	00000bb3 			; <UNDEFINED> instruction: 0x00000bb3
    28b4:	02510121 	subseq	r0, r1, #1073741832	; 0x40000008
    28b8:	01215491 			; <UNDEFINED> instruction: 0x01215491
    28bc:	0a030550 	beq	c3e04 <__Stack_Size+0xc3604>
    28c0:	00080077 	andeq	r0, r8, r7, ror r0
    28c4:	00136e20 	andseq	r6, r3, r0, lsr #28
    28c8:	000a6708 	andeq	r6, sl, r8, lsl #14
    28cc:	000bcf00 	andeq	ip, fp, r0, lsl #30
    28d0:	51012100 	mrspl	r2, (UNDEF: 17)
    28d4:	01213001 	teqeq	r1, r1
    28d8:	19030550 	stmdbne	r3, {r4, r6, r8, sl}
    28dc:	00080077 	andeq	r0, r8, r7, ror r0
    28e0:	00137a22 	andseq	r7, r3, r2, lsr #20
    28e4:	000a6708 	andeq	r6, sl, r8, lsl #14
    28e8:	51012100 	mrspl	r2, (UNDEF: 17)
    28ec:	01213001 	teqeq	r1, r1
    28f0:	17030550 	smlsdne	r3, r0, r5, r0
    28f4:	00080077 	andeq	r0, r8, r7, ror r0
    28f8:	00d51500 	sbcseq	r1, r5, r0, lsl #10
    28fc:	0bf80000 	bleq	ffe02904 <BootRAM+0xed730a5>
    2900:	bb160000 	bllt	582908 <__Stack_Size+0x582108>
    2904:	10000000 	andne	r0, r0, r0
    2908:	0f7c2300 	svceq	0x007c2300
    290c:	65010000 	strvs	r0, [r1, #-0]
    2910:	00139001 	andseq	r9, r3, r1
    2914:	00002808 	andeq	r2, r0, r8, lsl #16
    2918:	5e9c0100 	fmlple	f0, f4, f0
    291c:	2600000c 	strcs	r0, [r0], -ip
    2920:	00000f82 	andeq	r0, r0, r2, lsl #31
    2924:	c9016501 	stmdbgt	r1, {r0, r8, sl, sp, lr}
    2928:	54000000 	strpl	r0, [r0], #-0
    292c:	2a000006 	bcs	294c <__Stack_Size+0x214c>
    2930:	00786469 	rsbseq	r6, r8, r9, ror #8
    2934:	5b016701 	blpl	5c540 <__Stack_Size+0x5bd40>
    2938:	80000000 	andhi	r0, r0, r0
    293c:	20000006 	andcs	r0, r0, r6
    2940:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
    2944:	00000a67 	andeq	r0, r0, r7, ror #20
    2948:	00000c45 	andeq	r0, r0, r5, asr #24
    294c:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    2950:	00771b03 	rsbseq	r1, r7, r3, lsl #22
    2954:	b02c0008 	eorlt	r0, ip, r8
    2958:	67080013 	smladvs	r8, r3, r0, r0
    295c:	2100000a 	tstcs	r0, sl
    2960:	30015101 	andcc	r5, r1, r1, lsl #2
    2964:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
    2968:	00773c03 	rsbseq	r3, r7, r3, lsl #24
    296c:	23000008 	movwcs	r0, #8
    2970:	00000cfe 	strdeq	r0, [r0], -lr
    2974:	b8016e01 	stmdalt	r1, {r0, r9, sl, fp, sp, lr}
    2978:	88080013 	stmdahi	r8, {r0, r1, r4}
    297c:	01000000 	mrseq	r0, (UNDEF: 0)
    2980:	000d4d9c 	muleq	sp, ip, sp
    2984:	10dd2800 	sbcsne	r2, sp, r0, lsl #16
    2988:	6f010000 	svcvs	0x00010000
    298c:	00079d01 	andeq	r9, r7, r1, lsl #26
    2990:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    2994:	00100c28 	andseq	r0, r0, r8, lsr #24
    2998:	01700100 	cmneq	r0, r0, lsl #2
    299c:	000006fa 	strdeq	r0, [r0], -sl
    29a0:	2d689102 	stfcsp	f1, [r8, #-8]!
    29a4:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    29a8:	5b018b01 	blpl	655b4 <__Stack_Size+0x64db4>
    29ac:	a4000000 	strge	r0, [r0], #-0
    29b0:	2900000c 	stmdbcs	r0, {r2, r3}
    29b4:	128b2d00 	addne	r2, fp, #0, 26
    29b8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    29bc:	00005b01 	andeq	r5, r0, r1, lsl #22
    29c0:	000cb600 	andeq	fp, ip, r0, lsl #12
    29c4:	20002900 	andcs	r2, r0, r0, lsl #18
    29c8:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
    29cc:	0000122f 	andeq	r1, r0, pc, lsr #4
    29d0:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    29d4:	01510121 	cmpeq	r1, r1, lsr #2
    29d8:	50012131 	andpl	r2, r1, r1, lsr r1
    29dc:	40000a03 	andmi	r0, r0, r3, lsl #20
    29e0:	13d02000 	bicsne	r2, r0, #0
    29e4:	122f0800 	eorne	r0, pc, #0, 16
    29e8:	0ce90000 	stcleq	0, cr0, [r9]
    29ec:	01210000 	teqeq	r1, r0
    29f0:	21310151 	teqcs	r1, r1, asr r1
    29f4:	74025001 	strvc	r5, [r2], #-1
    29f8:	ec200000 	stc	0, cr0, [r0], #-0
    29fc:	46080013 			; <UNDEFINED> instruction: 0x46080013
    2a00:	03000012 	movweq	r0, #18
    2a04:	2100000d 	tstcs	r0, sp
    2a08:	91025101 	tstls	r2, r1, lsl #2
    2a0c:	50012164 	andpl	r2, r1, r4, ror #2
    2a10:	00007402 	andeq	r7, r0, r2, lsl #8
    2a14:	00140420 	andseq	r0, r4, r0, lsr #8
    2a18:	00124608 	andseq	r4, r2, r8, lsl #12
    2a1c:	000d1d00 	andeq	r1, sp, r0, lsl #26
    2a20:	51012100 	mrspl	r2, (UNDEF: 17)
    2a24:	21649102 	cmncs	r4, r2, lsl #2
    2a28:	74025001 	strvc	r5, [r2], #-1
    2a2c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    2a30:	69080014 	stmdbvs	r8, {r2, r4}
    2a34:	37000012 	smladcc	r0, r2, r0, r0
    2a38:	2100000d 	tstcs	r0, sp
    2a3c:	91025101 	tstls	r2, r1, lsl #2
    2a40:	50012168 	andpl	r2, r1, r8, ror #2
    2a44:	00007402 	andeq	r7, r0, r2, lsl #8
    2a48:	00143622 	andseq	r3, r4, r2, lsr #12
    2a4c:	00127b08 	andseq	r7, r2, r8, lsl #22
    2a50:	51012100 	mrspl	r2, (UNDEF: 17)
    2a54:	01213101 	teqeq	r1, r1, lsl #2
    2a58:	00740250 	rsbseq	r0, r4, r0, asr r2
    2a5c:	912e0000 	teqls	lr, r0
    2a60:	0100000b 	tsteq	r0, fp
    2a64:	14400191 	strbne	r0, [r0], #-401	; 0x191
    2a68:	00480800 	subeq	r0, r8, r0, lsl #16
    2a6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a70:	000b1623 	andeq	r1, fp, r3, lsr #12
    2a74:	019b0100 	orrseq	r0, fp, r0, lsl #2
    2a78:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
    2a7c:	00000060 	andeq	r0, r0, r0, rrx
    2a80:	0d839c01 	stceq	12, cr9, [r3, #4]
    2a84:	682f0000 	stmdavs	pc!, {}	; <UNPREDICTABLE>
    2a88:	01000013 	tsteq	r0, r3, lsl r0
    2a8c:	0030019c 	mlaseq	r0, ip, r1, r0
    2a90:	00000000 	andeq	r0, r0, r0
    2a94:	00027f30 	andeq	r7, r2, r0, lsr pc
    2a98:	02b00100 	adcseq	r0, r0, #0, 2
    2a9c:	00000030 	andeq	r0, r0, r0, lsr r0
    2aa0:	000dad01 	andeq	sl, sp, r1, lsl #26
    2aa4:	69703100 	ldmdbvs	r0!, {r8, ip, sp}^
    2aa8:	b001006e 	andlt	r0, r1, lr, rrx
    2aac:	00005b02 	andeq	r5, r0, r2, lsl #22
    2ab0:	0f183200 	svceq	0x00183200
    2ab4:	b2010000 	andlt	r0, r1, #0
    2ab8:	00003002 	andeq	r3, r0, r2
    2abc:	ce2e0000 	cdpgt	0, 2, cr0, cr14, cr0, {0}
    2ac0:	0100000c 	tsteq	r0, ip
    2ac4:	14e801c5 	strbtne	r0, [r8], #453	; 0x1c5
    2ac8:	00140800 	andseq	r0, r4, r0, lsl #16
    2acc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2ad0:	000bd723 	andeq	sp, fp, r3, lsr #14
    2ad4:	01c90100 	biceq	r0, r9, r0, lsl #2
    2ad8:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
    2adc:	0000001c 	andeq	r0, r0, ip, lsl r0
    2ae0:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    2ae4:	04330000 	ldrteq	r0, [r3], #-0
    2ae8:	08080015 	stmdaeq	r8, {r0, r2, r4}
    2aec:	34000000 	strcc	r0, [r0], #-0
    2af0:	00001071 	andeq	r1, r0, r1, ror r0
    2af4:	1301cc01 	movwne	ip, #7169	; 0x1c01
    2af8:	b7000001 	strlt	r0, [r0, -r1]
    2afc:	00000006 	andeq	r0, r0, r6
    2b00:	0b2c2300 	bleq	b0b708 <__Stack_Size+0xb0af08>
    2b04:	d6010000 	strle	r0, [r1], -r0
    2b08:	00151801 	andseq	r1, r5, r1, lsl #16
    2b0c:	00002c08 	andeq	r2, r0, r8, lsl #24
    2b10:	149c0100 	ldrne	r0, [ip], #256	; 0x100
    2b14:	2500000e 	strcs	r0, [r0, #-14]
    2b18:	01006469 	tsteq	r0, r9, ror #8
    2b1c:	0e1401d6 	mrceq	1, 0, r0, cr4, cr6, {6}
    2b20:	50010000 	andpl	r0, r1, r0
    2b24:	67040800 	strvs	r0, [r4, -r0, lsl #16]
    2b28:	35000006 	strcc	r0, [r0, #-6]
    2b2c:	000011e3 	andeq	r1, r0, r3, ror #3
    2b30:	4401e301 	strmi	lr, [r1], #-769	; 0x301
    2b34:	18080015 	stmdane	r8, {r0, r2, r4}
    2b38:	01000000 	mrseq	r0, (UNDEF: 0)
    2b3c:	000e6d9c 	muleq	lr, ip, sp
    2b40:	10802600 	addne	r2, r0, r0, lsl #12
    2b44:	e3010000 	movw	r0, #4096	; 0x1000
    2b48:	00011301 	andeq	r1, r1, r1, lsl #6
    2b4c:	0006ca00 	andeq	ip, r6, r0, lsl #20
    2b50:	10443600 	subne	r3, r4, r0, lsl #12
    2b54:	e7010000 	str	r0, [r1, -r0]
    2b58:	0000c201 	andeq	ip, r0, r1, lsl #4
    2b5c:	132c3400 	teqne	ip, #0, 8
    2b60:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    2b64:	00011301 	andeq	r1, r1, r1, lsl #6
    2b68:	0006eb00 	andeq	lr, r6, r0, lsl #22
    2b6c:	10bf3400 	adcsne	r3, pc, r0, lsl #8
    2b70:	ea010000 	b	42b78 <__Stack_Size+0x42378>
    2b74:	000e4001 	andeq	r4, lr, r1
    2b78:	0006eb00 	andeq	lr, r6, r0, lsl #22
    2b7c:	73230000 	teqvc	r3, #0
    2b80:	0100000e 	tsteq	r0, lr
    2b84:	00000209 	andeq	r0, r0, r9, lsl #4
    2b88:	002c0000 	eoreq	r0, ip, r0
    2b8c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b90:	00000e92 	muleq	r0, r2, lr
    2b94:	001c0524 	andseq	r0, ip, r4, lsr #10
    2b98:	02090100 	andeq	r0, r9, #0, 2
    2b9c:	0000011e 	andeq	r0, r0, lr, lsl r1
    2ba0:	37005001 	strcc	r5, [r0, -r1]
    2ba4:	00000e94 	muleq	r0, r4, lr
    2ba8:	5b021801 	blpl	88bb4 <__Stack_Size+0x883b4>
    2bac:	00000000 	andeq	r0, r0, r0
    2bb0:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    2bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    2bb8:	000ecc9c 	muleq	lr, ip, ip
    2bbc:	10783400 	rsbsne	r3, r8, r0, lsl #8
    2bc0:	1a010000 	bne	42bc8 <__Stack_Size+0x423c8>
    2bc4:	00017802 	andeq	r7, r1, r2, lsl #16
    2bc8:	0006fe00 	andeq	pc, r6, r0, lsl #28
    2bcc:	00002200 	andeq	r2, r0, r0, lsl #4
    2bd0:	0e6d0000 	cdpeq	0, 6, cr0, cr13, cr0, {0}
    2bd4:	01210000 	teqeq	r1, r0
    2bd8:	00300150 	eorseq	r0, r0, r0, asr r1
    2bdc:	09e12300 	stmibeq	r1!, {r8, r9, sp}^
    2be0:	32010000 	andcc	r0, r1, #0
    2be4:	00155c02 	andseq	r5, r5, r2, lsl #24
    2be8:	00006c08 	andeq	r6, r0, r8, lsl #24
    2bec:	639c0100 	orrsvs	r0, ip, #0, 2
    2bf0:	2400000f 	strcs	r0, [r0], #-15
    2bf4:	0000126a 	andeq	r1, r0, sl, ror #4
    2bf8:	63023201 	movwvs	r3, #8705	; 0x2201
    2bfc:	0100000f 	tsteq	r0, pc
    2c00:	135c3450 	cmpne	ip, #80, 8	; 0x50000000
    2c04:	33010000 	movwcc	r0, #4096	; 0x1000
    2c08:	00011302 	andeq	r1, r1, r2, lsl #6
    2c0c:	00071d00 	andeq	r1, r7, r0, lsl #26
    2c10:	0fd03400 	svceq	0x00d03400
    2c14:	34010000 	strcc	r0, [r1], #-0
    2c18:	00011302 	andeq	r1, r1, r2, lsl #6
    2c1c:	00078900 	andeq	r8, r7, r0, lsl #18
    2c20:	0f153400 	svceq	0x00153400
    2c24:	35010000 	strcc	r0, [r1, #-0]
    2c28:	00011302 	andeq	r1, r1, r2, lsl #6
    2c2c:	0007be00 	andeq	fp, r7, r0, lsl #28
    2c30:	105f3400 	subsne	r3, pc, r0, lsl #8
    2c34:	36010000 	strcc	r0, [r1], -r0
    2c38:	00011302 	andeq	r1, r1, r2, lsl #6
    2c3c:	0007f600 	andeq	pc, r7, r0, lsl #12
    2c40:	12263400 	eorne	r3, r6, #0, 8
    2c44:	37010000 	strcc	r0, [r1, -r0]
    2c48:	00011302 	andeq	r1, r1, r2, lsl #6
    2c4c:	00083300 	andeq	r3, r8, r0, lsl #6
    2c50:	11183800 	tstne	r8, r0, lsl #16
    2c54:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2c58:	000f6902 	andeq	r6, pc, r2, lsl #18
    2c5c:	83da8000 	bicshi	r8, sl, #0
    2c60:	7e387e80 	cdpvc	14, 3, cr7, cr8, cr0, {4}
    2c64:	0100000e 	tsteq	r0, lr
    2c68:	0f6f023a 	svceq	0x006f023a
    2c6c:	c2800000 	addgt	r0, r0, #0
    2c70:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    2c74:	03650408 	cmneq	r5, #8, 8	; 0x8000000
    2c78:	04080000 	streq	r0, [r8], #-0
    2c7c:	00000436 	andeq	r0, r0, r6, lsr r4
    2c80:	03210408 	teqeq	r1, #8, 8	; 0x8000000
    2c84:	b5230000 	strlt	r0, [r3, #-0]!
    2c88:	0100000e 	tsteq	r0, lr
    2c8c:	15c80255 	strbne	r0, [r8, #597]	; 0x255
    2c90:	00240800 	eoreq	r0, r4, r0, lsl #16
    2c94:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c98:	00000f9d 	muleq	r0, sp, pc	; <UNPREDICTABLE>
    2c9c:	000e7e38 	andeq	r7, lr, r8, lsr lr
    2ca0:	02560100 	subseq	r0, r6, #0, 2
    2ca4:	00000f6f 	andeq	r0, r0, pc, ror #30
    2ca8:	8083c280 	addhi	ip, r3, r0, lsl #5
    2cac:	3d23007e 	stccc	0, cr0, [r3, #-504]!	; 0xfffffe08
    2cb0:	0100000d 	tsteq	r0, sp
    2cb4:	15ec01f5 	strbne	r0, [ip, #501]!	; 0x1f5
    2cb8:	001e0800 	andseq	r0, lr, r0, lsl #16
    2cbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2cc0:	00000ff9 	strdeq	r0, [r0], -r9
    2cc4:	00108026 	andseq	r8, r0, r6, lsr #32
    2cc8:	01f50100 	mvnseq	r0, r0, lsl #2
    2ccc:	00000113 	andeq	r0, r0, r3, lsl r1
    2cd0:	00000861 	andeq	r0, r0, r1, ror #16
    2cd4:	0015f439 	andseq	pc, r5, r9, lsr r4	; <UNPREDICTABLE>
    2cd8:	00128d08 	andseq	r8, r2, r8, lsl #26
    2cdc:	15f83900 	ldrbne	r3, [r8, #2304]!	; 0x900
    2ce0:	0f750800 	svceq	0x00750800
    2ce4:	fc390000 	ldc2	0, cr0, [r9], #-0
    2ce8:	94080015 	strls	r0, [r8], #-21
    2cec:	39000012 	stmdbcc	r0, {r1, r4}
    2cf0:	08001600 	stmdaeq	r0, {r9, sl, ip}
    2cf4:	00000d4d 	andeq	r0, r0, sp, asr #26
    2cf8:	00160a2c 	andseq	r0, r6, ip, lsr #20
    2cfc:	000e1a08 	andeq	r1, lr, r8, lsl #20
    2d00:	50012100 	andpl	r2, r1, r0, lsl #2
    2d04:	5001f303 	andpl	pc, r1, r3, lsl #6
    2d08:	63230000 	teqvs	r3, #0
    2d0c:	0100000e 	tsteq	r0, lr
    2d10:	160c025f 			; <UNDEFINED> instruction: 0x160c025f
    2d14:	00140800 	andseq	r0, r4, r0, lsl #16
    2d18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d1c:	00001021 	andeq	r1, r0, r1, lsr #32
    2d20:	00111838 	andseq	r1, r1, r8, lsr r8
    2d24:	02600100 	rsbeq	r0, r0, #0, 2
    2d28:	00000f69 	andeq	r0, r0, r9, ror #30
    2d2c:	8083da80 	addhi	sp, r3, r0, lsl #21
    2d30:	3c3a007e 	ldccc	0, cr0, [sl], #-504	; 0xfffffe08
    2d34:	0100000e 	tsteq	r0, lr
    2d38:	0178026b 	cmneq	r8, fp, ror #4
    2d3c:	16200000 	strtne	r0, [r0], -r0
    2d40:	00340800 	eorseq	r0, r4, r0, lsl #16
    2d44:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d48:	0000105c 	andeq	r1, r0, ip, asr r0
    2d4c:	00131726 	andseq	r1, r3, r6, lsr #14
    2d50:	026b0100 	rsbeq	r0, fp, #0, 2
    2d54:	00000113 	andeq	r0, r0, r3, lsl r1
    2d58:	00000898 	muleq	r0, r8, r8
    2d5c:	00107134 	andseq	r7, r0, r4, lsr r1
    2d60:	026c0100 	rsbeq	r0, ip, #0, 2
    2d64:	00000113 	andeq	r0, r0, r3, lsl r1
    2d68:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    2d6c:	11223a00 	teqne	r2, r0, lsl #20
    2d70:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2d74:	00017802 	andeq	r7, r1, r2, lsl #16
    2d78:	00000000 	andeq	r0, r0, r0
    2d7c:	00003000 	andeq	r3, r0, r0
    2d80:	9e9c0100 	fmllse	f0, f4, f0
    2d84:	26000010 			; <UNDEFINED> instruction: 0x26000010
    2d88:	00001317 	andeq	r1, r0, r7, lsl r3
    2d8c:	13027c01 	movwne	r7, #11265	; 0x2c01
    2d90:	d9000001 	stmdble	r0, {r0}
    2d94:	27000008 	strcs	r0, [r0, -r8]
    2d98:	7c01006e 	stcvc	0, cr0, [r1], {110}	; 0x6e
    2d9c:	00011e02 	andeq	r1, r1, r2, lsl #28
    2da0:	00090500 	andeq	r0, r9, r0, lsl #10
    2da4:	00003900 	andeq	r3, r0, r0, lsl #18
    2da8:	10210000 	eorne	r0, r1, r0
    2dac:	3a000000 	bcc	2db4 <__Stack_Size+0x25b4>
    2db0:	00000ffd 	strdeq	r0, [r0], -sp
    2db4:	78028601 	stmdavc	r2, {r0, r9, sl, pc}
    2db8:	54000001 	strpl	r0, [r0], #-1
    2dbc:	4c080016 	stcmi	0, cr0, [r8], {22}
    2dc0:	01000000 	mrseq	r0, (UNDEF: 0)
    2dc4:	0011159c 	mulseq	r1, ip, r5
    2dc8:	12c12600 	sbcne	r2, r1, #0, 12
    2dcc:	86010000 	strhi	r0, [r1], -r0
    2dd0:	00011302 	andeq	r1, r1, r2, lsl #6
    2dd4:	00094900 	andeq	r4, r9, r0, lsl #18
    2dd8:	11de2400 	bicsne	r2, lr, r0, lsl #8
    2ddc:	86010000 	strhi	r0, [r1], -r0
    2de0:	00011302 	andeq	r1, r1, r2, lsl #6
    2de4:	34510100 	ldrbcc	r0, [r1], #-256	; 0x100
    2de8:	00001260 	andeq	r1, r0, r0, ror #4
    2dec:	15028701 	strne	r8, [r2, #-1793]	; 0x701
    2df0:	49000011 	stmdbmi	r0, {r0, r4}
    2df4:	28000009 	stmdacs	r0, {r0, r3}
    2df8:	00001320 	andeq	r1, r0, r0, lsr #6
    2dfc:	33028801 	movwcc	r8, #10241	; 0x2801
    2e00:	02000001 	andeq	r0, r0, #1
    2e04:	55286891 	strpl	r6, [r8, #-2193]!	; 0x891
    2e08:	01000013 	tsteq	r0, r3, lsl r0
    2e0c:	01330289 	teqeq	r3, r9, lsl #5
    2e10:	91020000 	mrsls	r0, (UNDEF: 2)
    2e14:	1071346c 	rsbsne	r3, r1, ip, ror #8
    2e18:	8b010000 	blhi	42e20 <__Stack_Size+0x42620>
    2e1c:	00011302 	andeq	r1, r1, r2, lsl #6
    2e20:	00096a00 	andeq	r6, r9, r0, lsl #20
    2e24:	04080000 	streq	r0, [r8], #-0
    2e28:	00000143 	andeq	r0, r0, r3, asr #2
    2e2c:	0011d42e 	andseq	sp, r1, lr, lsr #8
    2e30:	02a10100 	adceq	r0, r1, #0, 2
    2e34:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
    2e38:	0000000c 	andeq	r0, r0, ip
    2e3c:	532e9c01 	teqpl	lr, #256	; 0x100
    2e40:	01000010 	tsteq	r0, r0, lsl r0
    2e44:	16ac02a8 	strtne	r0, [ip], r8, lsr #5
    2e48:	00180800 	andseq	r0, r8, r0, lsl #16
    2e4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e50:	000d833b 	andeq	r8, sp, fp, lsr r3
    2e54:	0016c400 	andseq	ip, r6, r0, lsl #8
    2e58:	00001208 	andeq	r1, r0, r8, lsl #4
    2e5c:	659c0100 	ldrvs	r0, [ip, #256]	; 0x100
    2e60:	3c000011 	stccc	0, cr0, [r0], {17}
    2e64:	00000d94 	muleq	r0, r4, sp
    2e68:	00000988 	andeq	r0, r0, r8, lsl #19
    2e6c:	000da03d 	andeq	sl, sp, sp, lsr r0
    2e70:	0009a600 	andeq	sl, r9, r0, lsl #12
    2e74:	c73a0000 	ldrgt	r0, [sl, -r0]!
    2e78:	01000010 	tsteq	r0, r0, lsl r0
    2e7c:	005b02bc 	ldrheq	r0, [fp], #-44	; 0xffffffd4
    2e80:	16d80000 	ldrbne	r0, [r8], r0
    2e84:	00100800 	andseq	r0, r0, r0, lsl #16
    2e88:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e8c:	00001190 	muleq	r0, r0, r1
    2e90:	0010d33e 	andseq	sp, r0, lr, lsr r3
    2e94:	02be0100 	adcseq	r0, lr, #0, 2
    2e98:	00001190 	muleq	r0, r0, r1
    2e9c:	1ffff7e0 	svcne	0x00fff7e0
    2ea0:	8d040800 	stchi	8, cr0, [r4, #-0]
    2ea4:	3a000000 	bcc	2eac <__Stack_Size+0x26ac>
    2ea8:	0000035f 	andeq	r0, r0, pc, asr r3
    2eac:	5b02c201 	blpl	b36b8 <__Stack_Size+0xb2eb8>
    2eb0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2eb4:	18080016 	stmdane	r8, {r1, r2, r4}
    2eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ebc:	0011c19c 	mulseq	r1, ip, r1
    2ec0:	10d33e00 	sbcsne	r3, r3, r0, lsl #28
    2ec4:	c5010000 	strgt	r0, [r1, #-0]
    2ec8:	00119002 	andseq	r9, r1, r2
    2ecc:	fff7e000 			; <UNDEFINED> instruction: 0xfff7e000
    2ed0:	b13f001f 	teqlt	pc, pc, lsl r0	; <UNPREDICTABLE>
    2ed4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2ed8:	00005b2c 	andeq	r5, r0, ip, lsr #22
    2edc:	88030500 	stmdahi	r3, {r8, sl}
    2ee0:	15200004 	strne	r0, [r0, #-4]!
    2ee4:	000000e7 	andeq	r0, r0, r7, ror #1
    2ee8:	000011e2 	andeq	r1, r0, r2, ror #3
    2eec:	0000bb16 	andeq	fp, r0, r6, lsl fp
    2ef0:	3f001f00 	svccc	0x00001f00
    2ef4:	00000c7b 	andeq	r0, r0, fp, ror ip
    2ef8:	11d26b0a 	bicsne	r6, r2, sl, lsl #22
    2efc:	03050000 	movweq	r0, #20480	; 0x5000
    2f00:	20000404 	andcs	r0, r0, r4, lsl #8
    2f04:	000f0240 	andeq	r0, pc, r0, asr #4
    2f08:	5bb70b00 	blpl	fedc5b10 <BootRAM+0xdd362b1>
    2f0c:	12000000 	andne	r0, r0, #0
    2f10:	41000012 	tstmi	r0, r2, lsl r0
    2f14:	000000cf 	andeq	r0, r0, pc, asr #1
    2f18:	0000dc41 	andeq	sp, r0, r1, asr #24
    2f1c:	00374100 	eorseq	r4, r7, r0, lsl #2
    2f20:	42000000 	andmi	r0, r0, #0
    2f24:	00000c0c 	andeq	r0, r0, ip, lsl #24
    2f28:	00000059 	andeq	r0, r0, r9, asr r0
    2f2c:	0000122f 	andeq	r1, r0, pc, lsr #4
    2f30:	00005941 	andeq	r5, r0, r1, asr #18
    2f34:	005b4100 	subseq	r4, fp, r0, lsl #2
    2f38:	bb410000 	bllt	1042f40 <__Stack_Size+0x1042740>
    2f3c:	00000000 	andeq	r0, r0, r0
    2f40:	0012e343 	andseq	lr, r2, r3, asr #6
    2f44:	01140100 	tsteq	r4, r0, lsl #2
    2f48:	00001246 	andeq	r1, r0, r6, asr #4
    2f4c:	0000fd41 	andeq	pc, r0, r1, asr #26
    2f50:	01984100 	orrseq	r4, r8, r0, lsl #2
    2f54:	43000000 	movwmi	r0, #0
    2f58:	00000f0b 	andeq	r0, r0, fp, lsl #30
    2f5c:	5d011501 	cfstr32pl	mvfx1, [r1, #-4]
    2f60:	41000012 	tstmi	r0, r2, lsl r0
    2f64:	0000125d 	andeq	r1, r0, sp, asr r2
    2f68:	00126341 	andseq	r6, r2, r1, asr #6
    2f6c:	04080000 	streq	r0, [r8], #-0
    2f70:	0000080a 	andeq	r0, r0, sl, lsl #16
    2f74:	079d0408 	ldreq	r0, [sp, r8, lsl #8]
    2f78:	942d0000 	strtls	r0, [sp], #-0
    2f7c:	0100000f 	tsteq	r0, pc
    2f80:	005b018b 	subseq	r0, fp, fp, lsl #3
    2f84:	127b0000 	rsbsne	r0, fp, #0
    2f88:	00290000 	eoreq	r0, r9, r0
    2f8c:	00128b2d 	andseq	r8, r2, sp, lsr #22
    2f90:	018e0100 	orreq	r0, lr, r0, lsl #2
    2f94:	0000005b 	andeq	r0, r0, fp, asr r0
    2f98:	0000128d 	andeq	r1, r0, sp, lsl #5
    2f9c:	80440029 	subhi	r0, r4, r9, lsr #32
    2fa0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2fa4:	05674482 	strbeq	r4, [r7, #-1154]!	; 0x482
    2fa8:	52090000 	andpl	r0, r9, #0
    2fac:	0009b100 	andeq	fp, r9, r0, lsl #2
    2fb0:	f9000400 			; <UNDEFINED> instruction: 0xf9000400
    2fb4:	0400000a 	streq	r0, [r0], #-10
    2fb8:	00063901 	andeq	r3, r6, r1, lsl #18
    2fbc:	14650100 	strbtne	r0, [r5], #-256	; 0x100
    2fc0:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    2fc4:	02500000 	subseq	r0, r0, #0
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	0d260000 	stceq	0, cr0, [r6, #-0]
    2fd0:	01020000 	mrseq	r0, (UNDEF: 2)
    2fd4:	00081a06 	andeq	r1, r8, r6, lsl #20
    2fd8:	0c360300 	ldceq	3, cr0, [r6], #-0
    2fdc:	1c020000 	stcne	0, cr0, [r2], {-0}
    2fe0:	00000037 	andeq	r0, r0, r7, lsr r0
    2fe4:	18080102 	stmdane	r8, {r1, r8}
    2fe8:	02000008 	andeq	r0, r0, #8
    2fec:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    2ff0:	02020000 	andeq	r0, r2, #0
    2ff4:	00094907 	andeq	r4, r9, r7, lsl #18
    2ff8:	05040200 	streq	r0, [r4, #-512]	; 0x200
    2ffc:	000004da 	ldrdeq	r0, [r0], -sl
    3000:	000b4e03 	andeq	r4, fp, r3, lsl #28
    3004:	5e380200 	cdppl	2, 3, cr0, cr8, cr0, {0}
    3008:	02000000 	andeq	r0, r0, #0
    300c:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    3010:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    3014:	0004d505 	andeq	sp, r4, r5, lsl #10
    3018:	07080200 	streq	r0, [r8, -r0, lsl #4]
    301c:	0000024d 	andeq	r0, r0, sp, asr #4
    3020:	69050404 	stmdbvs	r5, {r2, sl}
    3024:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    3028:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    302c:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    3030:	0300000c 	movweq	r0, #12
    3034:	00002c2a 	andeq	r2, r0, sl, lsr #24
    3038:	0b500300 	bleq	1403c40 <__Stack_Size+0x1403440>
    303c:	42030000 	andmi	r0, r3, #0
    3040:	00000053 	andeq	r0, r0, r3, asr r0
    3044:	32337505 	eorscc	r7, r3, #20971520	; 0x1400000
    3048:	5e270400 	cdppl	4, 2, cr0, cr7, cr0, {0}
    304c:	05000000 	streq	r0, [r0, #-0]
    3050:	00363175 	eorseq	r3, r6, r5, ror r1
    3054:	00452804 	subeq	r2, r5, r4, lsl #16
    3058:	75050000 	strvc	r0, [r5, #-0]
    305c:	29040038 	stmdbcs	r4, {r3, r4, r5}
    3060:	00000037 	andeq	r0, r0, r7, lsr r0
    3064:	00035a03 	andeq	r5, r3, r3, lsl #20
    3068:	c22f0400 	eorgt	r0, pc, #0, 8
    306c:	06000000 	streq	r0, [r0], -r0
    3070:	0000005e 	andeq	r0, r0, lr, asr r0
    3074:	37040107 	strcc	r0, [r4, -r7, lsl #2]
    3078:	000000dc 	ldrdeq	r0, [r0], -ip
    307c:	00075308 	andeq	r5, r7, r8, lsl #6
    3080:	a7080000 	strge	r0, [r8, -r0]
    3084:	01000001 	tsteq	r0, r1
    3088:	052d0300 	streq	r0, [sp, #-768]!	; 0x300
    308c:	37040000 	strcc	r0, [r4, -r0]
    3090:	000000c7 	andeq	r0, r0, r7, asr #1
    3094:	000b1f03 	andeq	r1, fp, r3, lsl #30
    3098:	7ad40500 	bvc	ff5044a0 <BootRAM+0xe474c41>
    309c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    30a0:	07040204 	streq	r0, [r4, -r4, lsl #4]
    30a4:	0000078b 	andeq	r0, r0, fp, lsl #15
    30a8:	21080102 	tstcs	r8, r2, lsl #2
    30ac:	0a000008 	beq	30d4 <__Stack_Size+0x28d4>
    30b0:	00010804 	andeq	r0, r1, r4, lsl #16
    30b4:	00fb0b00 	rscseq	r0, fp, r0, lsl #22
    30b8:	040a0000 	streq	r0, [sl], #-0
    30bc:	000000ad 	andeq	r0, r0, sp, lsr #1
    30c0:	0005ff0c 	andeq	pc, r5, ip, lsl #30
    30c4:	38060c00 	stmdacc	r6, {sl, fp}
    30c8:	00000150 	andeq	r0, r0, r0, asr r1
    30cc:	0001d70d 	andeq	sp, r1, sp, lsl #14
    30d0:	a2500600 	subsge	r0, r0, #0, 12
    30d4:	00000000 	andeq	r0, r0, r0
    30d8:	00086d0d 	andeq	r6, r8, sp, lsl #26
    30dc:	a2510600 	subsge	r0, r1, #0, 12
    30e0:	02000000 	andeq	r0, r0, #0
    30e4:	0023670d 	eoreq	r6, r3, sp, lsl #14
    30e8:	a2520600 	subsge	r0, r2, #0, 12
    30ec:	04000000 	streq	r0, [r0], #-0
    30f0:	0007380d 	andeq	r3, r7, sp, lsl #16
    30f4:	5f530600 	svcpl	0x00530600
    30f8:	08000001 	stmdaeq	r0, {r0}
    30fc:	010d0e00 	tsteq	sp, r0, lsl #28
    3100:	015f0000 	cmpeq	pc, r0
    3104:	a20f0000 	andge	r0, pc, #0
    3108:	00000000 	andeq	r0, r0, r0
    310c:	0150040a 	cmpeq	r0, sl, lsl #8
    3110:	00030000 	andeq	r0, r3, r0
    3114:	06000006 	streq	r0, [r0], -r6
    3118:	00011354 	andeq	r1, r1, r4, asr r3
    311c:	57421000 	strbpl	r1, [r2, -r0]
    3120:	62060200 	andvs	r0, r6, #0, 4
    3124:	00000194 	muleq	r0, r4, r1
    3128:	30626211 	rsbcc	r6, r2, r1, lsl r2
    312c:	ad650600 	stclge	6, cr0, [r5, #-0]
    3130:	00000000 	andeq	r0, r0, r0
    3134:	31626211 	cmncc	r2, r1, lsl r2
    3138:	ad660600 	stclge	6, cr0, [r6, #-0]
    313c:	01000000 	mrseq	r0, (UNDEF: 0)
    3140:	06021200 	streq	r1, [r2], -r0, lsl #4
    3144:	0001b05f 	andeq	fp, r1, pc, asr r0
    3148:	00771300 	rsbseq	r1, r7, r0, lsl #6
    314c:	00a26106 	adceq	r6, r2, r6, lsl #2
    3150:	62130000 	andsvs	r0, r3, #0
    3154:	68060077 	stmdavs	r6, {r0, r1, r2, r4, r5, r6}
    3158:	00000170 	andeq	r0, r0, r0, ror r1
    315c:	09300300 	ldmdbeq	r0!, {r8, r9}
    3160:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    3164:	00000194 	muleq	r0, r4, r1
    3168:	0001140c 	andeq	r1, r1, ip, lsl #8
    316c:	6b061c00 	blvs	18a174 <__Stack_Size+0x189974>
    3170:	0000024c 	andeq	r0, r0, ip, asr #4
    3174:	0007670d 	andeq	r6, r7, sp, lsl #14
    3178:	ad6d0600 	stclge	6, cr0, [sp, #-0]
    317c:	00000000 	andeq	r0, r0, r0
    3180:	0000150d 	andeq	r1, r0, sp, lsl #10
    3184:	ad6e0600 	stclge	6, cr0, [lr, #-0]
    3188:	01000000 	mrseq	r0, (UNDEF: 0)
    318c:	0003110d 	andeq	r1, r3, sp, lsl #2
    3190:	b06f0600 	rsblt	r0, pc, r0, lsl #12
    3194:	02000001 	andeq	r0, r0, #1
    3198:	0001480d 	andeq	r4, r1, sp, lsl #16
    319c:	b0700600 	rsbslt	r0, r0, r0, lsl #12
    31a0:	04000001 	streq	r0, [r0], #-1
    31a4:	0004eb0d 	andeq	lr, r4, sp, lsl #22
    31a8:	b0710600 	rsbslt	r0, r1, r0, lsl #12
    31ac:	06000001 	streq	r0, [r0], -r1
    31b0:	0006ef0d 	andeq	lr, r6, sp, lsl #30
    31b4:	ad730600 	ldclge	6, cr0, [r3, #-0]
    31b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    31bc:	0008080d 	andeq	r0, r8, sp, lsl #16
    31c0:	ad740600 	ldclge	6, cr0, [r4, #-0]
    31c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    31c8:	0005070d 	andeq	r0, r5, sp, lsl #14
    31cc:	ad750600 	ldclge	6, cr0, [r5, #-0]
    31d0:	0a000000 	beq	31d8 <__Stack_Size+0x29d8>
    31d4:	00054f0d 	andeq	r4, r5, sp, lsl #30
    31d8:	ad760600 	ldclge	6, cr0, [r6, #-0]
    31dc:	0b000000 	bleq	31e4 <__Stack_Size+0x29e4>
    31e0:	0005d60d 	andeq	sp, r5, sp, lsl #12
    31e4:	ad770600 	ldclge	6, cr0, [r7, #-0]
    31e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    31ec:	0007c80d 	andeq	ip, r7, sp, lsl #16
    31f0:	657a0600 	ldrbvs	r0, [sl, #-1536]!	; 0x600
    31f4:	10000001 	andne	r0, r0, r1
    31f8:	01150300 	tsteq	r5, r0, lsl #6
    31fc:	7b060000 	blvc	183204 <__Stack_Size+0x182a04>
    3200:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    3204:	23070107 	movwcs	r0, #28935	; 0x7107
    3208:	0000028a 	andeq	r0, r0, sl, lsl #5
    320c:	0014a708 	andseq	sl, r4, r8, lsl #14
    3210:	f4080000 	vst4.8	{d0-d3}, [r8], r0
    3214:	01000013 	tsteq	r0, r3, lsl r0
    3218:	00144a08 	andseq	r4, r4, r8, lsl #20
    321c:	7c080200 	sfmvc	f0, 4, [r8], {-0}
    3220:	03000013 	movweq	r0, #19
    3224:	00148c08 	andseq	r8, r4, r8, lsl #24
    3228:	5d080400 	cfstrspl	mvf0, [r8, #-0]
    322c:	05000015 	streq	r0, [r0, #-21]
    3230:	0013ae08 	andseq	sl, r3, r8, lsl #28
    3234:	03000600 	movweq	r0, #1536	; 0x600
    3238:	000013d5 	ldrdeq	r1, [r0], -r5
    323c:	02572307 	subseq	r2, r7, #469762048	; 0x1c000000
    3240:	d40c0000 	strle	r0, [ip], #-0
    3244:	06000014 			; <UNDEFINED> instruction: 0x06000014
    3248:	02ea2907 	rsceq	r2, sl, #114688	; 0x1c000
    324c:	f30d0000 	vhadd.u8	d0, d13, d0
    3250:	07000014 	smladeq	r0, r4, r0, r0
    3254:	0000ad2a 	andeq	sl, r0, sl, lsr #26
    3258:	090d0000 	stmdbeq	sp, {}	; <UNPREDICTABLE>
    325c:	07000015 	smladeq	r0, r5, r0, r0
    3260:	0000ad2b 	andeq	sl, r0, fp, lsr #26
    3264:	180d0100 	stmdane	sp, {r8}
    3268:	07000015 	smladeq	r0, r5, r0, r0
    326c:	0000ad2c 	andeq	sl, r0, ip, lsr #26
    3270:	270d0200 	strcs	r0, [sp, -r0, lsl #4]
    3274:	07000015 	smladeq	r0, r5, r0, r0
    3278:	0000ad2d 	andeq	sl, r0, sp, lsr #26
    327c:	c20d0300 	andgt	r0, sp, #0, 6
    3280:	07000015 	smladeq	r0, r5, r0, r0
    3284:	0000ad2e 	andeq	sl, r0, lr, lsr #26
    3288:	750d0400 	strvc	r0, [sp, #-1024]	; 0x400
    328c:	07000014 	smladeq	r0, r4, r0, r0
    3290:	0000ad2f 	andeq	sl, r0, pc, lsr #26
    3294:	03000500 	movweq	r0, #1280	; 0x500
    3298:	000014d5 	ldrdeq	r1, [r0], -r5
    329c:	02953007 	addseq	r3, r5, #7
    32a0:	44140000 	ldrmi	r0, [r4], #-0
    32a4:	01000014 	tsteq	r0, r4, lsl r0
    32a8:	031a3207 	tsteq	sl, #1879048192	; 0x70000000
    32ac:	36080000 	strcc	r0, [r8], -r0
    32b0:	00000015 	andeq	r0, r0, r5, lsl r0
    32b4:	00158f08 	andseq	r8, r5, r8, lsl #30
    32b8:	45150100 	ldrmi	r0, [r5, #-256]	; 0x100
    32bc:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    32c0:	00016e08 	andeq	r6, r1, r8, lsl #28
    32c4:	03000300 	movweq	r0, #768	; 0x300
    32c8:	00001445 	andeq	r1, r0, r5, asr #8
    32cc:	02f53707 	rscseq	r3, r5, #1835008	; 0x1c0000
    32d0:	68160000 	ldmdavs	r6, {}	; <UNPREDICTABLE>
    32d4:	03520c08 	cmpeq	r2, #8, 24	; 0x800
    32d8:	8a0d0000 	bhi	3432e0 <__Stack_Size+0x342ae0>
    32dc:	0800001a 	stmdaeq	r0, {r1, r3, r4}
    32e0:	0003520e 	andeq	r5, r3, lr, lsl #4
    32e4:	500d0000 	andpl	r0, sp, r0
    32e8:	08000019 	stmdaeq	r0, {r0, r3, r4}
    32ec:	0003620f 	andeq	r6, r3, pc, lsl #4
    32f0:	6c0d0800 	stcvs	8, cr0, [sp], {-0}
    32f4:	08000004 	stmdaeq	r0, {r2}
    32f8:	00037210 	andeq	r7, r3, r0, lsl r2
    32fc:	17002800 	strne	r2, [r0, -r0, lsl #16]
    3300:	0000005e 	andeq	r0, r0, lr, asr r0
    3304:	00000362 	andeq	r0, r0, r2, ror #6
    3308:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    330c:	17000100 	strne	r0, [r0, -r0, lsl #2]
    3310:	0000005e 	andeq	r0, r0, lr, asr r0
    3314:	00000372 	andeq	r0, r0, r2, ror r3
    3318:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    331c:	17000700 	strne	r0, [r0, -r0, lsl #14]
    3320:	00000037 	andeq	r0, r0, r7, lsr r0
    3324:	00000382 	andeq	r0, r0, r2, lsl #7
    3328:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    332c:	03003f00 	movweq	r3, #3840	; 0xf00
    3330:	00000cef 	andeq	r0, r0, pc, ror #25
    3334:	03251208 	teqeq	r5, #8, 4	; 0x80000000
    3338:	e80c0000 	stmda	ip, {}	; <UNPREDICTABLE>
    333c:	1400000a 	strne	r0, [r0], #-10
    3340:	03e20d09 	mvneq	r0, #576	; 0x240
    3344:	4b0d0000 	blmi	34334c <__Stack_Size+0x342b4c>
    3348:	0900000c 	stmdbeq	r0, {r2, r3}
    334c:	00008c0e 	andeq	r8, r0, lr, lsl #24
    3350:	f70d0000 			; <UNDEFINED> instruction: 0xf70d0000
    3354:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3358:	00008c10 	andeq	r8, r0, r0, lsl ip
    335c:	e00d0400 	and	r0, sp, r0, lsl #8
    3360:	0900000c 	stmdbeq	r0, {r2, r3}
    3364:	00008c11 	andeq	r8, r0, r1, lsl ip
    3368:	e00d0800 	and	r0, sp, r0, lsl #16
    336c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3370:	00008c13 	andeq	r8, r0, r3, lsl ip
    3374:	2a0d0c00 	bcs	34637c <__Stack_Size+0x345b7c>
    3378:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    337c:	00008c14 	andeq	r8, r0, r4, lsl ip
    3380:	e20d1000 	and	r1, sp, #0
    3384:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    3388:	0003e215 	andeq	lr, r3, r5, lsl r2
    338c:	17001400 	strne	r1, [r0, -r0, lsl #8]
    3390:	00000081 	andeq	r0, r0, r1, lsl #1
    3394:	000003f1 	strdeq	r0, [r0], -r1
    3398:	0000f419 	andeq	pc, r0, r9, lsl r4	; <UNPREDICTABLE>
    339c:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    33a0:	0900000a 	stmdbeq	r0, {r1, r3}
    33a4:	00038d16 	andeq	r8, r3, r6, lsl sp
    33a8:	0c670c00 	stcleq	12, cr0, [r7], #-0
    33ac:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    33b0:	00044518 	andeq	r4, r4, r8, lsl r5
    33b4:	0d540d00 	ldcleq	13, cr0, [r4, #-0]
    33b8:	19090000 	stmdbne	r9, {}	; <UNPREDICTABLE>
    33bc:	00000445 	andeq	r0, r0, r5, asr #8
    33c0:	0cc80d00 	stcleq	13, cr0, [r8], {0}
    33c4:	1a090000 	bne	2433cc <__Stack_Size+0x242bcc>
    33c8:	0000008c 	andeq	r0, r0, ip, lsl #1
    33cc:	0d070d04 	stceq	13, cr0, [r7, #-16]
    33d0:	20090000 	andcs	r0, r9, r0
    33d4:	000000e7 	andeq	r0, r0, r7, ror #1
    33d8:	0c940d08 	ldceq	13, cr0, [r4], {8}
    33dc:	22090000 	andcs	r0, r9, #0
    33e0:	00000073 	andeq	r0, r0, r3, ror r0
    33e4:	0def0d0c 	stcleq	13, cr0, [pc, #48]!	; 341c <__Stack_Size+0x2c1c>
    33e8:	23090000 	movwcs	r0, #36864	; 0x9000
    33ec:	00000073 	andeq	r0, r0, r3, ror r0
    33f0:	040a0010 	streq	r0, [sl], #-16
    33f4:	000003f1 	strdeq	r0, [r0], -r1
    33f8:	000bf303 	andeq	pc, fp, r3, lsl #6
    33fc:	56270900 	strtpl	r0, [r7], -r0, lsl #18
    3400:	0a000004 	beq	3418 <__Stack_Size+0x2c18>
    3404:	0003fc04 	andeq	pc, r3, r4, lsl #24
    3408:	09bd1a00 	ldmibeq	sp!, {r9, fp, ip}
    340c:	3d010000 	stccc	0, cr0, [r1, #-0]
    3410:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
    3414:	00000088 	andeq	r0, r0, r8, lsl #1
    3418:	04cb9c01 	strbeq	r9, [fp], #3073	; 0xc01
    341c:	421b0000 	andsmi	r0, fp, #0
    3420:	da080017 	ble	203484 <__Stack_Size+0x202c84>
    3424:	94000008 	strls	r0, [r0], #-8
    3428:	1c000004 	stcne	0, cr0, [r0], {4}
    342c:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    3430:	51011c20 	tstpl	r1, r0, lsr #24
    3434:	1cff0802 	ldclne	8, cr0, [pc], #8	; 3444 <__Stack_Size+0x2c44>
    3438:	03055001 	movweq	r5, #20481	; 0x5001
    343c:	200004ec 	andcs	r0, r0, ip, ror #9
    3440:	174c1b00 	strbne	r1, [ip, -r0, lsl #22]
    3444:	08da0800 	ldmeq	sl, {fp}^
    3448:	04b70000 	ldrteq	r0, [r7], #0
    344c:	011c0000 	tsteq	ip, r0
    3450:	5c080252 	sfmpl	f0, 4, [r8], {82}	; 0x52
    3454:	0251011c 	subseq	r0, r1, #28, 2
    3458:	011cff08 	tsteq	ip, r8, lsl #30
    345c:	90030550 	andls	r0, r3, r0, asr r5
    3460:	00200004 	eoreq	r0, r0, r4
    3464:	0017561d 	andseq	r5, r7, sp, lsl r6
    3468:	0008f908 	andeq	pc, r8, r8, lsl #18
    346c:	50011c00 	andpl	r1, r1, r0, lsl #24
    3470:	050c0305 	streq	r0, [ip, #-773]	; 0x305
    3474:	00002000 	andeq	r2, r0, r0
    3478:	00083b1e 	andeq	r3, r8, lr, lsl fp
    347c:	016b0100 	cmneq	fp, r0, lsl #2
    3480:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
    3484:	00000044 	andeq	r0, r0, r4, asr #32
    3488:	050d9c01 	streq	r9, [sp, #-3073]	; 0xc01
    348c:	971f0000 	ldrls	r0, [pc, -r0]
    3490:	01000013 	tsteq	r0, r3, lsl r0
    3494:	00ad016c 	adceq	r0, sp, ip, ror #2
    3498:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
    349c:	a4200000 	strtge	r0, [r0], #-0
    34a0:	10080017 	andne	r0, r8, r7, lsl r0
    34a4:	21000009 	tstcs	r0, r9
    34a8:	080017ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, ip}
    34ac:	00000918 	andeq	r0, r0, r8, lsl r9
    34b0:	0017c021 	andseq	ip, r7, r1, lsr #32
    34b4:	00091f08 	andeq	r1, r9, r8, lsl #30
    34b8:	29220000 	stmdbcs	r2!, {}	; <UNPREDICTABLE>
    34bc:	01000014 	tsteq	r0, r4, lsl r0
    34c0:	00000182 	andeq	r0, r0, r2, lsl #3
    34c4:	00020000 	andeq	r0, r2, r0
    34c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    34cc:	0014e623 	andseq	lr, r4, r3, lsr #12
    34d0:	01850100 	orreq	r0, r5, r0, lsl #2
    34d4:	0000010d 	andeq	r0, r0, sp, lsl #2
    34d8:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
    34dc:	00000018 	andeq	r0, r0, r8, lsl r0
    34e0:	054a9c01 	strbeq	r9, [sl, #-3073]	; 0xc01
    34e4:	df240000 	svcle	0x00240000
    34e8:	01000014 	tsteq	r0, r4, lsl r0
    34ec:	00a20185 	adceq	r0, r2, r5, lsl #3
    34f0:	0a010000 	beq	434f8 <__Stack_Size+0x42cf8>
    34f4:	23000000 	movwcs	r0, #0
    34f8:	00001540 	andeq	r1, r0, r0, asr #10
    34fc:	0d018e01 	stceq	14, cr8, [r1, #-4]
    3500:	e4000001 	str	r0, [r0], #-1
    3504:	18080017 	stmdane	r8, {r0, r1, r2, r4}
    3508:	01000000 	mrseq	r0, (UNDEF: 0)
    350c:	0005759c 	muleq	r5, ip, r5
    3510:	14df2400 	ldrbne	r2, [pc], #1024	; 3518 <__Stack_Size+0x2d18>
    3514:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    3518:	0000a201 	andeq	sl, r0, r1, lsl #4
    351c:	000a2200 	andeq	r2, sl, r0, lsl #4
    3520:	fb230000 	blx	8c352a <__Stack_Size+0x8c2d2a>
    3524:	01000014 	tsteq	r0, r4, lsl r0
    3528:	010d0198 			; <UNDEFINED> instruction: 0x010d0198
    352c:	17fc0000 	ldrbne	r0, [ip, r0]!
    3530:	00280800 	eoreq	r0, r8, r0, lsl #16
    3534:	9c010000 	stcls	0, cr0, [r1], {-0}
    3538:	000005a0 	andeq	r0, r0, r0, lsr #11
    353c:	0014df24 	andseq	sp, r4, r4, lsr #30
    3540:	01980100 	orrseq	r0, r8, r0, lsl #2
    3544:	000000a2 	andeq	r0, r0, r2, lsr #1
    3548:	00000a43 	andeq	r0, r0, r3, asr #20
    354c:	140e2300 	strne	r2, [lr], #-768	; 0x300
    3550:	a2010000 	andge	r0, r1, #0
    3554:	00010d01 	andeq	r0, r1, r1, lsl #26
    3558:	00182400 	andseq	r2, r8, r0, lsl #8
    355c:	00003408 	andeq	r3, r0, r8, lsl #8
    3560:	cb9c0100 	blgt	fe703968 <BootRAM+0xd674109>
    3564:	24000005 	strcs	r0, [r0], #-5
    3568:	000014df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    356c:	a201a201 	andge	sl, r1, #268435456	; 0x10000000
    3570:	64000000 	strvs	r0, [r0], #-0
    3574:	0000000a 	andeq	r0, r0, sl
    3578:	0015ae1e 	andseq	sl, r5, lr, lsl lr
    357c:	01ab0100 			; <UNDEFINED> instruction: 0x01ab0100
    3580:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
    3584:	00000058 	andeq	r0, r0, r8, asr r0
    3588:	06239c01 	strteq	r9, [r3], -r1, lsl #24
    358c:	69250000 	stmdbvs	r5!, {}	; <UNPREDICTABLE>
    3590:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
    3594:	00000073 	andeq	r0, r0, r3, ror r0
    3598:	00000a85 	andeq	r0, r0, r5, lsl #21
    359c:	00146b26 	andseq	r6, r4, r6, lsr #22
    35a0:	01ad0100 			; <UNDEFINED> instruction: 0x01ad0100
    35a4:	00000623 	andeq	r0, r0, r3, lsr #12
    35a8:	0018741b 	andseq	r7, r8, fp, lsl r4
    35ac:	00092708 	andeq	r2, r9, r8, lsl #14
    35b0:	00060f00 	andeq	r0, r6, r0, lsl #30
    35b4:	50011c00 	andpl	r1, r1, r0, lsl #24
    35b8:	00007502 	andeq	r7, r0, r2, lsl #10
    35bc:	00188a27 	andseq	r8, r8, r7, lsr #20
    35c0:	00093d08 	andeq	r3, r9, r8, lsl #26
    35c4:	50011c00 	andpl	r1, r1, r0, lsl #24
    35c8:	74007505 	strvc	r7, [r0], #-1285	; 0x505
    35cc:	00002200 	andeq	r2, r0, r0, lsl #4
    35d0:	0097040a 	addseq	r0, r7, sl, lsl #8
    35d4:	87280000 	strhi	r0, [r8, -r0]!
    35d8:	01000004 	tsteq	r0, r4
    35dc:	0000dc51 	andeq	sp, r0, r1, asr ip
    35e0:	0018b000 	andseq	fp, r8, r0
    35e4:	00026008 	andeq	r6, r2, r8
    35e8:	ed9c0100 	ldfs	f0, [ip]
    35ec:	29000006 	stmdbcs	r0, {r1, r2}
    35f0:	00001397 	muleq	r0, r7, r3
    35f4:	00ad5601 	adceq	r5, sp, r1, lsl #12
    35f8:	0aa40000 	beq	fe903600 <BootRAM+0xd873da1>
    35fc:	b62a0000 	strtlt	r0, [sl], -r0
    3600:	34080019 	strcc	r0, [r8], #-25
    3604:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3608:	2b000006 	blcs	3628 <__Stack_Size+0x2e28>
    360c:	00000d8f 	andeq	r0, r0, pc, lsl #27
    3610:	044bfa01 	strbeq	pc, [fp], #-2561	; 0xa01	; <UNPREDICTABLE>
    3614:	91020000 	mrsls	r0, (UNDEF: 2)
    3618:	65722c64 	ldrbvs	r2, [r2, #-3172]!	; 0xc64
    361c:	fb010074 	blx	437f6 <__Stack_Size+0x42ff6>
    3620:	00000073 	andeq	r0, r0, r3, ror r0
    3624:	00000b04 	andeq	r0, r0, r4, lsl #22
    3628:	0019c21b 	andseq	ip, r9, fp, lsl r2
    362c:	00095808 	andeq	r5, r9, r8, lsl #16
    3630:	00069800 	andeq	r9, r6, r0, lsl #16
    3634:	51011c00 	tstpl	r1, r0, lsl #24
    3638:	90000c05 	andls	r0, r0, r5, lsl #24
    363c:	011c0800 	tsteq	ip, r0, lsl #16
    3640:	047d0250 	ldrbteq	r0, [sp], #-592	; 0x250
    3644:	19ce1b00 	stmibne	lr, {r8, r9, fp, ip}^
    3648:	097d0800 	ldmdbeq	sp!, {fp}^
    364c:	06b50000 	ldrteq	r0, [r5], r0
    3650:	011c0000 	tsteq	ip, r0
    3654:	02750251 	rsbseq	r0, r5, #268435461	; 0x10000005
    3658:	0550011c 	ldrbeq	r0, [r0, #-284]	; 0x11c
    365c:	00764d03 	rsbseq	r4, r6, r3, lsl #26
    3660:	e4200008 	strt	r0, [r0], #-8
    3664:	7d080019 	stcvc	0, cr0, [r8, #-100]	; 0xffffff9c
    3668:	20000009 	andcs	r0, r0, r9
    366c:	080019e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, fp, ip}
    3670:	00000990 	muleq	r0, r0, r9
    3674:	190c2000 	stmdbne	ip, {sp}
    3678:	09980800 	ldmibeq	r8, {fp}
    367c:	10200000 	eorne	r0, r0, r0
    3680:	a0080019 	andge	r0, r8, r9, lsl r0
    3684:	20000009 	andcs	r0, r0, r9
    3688:	08001952 	stmdaeq	r0, {r1, r4, r6, r8, fp, ip}
    368c:	000009a8 	andeq	r0, r0, r8, lsr #19
    3690:	00198220 	andseq	r8, r9, r0, lsr #4
    3694:	0005cb08 	andeq	ip, r5, r8, lsl #22
    3698:	782d0000 	stmdavc	sp!, {}	; <UNPREDICTABLE>
    369c:	01000015 	tsteq	r0, r5, lsl r0
    36a0:	00ad01d0 	ldrdeq	r0, [sp], r0	; <UNPREDICTABLE>
    36a4:	00000000 	andeq	r0, r0, r0
    36a8:	000c0000 	andeq	r0, ip, r0
    36ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    36b0:	0013c91e 	andseq	ip, r3, lr, lsl r9
    36b4:	01d50100 	bicseq	r0, r5, r0, lsl #2
    36b8:	00000000 	andeq	r0, r0, r0
    36bc:	0000000c 	andeq	r0, r0, ip
    36c0:	07289c01 	streq	r9, [r8, -r1, lsl #24]!
    36c4:	a52e0000 	strge	r0, [lr, #-0]!
    36c8:	01000015 	tsteq	r0, r5, lsl r0
    36cc:	00ad01d5 	ldrdeq	r0, [sp], r5	; <UNPREDICTABLE>
    36d0:	50010000 	andpl	r0, r1, r0
    36d4:	0d662f00 	stcleq	15, cr2, [r6, #-0]
    36d8:	da010000 	ble	436e0 <__Stack_Size+0x42ee0>
    36dc:	0000dc01 	andeq	sp, r0, r1, lsl #24
    36e0:	001b1000 	andseq	r1, fp, r0
    36e4:	00000c08 	andeq	r0, r0, r8, lsl #24
    36e8:	2f9c0100 	svccs	0x009c0100
    36ec:	000013e6 	andeq	r1, r0, r6, ror #7
    36f0:	dc01df01 	stcle	15, cr13, [r1], {1}
    36f4:	00000000 	andeq	r0, r0, r0
    36f8:	1c000000 	stcne	0, cr0, [r0], {-0}
    36fc:	01000000 	mrseq	r0, (UNDEF: 0)
    3700:	0c21309c 	stceq	0, cr3, [r1], #-624	; 0xfffffd90
    3704:	e5010000 	str	r0, [r1, #-0]
    3708:	001b1c01 	andseq	r1, fp, r1, lsl #24
    370c:	00000208 	andeq	r0, r0, r8, lsl #4
    3710:	2b9c0100 	blcs	fe703b18 <BootRAM+0xd6742b9>
    3714:	000013a2 	andeq	r1, r0, r2, lsr #7
    3718:	07772801 	ldrbeq	r2, [r7, -r1, lsl #16]!
    371c:	03050000 	movweq	r0, #20480	; 0x5000
    3720:	200002c0 	andcs	r0, r0, r0, asr #5
    3724:	00009706 	andeq	r9, r0, r6, lsl #14
    3728:	15842b00 	strne	r2, [r4, #2816]	; 0xb00
    372c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    3730:	00000777 	andeq	r0, r0, r7, ror r7
    3734:	02bc0305 	adcseq	r0, ip, #335544320	; 0x14000000
    3738:	c72b2000 	strgt	r2, [fp, -r0]!
    373c:	01000014 	tsteq	r0, r4, lsl r0
    3740:	00079e2a 	andeq	r9, r7, sl, lsr #28
    3744:	c5030500 	strgt	r0, [r3, #-1280]	; 0x500
    3748:	0620000d 	strteq	r0, [r0], -sp
    374c:	000002ea 	andeq	r0, r0, sl, ror #5
    3750:	0000ad17 	andeq	sl, r0, r7, lsl sp
    3754:	0007b400 	andeq	fp, r7, r0, lsl #8
    3758:	00f43100 	rscseq	r3, r4, r0, lsl #2
    375c:	07ff0000 	ldrbeq	r0, [pc, r0]!
    3760:	14032b00 	strne	r2, [r3], #-2816	; 0xb00
    3764:	33010000 	movwcc	r0, #4096	; 0x1000
    3768:	000007c5 	andeq	r0, r0, r5, asr #15
    376c:	05bc0305 	ldreq	r0, [ip, #773]!	; 0x305
    3770:	a3062000 	movwge	r2, #24576	; 0x6000
    3774:	2b000007 	blcs	3798 <__Stack_Size+0x2f98>
    3778:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    377c:	07773501 	ldrbeq	r3, [r7, -r1, lsl #10]!
    3780:	03050000 	movweq	r0, #20480	; 0x5000
    3784:	20000dc0 	andcs	r0, r0, r0, asr #27
    3788:	00141c2b 	andseq	r1, r4, fp, lsr #24
    378c:	ec360100 	ldfs	f0, [r6], #-0
    3790:	05000007 	streq	r0, [r0, #-7]
    3794:	000dbe03 	andeq	fp, sp, r3, lsl #28
    3798:	00a20620 	adceq	r0, r2, r0, lsr #12
    379c:	7d2b0000 	stcvc	0, cr0, [fp, #-0]
    37a0:	01000014 	tsteq	r0, r4, lsl r0
    37a4:	0007ec37 	andeq	lr, r7, r7, lsr ip
    37a8:	bc030500 	cfstr32lt	mvfx0, [r3], {-0}
    37ac:	3220000d 	eorcc	r0, r0, #13
    37b0:	000001e8 	andeq	r0, r0, r8, ror #3
    37b4:	080d220a 	stmdaeq	sp, {r1, r3, r9, sp}
    37b8:	040a0000 	streq	r0, [sl], #-0
    37bc:	0000024c 	andeq	r0, r0, ip, asr #4
    37c0:	0000b133 	andeq	fp, r0, r3, lsr r1
    37c4:	732c0b00 	teqvc	ip, #0, 22
    37c8:	05000000 	streq	r0, [r0, #-0]
    37cc:	00048803 	andeq	r8, r4, r3, lsl #16
    37d0:	143c3320 	ldrtne	r3, [ip], #-800	; 0x320
    37d4:	2c010000 	stccs	0, cr0, [r1], {-0}
    37d8:	00000835 	andeq	r0, r0, r5, lsr r8
    37dc:	0dcb0305 	stcleq	3, cr0, [fp, #20]
    37e0:	dc062000 	stcle	0, cr2, [r6], {-0}
    37e4:	17000000 	strne	r0, [r0, -r0]
    37e8:	00000081 	andeq	r0, r0, r1, lsl #1
    37ec:	0000084a 	andeq	r0, r0, sl, asr #16
    37f0:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    37f4:	33001f00 	movwcc	r1, #3840	; 0xf00
    37f8:	00000c7b 	andeq	r0, r0, fp, ror ip
    37fc:	083a6b09 	ldmdaeq	sl!, {r0, r3, r8, r9, fp, sp, lr}
    3800:	03050000 	movweq	r0, #20480	; 0x5000
    3804:	20000404 	andcs	r0, r0, r4, lsl #8
    3808:	00159633 	andseq	r9, r5, r3, lsr r6
    380c:	6c2b0100 	stfvss	f0, [fp], #-0
    3810:	05000008 	streq	r0, [r0, #-8]
    3814:	000dc403 	andeq	ip, sp, r3, lsl #8
    3818:	028a0620 	addeq	r0, sl, #32, 12	; 0x2000000
    381c:	37170000 	ldrcc	r0, [r7, -r0]
    3820:	81000000 	mrshi	r0, (UNDEF: 0)
    3824:	18000008 	stmdane	r0, {r3}
    3828:	000000f4 	strdeq	r0, [r0], -r4
    382c:	0533001f 	ldreq	r0, [r3, #-31]!
    3830:	0100001d 	tsteq	r0, sp, lsl r0
    3834:	0008712e 	andeq	r7, r8, lr, lsr #2
    3838:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    383c:	17200004 	strne	r0, [r0, -r4]!
    3840:	00000081 	andeq	r0, r0, r1, lsl #1
    3844:	000008a2 	andeq	r0, r0, r2, lsr #17
    3848:	0000f418 	andeq	pc, r0, r8, lsl r4	; <UNPREDICTABLE>
    384c:	33005b00 	movwcc	r5, #2816	; 0xb00
    3850:	00000b26 	andeq	r0, r0, r6, lsr #22
    3854:	08922f01 	ldmeq	r2, {r0, r8, r9, sl, fp, sp}
    3858:	03050000 	movweq	r0, #20480	; 0x5000
    385c:	20000490 	mulcs	r0, r0, r4
    3860:	78746334 	ldmdavc	r4!, {r2, r4, r5, r8, r9, sp, lr}^
    3864:	82300100 	eorshi	r0, r0, #0, 2
    3868:	05000003 	streq	r0, [r0, #-3]
    386c:	00050c03 	andeq	r0, r5, r3, lsl #24
    3870:	154e3320 	strbne	r3, [lr, #-800]	; 0x320
    3874:	3a010000 	bcc	4387c <__Stack_Size+0x4307c>
    3878:	000008d5 	ldrdeq	r0, [r0], -r5
    387c:	05740305 	ldrbeq	r0, [r4, #-773]!	; 0x305
    3880:	1a062000 	bne	18b888 <__Stack_Size+0x18b088>
    3884:	35000003 	strcc	r0, [r0, #-3]
    3888:	00000c0c 	andeq	r0, r0, ip, lsl #24
    388c:	00f2190d 	rscseq	r1, r2, sp, lsl #18
    3890:	08f90000 	ldmeq	r9!, {}^	; <UNPREDICTABLE>
    3894:	f20f0000 	vhadd.s8	d0, d15, d0
    3898:	0f000000 	svceq	0x00000000
    389c:	00000073 	andeq	r0, r0, r3, ror r0
    38a0:	0000e70f 	andeq	lr, r0, pc, lsl #14
    38a4:	13360000 	teqne	r6, #0
    38a8:	0800000c 	stmdaeq	r0, {r2, r3}
    38ac:	00090a14 	andeq	r0, r9, r4, lsl sl
    38b0:	090a0f00 	stmdbeq	sl, {r8, r9, sl, fp}
    38b4:	0a000000 	beq	38bc <__Stack_Size+0x30bc>
    38b8:	00038204 	andeq	r8, r3, r4, lsl #4
    38bc:	0eb53700 	cdpeq	7, 11, cr3, cr5, cr0, {0}
    38c0:	390c0000 	stmdbcc	ip, {}	; <UNPREDICTABLE>
    38c4:	04733801 	ldrbteq	r3, [r3], #-2049	; 0x801
    38c8:	830b0000 	movwhi	r0, #45056	; 0xb000
    38cc:	000e6337 	andeq	r6, lr, r7, lsr r3
    38d0:	012b0c00 	teqeq	fp, r0, lsl #24
    38d4:	000e3c39 	andeq	r3, lr, r9, lsr ip
    38d8:	01340c00 	teqeq	r4, r0, lsl #24
    38dc:	000000dc 	ldrdeq	r0, [r0], -ip
    38e0:	0000093d 	andeq	r0, r0, sp, lsr r9
    38e4:	0000970f 	andeq	r9, r0, pc, lsl #14
    38e8:	fd390000 	ldc2	0, cr0, [r9, #-0]
    38ec:	0c00000f 	stceq	0, cr0, [r0], {15}
    38f0:	00dc0133 	sbcseq	r0, ip, r3, lsr r1
    38f4:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
    38f8:	970f0000 	strls	r0, [pc, -r0]
    38fc:	0f000000 	svceq	0x00000000
    3900:	00000097 	muleq	r0, r7, r0
    3904:	0c9b3500 	cfldr32eq	mvfx3, [fp], {0}
    3908:	67090000 	strvs	r0, [r9, -r0]
    390c:	00000073 	andeq	r0, r0, r3, ror r0
    3910:	00000977 	andeq	r0, r0, r7, ror r9
    3914:	0009770f 	andeq	r7, r9, pc, lsl #14
    3918:	00b70f00 	adcseq	r0, r7, r0, lsl #30
    391c:	dc0f0000 	stcle	0, cr0, [pc], {-0}
    3920:	00000000 	andeq	r0, r0, r0
    3924:	044b040a 	strbeq	r0, [fp], #-1034	; 0x40a
    3928:	bb3a0000 	bllt	e83930 <__Stack_Size+0xe83130>
    392c:	0c00000d 	stceq	0, cr0, [r0], {13}
    3930:	0990013f 	ldmibeq	r0, {r0, r1, r2, r3, r4, r5, r8}
    3934:	020f0000 	andeq	r0, pc, #0
    3938:	3b000001 	blcc	3944 <__Stack_Size+0x3144>
    393c:	11d43700 	bicsne	r3, r4, r0, lsl #14
    3940:	360c0000 	strcc	r0, [ip], -r0
    3944:	0bd73701 	bleq	ff5d1550 <BootRAM+0xe541cf1>
    3948:	2f0c0000 	svccs	0x000c0000
    394c:	10533701 	subsne	r3, r3, r1, lsl #14
    3950:	370c0000 	strcc	r0, [ip, -r0]
    3954:	10c73c01 	sbcne	r3, r7, r1, lsl #24
    3958:	3b0c0000 	blcc	303960 <__Stack_Size+0x303160>
    395c:	00007301 	andeq	r7, r0, r1, lsl #6
    3960:	0a330000 	beq	cc3968 <__Stack_Size+0xcc3168>
    3964:	00040000 	andeq	r0, r4, r0
    3968:	00000e75 	andeq	r0, r0, r5, ror lr
    396c:	16360104 	ldrtne	r0, [r6], -r4, lsl #2
    3970:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    3974:	93000015 	movwls	r0, #21
    3978:	48000008 	stmdami	r0, {r3}
    397c:	00000003 	andeq	r0, r0, r3
    3980:	dc000000 	stcle	0, cr0, [r0], {-0}
    3984:	02000010 	andeq	r0, r0, #16
    3988:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    398c:	36030000 	strcc	r0, [r3], -r0
    3990:	0300000c 	movweq	r0, #12
    3994:	0000371c 	andeq	r3, r0, ip, lsl r7
    3998:	08010200 	stmdaeq	r1, {r9}
    399c:	00000818 	andeq	r0, r0, r8, lsl r8
    39a0:	fc050202 	stc2	2, cr0, [r5], {2}
    39a4:	02000006 	andeq	r0, r0, #6
    39a8:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    39ac:	04020000 	streq	r0, [r2], #-0
    39b0:	0004da05 	andeq	sp, r4, r5, lsl #20
    39b4:	0b4e0300 	bleq	13845bc <__Stack_Size+0x1383dbc>
    39b8:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    39bc:	0000005e 	andeq	r0, r0, lr, asr r0
    39c0:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    39c4:	02000002 	andeq	r0, r0, #2
    39c8:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    39cc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    39d0:	00024d07 	andeq	r4, r2, r7, lsl #26
    39d4:	05040400 	streq	r0, [r4, #-1024]	; 0x400
    39d8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    39dc:	57070402 	strpl	r0, [r7, -r2, lsl #8]
    39e0:	03000002 	movweq	r0, #2
    39e4:	00000c38 	andeq	r0, r0, r8, lsr ip
    39e8:	002c2a04 	eoreq	r2, ip, r4, lsl #20
    39ec:	50030000 	andpl	r0, r3, r0
    39f0:	0400000b 	streq	r0, [r0], #-11
    39f4:	00005342 	andeq	r5, r0, r2, asr #6
    39f8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    39fc:	0000078b 	andeq	r0, r0, fp, lsl #15
    3a00:	21080102 	tstcs	r8, r2, lsl #2
    3a04:	05000008 	streq	r0, [r0, #-8]
    3a08:	000015e2 	andeq	r1, r0, r2, ror #11
    3a0c:	c4032202 	strgt	r2, [r3], #-514	; 0x202
    3a10:	06000000 	streq	r0, [r0], -r0
    3a14:	22020078 	andcs	r0, r2, #120	; 0x78
    3a18:	000000c4 	andeq	r0, r0, r4, asr #1
    3a1c:	02006106 	andeq	r6, r0, #-2147483647	; 0x80000001
    3a20:	0000ca22 	andeq	ip, r0, r2, lsr #20
    3a24:	04070000 	streq	r0, [r7], #-0
    3a28:	00000081 	andeq	r0, r0, r1, lsl #1
    3a2c:	00d00407 	sbcseq	r0, r0, r7, lsl #8
    3a30:	81080000 	mrshi	r0, (UNDEF: 8)
    3a34:	05000000 	streq	r0, [r0, #-0]
    3a38:	0000172d 	andeq	r1, r0, sp, lsr #14
    3a3c:	58012a01 	stmdapl	r1, {r0, r9, fp, sp}
    3a40:	06000001 	streq	r0, [r0], -r1
    3a44:	01003578 	tsteq	r0, r8, ror r5
    3a48:	0000c42a 	andeq	ip, r0, sl, lsr #8
    3a4c:	357a0600 	ldrbcc	r0, [sl, #-1536]!	; 0x600
    3a50:	c42a0100 	strtgt	r0, [sl], #-256	; 0x100
    3a54:	06000000 	streq	r0, [r0], -r0
    3a58:	01003178 	tsteq	r0, r8, ror r1
    3a5c:	0000ca2b 	andeq	ip, r0, fp, lsr #20
    3a60:	317a0600 	cmncc	sl, r0, lsl #12
    3a64:	ca2b0100 	bgt	ac3e6c <__Stack_Size+0xac366c>
    3a68:	06000000 	streq	r0, [r0], -r0
    3a6c:	01003278 	tsteq	r0, r8, ror r2
    3a70:	0000ca2c 	andeq	ip, r0, ip, lsr #20
    3a74:	327a0600 	rsbscc	r0, sl, #0, 12
    3a78:	ca2c0100 	bgt	b03e80 <__Stack_Size+0xb03680>
    3a7c:	06000000 	streq	r0, [r0], -r0
    3a80:	01003378 	tsteq	r0, r8, ror r3
    3a84:	0000ca2d 	andeq	ip, r0, sp, lsr #20
    3a88:	337a0600 	cmncc	sl, #0, 12
    3a8c:	ca2d0100 	bgt	b43e94 <__Stack_Size+0xb43694>
    3a90:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3a94:	01006164 	tsteq	r0, r4, ror #2
    3a98:	0001583d 	andeq	r5, r1, sp, lsr r8
    3a9c:	62630900 	rsbvs	r0, r3, #0, 18
    3aa0:	583e0100 	ldmdapl	lr!, {r8}
    3aa4:	09000001 	stmdbeq	r0, {r0}
    3aa8:	3f010061 	svccc	0x00010061
    3aac:	00000158 	andeq	r0, r0, r8, asr r1
    3ab0:	01006209 	tsteq	r0, r9, lsl #4
    3ab4:	00015840 	andeq	r5, r1, r0, asr #16
    3ab8:	810a0000 	mrshi	r0, (UNDEF: 10)
    3abc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    3ac0:	0b000001 	bleq	3acc <__Stack_Size+0x32cc>
    3ac4:	00000097 	muleq	r0, r7, r0
    3ac8:	d805001f 	stmdale	r5, {r0, r1, r2, r3, r4}
    3acc:	01000015 	tsteq	r0, r5, lsl r0
    3ad0:	01c7010c 	biceq	r0, r7, ip, lsl #2
    3ad4:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    3ad8:	0c010033 	stceq	0, cr0, [r1], {51}	; 0x33
    3adc:	000000c4 	andeq	r0, r0, r4, asr #1
    3ae0:	00337a06 	eorseq	r7, r3, r6, lsl #20
    3ae4:	00c40c01 	sbceq	r0, r4, r1, lsl #24
    3ae8:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    3aec:	0d010031 	stceq	0, cr0, [r1, #-196]	; 0xffffff3c
    3af0:	000000ca 	andeq	r0, r0, sl, asr #1
    3af4:	00317a06 	eorseq	r7, r1, r6, lsl #20
    3af8:	00ca0d01 	sbceq	r0, sl, r1, lsl #26
    3afc:	140c0000 	strne	r0, [ip], #-0
    3b00:	01000016 	tsteq	r0, r6, lsl r0
    3b04:	00015816 	andeq	r5, r1, r6, lsl r8
    3b08:	16240c00 	strtne	r0, [r4], -r0, lsl #24
    3b0c:	17010000 	strne	r0, [r1, -r0]
    3b10:	00000158 	andeq	r0, r0, r8, asr r1
    3b14:	0016df0c 	andseq	sp, r6, ip, lsl #30
    3b18:	58180100 	ldmdapl	r8, {r8}
    3b1c:	09000001 	stmdbeq	r0, {r0}
    3b20:	19010061 	stmdbne	r1, {r0, r5, r6}
    3b24:	00000158 	andeq	r0, r0, r8, asr r1
    3b28:	16290d00 	strtne	r0, [r9], -r0, lsl #26
    3b2c:	53010000 	movwpl	r0, #4096	; 0x1000
    3b30:	00000000 	andeq	r0, r0, r0
    3b34:	00000228 	andeq	r0, r0, r8, lsr #4
    3b38:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    3b3c:	c30e0000 	movwgt	r0, #57344	; 0xe000
    3b40:	0100000a 	tsteq	r0, sl
    3b44:	0000c453 	andeq	ip, r0, r3, asr r4
    3b48:	000b2f00 	andeq	r2, fp, r0, lsl #30
    3b4c:	00710f00 	rsbseq	r0, r1, r0, lsl #30
    3b50:	00ca5301 	sbceq	r5, sl, r1, lsl #6
    3b54:	0b5b0000 	bleq	16c3b5c <__Stack_Size+0x16c335c>
    3b58:	650f0000 	strvs	r0, [pc, #-0]	; 3b60 <__Stack_Size+0x3360>
    3b5c:	ca530100 	bgt	14c3f64 <__Stack_Size+0x14c3764>
    3b60:	87000000 	strhi	r0, [r0, -r0]
    3b64:	1000000b 	andne	r0, r0, fp
    3b68:	01006d78 	tsteq	r0, r8, ror sp
    3b6c:	00015856 	andeq	r5, r1, r6, asr r8
    3b70:	a8910300 	ldmge	r1, {r8, r9}
    3b74:	6d7a107d 	ldclvs	0, cr1, [sl, #-500]!	; 0xfffffe0c
    3b78:	58570100 	ldmdapl	r7, {r8}^
    3b7c:	03000001 	movweq	r0, #1
    3b80:	107dc891 			; <UNDEFINED> instruction: 0x107dc891
    3b84:	00316d78 	eorseq	r6, r1, r8, ror sp
    3b88:	01585a01 	cmpeq	r8, r1, lsl #20
    3b8c:	91030000 	mrsls	r0, (UNDEF: 3)
    3b90:	7a107de8 	bvc	423338 <__Stack_Size+0x422b38>
    3b94:	0100316d 	tsteq	r0, sp, ror #2
    3b98:	0001585b 	andeq	r5, r1, fp, asr r8
    3b9c:	88910300 	ldmhi	r1, {r8, r9}
    3ba0:	0069117e 	rsbeq	r1, r9, lr, ror r1
    3ba4:	00735d01 	rsbseq	r5, r3, r1, lsl #26
    3ba8:	0bb30000 	bleq	fecc3bb0 <BootRAM+0xdc34351>
    3bac:	a5120000 	ldrge	r0, [r2, #-0]
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3bb8:	01000002 	tsteq	r0, r2
    3bbc:	00027260 	andeq	r7, r2, r0, ror #4
    3bc0:	00ba1300 	adcseq	r1, sl, r0, lsl #6
    3bc4:	0bde0000 	bleq	ff783bcc <BootRAM+0xe6f436d>
    3bc8:	b1130000 	tstlt	r3, r0
    3bcc:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    3bd0:	0000000b 	andeq	r0, r0, fp
    3bd4:	0002f814 	andeq	pc, r2, r4, lsl r8	; <UNPREDICTABLE>
    3bd8:	00090e00 	andeq	r0, r9, r0, lsl #28
    3bdc:	69621100 	stmdbvs	r2!, {r8, ip}^
    3be0:	63010074 	movwvs	r0, #4212	; 0x1074
    3be4:	0000095c 	andeq	r0, r0, ip, asr r9
    3be8:	00000c2e 	andeq	r0, r0, lr, lsr #24
    3bec:	736d7810 	cmnvc	sp, #16, 16	; 0x100000
    3bf0:	58640100 	stmdapl	r4!, {r8}^
    3bf4:	03000001 	movweq	r0, #1
    3bf8:	107ea891 			; <UNDEFINED> instruction: 0x107ea891
    3bfc:	00736d7a 	rsbseq	r6, r3, sl, ror sp
    3c00:	01586501 	cmpeq	r8, r1, lsl #10
    3c04:	91030000 	mrsls	r0, (UNDEF: 3)
    3c08:	d5127ec8 	ldrle	r7, [r2, #-3784]	; 0xec8
    3c0c:	00000000 	andeq	r0, r0, r0
    3c10:	10000000 	andne	r0, r0, r0
    3c14:	01000003 	tsteq	r0, r3
    3c18:	0004b768 	andeq	fp, r4, r8, ror #14
    3c1c:	00ff1500 	rscseq	r1, pc, r0, lsl #10
    3c20:	27130000 	ldrcs	r0, [r3, -r0]
    3c24:	41000001 	tstmi	r0, r1
    3c28:	1300000c 	movwne	r0, #12
    3c2c:	0000011d 	andeq	r0, r0, sp, lsl r1
    3c30:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    3c34:	00011313 	andeq	r1, r1, r3, lsl r3
    3c38:	000d0600 	andeq	r0, sp, r0, lsl #12
    3c3c:	01091300 	mrseq	r1, (UNDEF: 57)
    3c40:	0d750000 	ldcleq	0, cr0, [r5, #-0]
    3c44:	f5130000 			; <UNDEFINED> instruction: 0xf5130000
    3c48:	a4000000 	strge	r0, [r0], #-0
    3c4c:	1300000d 	movwne	r0, #13
    3c50:	000000eb 	andeq	r0, r0, fp, ror #1
    3c54:	00000c41 	andeq	r0, r0, r1, asr #24
    3c58:	0000e113 	andeq	lr, r0, r3, lsl r1
    3c5c:	000cb000 	andeq	fp, ip, r0
    3c60:	03101600 	tsteq	r0, #0, 12
    3c64:	31170000 	tstcc	r7, r0
    3c68:	03000001 	movweq	r0, #1
    3c6c:	177ee891 			; <UNDEFINED> instruction: 0x177ee891
    3c70:	0000013b 	andeq	r0, r0, fp, lsr r1
    3c74:	7f889103 	svcvc	0x00889103
    3c78:	00014517 	andeq	r4, r1, r7, lsl r5
    3c7c:	a8910300 	ldmge	r1, {r8, r9}
    3c80:	014e177f 	hvceq	57727	; 0xe17f
    3c84:	91020000 	mrsls	r0, (UNDEF: 2)
    3c88:	00001848 	andeq	r1, r0, r8, asr #16
    3c8c:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3c90:	03490000 	movteq	r0, #36864	; 0x9000
    3c94:	01190000 	tsteq	r9, r0
    3c98:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    3c9c:	5101197d 	tstpl	r1, sp, ror r9
    3ca0:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    3ca4:	91035001 	tstls	r3, r1
    3ca8:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3cac:	00000000 	andeq	r0, r0, r0
    3cb0:	000009a2 	andeq	r0, r0, r2, lsr #19
    3cb4:	0000036b 	andeq	r0, r0, fp, ror #6
    3cb8:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3cbc:	197e8891 	ldmdbne	lr!, {r0, r4, r7, fp, pc}^
    3cc0:	91035101 	tstls	r3, r1, lsl #2
    3cc4:	01197de8 	tsteq	r9, r8, ror #27
    3cc8:	48910250 	ldmmi	r1, {r4, r6, r9}
    3ccc:	00001800 	andeq	r1, r0, r0, lsl #16
    3cd0:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3cd4:	038d0000 	orreq	r0, sp, #0
    3cd8:	01190000 	tsteq	r9, r0
    3cdc:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3ce0:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3ce4:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3ce8:	91035001 	tstls	r3, r1
    3cec:	18007ee8 	stmdane	r0, {r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	000009a2 	andeq	r0, r0, r2, lsr #19
    3cf8:	000003ae 	andeq	r0, r0, lr, lsr #7
    3cfc:	03520119 	cmpeq	r2, #1073741830	; 0x40000006
    3d00:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    3d04:	7d025101 	stfvcs	f5, [r2, #-4]
    3d08:	50011900 	andpl	r1, r1, r0, lsl #18
    3d0c:	00489102 	subeq	r9, r8, r2, lsl #2
    3d10:	00000018 	andeq	r0, r0, r8, lsl r0
    3d14:	00098700 	andeq	r8, r9, r0, lsl #14
    3d18:	0003d100 	andeq	sp, r3, r0, lsl #2
    3d1c:	52011900 	andpl	r1, r1, #0, 18
    3d20:	7e889103 	sinvce	f1, f3
    3d24:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3d28:	197de891 	ldmdbne	sp!, {r0, r4, r7, fp, sp, lr, pc}^
    3d2c:	91035001 	tstls	r3, r1
    3d30:	18007fa8 	stmdane	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3d34:	00000000 	andeq	r0, r0, r0
    3d38:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    3d3c:	000003f3 	strdeq	r0, [r0], -r3
    3d40:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    3d44:	01194891 			; <UNDEFINED> instruction: 0x01194891
    3d48:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    3d4c:	5001197f 	andpl	r1, r1, pc, ror r9
    3d50:	7f889103 	svcvc	0x00889103
    3d54:	00001800 	andeq	r1, r0, r0, lsl #16
    3d58:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3d5c:	04160000 	ldreq	r0, [r6], #-0
    3d60:	01190000 	tsteq	r9, r0
    3d64:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3d68:	5101197f 	tstpl	r1, pc, ror r9
    3d6c:	7ee89103 	urdvce	f1, f3
    3d70:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3d74:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3d78:	00000018 	andeq	r0, r0, r8, lsl r0
    3d7c:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3d80:	00043800 	andeq	r3, r4, r0, lsl #16
    3d84:	52011900 	andpl	r1, r1, #0, 18
    3d88:	7fa89103 	svcvc	0x00a89103
    3d8c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3d90:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3d94:	91025001 	tstls	r2, r1
    3d98:	00180048 	andseq	r0, r8, r8, asr #32
    3d9c:	bd000000 	stclt	0, cr0, [r0, #-0]
    3da0:	53000009 	movwpl	r0, #9
    3da4:	19000004 	stmdbne	r0, {r2}
    3da8:	91025201 	tstls	r2, r1, lsl #4
    3dac:	50011948 	andpl	r1, r1, r8, asr #18
    3db0:	7de89103 	stfvcp	f1, [r8, #12]!
    3db4:	00001800 	andeq	r1, r0, r0, lsl #16
    3db8:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    3dbc:	04760000 	ldrbteq	r0, [r6], #-0
    3dc0:	01190000 	tsteq	r9, r0
    3dc4:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    3dc8:	5101197f 	tstpl	r1, pc, ror r9
    3dcc:	7ee89103 	urdvce	f1, f3
    3dd0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3dd4:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    3dd8:	00000018 	andeq	r0, r0, r8, lsl r0
    3ddc:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3de0:	00049800 	andeq	r9, r4, r0, lsl #16
    3de4:	52011900 	andpl	r1, r1, #0, 18
    3de8:	7fa89103 	svcvc	0x00a89103
    3dec:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3df0:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    3df4:	91025001 	tstls	r2, r1
    3df8:	001a0048 	andseq	r0, sl, r8, asr #32
    3dfc:	bd000000 	stclt	0, cr0, [r0, #-0]
    3e00:	19000009 	stmdbne	r0, {r0, r3}
    3e04:	91025201 	tstls	r2, r1, lsl #4
    3e08:	51011948 	tstpl	r1, r8, asr #18
    3e0c:	19007602 	stmdbne	r0, {r1, r9, sl, ip, sp, lr}
    3e10:	91035001 	tstls	r3, r1
    3e14:	00007e88 	andeq	r7, r0, r8, lsl #29
    3e18:	01681b00 	cmneq	r8, r0, lsl #22
    3e1c:	00000000 	andeq	r0, r0, r0
    3e20:	00640000 	rsbeq	r0, r4, r0
    3e24:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3e28:	00000669 	andeq	r0, r0, r9, ror #12
    3e2c:	00019213 	andeq	r9, r1, r3, lsl r2
    3e30:	000d0600 	andeq	r0, sp, r0, lsl #12
    3e34:	01881300 	orreq	r1, r8, r0, lsl #6
    3e38:	0d750000 	ldcleq	0, cr0, [r5, #-0]
    3e3c:	7e130000 	cdpvc	0, 1, cr0, cr3, cr0, {0}
    3e40:	06000001 	streq	r0, [r0], -r1
    3e44:	1300000d 	movwne	r0, #13
    3e48:	00000174 	andeq	r0, r0, r4, ror r1
    3e4c:	00000d75 	andeq	r0, r0, r5, ror sp
    3e50:	0000001c 	andeq	r0, r0, ip, lsl r0
    3e54:	00006400 	andeq	r6, r0, r0, lsl #8
    3e58:	019c1700 	orrseq	r1, ip, r0, lsl #14
    3e5c:	91030000 	mrsls	r0, (UNDEF: 3)
    3e60:	a7177ee8 	ldrge	r7, [r7, -r8, ror #29]
    3e64:	03000001 	movweq	r0, #1
    3e68:	177f8891 			; <UNDEFINED> instruction: 0x177f8891
    3e6c:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    3e70:	7fa89103 	svcvc	0x00a89103
    3e74:	0001bd17 	andeq	fp, r1, r7, lsl sp
    3e78:	48910200 	ldmmi	r1, {r9}
    3e7c:	00000018 	andeq	r0, r0, r8, lsl r0
    3e80:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3e84:	00053b00 	andeq	r3, r5, r0, lsl #22
    3e88:	52011900 	andpl	r1, r1, #0, 18
    3e8c:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    3e90:	7d025101 	stfvcs	f5, [r2, #-4]
    3e94:	50011900 	andpl	r1, r1, r0, lsl #18
    3e98:	7ee89103 	urdvce	f1, f3
    3e9c:	00001800 	andeq	r1, r0, r0, lsl #16
    3ea0:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    3ea4:	055e0000 	ldrbeq	r0, [lr, #-0]
    3ea8:	01190000 	tsteq	r9, r0
    3eac:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    3eb0:	5101197d 	tstpl	r1, sp, ror r9
    3eb4:	7dc89103 	stfvcp	f1, [r8, #12]
    3eb8:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3ebc:	007f8891 			; <UNDEFINED> instruction: 0x007f8891
    3ec0:	00000018 	andeq	r0, r0, r8, lsl r0
    3ec4:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3ec8:	00058000 	andeq	r8, r5, r0
    3ecc:	52011900 	andpl	r1, r1, #0, 18
    3ed0:	7dc89103 	stfvcp	f1, [r8, #12]
    3ed4:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    3ed8:	0119007d 	tsteq	r9, sp, ror r0
    3edc:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    3ee0:	0018007f 	andseq	r0, r8, pc, ror r0
    3ee4:	a2000000 	andge	r0, r0, #0
    3ee8:	a2000009 	andge	r0, r0, #9
    3eec:	19000005 	stmdbne	r0, {r0, r2}
    3ef0:	91035201 	tstls	r3, r1, lsl #4
    3ef4:	01197f88 	tsteq	r9, r8, lsl #31
    3ef8:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3efc:	5001197e 	andpl	r1, r1, lr, ror r9
    3f00:	00489102 	subeq	r9, r8, r2, lsl #2
    3f04:	00000018 	andeq	r0, r0, r8, lsl r0
    3f08:	0009bd00 	andeq	fp, r9, r0, lsl #26
    3f0c:	0005c200 	andeq	ip, r5, r0, lsl #4
    3f10:	52011900 	andpl	r1, r1, #0, 18
    3f14:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3f18:	91025101 	tstls	r2, r1, lsl #2
    3f1c:	50011948 	andpl	r1, r1, r8, asr #18
    3f20:	00007d02 	andeq	r7, r0, r2, lsl #26
    3f24:	00000018 	andeq	r0, r0, r8, lsl r0
    3f28:	0009d800 	andeq	sp, r9, r0, lsl #16
    3f2c:	0005e600 	andeq	lr, r5, r0, lsl #12
    3f30:	52011900 	andpl	r1, r1, #0, 18
    3f34:	6d060c05 	stcvs	12, cr0, [r6, #-20]	; 0xffffffec
    3f38:	01190007 	tsteq	r9, r7
    3f3c:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    3f40:	5001197f 	andpl	r1, r1, pc, ror r9
    3f44:	00489102 	subeq	r9, r8, r2, lsl #2
    3f48:	00000018 	andeq	r0, r0, r8, lsl r0
    3f4c:	00098700 	andeq	r8, r9, r0, lsl #14
    3f50:	00060700 	andeq	r0, r6, r0, lsl #14
    3f54:	52011900 	andpl	r1, r1, #0, 18
    3f58:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    3f5c:	91035101 	tstls	r3, r1, lsl #2
    3f60:	01197ee8 	tsteq	r9, r8, ror #29
    3f64:	48910250 	ldmmi	r1, {r4, r6, r9}
    3f68:	00001800 	andeq	r1, r0, r0, lsl #16
    3f6c:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    3f70:	06280000 	strteq	r0, [r8], -r0
    3f74:	01190000 	tsteq	r9, r0
    3f78:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    3f7c:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    3f80:	197f8891 	ldmdbne	pc!, {r0, r4, r7, fp, pc}^	; <UNPREDICTABLE>
    3f84:	91025001 	tstls	r2, r1
    3f88:	00180048 	andseq	r0, r8, r8, asr #32
    3f8c:	bd000000 	stclt	0, cr0, [r0, #-0]
    3f90:	4a000009 	bmi	3fbc <__Stack_Size+0x37bc>
    3f94:	19000006 	stmdbne	r0, {r1, r2}
    3f98:	91025201 	tstls	r2, r1, lsl #4
    3f9c:	51011948 	tstpl	r1, r8, asr #18
    3fa0:	7fa89103 	svcvc	0x00a89103
    3fa4:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    3fa8:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    3fac:	0000001a 	andeq	r0, r0, sl, lsl r0
    3fb0:	0009d800 	andeq	sp, r9, r0, lsl #16
    3fb4:	52011900 	andpl	r1, r1, #0, 18
    3fb8:	01193401 	tsteq	r9, r1, lsl #8
    3fbc:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    3fc0:	5001197e 	andpl	r1, r1, lr, ror r9
    3fc4:	7dc89103 	stfvcp	f1, [r8, #12]
    3fc8:	12000000 	andne	r0, r0, #0
    3fcc:	000000d5 	ldrdeq	r0, [r0], -r5
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	00000330 	andeq	r0, r0, r0, lsr r3
    3fd8:	08706c01 	ldmdaeq	r0!, {r0, sl, fp, sp, lr}^
    3fdc:	27150000 	ldrcs	r0, [r5, -r0]
    3fe0:	13000001 	movwne	r0, #1
    3fe4:	0000011d 	andeq	r0, r0, sp, lsl r1
    3fe8:	00000da4 	andeq	r0, r0, r4, lsr #27
    3fec:	00011313 	andeq	r1, r1, r3, lsl r3
    3ff0:	000d0600 	andeq	r0, sp, r0, lsl #12
    3ff4:	01091300 	mrseq	r1, (UNDEF: 57)
    3ff8:	0d750000 	ldcleq	0, cr0, [r5, #-0]
    3ffc:	ff130000 			; <UNDEFINED> instruction: 0xff130000
    4000:	41000000 	mrsmi	r0, (UNDEF: 0)
    4004:	1300000c 	movwne	r0, #12
    4008:	000000f5 	strdeq	r0, [r0], -r5
    400c:	00000cb0 			; <UNDEFINED> instruction: 0x00000cb0
    4010:	0000eb13 	andeq	lr, r0, r3, lsl fp
    4014:	000dc500 	andeq	ip, sp, r0, lsl #10
    4018:	00e11300 	rsceq	r1, r1, r0, lsl #6
    401c:	0e1b0000 	cdpeq	0, 1, cr0, cr11, cr0, {0}
    4020:	30160000 	andscc	r0, r6, r0
    4024:	17000003 	strne	r0, [r0, -r3]
    4028:	00000131 	andeq	r0, r0, r1, lsr r1
    402c:	7ee89103 	urdvce	f1, f3
    4030:	00013b17 	andeq	r3, r1, r7, lsl fp
    4034:	88910300 	ldmhi	r1, {r8, r9}
    4038:	0145177f 	hvceq	20863	; 0x517f
    403c:	91030000 	mrsls	r0, (UNDEF: 3)
    4040:	4e177fa8 	cdpmi	15, 1, cr7, cr7, cr8, {5}
    4044:	02000001 	andeq	r0, r0, #1
    4048:	00184891 	mulseq	r8, r1, r8
    404c:	87000000 	strhi	r0, [r0, -r0]
    4050:	0a000009 	beq	407c <__Stack_Size+0x387c>
    4054:	19000007 	stmdbne	r0, {r0, r1, r2}
    4058:	91035201 	tstls	r3, r1, lsl #4
    405c:	01197dc8 	tsteq	r9, r8, asr #27
    4060:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4064:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    4068:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    406c:	00000018 	andeq	r0, r0, r8, lsl r0
    4070:	0009a200 	andeq	sl, r9, r0, lsl #4
    4074:	00072400 	andeq	r2, r7, r0, lsl #8
    4078:	51011900 	tstpl	r1, r0, lsl #18
    407c:	19007602 	stmdbne	r0, {r1, r9, sl, ip, sp, lr}
    4080:	91025001 	tstls	r2, r1
    4084:	00180048 	andseq	r0, r8, r8, asr #32
    4088:	bd000000 	stclt	0, cr0, [r0, #-0]
    408c:	46000009 	strmi	r0, [r0], -r9
    4090:	19000007 	stmdbne	r0, {r0, r1, r2}
    4094:	91025201 	tstls	r2, r1, lsl #4
    4098:	51011948 	tstpl	r1, r8, asr #18
    409c:	7fa89103 	svcvc	0x00a89103
    40a0:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    40a4:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    40a8:	00000018 	andeq	r0, r0, r8, lsl r0
    40ac:	0009a200 	andeq	sl, r9, r0, lsl #4
    40b0:	00076700 	andeq	r6, r7, r0, lsl #14
    40b4:	52011900 	andpl	r1, r1, #0, 18
    40b8:	7dc89103 	stfvcp	f1, [r8, #12]
    40bc:	02510119 	subseq	r0, r1, #1073741830	; 0x40000006
    40c0:	0119007d 	tsteq	r9, sp, ror r0
    40c4:	48910250 	ldmmi	r1, {r4, r6, r9}
    40c8:	00001800 	andeq	r1, r0, r0, lsl #16
    40cc:	09870000 	stmibeq	r7, {}	; <UNPREDICTABLE>
    40d0:	07820000 	streq	r0, [r2, r0]
    40d4:	01190000 	tsteq	r9, r0
    40d8:	00760251 	rsbseq	r0, r6, r1, asr r2
    40dc:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    40e0:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    40e4:	00000018 	andeq	r0, r0, r8, lsl r0
    40e8:	0009bd00 	andeq	fp, r9, r0, lsl #26
    40ec:	0007a400 	andeq	sl, r7, r0, lsl #8
    40f0:	52011900 	andpl	r1, r1, #0, 18
    40f4:	19489102 	stmdbne	r8, {r1, r8, ip, pc}^
    40f8:	91035101 	tstls	r3, r1, lsl #2
    40fc:	01197fa8 	tsteq	r9, r8, lsr #31
    4100:	88910350 	ldmhi	r1, {r4, r6, r8, r9}
    4104:	0018007f 	andseq	r0, r8, pc, ror r0
    4108:	87000000 	strhi	r0, [r0, -r0]
    410c:	c7000009 	strgt	r0, [r0, -r9]
    4110:	19000007 	stmdbne	r0, {r0, r1, r2}
    4114:	91035201 	tstls	r3, r1, lsl #4
    4118:	01197f88 	tsteq	r9, r8, lsl #31
    411c:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    4120:	5001197e 	andpl	r1, r1, lr, ror r9
    4124:	7fa89103 	svcvc	0x00a89103
    4128:	00001800 	andeq	r1, r0, r0, lsl #16
    412c:	09bd0000 	ldmibeq	sp!, {}	; <UNPREDICTABLE>
    4130:	07e90000 	strbeq	r0, [r9, r0]!
    4134:	01190000 	tsteq	r9, r0
    4138:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    413c:	5101197f 	tstpl	r1, pc, ror r9
    4140:	7fa89103 	svcvc	0x00a89103
    4144:	02500119 	subseq	r0, r0, #1073741830	; 0x40000006
    4148:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
    414c:	00000000 	andeq	r0, r0, r0
    4150:	000009bd 			; <UNDEFINED> instruction: 0x000009bd
    4154:	0000080b 	andeq	r0, r0, fp, lsl #16
    4158:	02520119 	subseq	r0, r2, #1073741830	; 0x40000006
    415c:	01194891 			; <UNDEFINED> instruction: 0x01194891
    4160:	88910351 	ldmhi	r1, {r0, r4, r6, r8, r9}
    4164:	5001197e 	andpl	r1, r1, lr, ror r9
    4168:	7ea89103 	tanvce	f1, f3
    416c:	00001800 	andeq	r1, r0, r0, lsl #16
    4170:	09a20000 	stmibeq	r2!, {}	; <UNPREDICTABLE>
    4174:	082e0000 	stmdaeq	lr!, {}	; <UNPREDICTABLE>
    4178:	01190000 	tsteq	r9, r0
    417c:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    4180:	5101197f 	tstpl	r1, pc, ror r9
    4184:	7ee89103 	urdvce	f1, f3
    4188:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    418c:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    4190:	00000018 	andeq	r0, r0, r8, lsl r0
    4194:	0009bd00 	andeq	fp, r9, r0, lsl #26
    4198:	00085000 	andeq	r5, r8, r0
    419c:	52011900 	andpl	r1, r1, #0, 18
    41a0:	7fa89103 	svcvc	0x00a89103
    41a4:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    41a8:	197fa891 	ldmdbne	pc!, {r0, r4, r7, fp, sp, pc}^	; <UNPREDICTABLE>
    41ac:	91025001 	tstls	r2, r1
    41b0:	001a0048 	andseq	r0, sl, r8, asr #32
    41b4:	bd000000 	stclt	0, cr0, [r0, #-0]
    41b8:	19000009 	stmdbne	r0, {r0, r3}
    41bc:	91025201 	tstls	r2, r1, lsl #4
    41c0:	51011948 	tstpl	r1, r8, asr #18
    41c4:	7de89103 	stfvcp	f1, [r8, #12]!
    41c8:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    41cc:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    41d0:	00180000 	andseq	r0, r8, r0
    41d4:	f3000000 	vhadd.u8	d0, d0, d0
    41d8:	98000009 	stmdals	r0, {r0, r3}
    41dc:	19000008 	stmdbne	r0, {r3}
    41e0:	75025301 	strvc	r5, [r2, #-769]	; 0x301
    41e4:	52011900 	andpl	r1, r1, #0, 18
    41e8:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    41ec:	91035101 	tstls	r3, r1, lsl #2
    41f0:	01197de8 	tsteq	r9, r8, ror #27
    41f4:	e8910350 	ldm	r1, {r4, r6, r8, r9}
    41f8:	0018007d 	andseq	r0, r8, sp, ror r0
    41fc:	f3000000 	vhadd.u8	d0, d0, d0
    4200:	c1000009 	tstgt	r0, r9
    4204:	19000008 	stmdbne	r0, {r3}
    4208:	75025301 	strvc	r5, [r2, #-769]	; 0x301
    420c:	52011900 	andpl	r1, r1, #0, 18
    4210:	7dc89103 	stfvcp	f1, [r8, #12]
    4214:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4218:	197e8891 	ldmdbne	lr!, {r0, r4, r7, fp, pc}^
    421c:	91035001 	tstls	r3, r1
    4220:	18007e88 	stmdane	r0, {r3, r7, r9, sl, fp, ip, sp, lr}
    4224:	00000000 	andeq	r0, r0, r0
    4228:	000009f3 	strdeq	r0, [r0], -r3
    422c:	000008e8 	andeq	r0, r0, r8, ror #17
    4230:	02530119 	subseq	r0, r3, #1073741830	; 0x40000006
    4234:	01190075 	tsteq	r9, r5, ror r0
    4238:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    423c:	5101197e 	tstpl	r1, lr, ror r9
    4240:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    4244:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4248:	001a0000 	andseq	r0, sl, r0
    424c:	f3000000 	vhadd.u8	d0, d0, d0
    4250:	19000009 	stmdbne	r0, {r0, r3}
    4254:	75025301 	strvc	r5, [r2, #-769]	; 0x301
    4258:	52011900 	andpl	r1, r1, #0, 18
    425c:	7ec89103 	acsvce	f1, f3
    4260:	03510119 	cmpeq	r1, #1073741830	; 0x40000006
    4264:	197dc891 	ldmdbne	sp!, {r0, r4, r7, fp, lr, pc}^
    4268:	91035001 	tstls	r3, r1
    426c:	00007dc8 	andeq	r7, r0, r8, asr #27
    4270:	00000018 	andeq	r0, r0, r8, lsl r0
    4274:	000a1300 	andeq	r1, sl, r0, lsl #6
    4278:	00092a00 	andeq	r2, r9, r0, lsl #20
    427c:	51011900 	tstpl	r1, r0, lsl #18
    4280:	7dc89103 	stfvcp	f1, [r8, #12]
    4284:	03500119 	cmpeq	r0, #1073741830	; 0x40000006
    4288:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    428c:	00000018 	andeq	r0, r0, r8, lsl r0
    4290:	0009bd00 	andeq	fp, r9, r0, lsl #26
    4294:	00094b00 	andeq	r4, r9, r0, lsl #22
    4298:	52011900 	andpl	r1, r1, #0, 18
    429c:	19007d02 	stmdbne	r0, {r1, r8, sl, fp, ip, sp, lr}
    42a0:	91035101 	tstls	r3, r1, lsl #2
    42a4:	01197e88 	tsteq	r9, r8, lsl #29
    42a8:	00780250 	rsbseq	r0, r8, r0, asr r2
    42ac:	00001a00 	andeq	r1, r0, r0, lsl #20
    42b0:	0a290000 	beq	a442b8 <__Stack_Size+0xa43ab8>
    42b4:	01190000 	tsteq	r9, r0
    42b8:	00780250 	rsbseq	r0, r8, r0, asr r2
    42bc:	73080000 	movwvc	r0, #32768	; 0x8000
    42c0:	1d000000 	stcne	0, cr0, [r0, #-0]
    42c4:	00001619 	andeq	r1, r0, r9, lsl r6
    42c8:	096c1c02 	stmdbeq	ip!, {r1, sl, fp, ip}^
    42cc:	58080000 	stmdapl	r8, {}	; <UNPREDICTABLE>
    42d0:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    42d4:	000015ee 	andeq	r1, r0, lr, ror #11
    42d8:	09820901 	stmibeq	r2, {r0, r8, fp}
    42dc:	03050000 	movweq	r0, #20480	; 0x5000
    42e0:	00000000 	andeq	r0, r0, r0
    42e4:	00015808 	andeq	r5, r1, r8, lsl #16
    42e8:	15fc1f00 	ldrbne	r1, [ip, #3840]!	; 0xf00
    42ec:	3a020000 	bcc	842f4 <__Stack_Size+0x83af4>
    42f0:	000009a2 	andeq	r0, r0, r2, lsr #19
    42f4:	0000c420 	andeq	ip, r0, r0, lsr #8
    42f8:	00ca2000 	sbceq	r2, sl, r0
    42fc:	ca200000 	bgt	804304 <__Stack_Size+0x803b04>
    4300:	00000000 	andeq	r0, r0, r0
    4304:	0016d41f 	andseq	sp, r6, pc, lsl r4
    4308:	bd3b0200 	lfmlt	f0, 4, [fp, #-0]
    430c:	20000009 	andcs	r0, r0, r9
    4310:	000000c4 	andeq	r0, r0, r4, asr #1
    4314:	0000ca20 	andeq	ip, r0, r0, lsr #20
    4318:	00ca2000 	sbceq	r2, sl, r0
    431c:	1f000000 	svcne	0x00000000
    4320:	000016f5 	strdeq	r1, [r0], -r5
    4324:	09d84402 	ldmibeq	r8, {r1, sl, lr}^
    4328:	c4200000 	strtgt	r0, [r0], #-0
    432c:	20000000 	andcs	r0, r0, r0
    4330:	000000ca 	andeq	r0, r0, sl, asr #1
    4334:	0000ca20 	andeq	ip, r0, r0, lsr #20
    4338:	071f0000 	ldreq	r0, [pc, -r0]
    433c:	02000016 	andeq	r0, r0, #22
    4340:	0009f34b 	andeq	pc, r9, fp, asr #6
    4344:	00c42000 	sbceq	r2, r4, r0
    4348:	ca200000 	bgt	804350 <__Stack_Size+0x803b50>
    434c:	20000000 	andcs	r0, r0, r0
    4350:	0000008c 	andeq	r0, r0, ip, lsl #1
    4354:	171f1f00 	ldrne	r1, [pc, -r0, lsl #30]
    4358:	33020000 	movwcc	r0, #8192	; 0x2000
    435c:	00000a13 	andeq	r0, r0, r3, lsl sl
    4360:	0000c420 	andeq	ip, r0, r0, lsr #8
    4364:	00ca2000 	sbceq	r2, sl, r0
    4368:	ca200000 	bgt	804370 <__Stack_Size+0x803b70>
    436c:	20000000 	andcs	r0, r0, r0
    4370:	00000081 	andeq	r0, r0, r1, lsl #1
    4374:	170a1f00 	strne	r1, [sl, -r0, lsl #30]
    4378:	51020000 	mrspl	r0, (UNDEF: 2)
    437c:	00000a29 	andeq	r0, r0, r9, lsr #20
    4380:	0000c420 	andeq	ip, r0, r0, lsr #8
    4384:	00ca2000 	sbceq	r2, sl, r0
    4388:	21000000 	mrscs	r0, (UNDEF: 0)
    438c:	000016e4 	andeq	r1, r0, r4, ror #13
    4390:	c4202802 	strtgt	r2, [r0], #-2050	; 0x802
    4394:	00000000 	andeq	r0, r0, r0
    4398:	000eb200 	andeq	fp, lr, r0, lsl #4
    439c:	21000400 	tstcs	r0, r0, lsl #8
    43a0:	04000010 	streq	r0, [r0], #-16
    43a4:	00163601 	andseq	r3, r6, r1, lsl #12
    43a8:	17970100 	ldrne	r0, [r7, r0, lsl #2]
    43ac:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    43b0:	03c00000 	biceq	r0, r0, #0
    43b4:	00000000 	andeq	r0, r0, r0
    43b8:	132f0000 	teqne	pc, #0
    43bc:	01020000 	mrseq	r0, (UNDEF: 2)
    43c0:	00081a06 	andeq	r1, r8, r6, lsl #20
    43c4:	0c360300 	ldceq	3, cr0, [r6], #-0
    43c8:	1c040000 	stcne	0, cr0, [r4], {-0}
    43cc:	00000037 	andeq	r0, r0, r7, lsr r0
    43d0:	18080102 	stmdane	r8, {r1, r8}
    43d4:	02000008 	andeq	r0, r0, #8
    43d8:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    43dc:	02020000 	andeq	r0, r2, #0
    43e0:	00094907 	andeq	r4, r9, r7, lsl #18
    43e4:	05040200 	streq	r0, [r4, #-512]	; 0x200
    43e8:	000004da 	ldrdeq	r0, [r0], -sl
    43ec:	000b4e03 	andeq	r4, fp, r3, lsl #28
    43f0:	5e380400 	cfabsspl	mvf0, mvf8
    43f4:	02000000 	andeq	r0, r0, #0
    43f8:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    43fc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4400:	0004d505 	andeq	sp, r4, r5, lsl #10
    4404:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4408:	0000024d 	andeq	r0, r0, sp, asr #4
    440c:	69050404 	stmdbvs	r5, {r2, sl}
    4410:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4414:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    4418:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    441c:	0500000c 	streq	r0, [r0, #-12]
    4420:	00002c2a 	andeq	r2, r0, sl, lsr #24
    4424:	0b500300 	bleq	140502c <__Stack_Size+0x140482c>
    4428:	42050000 	andmi	r0, r5, #0
    442c:	00000053 	andeq	r0, r0, r3, asr r0
    4430:	8b070402 	blhi	1c5440 <__Stack_Size+0x1c4c40>
    4434:	05000007 	streq	r0, [r0, #-7]
    4438:	08010204 	stmdaeq	r1, {r2, r9}
    443c:	00000821 	andeq	r0, r0, r1, lsr #16
    4440:	00180906 	andseq	r0, r8, r6, lsl #18
    4444:	20038000 	andcs	r8, r3, r0
    4448:	000000dc 	ldrdeq	r0, [r0], -ip
    444c:	03007807 	movweq	r7, #2055	; 0x807
    4450:	0000dc21 	andeq	sp, r0, r1, lsr #24
    4454:	79070000 	stmdbvc	r7, {}	; <UNPREDICTABLE>
    4458:	dc220300 	stcle	3, cr0, [r2], #-0
    445c:	20000000 	andcs	r0, r0, r0
    4460:	03007407 	movweq	r7, #1031	; 0x407
    4464:	0000dc23 	andeq	sp, r0, r3, lsr #24
    4468:	7a074000 	bvc	1d4470 <__Stack_Size+0x1d3c70>
    446c:	dc240300 	stcle	3, cr0, [r4], #-0
    4470:	60000000 	andvs	r0, r0, r0
    4474:	00810800 	addeq	r0, r1, r0, lsl #16
    4478:	00ec0000 	rsceq	r0, ip, r0
    447c:	97090000 	strls	r0, [r9, -r0]
    4480:	1f000000 	svcne	0x00000000
    4484:	15e20a00 	strbne	r0, [r2, #2560]!	; 0xa00
    4488:	22020000 	andcs	r0, r2, #0
    448c:	00010b03 	andeq	r0, r1, r3, lsl #22
    4490:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    4494:	010b2202 	tsteq	fp, r2, lsl #4
    4498:	610b0000 	mrsvs	r0, (UNDEF: 11)
    449c:	11220200 	teqne	r2, r0, lsl #4
    44a0:	00000001 	andeq	r0, r0, r1
    44a4:	0081040c 	addeq	r0, r1, ip, lsl #8
    44a8:	040c0000 	streq	r0, [ip], #-0
    44ac:	00000117 	andeq	r0, r0, r7, lsl r1
    44b0:	0000810d 	andeq	r8, r0, sp, lsl #2
    44b4:	18210a00 	stmdane	r1!, {r9, fp}
    44b8:	46030000 	strmi	r0, [r3], -r0
    44bc:	00013f03 	andeq	r3, r1, r3, lsl #30
    44c0:	73640b00 	cmnvc	r4, #0, 22
    44c4:	46030074 			; <UNDEFINED> instruction: 0x46030074
    44c8:	0000013f 	andeq	r0, r0, pc, lsr r1
    44cc:	6372730b 	cmnvs	r2, #738197504	; 0x2c000000
    44d0:	45470300 	strbmi	r0, [r7, #-768]	; 0x300
    44d4:	00000001 	andeq	r0, r0, r1
    44d8:	00a7040c 	adceq	r0, r7, ip, lsl #8
    44dc:	040c0000 	streq	r0, [ip], #-0
    44e0:	0000014b 	andeq	r0, r0, fp, asr #2
    44e4:	0000a70d 	andeq	sl, r0, sp, lsl #14
    44e8:	17870e00 	strne	r0, [r7, r0, lsl #28]
    44ec:	32010000 	andcc	r0, r1, #0
    44f0:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
    44f4:	00000070 	andeq	r0, r0, r0, ror r0
    44f8:	02109c01 	andseq	r9, r0, #256	; 0x100
    44fc:	700f0000 	andvc	r0, pc, r0
    4500:	3f320100 	svccc	0x00320100
    4504:	58000001 	stmdapl	r0, {r0}
    4508:	0f00000e 	svceq	0x0000000e
    450c:	33010078 	movwcc	r0, #4216	; 0x1078
    4510:	00000111 	andeq	r0, r0, r1, lsl r1
    4514:	00000e91 	muleq	r0, r1, lr
    4518:	0100790f 	tsteq	r0, pc, lsl #18
    451c:	00011133 	andeq	r1, r1, r3, lsr r1
    4520:	000ec800 	andeq	ip, lr, r0, lsl #16
    4524:	00ec1000 	rsceq	r1, ip, r0
    4528:	1b240000 	blne	904530 <__Stack_Size+0x903d30>
    452c:	00280800 	eoreq	r0, r8, r0, lsl #16
    4530:	35010000 	strcc	r0, [r1, #-0]
    4534:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4538:	00010111 	andeq	r0, r1, r1, lsl r1
    453c:	000eff00 	andeq	pc, lr, r0, lsl #30
    4540:	00f81100 	rscseq	r1, r8, r0, lsl #2
    4544:	0f2b0000 	svceq	0x002b0000
    4548:	12000000 	andne	r0, r0, #0
    454c:	000000ec 	andeq	r0, r0, ip, ror #1
    4550:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
    4554:	00000358 	andeq	r0, r0, r8, asr r3
    4558:	01d43601 	bicseq	r3, r4, r1, lsl #12
    455c:	01130000 	tsteq	r3, r0
    4560:	11000001 	tstne	r0, r1
    4564:	000000f8 	strdeq	r0, [r0], -r8
    4568:	00000f64 	andeq	r0, r0, r4, ror #30
    456c:	1b801400 	blne	fe009574 <BootRAM+0xcf79d15>
    4570:	0d9d0800 	ldceq	8, cr0, [sp]
    4574:	01ee0000 	mvneq	r0, r0
    4578:	01150000 	tsteq	r5, r0
    457c:	15310151 	ldrne	r0, [r1, #-337]!	; 0x151
    4580:	74035001 	strvc	r5, [r3], #-1
    4584:	160000e0 	strne	r0, [r0], -r0, ror #1
    4588:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
    458c:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4590:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4594:	155201f3 	ldrbne	r0, [r2, #-499]	; 0x1f3
    4598:	f3035101 	vrhadd.u8	d5, d3, d1
    459c:	01155101 	tsteq	r5, r1, lsl #2
    45a0:	01f30550 	mvnseq	r0, r0, asr r5
    45a4:	00402350 	subeq	r2, r0, r0, asr r3
    45a8:	17c10e00 	strbne	r0, [r1, r0, lsl #28]
    45ac:	3b010000 	blcc	445b4 <__Stack_Size+0x43db4>
    45b0:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
    45b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    45b8:	02d99c01 	sbcseq	r9, r9, #256	; 0x100
    45bc:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    45c0:	0b3b0100 	bleq	ec49c8 <__Stack_Size+0xec41c8>
    45c4:	a3000001 	movwge	r0, #1
    45c8:	0f00000f 	svceq	0x0000000f
    45cc:	3b010079 	blcc	447b8 <__Stack_Size+0x43fb8>
    45d0:	0000010b 	andeq	r0, r0, fp, lsl #2
    45d4:	00000fc1 	andeq	r0, r0, r1, asr #31
    45d8:	0100700f 	tsteq	r0, pc
    45dc:	0001453c 	andeq	r4, r1, ip, lsr r5
    45e0:	000fdf00 	andeq	sp, pc, r0, lsl #30
    45e4:	317a1700 	cmncc	sl, r0, lsl #14
    45e8:	dc3e0100 	ldfles	f0, [lr], #-0
    45ec:	02000000 	andeq	r0, r0, #0
    45f0:	a4145091 	ldrge	r5, [r4], #-145	; 0x91
    45f4:	ce08001b 	mcrgt	0, 0, r0, cr8, cr11, {0}
    45f8:	7400000d 	strvc	r0, [r0], #-13
    45fc:	15000002 	strne	r0, [r0, #-2]
    4600:	74035101 	strvc	r5, [r3], #-257	; 0x101
    4604:	011500e0 	tsteq	r5, r0, ror #1
    4608:	007d0250 	rsbseq	r0, sp, r0, asr r2
    460c:	1bae1400 	blne	feb89614 <BootRAM+0xdaf9db5>
    4610:	0db30800 	ldceq	8, cr0, [r3]
    4614:	02940000 	addseq	r0, r4, #0
    4618:	01150000 	tsteq	r5, r0
    461c:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4620:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4624:	01150074 	tsteq	r5, r4, ror r0
    4628:	00760250 	rsbseq	r0, r6, r0, asr r2
    462c:	1bba1400 	blne	fee89634 <BootRAM+0xddf9dd5>
    4630:	0db30800 	ldceq	8, cr0, [r3]
    4634:	02b40000 	adcseq	r0, r4, #0
    4638:	01150000 	tsteq	r5, r0
    463c:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4640:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4644:	01152074 	tsteq	r5, r4, ror r0
    4648:	00750250 	rsbseq	r0, r5, r0, asr r2
    464c:	1bc01400 	blne	ff009654 <BootRAM+0xdf79df5>
    4650:	0de40800 	stcleq	8, cr0, [r4]
    4654:	02c80000 	sbceq	r0, r8, #0
    4658:	01150000 	tsteq	r5, r0
    465c:	00760250 	rsbseq	r0, r6, r0, asr r2
    4660:	1bc61800 	blne	ff18a668 <BootRAM+0xe0fae09>
    4664:	0de40800 	stcleq	8, cr0, [r4]
    4668:	01150000 	tsteq	r5, r0
    466c:	00750250 	rsbseq	r0, r5, r0, asr r2
    4670:	540e0000 	strpl	r0, [lr], #-0
    4674:	01000017 	tsteq	r0, r7, lsl r0
    4678:	001bcc5e 	andseq	ip, fp, lr, asr ip
    467c:	00005e08 	andeq	r5, r0, r8, lsl #28
    4680:	9f9c0100 	svcls	0x009c0100
    4684:	0f000003 	svceq	0x00000003
    4688:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
    468c:	0000010b 	andeq	r0, r0, fp, lsl #2
    4690:	00000ffd 	strdeq	r0, [r0], -sp
    4694:	0100780f 	tsteq	r0, pc, lsl #16
    4698:	0001115e 	andeq	r1, r1, lr, asr r1
    469c:	00101b00 	andseq	r1, r0, r0, lsl #22
    46a0:	00790f00 	rsbseq	r0, r9, r0, lsl #30
    46a4:	01115e01 	tsteq	r1, r1, lsl #28
    46a8:	10390000 	eorsne	r0, r9, r0
    46ac:	74170000 	ldrvc	r0, [r7], #-0
    46b0:	0100706d 	tsteq	r0, sp, rrx
    46b4:	0000dc60 	andeq	sp, r0, r0, ror #24
    46b8:	48910200 	ldmmi	r1, {r9}
    46bc:	00176119 	andseq	r6, r7, r9, lsl r1
    46c0:	81610100 	cmnhi	r1, r0, lsl #2
    46c4:	57000000 	strpl	r0, [r0, -r0]
    46c8:	10000010 	andne	r0, r0, r0, lsl r0
    46cc:	000000ec 	andeq	r0, r0, ip, ror #1
    46d0:	08001bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip}
    46d4:	00000016 	andeq	r0, r0, r6, lsl r0
    46d8:	03586301 	cmpeq	r8, #67108864	; 0x4000000
    46dc:	01110000 	tsteq	r1, r0
    46e0:	6a000001 	bvs	46ec <__Stack_Size+0x3eec>
    46e4:	11000010 	tstne	r0, r0, lsl r0
    46e8:	000000f8 	strdeq	r0, [r0], -r8
    46ec:	00001088 	andeq	r1, r0, r8, lsl #1
    46f0:	00ec1000 	rsceq	r1, ip, r0
    46f4:	1bf20000 	blne	ffc846fc <BootRAM+0xebf4e9d>
    46f8:	00200800 	eoreq	r0, r0, r0, lsl #16
    46fc:	67010000 	strvs	r0, [r1, -r0]
    4700:	0000037a 	andeq	r0, r0, sl, ror r3
    4704:	0001011a 	andeq	r0, r1, sl, lsl r1
    4708:	1a560100 	bne	1584b10 <__Stack_Size+0x1584310>
    470c:	000000f8 	strdeq	r0, [r0], -r8
    4710:	14005501 	strne	r5, [r0], #-1281	; 0x501
    4714:	08001bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp, ip}
    4718:	00000de4 	andeq	r0, r0, r4, ror #27
    471c:	0000038e 	andeq	r0, r0, lr, lsl #7
    4720:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4724:	1800007d 	stmdane	r0, {r0, r2, r3, r4, r5, r6}
    4728:	08001c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, ip}
    472c:	00000de4 	andeq	r0, r0, r4, ror #27
    4730:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4734:	00000075 	andeq	r0, r0, r5, ror r0
    4738:	0017741b 	andseq	r7, r7, fp, lsl r4
    473c:	816c0100 	cmnhi	ip, r0, lsl #2
    4740:	2c000000 	stccs	0, cr0, [r0], {-0}
    4744:	c808001c 	stmdagt	r8, {r2, r3, r4}
    4748:	01000000 	mrseq	r0, (UNDEF: 0)
    474c:	0005b49c 	muleq	r5, ip, r4
    4750:	00780f00 	rsbseq	r0, r8, r0, lsl #30
    4754:	010b6c01 	tsteq	fp, r1, lsl #24
    4758:	10a80000 	adcne	r0, r8, r0
    475c:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    4760:	0b6c0100 	bleq	1b04b68 <__Stack_Size+0x1b04368>
    4764:	d4000001 	strle	r0, [r0], #-1
    4768:	1c000010 	stcne	0, cr0, [r0], {16}
    476c:	00001738 	andeq	r1, r0, r8, lsr r7
    4770:	01116c01 	tsteq	r1, r1, lsl #24
    4774:	10f50000 	rscsne	r0, r5, r0
    4778:	61190000 	tstvs	r9, r0
    477c:	01000017 	tsteq	r0, r7, lsl r0
    4780:	0005b46e 	andeq	fp, r5, lr, ror #8
    4784:	00111600 	andseq	r1, r1, r0, lsl #12
    4788:	00611700 	rsbeq	r1, r1, r0, lsl #14
    478c:	00dc6f01 	sbcseq	r6, ip, r1, lsl #30
    4790:	91030000 	mrsls	r0, (UNDEF: 3)
    4794:	62177f88 	andsvs	r7, r7, #136, 30	; 0x220
    4798:	dc700100 	ldflee	f0, [r0], #-0
    479c:	03000000 	movweq	r0, #0
    47a0:	177fa891 			; <UNDEFINED> instruction: 0x177fa891
    47a4:	71010063 	tstvc	r1, r3, rrx
    47a8:	000000dc 	ldrdeq	r0, [r0], -ip
    47ac:	12489102 	subne	r9, r8, #-2147483648	; 0x80000000
    47b0:	000000ec 	andeq	r0, r0, ip, ror #1
    47b4:	08001c30 	stmdaeq	r0, {r4, r5, sl, fp, ip}
    47b8:	00000380 	andeq	r0, r0, r0, lsl #7
    47bc:	043c7401 	ldrteq	r7, [ip], #-1025	; 0x401
    47c0:	01110000 	tsteq	r1, r0
    47c4:	30000001 	andcc	r0, r0, r1
    47c8:	11000011 	tstne	r0, r1, lsl r0
    47cc:	000000f8 	strdeq	r0, [r0], -r8
    47d0:	00001151 	andeq	r1, r0, r1, asr r1
    47d4:	1c721400 	cfldrdne	mvd1, [r2], #-0
    47d8:	0db30800 	ldceq	8, cr0, [r3]
    47dc:	045e0000 	ldrbeq	r0, [lr], #-0
    47e0:	01150000 	tsteq	r5, r0
    47e4:	01f30352 	mvnseq	r0, r2, asr r3
    47e8:	51011551 	tstpl	r1, r1, asr r5
    47ec:	5101f303 	tstpl	r1, r3, lsl #6
    47f0:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    47f4:	14004891 	strne	r4, [r0], #-2193	; 0x891
    47f8:	08001c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, ip}
    47fc:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4800:	00000482 	andeq	r0, r0, r2, lsl #9
    4804:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    4808:	00787403 	rsbseq	r7, r8, r3, lsl #8
    480c:	51011508 	tstpl	r1, r8, lsl #10
    4810:	15489102 	strbne	r9, [r8, #-258]	; 0x102
    4814:	91035001 	tstls	r3, r1
    4818:	14007fa8 	strne	r7, [r0], #-4008	; 0xfa8
    481c:	08001c86 	stmdaeq	r0, {r1, r2, r7, sl, fp, ip}
    4820:	00000df5 	strdeq	r0, [r0], -r5
    4824:	000004a3 	andeq	r0, r0, r3, lsr #9
    4828:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    482c:	01150075 	tsteq	r5, r5, ror r0
    4830:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    4834:	5001157f 	andpl	r1, r1, pc, ror r5
    4838:	00007d02 	andeq	r7, r0, r2, lsl #26
    483c:	001c8e14 	andseq	r8, ip, r4, lsl lr
    4840:	000dce08 	andeq	ip, sp, r8, lsl #28
    4844:	0004be00 	andeq	fp, r4, r0, lsl #28
    4848:	51011500 	tstpl	r1, r0, lsl #10
    484c:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    4850:	91035001 	tstls	r3, r1
    4854:	14007fa8 	strne	r7, [r0], #-4008	; 0xfa8
    4858:	08001c98 	stmdaeq	r0, {r3, r4, r7, sl, fp, ip}
    485c:	00000e10 	andeq	r0, r0, r0, lsl lr
    4860:	000004de 	ldrdeq	r0, [r0], -lr
    4864:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4868:	01150075 	tsteq	r5, r5, ror r0
    486c:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    4870:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4874:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4878:	08001ca2 	stmdaeq	r0, {r1, r5, r7, sl, fp, ip}
    487c:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4880:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4884:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4888:	157fa891 	ldrbne	sl, [pc, #-2193]!	; 3fff <__Stack_Size+0x37ff>
    488c:	7d025101 	stfvcs	f5, [r2, #-4]
    4890:	50011500 	andpl	r1, r1, r0, lsl #10
    4894:	00489102 	subeq	r9, r8, r2, lsl #2
    4898:	001caa14 	andseq	sl, ip, r4, lsl sl
    489c:	000e2b08 	andeq	r2, lr, r8, lsl #22
    48a0:	00051900 	andeq	r1, r5, r0, lsl #18
    48a4:	51011500 	tstpl	r1, r0, lsl #10
    48a8:	15489102 	strbne	r9, [r8, #-258]	; 0x102
    48ac:	7d025001 	stcvc	0, cr5, [r2, #-4]
    48b0:	b2140000 	andslt	r0, r4, #0
    48b4:	4108001c 	tstmi	r8, ip, lsl r0
    48b8:	3400000e 	strcc	r0, [r0], #-14
    48bc:	15000005 	strne	r0, [r0, #-5]
    48c0:	7d025101 	stfvcs	f5, [r2, #-4]
    48c4:	50011500 	andpl	r1, r1, r0, lsl #10
    48c8:	7fa89103 	svcvc	0x00a89103
    48cc:	1cc81400 	cfstrdne	mvd1, [r8], {0}
    48d0:	0e570800 	cdpeq	8, 5, cr0, cr7, cr0, {0}
    48d4:	05550000 	ldrbeq	r0, [r5, #-0]
    48d8:	01150000 	tsteq	r5, r0
    48dc:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    48e0:	5101157f 	tstpl	r1, pc, ror r5
    48e4:	15007d02 	strne	r7, [r0, #-3330]	; 0xd02
    48e8:	74025001 	strvc	r5, [r2], #-1
    48ec:	d2140000 	andsle	r0, r4, #0
    48f0:	b308001c 	movwlt	r0, #32796	; 0x801c
    48f4:	7500000d 	strvc	r0, [r0, #-13]
    48f8:	15000005 	strne	r0, [r0, #-5]
    48fc:	74025201 	strvc	r5, [r2], #-513	; 0x201
    4900:	51011500 	tstpl	r1, r0, lsl #10
    4904:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    4908:	7d025001 	stcvc	0, cr5, [r2, #-4]
    490c:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
    4910:	e408001c 	str	r0, [r8], #-28
    4914:	8900000d 	stmdbhi	r0, {r0, r2, r3}
    4918:	15000005 	strne	r0, [r0, #-5]
    491c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4920:	de140000 	cdple	0, 1, cr0, cr4, cr0, {0}
    4924:	e408001c 	str	r0, [r8], #-28
    4928:	9d00000d 	stcls	0, cr0, [r0, #-52]	; 0xffffffcc
    492c:	15000005 	strne	r0, [r0, #-5]
    4930:	91025001 	tstls	r2, r1
    4934:	e6180048 	ldr	r0, [r8], -r8, asr #32
    4938:	7708001c 	smladvc	r8, ip, r0, r0
    493c:	1500000e 	strne	r0, [r0, #-14]
    4940:	91025101 	tstls	r2, r1, lsl #2
    4944:	50011548 	andpl	r1, r1, r8, asr #10
    4948:	00007d02 	andeq	r7, r0, r2, lsl #26
    494c:	00730d00 	rsbseq	r0, r3, r0, lsl #26
    4950:	680e0000 	stmdavs	lr, {}	; <UNPREDICTABLE>
    4954:	01000017 	tsteq	r0, r7, lsl r0
    4958:	001cf49c 	mulseq	ip, ip, r4
    495c:	0000e008 	andeq	lr, r0, r8
    4960:	c39c0100 	orrsgt	r0, ip, #0, 2
    4964:	0f000008 	svceq	0x00000008
    4968:	9c010072 	stcls	0, cr0, [r1], {114}	; 0x72
    496c:	0000013f 	andeq	r0, r0, pc, lsr r1
    4970:	00001172 	andeq	r1, r0, r2, ror r1
    4974:	0031700f 	eorseq	r7, r1, pc
    4978:	01459d01 	cmpeq	r5, r1, lsl #26
    497c:	119e0000 	orrsne	r0, lr, r0
    4980:	700f0000 	andvc	r0, pc, r0
    4984:	9d010032 	stcls	0, cr0, [r1, #-200]	; 0xffffff38
    4988:	00000145 	andeq	r0, r0, r5, asr #2
    498c:	000011ca 	andeq	r1, r0, sl, asr #3
    4990:	01006117 	tsteq	r0, r7, lsl r1
    4994:	0000dcb3 			; <UNDEFINED> instruction: 0x0000dcb3
    4998:	e8910300 	ldm	r1, {r8, r9}
    499c:	0062177d 	rsbeq	r1, r2, sp, ror r7
    49a0:	00dcb401 	sbcseq	fp, ip, r1, lsl #8
    49a4:	91030000 	mrsls	r0, (UNDEF: 3)
    49a8:	63177e88 	tstvs	r7, #136, 28	; 0x880
    49ac:	dcb50100 	ldfles	f0, [r5]
    49b0:	03000000 	movweq	r0, #0
    49b4:	177ea891 			; <UNDEFINED> instruction: 0x177ea891
    49b8:	b6010064 	strlt	r0, [r1], -r4, rrx
    49bc:	000000dc 	ldrdeq	r0, [r0], -ip
    49c0:	7ec89103 	acsvce	f1, f3
    49c4:	01006517 	tsteq	r0, r7, lsl r5
    49c8:	0000dcb7 			; <UNDEFINED> instruction: 0x0000dcb7
    49cc:	e8910300 	ldm	r1, {r8, r9}
    49d0:	0066177e 	rsbeq	r1, r6, lr, ror r7
    49d4:	00dcb801 	sbcseq	fp, ip, r1, lsl #16
    49d8:	91030000 	mrsls	r0, (UNDEF: 3)
    49dc:	67177f88 	ldrvs	r7, [r7, -r8, lsl #31]
    49e0:	dcb90100 	ldfles	f0, [r9]
    49e4:	03000000 	movweq	r0, #0
    49e8:	177fa891 			; <UNDEFINED> instruction: 0x177fa891
    49ec:	ba010068 	blt	44b94 <__Stack_Size+0x44394>
    49f0:	000000dc 	ldrdeq	r0, [r0], -ip
    49f4:	14489102 	strbne	r9, [r8], #-258	; 0x102
    49f8:	08001d12 	stmdaeq	r0, {r1, r4, r8, sl, fp, ip}
    49fc:	00000e10 	andeq	r0, r0, r0, lsl lr
    4a00:	0000067f 	andeq	r0, r0, pc, ror r6
    4a04:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4a08:	01150075 	tsteq	r5, r5, ror r0
    4a0c:	00780251 	rsbseq	r0, r8, r1, asr r2
    4a10:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4a14:	007ea891 			; <UNDEFINED> instruction: 0x007ea891
    4a18:	001d1c14 	andseq	r1, sp, r4, lsl ip
    4a1c:	000e1008 	andeq	r1, lr, r8
    4a20:	0006a000 	andeq	sl, r6, r0
    4a24:	52011500 	andpl	r1, r1, #0, 10
    4a28:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    4a2c:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    4a30:	50011500 	andpl	r1, r1, r0, lsl #10
    4a34:	7ec89103 	acsvce	f1, f3
    4a38:	1d261400 	cfstrsne	mvf1, [r6, #-0]
    4a3c:	0db30800 	ldceq	8, cr0, [r3]
    4a40:	06c20000 	strbeq	r0, [r2], r0
    4a44:	01150000 	tsteq	r5, r0
    4a48:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    4a4c:	5101157e 	tstpl	r1, lr, ror r5
    4a50:	7ea89103 	tanvce	f1, f3
    4a54:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4a58:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4a5c:	08001d30 	stmdaeq	r0, {r4, r5, r8, sl, fp, ip}
    4a60:	00000df5 	strdeq	r0, [r0], -r5
    4a64:	000006e3 	andeq	r0, r0, r3, ror #13
    4a68:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4a6c:	01150075 	tsteq	r5, r5, ror r0
    4a70:	00780251 	rsbseq	r0, r8, r1, asr r2
    4a74:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4a78:	007ea891 			; <UNDEFINED> instruction: 0x007ea891
    4a7c:	001d3a14 	andseq	r3, sp, r4, lsl sl
    4a80:	000df508 	andeq	pc, sp, r8, lsl #10
    4a84:	00070400 	andeq	r0, r7, r0, lsl #8
    4a88:	52011500 	andpl	r1, r1, #0, 10
    4a8c:	15007402 	strne	r7, [r0, #-1026]	; 0x402
    4a90:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    4a94:	50011500 	andpl	r1, r1, r0, lsl #10
    4a98:	7ec89103 	acsvce	f1, f3
    4a9c:	1d441400 	cfstrdne	mvd1, [r4, #-0]
    4aa0:	0db30800 	ldceq	8, cr0, [r3]
    4aa4:	07270000 	streq	r0, [r7, -r0]!
    4aa8:	01150000 	tsteq	r5, r0
    4aac:	c8910352 	ldmgt	r1, {r1, r4, r6, r8, r9}
    4ab0:	5101157e 	tstpl	r1, lr, ror r5
    4ab4:	7ea89103 	tanvce	f1, f3
    4ab8:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4abc:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    4ac0:	001d5214 	andseq	r5, sp, r4, lsl r2
    4ac4:	000db308 	andeq	fp, sp, r8, lsl #6
    4ac8:	00074a00 	andeq	r4, r7, r0, lsl #20
    4acc:	52011500 	andpl	r1, r1, #0, 10
    4ad0:	00c07403 	sbceq	r7, r0, r3, lsl #8
    4ad4:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4ad8:	1500c075 	strne	ip, [r0, #-117]	; 0x75
    4adc:	91035001 	tstls	r3, r1
    4ae0:	14007ec8 	strne	r7, [r0], #-3784	; 0xec8
    4ae4:	08001d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, ip}
    4ae8:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4aec:	0000076f 	andeq	r0, r0, pc, ror #14
    4af0:	05520115 	ldrbeq	r0, [r2, #-277]	; 0x115
    4af4:	00775403 	rsbseq	r5, r7, r3, lsl #8
    4af8:	51011508 	tstpl	r1, r8, lsl #10
    4afc:	7ec89103 	acsvce	f1, f3
    4b00:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4b04:	007ea891 			; <UNDEFINED> instruction: 0x007ea891
    4b08:	001d6a14 	andseq	r6, sp, r4, lsl sl
    4b0c:	000db308 	andeq	fp, sp, r8, lsl #6
    4b10:	00079200 	andeq	r9, r7, r0, lsl #4
    4b14:	52011500 	andpl	r1, r1, #0, 10
    4b18:	00e07403 	rsceq	r7, r0, r3, lsl #8
    4b1c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4b20:	1500e075 	strne	lr, [r0, #-117]	; 0x75
    4b24:	91035001 	tstls	r3, r1
    4b28:	14007ec8 	strne	r7, [r0], #-3784	; 0xec8
    4b2c:	08001d74 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, fp, ip}
    4b30:	00000df5 	strdeq	r0, [r0], -r5
    4b34:	000007b5 			; <UNDEFINED> instruction: 0x000007b5
    4b38:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4b3c:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4b40:	91035101 	tstls	r3, r1, lsl #2
    4b44:	01157ec8 	tsteq	r5, r8, asr #29
    4b48:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    4b4c:	7e14007e 	mrcvc	0, 0, r0, cr4, cr14, {3}
    4b50:	1008001d 	andne	r0, r8, sp, lsl r0
    4b54:	d700000e 	strle	r0, [r0, -lr]
    4b58:	15000007 	strne	r0, [r0, #-7]
    4b5c:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4b60:	51011500 	tstpl	r1, r0, lsl #10
    4b64:	7e889103 	sinvce	f1, f3
    4b68:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4b6c:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    4b70:	001d8814 	andseq	r8, sp, r4, lsl r8
    4b74:	000e1008 	andeq	r1, lr, r8
    4b78:	0007fa00 	andeq	pc, r7, r0, lsl #20
    4b7c:	52011500 	andpl	r1, r1, #0, 10
    4b80:	7ea89103 	tanvce	f1, f3
    4b84:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4b88:	157ec891 	ldrbne	ip, [lr, #-2193]!	; 0x891
    4b8c:	91035001 	tstls	r3, r1
    4b90:	14007f88 	strne	r7, [r0], #-3976	; 0xf88
    4b94:	08001d92 	stmdaeq	r0, {r1, r4, r7, r8, sl, fp, ip}
    4b98:	00000df5 	strdeq	r0, [r0], -r5
    4b9c:	0000081d 	andeq	r0, r0, sp, lsl r8
    4ba0:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4ba4:	157ea891 	ldrbne	sl, [lr, #-2193]!	; 0x891
    4ba8:	91035101 	tstls	r3, r1, lsl #2
    4bac:	01157ec8 	tsteq	r5, r8, asr #29
    4bb0:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    4bb4:	9c14007f 	ldcls	0, cr0, [r4], {127}	; 0x7f
    4bb8:	f508001d 			; <UNDEFINED> instruction: 0xf508001d
    4bbc:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
    4bc0:	15000008 	strne	r0, [r0, #-8]
    4bc4:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4bc8:	51011500 	tstpl	r1, r0, lsl #10
    4bcc:	7e889103 	sinvce	f1, f3
    4bd0:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4bd4:	14004891 	strne	r4, [r0], #-2193	; 0x891
    4bd8:	08001da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip}
    4bdc:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4be0:	00000860 	andeq	r0, r0, r0, ror #16
    4be4:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4be8:	157f8891 	ldrbne	r8, [pc, #-2193]!	; 435f <__Stack_Size+0x3b5f>
    4bec:	91035101 	tstls	r3, r1, lsl #2
    4bf0:	01157ee8 	tsteq	r5, r8, ror #29
    4bf4:	00760250 	rsbseq	r0, r6, r0, asr r2
    4bf8:	1db21400 	cfldrsne	mvf1, [r2]
    4bfc:	0db30800 	ldceq	8, cr0, [r3]
    4c00:	08810000 	stmeq	r1, {}	; <UNPREDICTABLE>
    4c04:	01150000 	tsteq	r5, r0
    4c08:	48910252 	ldmmi	r1, {r1, r4, r6, r9}
    4c0c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4c10:	157fa891 	ldrbne	sl, [pc, #-2193]!	; 4387 <__Stack_Size+0x3b87>
    4c14:	76025001 	strvc	r5, [r2], -r1
    4c18:	be140020 	cdplt	0, 1, cr0, cr4, cr0, {1}
    4c1c:	b308001d 	movwlt	r0, #32797	; 0x801d
    4c20:	a300000d 	movwge	r0, #13
    4c24:	15000008 	strne	r0, [r0, #-8]
    4c28:	91025201 	tstls	r2, r1, lsl #4
    4c2c:	51011548 	tstpl	r1, r8, asr #10
    4c30:	7ee89103 	urdvce	f1, f3
    4c34:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4c38:	0000c076 	andeq	ip, r0, r6, ror r0
    4c3c:	001dca18 	andseq	ip, sp, r8, lsl sl
    4c40:	000db308 	andeq	fp, sp, r8, lsl #6
    4c44:	52011500 	andpl	r1, r1, #0, 10
    4c48:	7fa89103 	svcvc	0x00a89103
    4c4c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4c50:	157f8891 	ldrbne	r8, [pc, #-2193]!	; 43c7 <__Stack_Size+0x3bc7>
    4c54:	76035001 	strvc	r5, [r3], -r1
    4c58:	000000e0 	andeq	r0, r0, r0, ror #1
    4c5c:	0017fa0e 	andseq	pc, r7, lr, lsl #20
    4c60:	d4e70100 	strbtle	r0, [r7], #256	; 0x100
    4c64:	b408001d 	strlt	r0, [r8], #-29
    4c68:	01000000 	mrseq	r0, (UNDEF: 0)
    4c6c:	000b629c 	muleq	fp, ip, r2
    4c70:	00720f00 	rsbseq	r0, r2, r0, lsl #30
    4c74:	013fe701 	teqeq	pc, r1, lsl #14
    4c78:	11f60000 	mvnsne	r0, r0
    4c7c:	700f0000 	andvc	r0, pc, r0
    4c80:	45e70100 	strbmi	r0, [r7, #256]!	; 0x100
    4c84:	14000001 	strne	r0, [r0], #-1
    4c88:	17000012 	smladne	r0, r2, r0, r0
    4c8c:	fa010061 	blx	44e18 <__Stack_Size+0x44618>
    4c90:	000000dc 	ldrdeq	r0, [r0], -ip
    4c94:	7e909103 	cosvcs	f1, f3
    4c98:	01006217 	tsteq	r0, r7, lsl r2
    4c9c:	0000dcfb 	strdeq	sp, [r0], -fp
    4ca0:	b0910300 	addslt	r0, r1, r0, lsl #6
    4ca4:	0063177e 	rsbeq	r1, r3, lr, ror r7
    4ca8:	00dcfc01 	sbcseq	pc, ip, r1, lsl #24
    4cac:	91030000 	mrsls	r0, (UNDEF: 3)
    4cb0:	65177ed0 	ldrvs	r7, [r7, #-3792]	; 0xed0
    4cb4:	dcfd0100 	ldflee	f0, [sp]
    4cb8:	03000000 	movweq	r0, #0
    4cbc:	177ef091 			; <UNDEFINED> instruction: 0x177ef091
    4cc0:	fe010066 	cdp2	0, 0, cr0, cr1, cr6, {3}
    4cc4:	000000dc 	ldrdeq	r0, [r0], -ip
    4cc8:	7f909103 	svcvc	0x00909103
    4ccc:	01006717 	tsteq	r0, r7, lsl r7
    4cd0:	0000dcff 	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
    4cd4:	b0910300 	addslt	r0, r1, r0, lsl #6
    4cd8:	00681d7f 	rsbeq	r1, r8, pc, ror sp
    4cdc:	dc010001 	stcle	0, cr0, [r1], {1}
    4ce0:	02000000 	andeq	r0, r0, #0
    4ce4:	e8145091 	ldmda	r4, {r0, r4, r7, ip, lr}
    4ce8:	b308001d 	movwlt	r0, #32797	; 0x801d
    4cec:	6d00000d 	stcvs	0, cr0, [r0, #-52]	; 0xffffffcc
    4cf0:	15000009 	strne	r0, [r0, #-9]
    4cf4:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    4cf8:	51011500 	tstpl	r1, r0, lsl #10
    4cfc:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    4d00:	7d025001 	stcvc	0, cr5, [r2, #-4]
    4d04:	f2140000 	vhadd.s16	d0, d4, d0
    4d08:	b308001d 	movwlt	r0, #32797	; 0x801d
    4d0c:	8e00000d 	cdphi	0, 0, cr0, cr0, cr13, {0}
    4d10:	15000009 	strne	r0, [r0, #-9]
    4d14:	76025201 	strvc	r5, [r2], -r1, lsl #4
    4d18:	51011500 	tstpl	r1, r0, lsl #10
    4d1c:	15007602 	strne	r7, [r0, #-1538]	; 0x602
    4d20:	91035001 	tstls	r3, r1
    4d24:	14007eb0 	strne	r7, [r0], #-3760	; 0xeb0
    4d28:	08001dfe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip}
    4d2c:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4d30:	000009b1 			; <UNDEFINED> instruction: 0x000009b1
    4d34:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4d38:	1500e075 	strne	lr, [r0, #-117]	; 0x75
    4d3c:	75035101 	strvc	r5, [r3, #-257]	; 0x101
    4d40:	011500e0 	tsteq	r5, r0, ror #1
    4d44:	d0910350 	addsle	r0, r1, r0, asr r3
    4d48:	0814007e 	ldmdaeq	r4, {r1, r2, r3, r4, r5, r6}
    4d4c:	f508001e 			; <UNDEFINED> instruction: 0xf508001e
    4d50:	d400000d 	strle	r0, [r0], #-13
    4d54:	15000009 	strne	r0, [r0, #-9]
    4d58:	91035201 	tstls	r3, r1, lsl #4
    4d5c:	01157ed0 			; <UNDEFINED> instruction: 0x01157ed0
    4d60:	d0910351 	addsle	r0, r1, r1, asr r3
    4d64:	5001157e 	andpl	r1, r1, lr, ror r5
    4d68:	7ed09103 	atnvcs	f1, f3
    4d6c:	1e121400 	cfmulsne	mvf1, mvf2, mvf0
    4d70:	0df50800 	ldcleq	8, cr0, [r5]
    4d74:	09f50000 	ldmibeq	r5!, {}^	; <UNPREDICTABLE>
    4d78:	01150000 	tsteq	r5, r0
    4d7c:	00760252 	rsbseq	r0, r6, r2, asr r2
    4d80:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    4d84:	01150075 	tsteq	r5, r5, ror r0
    4d88:	90910350 	addsls	r0, r1, r0, asr r3
    4d8c:	1c14007f 	ldcne	0, cr0, [r4], {127}	; 0x7f
    4d90:	b308001e 	movwlt	r0, #32798	; 0x801e
    4d94:	1800000d 	stmdane	r0, {r0, r2, r3}
    4d98:	1500000a 	strne	r0, [r0, #-10]
    4d9c:	91035201 	tstls	r3, r1, lsl #4
    4da0:	01157f90 			; <UNDEFINED> instruction: 0x01157f90
    4da4:	90910351 	addsls	r0, r1, r1, asr r3
    4da8:	5001157f 	andpl	r1, r1, pc, ror r5
    4dac:	7ef09103 	nrmvcs	f1, f3
    4db0:	1e261400 	cdpne	4, 2, cr1, cr6, cr0, {0}
    4db4:	0e100800 	cdpeq	8, 1, cr0, cr0, cr0, {0}
    4db8:	0a3a0000 	beq	e84dc0 <__Stack_Size+0xe845c0>
    4dbc:	01150000 	tsteq	r5, r0
    4dc0:	007d0252 	rsbseq	r0, sp, r2, asr r2
    4dc4:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4dc8:	157ef091 	ldrbne	pc, [lr, #-145]!	; 0x91	; <UNPREDICTABLE>
    4dcc:	91035001 	tstls	r3, r1
    4dd0:	14007ef0 	strne	r7, [r0], #-3824	; 0xef0
    4dd4:	08001e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, ip}
    4dd8:	00000e10 	andeq	r0, r0, r0, lsl lr
    4ddc:	00000a5d 	andeq	r0, r0, sp, asr sl
    4de0:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4de4:	157eb091 	ldrbne	fp, [lr, #-145]!	; 0x91
    4de8:	91035101 	tstls	r3, r1, lsl #2
    4dec:	01157ef0 			; <UNDEFINED> instruction: 0x01157ef0
    4df0:	f0910350 			; <UNDEFINED> instruction: 0xf0910350
    4df4:	3a14007e 	bcc	504ff4 <__Stack_Size+0x5047f4>
    4df8:	1008001e 	andne	r0, r8, lr, lsl r0
    4dfc:	7f00000e 	svcvc	0x0000000e
    4e00:	1500000a 	strne	r0, [r0, #-10]
    4e04:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4e08:	51011500 	tstpl	r1, r0, lsl #10
    4e0c:	7eb09103 	asnvcs	f1, f3
    4e10:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    4e14:	007fb091 			; <UNDEFINED> instruction: 0x007fb091
    4e18:	001e4414 	andseq	r4, lr, r4, lsl r4
    4e1c:	000e1008 	andeq	r1, lr, r8
    4e20:	000aa200 	andeq	sl, sl, r0, lsl #4
    4e24:	52011500 	andpl	r1, r1, #0, 10
    4e28:	7ed09103 	atnvcs	f1, f3
    4e2c:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e30:	157fb091 	ldrbne	fp, [pc, #-145]!	; 4da7 <__Stack_Size+0x45a7>
    4e34:	91035001 	tstls	r3, r1
    4e38:	14007f90 	strne	r7, [r0], #-3984	; 0xf90
    4e3c:	08001e4c 	stmdaeq	r0, {r2, r3, r6, r9, sl, fp, ip}
    4e40:	00000e41 	andeq	r0, r0, r1, asr #28
    4e44:	00000abd 			; <UNDEFINED> instruction: 0x00000abd
    4e48:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4e4c:	157eb091 	ldrbne	fp, [lr, #-145]!	; 0x91
    4e50:	91025001 	tstls	r2, r1
    4e54:	56140050 			; <UNDEFINED> instruction: 0x56140050
    4e58:	1008001e 	andne	r0, r8, lr, lsl r0
    4e5c:	dd00000e 	stcle	0, cr0, [r0, #-56]	; 0xffffffc8
    4e60:	1500000a 	strne	r0, [r0, #-10]
    4e64:	7d025201 	sfmvc	f5, 4, [r2, #-4]
    4e68:	51011500 	tstpl	r1, r0, lsl #10
    4e6c:	15509102 	ldrbne	r9, [r0, #-258]	; 0x102
    4e70:	91025001 	tstls	r2, r1
    4e74:	60140050 	andsvs	r0, r4, r0, asr r0
    4e78:	b308001e 	movwlt	r0, #32798	; 0x801e
    4e7c:	ff00000d 			; <UNDEFINED> instruction: 0xff00000d
    4e80:	1500000a 	strne	r0, [r0, #-10]
    4e84:	91035201 	tstls	r3, r1, lsl #4
    4e88:	01157f90 			; <UNDEFINED> instruction: 0x01157f90
    4e8c:	f0910351 			; <UNDEFINED> instruction: 0xf0910351
    4e90:	5001157e 	andpl	r1, r1, lr, ror r5
    4e94:	00007402 	andeq	r7, r0, r2, lsl #8
    4e98:	001e6c14 	andseq	r6, lr, r4, lsl ip
    4e9c:	000db308 	andeq	fp, sp, r8, lsl #6
    4ea0:	000b2000 	andeq	r2, fp, r0
    4ea4:	52011500 	andpl	r1, r1, #0, 10
    4ea8:	15509102 	ldrbne	r9, [r0, #-258]	; 0x102
    4eac:	91035101 	tstls	r3, r1, lsl #2
    4eb0:	01157fb0 			; <UNDEFINED> instruction: 0x01157fb0
    4eb4:	20740250 	rsbscs	r0, r4, r0, asr r2
    4eb8:	1e781400 	cdpne	4, 7, cr1, cr8, cr0, {0}
    4ebc:	0db30800 	ldceq	8, cr0, [r3]
    4ec0:	0b420000 	bleq	1084ec8 <__Stack_Size+0x10846c8>
    4ec4:	01150000 	tsteq	r5, r0
    4ec8:	50910252 	addspl	r0, r1, r2, asr r2
    4ecc:	03510115 	cmpeq	r1, #1073741829	; 0x40000005
    4ed0:	157ef091 	ldrbne	pc, [lr, #-145]!	; 0x91	; <UNPREDICTABLE>
    4ed4:	74035001 	strvc	r5, [r3], #-1
    4ed8:	180000c0 	stmdane	r0, {r6, r7}
    4edc:	08001e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip}
    4ee0:	00000db3 			; <UNDEFINED> instruction: 0x00000db3
    4ee4:	03520115 	cmpeq	r2, #1073741829	; 0x40000005
    4ee8:	157fb091 	ldrbne	fp, [pc, #-145]!	; 4e5f <__Stack_Size+0x465f>
    4eec:	91035101 	tstls	r3, r1, lsl #2
    4ef0:	01157f90 			; <UNDEFINED> instruction: 0x01157f90
    4ef4:	e0740350 	rsbs	r0, r4, r0, asr r3
    4ef8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4efc:	000017a7 	andeq	r1, r0, r7, lsr #15
    4f00:	88012a01 	stmdahi	r1, {r0, r9, fp, sp}
    4f04:	8408001e 	strhi	r0, [r8], #-30
    4f08:	01000000 	mrseq	r0, (UNDEF: 0)
    4f0c:	000d499c 	muleq	sp, ip, r9
    4f10:	17471f00 	strbne	r1, [r7, -r0, lsl #30]
    4f14:	2a010000 	bcs	44f1c <__Stack_Size+0x4471c>
    4f18:	00013f01 	andeq	r3, r1, r1, lsl #30
    4f1c:	00123200 	andseq	r3, r2, r0, lsl #4
    4f20:	00702000 	rsbseq	r2, r0, r0
    4f24:	45012a01 	strmi	r2, [r1, #-2561]	; 0xa01
    4f28:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    4f2c:	20000012 	andcs	r0, r0, r2, lsl r0
    4f30:	2b010065 	blcs	450cc <__Stack_Size+0x448cc>
    4f34:	00011101 	andeq	r1, r1, r1, lsl #2
    4f38:	00128a00 	andseq	r8, r2, r0, lsl #20
    4f3c:	00721d00 	rsbseq	r1, r2, r0, lsl #26
    4f40:	a7012d01 	strge	r2, [r1, -r1, lsl #26]
    4f44:	03000000 	movweq	r0, #0
    4f48:	217de891 			; <UNDEFINED> instruction: 0x217de891
    4f4c:	2e010069 	cdpcs	0, 0, cr0, cr1, cr9, {3}
    4f50:	00007301 	andeq	r7, r0, r1, lsl #6
    4f54:	0012b600 	andseq	fp, r2, r0, lsl #12
    4f58:	011c2200 	tsteq	ip, r0, lsl #4
    4f5c:	1e940000 	cdpne	0, 9, cr0, cr4, cr0, {0}
    4f60:	000a0800 	andeq	r0, sl, r0, lsl #16
    4f64:	30010000 	andcc	r0, r1, r0
    4f68:	000c0901 	andeq	r0, ip, r1, lsl #18
    4f6c:	01331a00 	teqeq	r3, r0, lsl #20
    4f70:	03060000 	movweq	r0, #24576	; 0x6000
    4f74:	08007774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}
    4f78:	0128119f 			; <UNDEFINED> instruction: 0x0128119f
    4f7c:	12ee0000 	rscne	r0, lr, #0
    4f80:	9e180000 	cdpls	0, 1, cr0, cr8, cr0, {0}
    4f84:	9108001e 	tstls	r8, lr, lsl r0
    4f88:	1500000e 	strne	r0, [r0, #-14]
    4f8c:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    4f90:	51011580 	smlabbpl	r1, r0, r5, r1
    4f94:	77740305 	ldrbvc	r0, [r4, -r5, lsl #6]!
    4f98:	01150800 	tsteq	r5, r0, lsl #16
    4f9c:	007d0250 	rsbseq	r0, sp, r0, asr r2
    4fa0:	a8230000 	stmdage	r3!, {}	; <UNPREDICTABLE>
    4fa4:	09000003 	stmdbeq	r0, {r0, r1}
    4fa8:	2100000d 	tstcs	r0, sp
    4fac:	00746962 	rsbseq	r6, r4, r2, ror #18
    4fb0:	17013301 	strne	r3, [r1, -r1, lsl #6]
    4fb4:	1d000001 	stcne	0, cr0, [r0, #-4]
    4fb8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    4fbc:	34010073 	strcc	r0, [r1], #-115	; 0x73
    4fc0:	0000a701 	andeq	sl, r0, r1, lsl #14
    4fc4:	e8910300 	ldm	r1, {r8, r9}
    4fc8:	1eb2147e 	mrcne	4, 5, r1, cr2, cr14, {3}
    4fcc:	08c30800 	stmiaeq	r3, {fp}^
    4fd0:	0c4a0000 	mareq	acc0, r0, sl
    4fd4:	01150000 	tsteq	r5, r0
    4fd8:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4fdc:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    4fe0:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    4fe4:	08001ec0 	stmdaeq	r0, {r6, r7, r9, sl, fp, ip}
    4fe8:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    4fec:	00000c6b 	andeq	r0, r0, fp, ror #24
    4ff0:	02520115 	subseq	r0, r2, #1073741829	; 0x40000005
    4ff4:	01150077 	tsteq	r5, r7, ror r0
    4ff8:	007d0251 	rsbseq	r0, sp, r1, asr r2
    4ffc:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    5000:	007ee891 			; <UNDEFINED> instruction: 0x007ee891
    5004:	001ecc14 	andseq	ip, lr, r4, lsl ip
    5008:	000e5708 	andeq	r5, lr, r8, lsl #14
    500c:	000c9200 	andeq	r9, ip, r0, lsl #4
    5010:	53011500 	movwpl	r1, #5376	; 0x1500
    5014:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    5018:	91035201 	tstls	r3, r1, lsl #4
    501c:	01157ee8 	tsteq	r5, r8, ror #29
    5020:	007d0251 	rsbseq	r0, sp, r1, asr r2
    5024:	02500115 	subseq	r0, r0, #1073741829	; 0x40000005
    5028:	1400007d 	strne	r0, [r0], #-125	; 0x7d
    502c:	08001ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, ip}
    5030:	00000e57 	andeq	r0, r0, r7, asr lr
    5034:	00000cbb 			; <UNDEFINED> instruction: 0x00000cbb
    5038:	02530115 	subseq	r0, r3, #1073741829	; 0x40000005
    503c:	01150075 	tsteq	r5, r5, ror r0
    5040:	88910352 	ldmhi	r1, {r1, r4, r6, r8, r9}
    5044:	5101157f 	tstpl	r1, pc, ror r5
    5048:	7e889103 	sinvce	f1, f3
    504c:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    5050:	007e8891 			; <UNDEFINED> instruction: 0x007e8891
    5054:	001ee414 	andseq	lr, lr, r4, lsl r4
    5058:	000e5708 	andeq	r5, lr, r8, lsl #14
    505c:	000ce300 	andeq	lr, ip, r0, lsl #6
    5060:	53011500 	movwpl	r1, #5376	; 0x1500
    5064:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    5068:	91025201 	tstls	r2, r1, lsl #4
    506c:	51011548 	tstpl	r1, r8, asr #10
    5070:	7ec89103 	acsvce	f1, f3
    5074:	03500115 	cmpeq	r0, #1073741829	; 0x40000005
    5078:	007ec891 			; <UNDEFINED> instruction: 0x007ec891
    507c:	001ef218 	andseq	pc, lr, r8, lsl r2	; <UNPREDICTABLE>
    5080:	000e5708 	andeq	r5, lr, r8, lsl #14
    5084:	53011500 	movwpl	r1, #5376	; 0x1500
    5088:	15007502 	strne	r7, [r0, #-1282]	; 0x502
    508c:	91035201 	tstls	r3, r1, lsl #4
    5090:	01157fa8 	tsteq	r5, r8, lsr #31
    5094:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    5098:	5001157e 	andpl	r1, r1, lr, ror r5
    509c:	7ea89103 	tanvce	f1, f3
    50a0:	1c240000 	stcne	0, cr0, [r4], #-0
    50a4:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    50a8:	0a08001e 	beq	205128 <__Stack_Size+0x204928>
    50ac:	01000000 	mrseq	r0, (UNDEF: 0)
    50b0:	3311013f 	tstcc	r1, #-1073741809	; 0xc000000f
    50b4:	30000001 	andcc	r0, r0, r1
    50b8:	11000013 	tstne	r0, r3, lsl r0
    50bc:	00000128 	andeq	r0, r0, r8, lsr #2
    50c0:	0000135f 	andeq	r1, r0, pc, asr r3
    50c4:	001f0018 	andseq	r0, pc, r8, lsl r0	; <UNPREDICTABLE>
    50c8:	000e9108 	andeq	r9, lr, r8, lsl #2
    50cc:	52011500 	andpl	r1, r1, #0, 10
    50d0:	15800802 	strne	r0, [r0, #2050]	; 0x802
    50d4:	7d025101 	stfvcs	f5, [r2, #-4]
    50d8:	50011500 	andpl	r1, r1, r0, lsl #10
    50dc:	00007802 	andeq	r7, r0, r2, lsl #16
    50e0:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
    50e4:	01000018 	tsteq	r0, r8, lsl r0
    50e8:	000d5a57 	andeq	r5, sp, r7, asr sl
    50ec:	74030500 	strvc	r0, [r3], #-1280	; 0x500
    50f0:	0d080078 	stceq	0, cr0, [r8, #-480]	; 0xfffffe20
    50f4:	000000dc 	ldrdeq	r0, [r0], -ip
    50f8:	00183825 	andseq	r3, r8, r5, lsr #16
    50fc:	5a950100 	bpl	fe545504 <BootRAM+0xd4b5ca5>
    5100:	0500000d 	streq	r0, [r0, #-13]
    5104:	00775403 	rsbseq	r5, r7, r3, lsl #8
    5108:	16192608 	ldrne	r2, [r9], -r8, lsl #12
    510c:	1c020000 	stcne	0, cr0, [r2], {-0}
    5110:	00000d5a 	andeq	r0, r0, sl, asr sp
    5114:	00181427 	andseq	r1, r8, r7, lsr #8
    5118:	4b140100 	blmi	505520 <__Stack_Size+0x504d20>
    511c:	05000001 	streq	r0, [r0, #-1]
    5120:	0077f403 	rsbseq	pc, r7, r3, lsl #8
    5124:	17d32708 	ldrbne	r2, [r3, r8, lsl #14]
    5128:	2a010000 	bcs	45130 <__Stack_Size+0x44930>
    512c:	0000014b 	andeq	r0, r0, fp, asr #2
    5130:	77740305 	ldrbvc	r0, [r4, -r5, lsl #6]!
    5134:	b5280800 	strlt	r0, [r8, #-2048]!	; 0x800
    5138:	02000017 	andeq	r0, r0, #23
    513c:	000db31f 	andeq	fp, sp, pc, lsl r3
    5140:	010b2900 	tsteq	fp, r0, lsl #18
    5144:	8c290000 	stchi	0, cr0, [r9], #-0
    5148:	00000000 	andeq	r0, r0, r0
    514c:	0016f528 	andseq	pc, r6, r8, lsr #10
    5150:	ce440200 	cdpgt	2, 4, cr0, cr4, cr0, {0}
    5154:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    5158:	0000010b 	andeq	r0, r0, fp, lsl #2
    515c:	00011129 	andeq	r1, r1, r9, lsr #2
    5160:	01112900 	tsteq	r1, r0, lsl #18
    5164:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5168:	0000170a 	andeq	r1, r0, sl, lsl #14
    516c:	0de45102 	stfeqe	f5, [r4, #8]!
    5170:	0b290000 	bleq	a45178 <__Stack_Size+0xa44978>
    5174:	29000001 	stmdbcs	r0, {r0}
    5178:	00000111 	andeq	r0, r0, r1, lsl r1
    517c:	16e42800 	strbtne	r2, [r4], r0, lsl #16
    5180:	28020000 	stmdacs	r2, {}	; <UNPREDICTABLE>
    5184:	00000df5 	strdeq	r0, [r0], -r5
    5188:	00010b29 	andeq	r0, r1, r9, lsr #22
    518c:	fc280000 	stc2	0, cr0, [r8], #-0
    5190:	02000015 	andeq	r0, r0, #21
    5194:	000e103a 	andeq	r1, lr, sl, lsr r0
    5198:	010b2900 	tsteq	fp, r0, lsl #18
    519c:	11290000 	teqne	r9, r0
    51a0:	29000001 	stmdbcs	r0, {r0}
    51a4:	00000111 	andeq	r0, r0, r1, lsl r1
    51a8:	16d42800 	ldrbne	r2, [r4], r0, lsl #16
    51ac:	3b020000 	blcc	851b4 <__Stack_Size+0x849b4>
    51b0:	00000e2b 	andeq	r0, r0, fp, lsr #28
    51b4:	00010b29 	andeq	r0, r1, r9, lsr #22
    51b8:	01112900 	tsteq	r1, r0, lsl #18
    51bc:	11290000 	teqne	r9, r0
    51c0:	00000001 	andeq	r0, r0, r1
    51c4:	0017e328 	andseq	lr, r7, r8, lsr #6
    51c8:	415a0200 	cmpmi	sl, r0, lsl #4
    51cc:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    51d0:	0000010b 	andeq	r0, r0, fp, lsl #2
    51d4:	00011129 	andeq	r1, r1, r9, lsr #2
    51d8:	ef280000 	svc	0x00280000
    51dc:	02000017 	andeq	r0, r0, #23
    51e0:	000e573e 	andeq	r5, lr, lr, lsr r7
    51e4:	010b2900 	tsteq	fp, r0, lsl #18
    51e8:	11290000 	teqne	r9, r0
    51ec:	00000001 	andeq	r0, r0, r1
    51f0:	00171f28 	andseq	r1, r7, r8, lsr #30
    51f4:	77330200 	ldrvc	r0, [r3, -r0, lsl #4]!
    51f8:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    51fc:	0000010b 	andeq	r0, r0, fp, lsl #2
    5200:	00011129 	andeq	r1, r1, r9, lsr #2
    5204:	01112900 	tsteq	r1, r0, lsl #18
    5208:	81290000 	teqhi	r9, r0
    520c:	00000000 	andeq	r0, r0, r0
    5210:	00173d2a 	andseq	r3, r7, sl, lsr #26
    5214:	812d0200 	teqhi	sp, r0, lsl #4
    5218:	91000000 	mrsls	r0, (UNDEF: 0)
    521c:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    5220:	00000111 	andeq	r0, r0, r1, lsl r1
    5224:	00011129 	andeq	r1, r1, r9, lsr #2
    5228:	4d2b0000 	stcmi	0, cr0, [fp, #-0]
    522c:	9e000017 	mcrls	0, 0, r0, cr0, cr7, {0}
    5230:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    5234:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    5238:	0000009e 	muleq	r0, lr, r0
    523c:	000eae29 	andeq	sl, lr, r9, lsr #28
    5240:	00972900 	addseq	r2, r7, r0, lsl #18
    5244:	0c000000 	stceq	0, cr0, [r0], {-0}
    5248:	000eb404 	andeq	fp, lr, r4, lsl #8
    524c:	46002c00 	strmi	r2, [r0], -r0, lsl #24
    5250:	0400000d 	streq	r0, [r0], #-13
    5254:	00129300 	andseq	r9, r2, r0, lsl #6
    5258:	39010400 	stmdbcc	r1, {sl}
    525c:	01000006 	tsteq	r0, r6
    5260:	0000185a 	andeq	r1, r0, sl, asr r8
    5264:	00000893 	muleq	r0, r3, r8
    5268:	00000460 	andeq	r0, r0, r0, ror #8
    526c:	00000000 	andeq	r0, r0, r0
    5270:	000015d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    5274:	1a060102 	bne	185684 <__Stack_Size+0x184e84>
    5278:	03000008 	movweq	r0, #8
    527c:	00000c36 	andeq	r0, r0, r6, lsr ip
    5280:	00371c04 	eorseq	r1, r7, r4, lsl #24
    5284:	01020000 	mrseq	r0, (UNDEF: 2)
    5288:	00081808 	andeq	r1, r8, r8, lsl #16
    528c:	05020200 	streq	r0, [r2, #-512]	; 0x200
    5290:	000006fc 	strdeq	r0, [r0], -ip
    5294:	49070202 	stmdbmi	r7, {r1, r9}
    5298:	02000009 	andeq	r0, r0, #9
    529c:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    52a0:	04020000 	streq	r0, [r2], #-0
    52a4:	00025207 	andeq	r5, r2, r7, lsl #4
    52a8:	05080200 	streq	r0, [r8, #-512]	; 0x200
    52ac:	000004d5 	ldrdeq	r0, [r0], -r5
    52b0:	0018d803 	andseq	sp, r8, r3, lsl #16
    52b4:	6c4e0400 	cfstrdvs	mvd0, [lr], {-0}
    52b8:	02000000 	andeq	r0, r0, #0
    52bc:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    52c0:	04040000 	streq	r0, [r4], #-0
    52c4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    52c8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    52cc:	00000257 	andeq	r0, r0, r7, asr r2
    52d0:	000c3803 	andeq	r3, ip, r3, lsl #16
    52d4:	2c2a0500 	cfstr32cs	mvfx0, [sl], #-0
    52d8:	03000000 	movweq	r0, #0
    52dc:	000018da 	ldrdeq	r1, [r0], -sl
    52e0:	00614e05 	rsbeq	r4, r1, r5, lsl #28
    52e4:	1f030000 	svcne	0x00030000
    52e8:	0600000b 	streq	r0, [r0], -fp
    52ec:	00007ad4 	ldrdeq	r7, [r0], -r4
    52f0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    52f4:	0000078b 	andeq	r0, r0, fp, lsl #15
    52f8:	01020405 	tsteq	r2, r5, lsl #8
    52fc:	00082108 	andeq	r2, r8, r8, lsl #2
    5300:	18090600 	stmdane	r9, {r9, sl}
    5304:	03800000 	orreq	r0, r0, #0
    5308:	0000e720 	andeq	lr, r0, r0, lsr #14
    530c:	00780700 	rsbseq	r0, r8, r0, lsl #14
    5310:	00e72103 	rsceq	r2, r7, r3, lsl #2
    5314:	07000000 	streq	r0, [r0, -r0]
    5318:	22030079 	andcs	r0, r3, #121	; 0x79
    531c:	000000e7 	andeq	r0, r0, r7, ror #1
    5320:	00740720 	rsbseq	r0, r4, r0, lsr #14
    5324:	00e72303 	rsceq	r2, r7, r3, lsl #6
    5328:	07400000 	strbeq	r0, [r0, -r0]
    532c:	2403007a 	strcs	r0, [r3], #-122	; 0x7a
    5330:	000000e7 	andeq	r0, r0, r7, ror #1
    5334:	81080060 	tsthi	r8, r0, rrx
    5338:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    533c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5340:	000000a2 	andeq	r0, r0, r2, lsr #1
    5344:	4906001f 	stmdbmi	r6, {r0, r1, r2, r3, r4}
    5348:	40000019 	andmi	r0, r0, r9, lsl r0
    534c:	010e1402 	tsteq	lr, r2, lsl #8
    5350:	68070000 	stmdavs	r7, {}	; <UNPREDICTABLE>
    5354:	0e150200 	cdpeq	2, 1, cr0, cr5, cr0, {0}
    5358:	00000001 	andeq	r0, r0, r1
    535c:	008c0800 	addeq	r0, ip, r0, lsl #16
    5360:	011e0000 	tsteq	lr, r0
    5364:	a2090000 	andge	r0, r9, #0
    5368:	07000000 	streq	r0, [r0, -r0]
    536c:	19640a00 	stmdbne	r4!, {r9, fp}^
    5370:	1c020000 	stcne	0, cr0, [r2], {-0}
    5374:	00013403 	andeq	r3, r1, r3, lsl #8
    5378:	00730b00 	rsbseq	r0, r3, r0, lsl #22
    537c:	01341c02 	teqeq	r4, r2, lsl #24
    5380:	0c000000 	stceq	0, cr0, [r0], {-0}
    5384:	0000f704 	andeq	pc, r0, r4, lsl #14
    5388:	18690a00 	stmdane	r9!, {r9, fp}^
    538c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5390:	00015003 	andeq	r5, r1, r3
    5394:	00650b00 	rsbeq	r0, r5, r0, lsl #22
    5398:	01503e03 	cmpeq	r0, r3, lsl #28
    539c:	0c000000 	stceq	0, cr0, [r0], {-0}
    53a0:	00008104 	andeq	r8, r0, r4, lsl #2
    53a4:	18af0d00 	stmiane	pc!, {r8, sl, fp}	; <UNPREDICTABLE>
    53a8:	15010000 	strne	r0, [r1, #-0]
    53ac:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    53b0:	00000054 	andeq	r0, r0, r4, asr r0
    53b4:	02129c01 	andseq	r9, r2, #256	; 0x100
    53b8:	ba0e0000 	blt	3853c0 <__Stack_Size+0x384bc0>
    53bc:	01000018 	tsteq	r0, r8, lsl r0
    53c0:	00015015 	andeq	r5, r1, r5, lsl r0
    53c4:	00138000 	andseq	r8, r3, r0
    53c8:	18ca0e00 	stmiane	sl, {r9, sl, fp}^
    53cc:	15010000 	strne	r0, [r1, #-0]
    53d0:	00000212 	andeq	r0, r0, r2, lsl r2
    53d4:	000013ac 	andeq	r1, r0, ip, lsr #7
    53d8:	0100730f 	tsteq	r0, pc, lsl #6
    53dc:	0000f717 	andeq	pc, r0, r7, lsl r7	; <UNPREDICTABLE>
    53e0:	a8910300 	ldmge	r1, {r8, r9}
    53e4:	011e107f 	tsteq	lr, pc, ror r0
    53e8:	1f0e0000 	svcne	0x000e0000
    53ec:	04000800 	streq	r0, [r0], #-2048	; 0x800
    53f0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    53f4:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    53f8:	00012a11 	andeq	r2, r1, r1, lsl sl
    53fc:	0013d800 	andseq	sp, r3, r0, lsl #16
    5400:	3a120000 	bcc	485408 <__Stack_Size+0x484c08>
    5404:	42000001 	andmi	r0, r0, #1
    5408:	1408001f 	strne	r0, [r8], #-31
    540c:	01000000 	mrseq	r0, (UNDEF: 0)
    5410:	0001d01c 	andeq	sp, r1, ip, lsl r0
    5414:	01461100 	mrseq	r1, (UNDEF: 86)
    5418:	14060000 	strne	r0, [r6], #-0
    541c:	13000000 	movwne	r0, #0
    5420:	08001f36 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, fp, ip}
    5424:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    5428:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    542c:	02520114 	subseq	r0, r2, #20, 2
    5430:	01142008 	tsteq	r4, r8
    5434:	00770251 	rsbseq	r0, r7, r1, asr r2
    5438:	02500114 	subseq	r0, r0, #20, 2
    543c:	1500007d 	strne	r0, [r0, #-125]	; 0x7d
    5440:	08001f42 	stmdaeq	r0, {r1, r6, r8, r9, sl, fp, ip}
    5444:	00000bd2 	ldrdeq	r0, [r0], -r2
    5448:	02530114 	subseq	r0, r3, #20, 2
    544c:	01144008 	tsteq	r4, r8
    5450:	14300152 	ldrtne	r0, [r0], #-338	; 0x152
    5454:	76025101 	strvc	r5, [r2], -r1, lsl #2
    5458:	50011400 	andpl	r1, r1, r0, lsl #8
    545c:	00007d02 	andeq	r7, r0, r2, lsl #26
    5460:	18040c00 	stmdane	r4, {sl, fp}
    5464:	16000002 	strne	r0, [r0], -r2
    5468:	00000081 	andeq	r0, r0, r1, lsl #1
    546c:	0019250d 	andseq	r2, r9, sp, lsl #10
    5470:	60420100 	subvs	r0, r2, r0, lsl #2
    5474:	9c08001f 	stcls	0, cr0, [r8], {31}
    5478:	01000000 	mrseq	r0, (UNDEF: 0)
    547c:	0003919c 	muleq	r3, ip, r1
    5480:	18c30e00 	stmiane	r3, {r9, sl, fp}^
    5484:	42010000 	andmi	r0, r1, #0
    5488:	00000150 	andeq	r0, r0, r0, asr r1
    548c:	00001427 	andeq	r1, r0, r7, lsr #8
    5490:	00184f0e 	andseq	r4, r8, lr, lsl #30
    5494:	50430100 	subpl	r0, r3, r0, lsl #2
    5498:	53000001 	movwpl	r0, #1
    549c:	0e000014 	mcreq	0, 0, r0, cr0, cr4, {0}
    54a0:	000018ec 	andeq	r1, r0, ip, ror #17
    54a4:	00734301 	rsbseq	r4, r3, r1, lsl #6
    54a8:	147f0000 	ldrbtne	r0, [pc], #-0	; 54b0 <__Stack_Size+0x4cb0>
    54ac:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    54b0:	01000019 	tsteq	r0, r9, lsl r0
    54b4:	00021244 	andeq	r1, r2, r4, asr #4
    54b8:	0014ab00 	andseq	sl, r4, r0, lsl #22
    54bc:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0x700
    54c0:	4401006e 	strmi	r0, [r1], #-110	; 0x6e
    54c4:	00000097 	muleq	r0, r7, r0
    54c8:	000014ed 	andeq	r1, r0, sp, ror #9
    54cc:	0100730f 	tsteq	r0, pc, lsl #6
    54d0:	0000f746 	andeq	pc, r0, r6, asr #14
    54d4:	a0910300 	addsge	r0, r1, r0, lsl #6
    54d8:	011e107f 	tsteq	lr, pc, ror r0
    54dc:	1f640000 	svcne	0x00640000
    54e0:	04200800 	strteq	r0, [r0], #-2048	; 0x800
    54e4:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    54e8:	000002a7 	andeq	r0, r0, r7, lsr #5
    54ec:	00012a11 	andeq	r2, r1, r1, lsl sl
    54f0:	00150d00 	andseq	r0, r5, r0, lsl #26
    54f4:	a2180000 	andsge	r0, r8, #0
    54f8:	3408001f 	strcc	r0, [r8], #-31
    54fc:	23000000 	movwcs	r0, #0
    5500:	19000003 	stmdbne	r0, {r0, r1}
    5504:	4e010069 	cdpmi	0, 0, cr0, cr1, cr9, {3}
    5508:	00000097 	muleq	r0, r7, r0
    550c:	0000153c 	andeq	r1, r0, ip, lsr r5
    5510:	001fa813 	andseq	sl, pc, r3, lsl r8	; <UNPREDICTABLE>
    5514:	000bf808 	andeq	pc, fp, r8, lsl #16
    5518:	0002d500 	andeq	sp, r2, r0, lsl #10
    551c:	52011400 	andpl	r1, r1, #0, 8
    5520:	00007402 	andeq	r7, r0, r2, lsl #8
    5524:	001fb013 	andseq	fp, pc, r3, lsl r0	; <UNPREDICTABLE>
    5528:	000c1c08 	andeq	r1, ip, r8, lsl #24
    552c:	0002ef00 	andeq	lr, r2, r0, lsl #30
    5530:	51011400 	tstpl	r1, r0, lsl #8
    5534:	14007602 	strne	r7, [r0], #-1538	; 0x602
    5538:	7d025001 	stcvc	0, cr5, [r2, #-4]
    553c:	c4130000 	ldrgt	r0, [r3], #-0
    5540:	1c08001f 	stcne	0, cr0, [r8], {31}
    5544:	0f00000c 	svceq	0x0000000c
    5548:	14000003 	strne	r0, [r0], #-3
    554c:	79085101 	stmdbvc	r8, {r0, r8, ip, lr}
    5550:	22007500 	andcs	r7, r0, #0, 10
    5554:	141c8008 	ldrne	r8, [ip], #-8
    5558:	7d025001 	stcvc	0, cr5, [r2, #-4]
    555c:	d6150000 	ldrle	r0, [r5], -r0
    5560:	b708001f 	smladlt	r8, pc, r0, r0	; <UNPREDICTABLE>
    5564:	1400000b 	strne	r0, [r0], #-11
    5568:	78055201 	stmdavc	r5, {r0, r9, ip, lr}
    556c:	22007700 	andcs	r7, r0, #0, 14
    5570:	9c130000 	ldcls	0, cr0, [r3], {-0}
    5574:	f808001f 			; <UNDEFINED> instruction: 0xf808001f
    5578:	4600000b 	strmi	r0, [r0], -fp
    557c:	14000003 	strne	r0, [r0], #-3
    5580:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    5584:	51011400 	tstpl	r1, r0, lsl #8
    5588:	14007902 	strne	r7, [r0], #-2306	; 0x902
    558c:	76055001 	strvc	r5, [r5], -r1
    5590:	22007800 	andcs	r7, r0, #0, 16
    5594:	1fe21300 	svcne	0x00e21300
    5598:	0bd20800 	bleq	ff4875a0 <BootRAM+0xe3f7d41>
    559c:	036b0000 	cmneq	fp, #0
    55a0:	01140000 	tsteq	r4, r0
    55a4:	40080253 	andmi	r0, r8, r3, asr r2
    55a8:	01520114 	cmpeq	r2, r4, lsl r1
    55ac:	51011430 	tstpl	r1, r0, lsr r4
    55b0:	14007602 	strne	r7, [r0], #-1538	; 0x602
    55b4:	7d025001 	stcvc	0, cr5, [r2, #-4]
    55b8:	ee150000 	cdp	0, 1, cr0, cr5, cr0, {0}
    55bc:	3208001f 	andcc	r0, r8, #31
    55c0:	1400000c 	strne	r0, [r0], #-12
    55c4:	03055301 	movweq	r5, #21249	; 0x5301
    55c8:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    55cc:	02520114 	subseq	r0, r2, #20, 2
    55d0:	01144008 	tsteq	r4, r8
    55d4:	00760251 	rsbseq	r0, r6, r1, asr r2
    55d8:	02500114 	subseq	r0, r0, #20, 2
    55dc:	0000007a 	andeq	r0, r0, sl, ror r0
    55e0:	0070701a 	rsbseq	r7, r0, sl, lsl r0
    55e4:	c3012901 	movwgt	r2, #6401	; 0x1901
    55e8:	1b000003 	blne	55fc <__Stack_Size+0x4dfc>
    55ec:	000018d1 	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    55f0:	01502901 	cmpeq	r0, r1, lsl #18
    55f4:	700b0000 	andvc	r0, fp, r0
    55f8:	c3290100 	teqgt	r9, #0, 2
    55fc:	1c000003 	stcne	0, cr0, [r0], {3}
    5600:	2b010078 	blcs	457e8 <__Stack_Size+0x44fe8>
    5604:	000000e7 	andeq	r0, r0, r7, ror #1
    5608:	0100791c 	tsteq	r0, ip, lsl r9
    560c:	0000e72c 	andeq	lr, r0, ip, lsr #14
    5610:	040c0000 	streq	r0, [ip], #-0
    5614:	000003c9 	andeq	r0, r0, r9, asr #7
    5618:	0000b216 	andeq	fp, r0, r6, lsl r2
    561c:	19360d00 	ldmdbne	r6!, {r8, sl, fp}
    5620:	32010000 	andcc	r0, r1, #0
    5624:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5628:	0000002c 	andeq	r0, r0, ip, lsr #32
    562c:	04a49c01 	strteq	r9, [r4], #3073	; 0xc01
    5630:	72170000 	andsvc	r0, r7, #0
    5634:	50320100 	eorspl	r0, r2, r0, lsl #2
    5638:	65000001 	strvs	r0, [r0, #-1]
    563c:	17000015 	smladne	r0, r5, r0, r0
    5640:	3201006b 	andcc	r0, r1, #107	; 0x6b
    5644:	00000212 	andeq	r0, r0, r2, lsl r2
    5648:	00001591 	muleq	r0, r1, r5
    564c:	0100700f 	tsteq	r0, pc
    5650:	0000b234 	andeq	fp, r0, r4, lsr r2
    5654:	f8910300 			; <UNDEFINED> instruction: 0xf8910300
    5658:	0391127e 	orrseq	r1, r1, #-536870905	; 0xe0000007
    565c:	200c0000 	andcs	r0, ip, r0
    5660:	00140800 	andseq	r0, r4, r0, lsl #16
    5664:	37010000 	strcc	r0, [r1, -r0]
    5668:	0000048b 	andeq	r0, r0, fp, lsl #9
    566c:	0003a711 	andeq	sl, r3, r1, lsl r7
    5670:	0015bd00 	andseq	fp, r5, r0, lsl #26
    5674:	039c1100 	orrseq	r1, ip, #0, 2
    5678:	15fa0000 	ldrbne	r0, [sl, #0]!
    567c:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
    5680:	14080020 	strne	r0, [r8], #-32
    5684:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5688:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    568c:	7eb89103 	asnvce	f1, f3
    5690:	0003b91e 	andeq	fp, r3, lr, lsl r9
    5694:	d8910300 	ldmle	r1, {r8, r9}
    5698:	2016137e 	andscs	r1, r6, lr, ror r3
    569c:	0c520800 	mrrceq	8, 0, r0, r2, cr0
    56a0:	046c0000 	strbteq	r0, [ip], #-0
    56a4:	01140000 	tsteq	r4, r0
    56a8:	f8910352 			; <UNDEFINED> instruction: 0xf8910352
    56ac:	5101147e 	tstpl	r1, lr, ror r4
    56b0:	7ed89103 	atnvce	f1, f3
    56b4:	02500114 	subseq	r0, r0, #20, 2
    56b8:	1500007d 	strne	r0, [r0, #-125]	; 0x7d
    56bc:	08002020 	stmdaeq	r0, {r5, sp}
    56c0:	00000c6d 	andeq	r0, r0, sp, ror #24
    56c4:	03520114 	cmpeq	r2, #20, 2
    56c8:	147ed891 	ldrbtne	sp, [lr], #-2193	; 0x891
    56cc:	7d025101 	stfvcs	f5, [r2, #-4]
    56d0:	50011400 	andpl	r1, r1, r0, lsl #8
    56d4:	00007402 	andeq	r7, r0, r2, lsl #8
    56d8:	0c150000 	ldceq	0, cr0, [r5], {-0}
    56dc:	88080020 	stmdahi	r8, {r5}
    56e0:	1400000c 	strne	r0, [r0], #-12
    56e4:	f3035201 	vhsub.u8	d5, d3, d1
    56e8:	01145101 	tsteq	r4, r1, lsl #2
    56ec:	f8910350 			; <UNDEFINED> instruction: 0xf8910350
    56f0:	1f00007e 	svcne	0x0000007e
    56f4:	00000c82 	andeq	r0, r0, r2, lsl #25
    56f8:	20283a01 	eorcs	r3, r8, r1, lsl #20
    56fc:	00180800 	andseq	r0, r8, r0, lsl #16
    5700:	9c010000 	stcls	0, cr0, [r1], {-0}
    5704:	00000518 	andeq	r0, r0, r8, lsl r5
    5708:	62757017 	rsbsvs	r7, r5, #23
    570c:	503a0100 	eorspl	r0, sl, r0, lsl #2
    5710:	1b000001 	blne	571c <__Stack_Size+0x4f1c>
    5714:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
    5718:	000018ca 	andeq	r1, r0, sl, asr #17
    571c:	02123a01 	andseq	r3, r2, #4096	; 0x1000
    5720:	16390000 	ldrtne	r0, [r9], -r0
    5724:	ba200000 	blt	80572c <__Stack_Size+0x804f2c>
    5728:	01000018 	tsteq	r0, r8, lsl r0
    572c:	0005183c 	andeq	r1, r5, ip, lsr r8
    5730:	b8910300 	ldmlt	r1, {r8, r9}
    5734:	2034137f 	eorscs	r1, r4, pc, ror r3
    5738:	01560800 	cmpeq	r6, r0, lsl #16
    573c:	05010000 	streq	r0, [r1, #-0]
    5740:	01140000 	tsteq	r4, r0
    5744:	01f30351 	mvnseq	r0, r1, asr r3
    5748:	50011451 	andpl	r1, r1, r1, asr r4
    574c:	00007d02 	andeq	r7, r0, r2, lsl #26
    5750:	00203c15 	eoreq	r3, r0, r5, lsl ip
    5754:	0003ce08 	andeq	ip, r3, r8, lsl #28
    5758:	51011400 	tstpl	r1, r0, lsl #8
    575c:	14007d02 	strne	r7, [r0], #-3330	; 0xd02
    5760:	74025001 	strvc	r5, [r2], #-1
    5764:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5768:	00000081 	andeq	r0, r0, r1, lsl #1
    576c:	00000528 	andeq	r0, r0, r8, lsr #10
    5770:	0000a209 	andeq	sl, r0, r9, lsl #4
    5774:	0a003f00 	beq	1537c <__Stack_Size+0x14b7c>
    5778:	0000193e 	andeq	r1, r0, lr, lsr r9
    577c:	6a016001 	bvs	5d788 <__Stack_Size+0x5cf88>
    5780:	0b000005 	bleq	579c <__Stack_Size+0x4f9c>
    5784:	6001006b 	andvs	r0, r1, fp, rrx
    5788:	00000150 	andeq	r0, r0, r0, asr r1
    578c:	0018e31b 	andseq	lr, r8, fp, lsl r3
    5790:	12600100 	rsbne	r0, r0, #0, 2
    5794:	1b000002 	blne	57a4 <__Stack_Size+0x4fa4>
    5798:	0000191d 	andeq	r1, r0, sp, lsl r9
    579c:	02126101 	andseq	r6, r2, #1073741824	; 0x40000000
    57a0:	6c0b0000 	stcvs	0, cr0, [fp], {-0}
    57a4:	01006e65 	tsteq	r0, r5, ror #28
    57a8:	00009761 	andeq	r9, r0, r1, ror #14
    57ac:	19772100 	ldmdbne	r7!, {r8, sp}^
    57b0:	63010000 	movwvs	r0, #4096	; 0x1000
    57b4:	0000056a 	andeq	r0, r0, sl, ror #10
    57b8:	00810800 	addeq	r0, r1, r0, lsl #16
    57bc:	057a0000 	ldrbeq	r0, [sl, #-0]!
    57c0:	a2090000 	andge	r0, r9, #0
    57c4:	7f000000 	svcvc	0x00000000
    57c8:	19180a00 	ldmdbne	r8, {r9, fp}
    57cc:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    57d0:	0005c101 	andeq	ip, r5, r1, lsl #2
    57d4:	007a0b00 	rsbseq	r0, sl, r0, lsl #22
    57d8:	01506901 	cmpeq	r0, r1, lsl #18
    57dc:	720b0000 	andvc	r0, fp, #0
    57e0:	12690100 	rsbne	r0, r9, #0, 2
    57e4:	0b000002 	bleq	57f4 <__Stack_Size+0x4ff4>
    57e8:	69010061 	stmdbvs	r1, {r0, r5, r6}
    57ec:	00000212 	andeq	r0, r0, r2, lsl r2
    57f0:	01006d0b 	tsteq	r0, fp, lsl #26
    57f4:	0002126a 	andeq	r1, r2, sl, ror #4
    57f8:	656c0b00 	strbvs	r0, [ip, #-2816]!	; 0xb00
    57fc:	6a01006e 	bvs	459bc <__Stack_Size+0x451bc>
    5800:	00000097 	muleq	r0, r7, r0
    5804:	00197721 	andseq	r7, r9, r1, lsr #14
    5808:	6a6c0100 	bvs	1b05c10 <__Stack_Size+0x1b05410>
    580c:	00000005 	andeq	r0, r0, r5
    5810:	000d5a1f 	andeq	r5, sp, pc, lsl sl
    5814:	40730100 	rsbsmi	r0, r3, r0, lsl #2
    5818:	c0080020 	andgt	r0, r8, r0, lsr #32
    581c:	01000000 	mrseq	r0, (UNDEF: 0)
    5820:	0008049c 	muleq	r8, ip, r4
    5824:	0b070e00 	bleq	1c902c <__Stack_Size+0x1c882c>
    5828:	73010000 	movwvc	r0, #4096	; 0x1000
    582c:	00000150 	andeq	r0, r0, r0, asr r1
    5830:	0000165a 	andeq	r1, r0, sl, asr r6
    5834:	62757017 	rsbsvs	r7, r5, #23
    5838:	12730100 	rsbsne	r0, r3, #0, 2
    583c:	93000002 	movwls	r0, #2
    5840:	0e000016 	mcreq	0, 0, r0, cr0, cr6, {0}
    5844:	000018ca 	andeq	r1, r0, sl, asr #17
    5848:	02127401 	andseq	r7, r2, #16777216	; 0x1000000
    584c:	16bf0000 	ldrtne	r0, [pc], r0
    5850:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    5854:	01000019 	tsteq	r0, r9, lsl r0
    5858:	00021275 	andeq	r1, r2, r5, ror r2
    585c:	0016e000 	andseq	lr, r6, r0
    5860:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0x700
    5864:	7501006e 	strvc	r0, [r1, #-110]	; 0x6e
    5868:	00000097 	muleq	r0, r7, r0
    586c:	0000170c 	andeq	r1, r0, ip, lsl #14
    5870:	0018ba20 	andseq	fp, r8, r0, lsr #20
    5874:	18770100 	ldmdane	r7!, {r8}^
    5878:	03000005 	movweq	r0, #5
    587c:	0f7ea091 	svceq	0x007ea091
    5880:	78010065 	stmdavc	r1, {r0, r2, r5, r6}
    5884:	000000e7 	andeq	r0, r0, r7, ror #1
    5888:	7dc09103 	stfvcp	f1, [r0, #12]
    588c:	0100730f 	tsteq	r0, pc, lsl #6
    5890:	0000e779 	andeq	lr, r0, r9, ror r7
    5894:	e0910300 	adds	r0, r1, r0, lsl #6
    5898:	006b0f7e 	rsbeq	r0, fp, lr, ror pc
    589c:	00e77a01 	rsceq	r7, r7, r1, lsl #20
    58a0:	91030000 	mrsls	r0, (UNDEF: 3)
    58a4:	7a0f7de0 	bvc	3e502c <__Stack_Size+0x3e482c>
    58a8:	e77b0100 	ldrb	r0, [fp, -r0, lsl #2]!
    58ac:	03000000 	movweq	r0, #0
    58b0:	107e8091 			; <UNDEFINED> instruction: 0x107e8091
    58b4:	00000528 	andeq	r0, r0, r8, lsr #10
    58b8:	0800204e 	stmdaeq	r0, {r1, r2, r3, r6, sp}
    58bc:	00000448 	andeq	r0, r0, r8, asr #8
    58c0:	06d57f01 	ldrbeq	r7, [r5], r1, lsl #30
    58c4:	53110000 	tstpl	r1, #0
    58c8:	2c000005 	stccs	0, cr0, [r0], {5}
    58cc:	11000017 	tstne	r0, r7, lsl r0
    58d0:	00000548 	andeq	r0, r0, r8, asr #10
    58d4:	0000173f 	andeq	r1, r0, pc, lsr r7
    58d8:	00053d11 	andeq	r3, r5, r1, lsl sp
    58dc:	00176000 	andseq	r6, r7, r0
    58e0:	05341100 	ldreq	r1, [r4, #-256]!	; 0x100
    58e4:	179c0000 	ldrne	r0, [ip, r0]
    58e8:	48220000 	stmdami	r2!, {}	; <UNPREDICTABLE>
    58ec:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    58f0:	0000055e 	andeq	r0, r0, lr, asr r5
    58f4:	7ee09103 	urdvcs	f1, f3
    58f8:	00207415 	eoreq	r7, r0, r5, lsl r4
    58fc:	00021d08 	andeq	r1, r2, r8, lsl #26
    5900:	53011400 	movwpl	r1, #5120	; 0x1400
    5904:	14007602 	strne	r7, [r0], #-1538	; 0x602
    5908:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    590c:	51011420 	tstpl	r1, r0, lsr #8
    5910:	14707402 	ldrbtne	r7, [r0], #-1026	; 0x402
    5914:	91035001 	tstls	r3, r1
    5918:	02147de0 	andseq	r7, r4, #224, 26	; 0x3800
    591c:	7702007d 	smlsdxvc	r2, sp, r0, r0
    5920:	00000000 	andeq	r0, r0, r0
    5924:	00057a12 	andeq	r7, r5, r2, lsl sl
    5928:	00207c00 	eoreq	r7, r0, r0, lsl #24
    592c:	00004008 	andeq	r4, r0, r8
    5930:	54820100 	strpl	r0, [r2], #256	; 0x100
    5934:	11000007 	tstne	r0, r7
    5938:	000005aa 	andeq	r0, r0, sl, lsr #11
    593c:	0000180b 	andeq	r1, r0, fp, lsl #16
    5940:	0005a111 	andeq	sl, r5, r1, lsl r1
    5944:	00181e00 	andseq	r1, r8, r0, lsl #28
    5948:	05981100 	ldreq	r1, [r8, #256]	; 0x100
    594c:	183f0000 	ldmdane	pc!, {}	; <UNPREDICTABLE>
    5950:	8f110000 	svchi	0x00110000
    5954:	60000005 	andvs	r0, r0, r5
    5958:	11000018 	tstne	r0, r8, lsl r0
    595c:	00000586 	andeq	r0, r0, r6, lsl #11
    5960:	0000188e 	andeq	r1, r0, lr, lsl #17
    5964:	00207c1d 	eoreq	r7, r0, sp, lsl ip
    5968:	00004008 	andeq	r4, r0, r8
    596c:	05b51e00 	ldreq	r1, [r5, #3584]!	; 0xe00
    5970:	91030000 	mrsls	r0, (UNDEF: 3)
    5974:	bc157ee0 	ldclt	14, cr7, [r5], {224}	; 0xe0
    5978:	1d080020 	stcne	0, cr0, [r8, #-128]	; 0xffffff80
    597c:	14000002 	strne	r0, [r0], #-2
    5980:	76025301 	strvc	r5, [r2], -r1, lsl #6
    5984:	52011400 	andpl	r1, r1, #0, 8
    5988:	14400802 	strbne	r0, [r0], #-2050	; 0x802
    598c:	91035101 	tstls	r3, r1, lsl #2
    5990:	01147ee0 	tsteq	r4, r0, ror #29
    5994:	80910350 	addshi	r0, r1, r0, asr r3
    5998:	7d02147e 	cfstrsvc	mvf1, [r2, #-504]	; 0xfffffe08
    599c:	00770200 	rsbseq	r0, r7, r0, lsl #4
    59a0:	13000000 	movwne	r0, #0
    59a4:	0800205a 	stmdaeq	r0, {r1, r3, r4, r6, sp}
    59a8:	00000156 	andeq	r0, r0, r6, asr r1
    59ac:	00000770 	andeq	r0, r0, r0, ror r7
    59b0:	03510114 	cmpeq	r1, #20, 2
    59b4:	145201f3 	ldrbne	r0, [r2], #-499	; 0x1f3
    59b8:	91035001 	tstls	r3, r1
    59bc:	13007ea0 	movwne	r7, #3744	; 0xea0
    59c0:	0800207c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp}
    59c4:	000003ce 	andeq	r0, r0, lr, asr #7
    59c8:	0000078b 	andeq	r0, r0, fp, lsl #15
    59cc:	03510114 	cmpeq	r1, #20, 2
    59d0:	147de091 	ldrbtne	lr, [sp], #-145	; 0x91
    59d4:	78025001 	stmdavc	r2, {r0, ip, lr}
    59d8:	c8130000 	ldmdagt	r3, {}	; <UNPREDICTABLE>
    59dc:	32080020 	andcc	r0, r8, #32
    59e0:	b600000c 	strlt	r0, [r0], -ip
    59e4:	14000007 	strne	r0, [r0], #-7
    59e8:	03055301 	movweq	r5, #21249	; 0x5301
    59ec:	08007894 	stmdaeq	r0, {r2, r4, r7, fp, ip, sp, lr}
    59f0:	02520114 	subseq	r0, r2, #20, 2
    59f4:	01142008 	tsteq	r4, r8
    59f8:	a0910351 	addsge	r0, r1, r1, asr r3
    59fc:	5001147e 	andpl	r1, r1, lr, ror r4
    5a00:	7dc09103 	stfvcp	f1, [r0, #12]
    5a04:	20d41300 	sbcscs	r1, r4, r0, lsl #6
    5a08:	0ca30800 	stceq	8, cr0, [r3]
    5a0c:	07e20000 	strbeq	r0, [r2, r0]!
    5a10:	01140000 	tsteq	r4, r0
    5a14:	94030553 	strls	r0, [r3], #-1363	; 0x553
    5a18:	14080078 	strne	r0, [r8], #-120	; 0x78
    5a1c:	91035201 	tstls	r3, r1, lsl #4
    5a20:	01147dc0 	tsteq	r4, r0, asr #27
    5a24:	80910351 	addshi	r0, r1, r1, asr r3
    5a28:	5001147e 	andpl	r1, r1, lr, ror r4
    5a2c:	7ee09103 	urdvcs	f1, f3
    5a30:	20de1500 	sbcscs	r1, lr, r0, lsl #10
    5a34:	0cc30800 	stcleq	8, cr0, [r3], {0}
    5a38:	01140000 	tsteq	r4, r0
    5a3c:	94030552 	strls	r0, [r3], #-1362	; 0x552
    5a40:	14080078 	strne	r0, [r8], #-120	; 0x78
    5a44:	91035101 	tstls	r3, r1, lsl #2
    5a48:	01147de0 	tsteq	r4, r0, ror #27
    5a4c:	e0910350 	adds	r0, r1, r0, asr r3
    5a50:	2300007e 	movwcs	r0, #126	; 0x7e
    5a54:	00707075 	rsbseq	r7, r0, r5, ror r0
    5a58:	00811f01 	addeq	r1, r1, r1, lsl #30
    5a5c:	45010000 	strmi	r0, [r1, #-0]
    5a60:	0b000008 	bleq	5a88 <__Stack_Size+0x5288>
    5a64:	1f010070 	svcne	0x00010070
    5a68:	00000845 	andeq	r0, r0, r5, asr #16
    5a6c:	0018d11b 	andseq	sp, r8, fp, lsl r1
    5a70:	121f0100 	andsne	r0, pc, #0, 2
    5a74:	1c000002 	stcne	0, cr0, [r0], {2}
    5a78:	21010078 	tstcs	r1, r8, ror r0
    5a7c:	000000e7 	andeq	r0, r0, r7, ror #1
    5a80:	0100791c 	tsteq	r0, ip, lsl r9
    5a84:	0000e722 	andeq	lr, r0, r2, lsr #14
    5a88:	6b6f1c00 	blvs	1bcca90 <__Stack_Size+0x1bcc290>
    5a8c:	81230100 	teqhi	r3, r0, lsl #2
    5a90:	00000000 	andeq	r0, r0, r0
    5a94:	00b2040c 	adcseq	r0, r2, ip, lsl #8
    5a98:	56240000 	strtpl	r0, [r4], -r0
    5a9c:	01000019 	tsteq	r0, r9, lsl r0
    5aa0:	0000818a 	andeq	r8, r0, sl, lsl #3
    5aa4:	00210000 	eoreq	r0, r1, r0
    5aa8:	0000c008 	andeq	ip, r0, r8
    5aac:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    5ab0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    5ab4:	00000b07 	andeq	r0, r0, r7, lsl #22
    5ab8:	02128a01 	andseq	r8, r2, #4096	; 0x1000
    5abc:	18e40000 	stmiane	r4!, {}^	; <UNPREDICTABLE>
    5ac0:	70170000 	andsvc	r0, r7, r0
    5ac4:	01006275 	tsteq	r0, r5, ror r2
    5ac8:	0002128a 	andeq	r1, r2, sl, lsl #5
    5acc:	00190200 	andseq	r0, r9, r0, lsl #4
    5ad0:	191d0e00 	ldmdbne	sp, {r9, sl, fp}
    5ad4:	8b010000 	blhi	45adc <__Stack_Size+0x452dc>
    5ad8:	00000212 	andeq	r0, r0, r2, lsl r2
    5adc:	00001920 	andeq	r1, r0, r0, lsr #18
    5ae0:	6e656c17 	mcrvs	12, 3, r6, cr5, cr7, {0}
    5ae4:	978b0100 	strls	r0, [fp, r0, lsl #2]
    5ae8:	4c000000 	stcmi	0, cr0, [r0], {-0}
    5aec:	0f000019 	svceq	0x00000019
    5af0:	8d010070 	stchi	0, cr0, [r1, #-448]	; 0xfffffe40
    5af4:	000000b2 	strheq	r0, [r0], -r2
    5af8:	7de89103 	stfvcp	f1, [r8, #12]!
    5afc:	0100710f 	tsteq	r0, pc, lsl #2
    5b00:	0000b28e 	andeq	fp, r0, lr, lsl #5
    5b04:	e8910300 	ldm	r1, {r8, r9}
    5b08:	686c0f7e 	stmdavs	ip!, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp}^
    5b0c:	8f010073 	svchi	0x00010073
    5b10:	000000e7 	andeq	r0, r0, r7, ror #1
    5b14:	7cc89103 	stfvcp	f1, [r8], {3}
    5b18:	7368720f 	cmnvc	r8, #-268435456	; 0xf0000000
    5b1c:	e7900100 	ldr	r0, [r0, r0, lsl #2]
    5b20:	03000000 	movweq	r0, #0
    5b24:	0f7ce891 	svceq	0x007ce891
    5b28:	9101007a 	tstls	r1, sl, ror r0
    5b2c:	000000e7 	andeq	r0, r0, r7, ror #1
    5b30:	7d889103 	stfvcd	f1, [r8, #12]
    5b34:	006b6f19 	rsbeq	r6, fp, r9, lsl pc
    5b38:	00819201 	addeq	r9, r1, r1, lsl #4
    5b3c:	19790000 	ldmdbne	r9!, {}^	; <UNPREDICTABLE>
    5b40:	7a120000 	bvc	485b48 <__Stack_Size+0x485348>
    5b44:	0c000005 	stceq	0, cr0, [r0], {5}
    5b48:	42080021 	andmi	r0, r8, #33	; 0x21
    5b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    5b50:	00097495 	muleq	r9, r5, r4
    5b54:	05aa1100 	streq	r1, [sl, #256]!	; 0x100
    5b58:	19ae0000 	stmibne	lr!, {}	; <UNPREDICTABLE>
    5b5c:	a1110000 	tstge	r1, r0
    5b60:	db000005 	blle	5b7c <__Stack_Size+0x537c>
    5b64:	11000019 	tstne	r0, r9, lsl r0
    5b68:	00000598 	muleq	r0, r8, r5
    5b6c:	00001a07 	andeq	r1, r0, r7, lsl #20
    5b70:	00058f11 	andeq	r8, r5, r1, lsl pc
    5b74:	001a2500 	andseq	r2, sl, r0, lsl #10
    5b78:	05861100 	streq	r1, [r6, #256]	; 0x100
    5b7c:	1a430000 	bne	10c5b84 <__Stack_Size+0x10c5384>
    5b80:	0c1d0000 	ldceq	0, cr0, [sp], {-0}
    5b84:	42080021 	andmi	r0, r8, #33	; 0x21
    5b88:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5b8c:	000005b5 			; <UNDEFINED> instruction: 0x000005b5
    5b90:	7ee89103 	urdvce	f1, f3
    5b94:	00214e15 	eoreq	r4, r1, r5, lsl lr
    5b98:	00021d08 	andeq	r1, r2, r8, lsl #26
    5b9c:	53011400 	movwpl	r1, #5120	; 0x1400
    5ba0:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    5ba4:	02520114 	subseq	r0, r2, #20, 2
    5ba8:	01144008 	tsteq	r4, r8
    5bac:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    5bb0:	5001147e 	andpl	r1, r1, lr, ror r4
    5bb4:	7d889103 	stfvcd	f1, [r8, #12]
    5bb8:	007d0214 	rsbseq	r0, sp, r4, lsl r2
    5bbc:	5301f303 	movwpl	pc, #4867	; 0x1303	; <UNPREDICTABLE>
    5bc0:	12000000 	andne	r0, r0, #0
    5bc4:	00000804 	andeq	r0, r0, r4, lsl #16
    5bc8:	08002156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp}
    5bcc:	00000016 	andeq	r0, r0, r6, lsl r0
    5bd0:	09fe9b01 	ldmibeq	lr!, {r0, r8, r9, fp, ip, pc}^
    5bd4:	1d250000 	stcne	0, cr0, [r5, #-0]
    5bd8:	01000008 	tsteq	r0, r8
    5bdc:	08141157 	ldmdaeq	r4, {r0, r1, r2, r4, r6, r8, ip}
    5be0:	1a8b0000 	bne	fe2c5be8 <BootRAM+0xd236389>
    5be4:	561d0000 	ldrpl	r0, [sp], -r0
    5be8:	16080021 	strne	r0, [r8], -r1, lsr #32
    5bec:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    5bf0:	00000828 	andeq	r0, r0, r8, lsr #16
    5bf4:	7dc89103 	stfvcp	f1, [r8, #12]
    5bf8:	0008311e 	andeq	r3, r8, lr, lsl r1
    5bfc:	e8910300 	ldm	r1, {r8, r9}
    5c00:	083a267e 	ldmdaeq	sl!, {r1, r2, r3, r4, r5, r6, r9, sl, sp}
    5c04:	1b050000 	blne	145c0c <__Stack_Size+0x14540c>
    5c08:	60130000 	andsvs	r0, r3, r0
    5c0c:	de080021 	cdple	0, 0, cr0, cr8, cr1, {1}
    5c10:	dd00000c 	stcle	0, cr0, [r0, #-48]	; 0xffffffd0
    5c14:	14000009 	strne	r0, [r0], #-9
    5c18:	77025201 	strvc	r5, [r2, -r1, lsl #4]
    5c1c:	51011400 	tstpl	r1, r0, lsl #8
    5c20:	7ee89103 	urdvce	f1, f3
    5c24:	03500114 	cmpeq	r0, #20, 2
    5c28:	007dc891 			; <UNDEFINED> instruction: 0x007dc891
    5c2c:	00216c15 	eoreq	r6, r1, r5, lsl ip
    5c30:	000cfd08 	andeq	pc, ip, r8, lsl #26
    5c34:	52011400 	andpl	r1, r1, #0, 8
    5c38:	7ee89103 	urdvce	f1, f3
    5c3c:	03510114 	cmpeq	r1, #20, 2
    5c40:	147dc891 	ldrbtne	ip, [sp], #-2193	; 0x891
    5c44:	91035001 	tstls	r3, r1
    5c48:	00007de8 	andeq	r7, r0, r8, ror #27
    5c4c:	08041200 	stmdaeq	r4, {r9, ip}
    5c50:	21760000 	cmncs	r6, r0
    5c54:	00160800 	andseq	r0, r6, r0, lsl #16
    5c58:	9d010000 	stcls	0, cr0, [r1, #-0]
    5c5c:	00000a88 	andeq	r0, r0, r8, lsl #21
    5c60:	00081d25 	andeq	r1, r8, r5, lsr #26
    5c64:	11560100 	cmpne	r6, r0, lsl #2
    5c68:	00000814 	andeq	r0, r0, r4, lsl r8
    5c6c:	00001b23 	andeq	r1, r0, r3, lsr #22
    5c70:	0021761d 	eoreq	r7, r1, sp, lsl r6
    5c74:	00001608 	andeq	r1, r0, r8, lsl #12
    5c78:	08281e00 	stmdaeq	r8!, {r9, sl, fp, ip}
    5c7c:	91030000 	mrsls	r0, (UNDEF: 3)
    5c80:	311e7da8 	tstcc	lr, r8, lsr #27
    5c84:	03000008 	movweq	r0, #8
    5c88:	267dc891 			; <UNDEFINED> instruction: 0x267dc891
    5c8c:	0000083a 	andeq	r0, r0, sl, lsr r8
    5c90:	00001b6b 	andeq	r1, r0, fp, ror #22
    5c94:	00218013 	eoreq	r8, r1, r3, lsl r0
    5c98:	000cde08 	andeq	sp, ip, r8, lsl #28
    5c9c:	000a6700 	andeq	r6, sl, r0, lsl #14
    5ca0:	52011400 	andpl	r1, r1, #0, 8
    5ca4:	14007602 	strne	r7, [r0], #-1538	; 0x602
    5ca8:	91035101 	tstls	r3, r1, lsl #2
    5cac:	01147dc8 	tsteq	r4, r8, asr #27
    5cb0:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    5cb4:	8c15007d 	ldchi	0, cr0, [r5], {125}	; 0x7d
    5cb8:	fd080021 	stc2	0, cr0, [r8, #-132]	; 0xffffff7c
    5cbc:	1400000c 	strne	r0, [r0], #-12
    5cc0:	91035201 	tstls	r3, r1, lsl #4
    5cc4:	01147dc8 	tsteq	r4, r8, asr #27
    5cc8:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    5ccc:	5001147d 	andpl	r1, r1, sp, ror r4
    5cd0:	7ee89103 	urdvce	f1, f3
    5cd4:	12000000 	andne	r0, r0, #0
    5cd8:	00000391 	muleq	r0, r1, r3
    5cdc:	08002196 	stmdaeq	r0, {r1, r2, r4, r7, r8, sp}
    5ce0:	00000014 	andeq	r0, r0, r4, lsl r0
    5ce4:	0b0c9f01 	bleq	32d8f0 <__Stack_Size+0x32d0f0>
    5ce8:	a7110000 	ldrge	r0, [r1, -r0]
    5cec:	89000003 	stmdbhi	r0, {r0, r1}
    5cf0:	1100001b 	tstne	r0, fp, lsl r0
    5cf4:	0000039c 	muleq	r0, ip, r3
    5cf8:	00001bb8 			; <UNDEFINED> instruction: 0x00001bb8
    5cfc:	0021961d 	eoreq	r9, r1, sp, lsl r6
    5d00:	00001408 	andeq	r1, r0, r8, lsl #8
    5d04:	03b01e00 	movseq	r1, #0, 28
    5d08:	91030000 	mrsls	r0, (UNDEF: 3)
    5d0c:	b91e7da8 	ldmdblt	lr, {r3, r5, r7, r8, sl, fp, ip, sp, lr}
    5d10:	03000003 	movweq	r0, #3
    5d14:	137dc891 	cmnne	sp, #9502720	; 0x910000
    5d18:	080021a0 	stmdaeq	r0, {r5, r7, r8, sp}
    5d1c:	00000c52 	andeq	r0, r0, r2, asr ip
    5d20:	00000aeb 	andeq	r0, r0, fp, ror #21
    5d24:	03520114 	cmpeq	r2, #20, 2
    5d28:	147de891 	ldrbtne	lr, [sp], #-2193	; 0x891
    5d2c:	91035101 	tstls	r3, r1, lsl #2
    5d30:	01147dc8 	tsteq	r4, r8, asr #27
    5d34:	a8910350 	ldmge	r1, {r4, r6, r8, r9}
    5d38:	aa15007d 	bge	545f34 <__Stack_Size+0x545734>
    5d3c:	6d080021 	stcvs	0, cr0, [r8, #-132]	; 0xffffff7c
    5d40:	1400000c 	strne	r0, [r0], #-12
    5d44:	91035201 	tstls	r3, r1, lsl #4
    5d48:	01147dc8 	tsteq	r4, r8, asr #27
    5d4c:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    5d50:	5001147d 	andpl	r1, r1, sp, ror r4
    5d54:	7ce89103 	stfvcp	f1, [r8], #12
    5d58:	13000000 	movwne	r0, #0
    5d5c:	08002156 	stmdaeq	r0, {r1, r2, r4, r6, r8, sp}
    5d60:	000003ce 	andeq	r0, r0, lr, asr #7
    5d64:	00000b27 	andeq	r0, r0, r7, lsr #22
    5d68:	02510114 	subseq	r0, r1, #20, 2
    5d6c:	01140078 	tsteq	r4, r8, ror r0
    5d70:	c8910350 	ldmgt	r1, {r4, r6, r8, r9}
    5d74:	7613007c 			; <UNDEFINED> instruction: 0x7613007c
    5d78:	88080021 	stmdahi	r8, {r0, r5}
    5d7c:	4a00000c 	bmi	5db4 <__Stack_Size+0x55b4>
    5d80:	1400000b 	strne	r0, [r0], #-11
    5d84:	91035201 	tstls	r3, r1, lsl #4
    5d88:	01147d88 	tsteq	r4, r8, lsl #27
    5d8c:	e8910351 	ldm	r1, {r0, r4, r6, r8, r9}
    5d90:	5001147d 	andpl	r1, r1, sp, ror r4
    5d94:	7de89103 	stfvcp	f1, [r8, #12]!
    5d98:	21961300 	orrscs	r1, r6, r0, lsl #6
    5d9c:	0d180800 	ldceq	8, cr0, [r8, #-0]
    5da0:	0b6d0000 	bleq	1b45da8 <__Stack_Size+0x1b455a8>
    5da4:	01140000 	tsteq	r4, r0
    5da8:	e8910352 	ldm	r1, {r1, r4, r6, r8, r9}
    5dac:	5101147e 	tstpl	r1, lr, ror r4
    5db0:	7de89103 	stfvcp	f1, [r8, #12]!
    5db4:	03500114 	cmpeq	r0, #20, 2
    5db8:	007de891 			; <UNDEFINED> instruction: 0x007de891
    5dbc:	0021b215 	eoreq	fp, r1, r5, lsl r2
    5dc0:	000d3308 	andeq	r3, sp, r8, lsl #6
    5dc4:	51011400 	tstpl	r1, r0, lsl #8
    5dc8:	7ce89103 	stfvcp	f1, [r8], #12
    5dcc:	03500114 	cmpeq	r0, #20, 2
    5dd0:	007cc891 			; <UNDEFINED> instruction: 0x007cc891
    5dd4:	18f82000 	ldmne	r8!, {sp}^
    5dd8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    5ddc:	00000b97 	muleq	r0, r7, fp
    5de0:	78940305 	ldmvc	r4, {r0, r2, r8, r9}
    5de4:	e7160800 	ldr	r0, [r6, -r0, lsl #16]
    5de8:	27000000 	strcs	r0, [r0, -r0]
    5dec:	00001814 	andeq	r1, r0, r4, lsl r8
    5df0:	03c92703 	biceq	r2, r9, #786432	; 0xc0000
    5df4:	84270000 	strthi	r0, [r7], #-0
    5df8:	02000018 	andeq	r0, r0, #24
    5dfc:	000bb219 	andeq	fp, fp, r9, lsl r2
    5e00:	00f71600 	rscseq	r1, r7, r0, lsl #12
    5e04:	42280000 	eormi	r0, r8, #0
    5e08:	02000018 	andeq	r0, r0, #24
    5e0c:	000bd22b 	andeq	sp, fp, fp, lsr #4
    5e10:	01342900 	teqeq	r4, r0, lsl #18
    5e14:	12290000 	eorne	r0, r9, #0
    5e18:	29000002 	stmdbcs	r0, {r1}
    5e1c:	00000097 	muleq	r0, r7, r0
    5e20:	18992800 	ldmne	r9, {fp, sp}
    5e24:	31020000 	mrscc	r0, (UNDEF: 2)
    5e28:	00000bf2 	strdeq	r0, [r0], -r2
    5e2c:	000bf229 	andeq	pc, fp, r9, lsr #4
    5e30:	01502900 	cmpeq	r0, r0, lsl #18
    5e34:	7a290000 	bvc	a45e3c <__Stack_Size+0xa4563c>
    5e38:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5e3c:	0000007a 	andeq	r0, r0, sl, ror r0
    5e40:	b2040c00 	andlt	r0, r4, #0, 24
    5e44:	2a00000b 	bcs	5e78 <__Stack_Size+0x5678>
    5e48:	0000174d 	andeq	r1, r0, sp, asr #14
    5e4c:	000000a9 	andeq	r0, r0, r9, lsr #1
    5e50:	00000c15 	andeq	r0, r0, r5, lsl ip
    5e54:	0000a929 	andeq	sl, r0, r9, lsr #18
    5e58:	0c152900 	ldceq	9, cr2, [r5], {-0}
    5e5c:	a2290000 	eorge	r0, r9, #0
    5e60:	00000000 	andeq	r0, r0, r0
    5e64:	0c1b040c 	cfldrseq	mvf0, [fp], {12}
    5e68:	282b0000 	stmdacs	fp!, {}	; <UNPREDICTABLE>
    5e6c:	00001970 	andeq	r1, r0, r0, ror r9
    5e70:	0c322402 	cfldrseq	mvf2, [r2], #-8
    5e74:	34290000 	strtcc	r0, [r9], #-0
    5e78:	29000001 	stmdbcs	r0, {r0}
    5e7c:	00000212 	andeq	r0, r0, r2, lsl r2
    5e80:	19062800 	stmdbne	r6, {fp, sp}
    5e84:	21070000 	mrscs	r0, (UNDEF: 7)
    5e88:	00000c52 	andeq	r0, r0, r2, asr ip
    5e8c:	00015029 	andeq	r5, r1, r9, lsr #32
    5e90:	02122900 	andseq	r2, r2, #0, 18
    5e94:	97290000 	strls	r0, [r9, -r0]!
    5e98:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    5e9c:	00000212 	andeq	r0, r0, r2, lsl r2
    5ea0:	17c12800 	strbne	r2, [r1, r0, lsl #16]
    5ea4:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    5ea8:	00000c6d 	andeq	r0, r0, sp, ror #24
    5eac:	00015029 	andeq	r5, r1, r9, lsr #32
    5eb0:	01502900 	cmpeq	r0, r0, lsl #18
    5eb4:	c3290000 	teqgt	r9, #0
    5eb8:	00000003 	andeq	r0, r0, r3
    5ebc:	00175428 	andseq	r5, r7, r8, lsr #8
    5ec0:	88370300 	ldmdahi	r7!, {r8, r9}
    5ec4:	2900000c 	stmdbcs	r0, {r2, r3}
    5ec8:	00000150 	andeq	r0, r0, r0, asr r1
    5ecc:	00021229 	andeq	r1, r2, r9, lsr #4
    5ed0:	02122900 	andseq	r2, r2, #0, 18
    5ed4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5ed8:	000017a7 	andeq	r1, r0, r7, lsr #15
    5edc:	0ca34f03 	stceq	15, cr4, [r3], #12
    5ee0:	45290000 	strmi	r0, [r9, #-0]!
    5ee4:	29000008 	stmdbcs	r0, {r3}
    5ee8:	000003c3 	andeq	r0, r0, r3, asr #7
    5eec:	00021229 	andeq	r1, r2, r9, lsr #4
    5ef0:	a4280000 	strtge	r0, [r8], #-0
    5ef4:	07000018 	smladeq	r0, r8, r0, r0
    5ef8:	000cc340 	andeq	ip, ip, r0, asr #6
    5efc:	01502900 	cmpeq	r0, r0, lsl #18
    5f00:	12290000 	eorne	r0, r9, #0
    5f04:	29000002 	stmdbcs	r0, {r1}
    5f08:	00000212 	andeq	r0, r0, r2, lsl r2
    5f0c:	00021229 	andeq	r1, r2, r9, lsr #4
    5f10:	79280000 	stmdbvc	r8!, {}	; <UNPREDICTABLE>
    5f14:	07000018 	smladeq	r0, r8, r0, r0
    5f18:	000cde3c 	andeq	sp, ip, ip, lsr lr
    5f1c:	01502900 	cmpeq	r0, r0, lsl #18
    5f20:	12290000 	eorne	r0, r9, #0
    5f24:	29000002 	stmdbcs	r0, {r1}
    5f28:	00000212 	andeq	r0, r0, r2, lsl r2
    5f2c:	17742c00 	ldrbne	r2, [r4, -r0, lsl #24]!
    5f30:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    5f34:	00000081 	andeq	r0, r0, r1, lsl #1
    5f38:	00000cfd 	strdeq	r0, [r0], -sp
    5f3c:	00015029 	andeq	r5, r1, r9, lsr #32
    5f40:	01502900 	cmpeq	r0, r0, lsl #18
    5f44:	12290000 	eorne	r0, r9, #0
    5f48:	00000002 	andeq	r0, r0, r2
    5f4c:	00178728 	andseq	r8, r7, r8, lsr #14
    5f50:	182b0300 	stmdane	fp!, {r8, r9}
    5f54:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    5f58:	00000845 	andeq	r0, r0, r5, asr #16
    5f5c:	00021229 	andeq	r1, r2, r9, lsr #4
    5f60:	02122900 	andseq	r2, r2, #0, 18
    5f64:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5f68:	00001768 	andeq	r1, r0, r8, ror #14
    5f6c:	0d334c03 	ldceq	12, cr4, [r3, #-12]!
    5f70:	45290000 	strmi	r0, [r9, #-0]!
    5f74:	29000008 	stmdbcs	r0, {r3}
    5f78:	000003c3 	andeq	r0, r0, r3, asr #7
    5f7c:	0003c329 	andeq	ip, r3, r9, lsr #6
    5f80:	3d2d0000 	stccc	0, cr0, [sp, #-0]
    5f84:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    5f88:	0000812d 	andeq	r8, r0, sp, lsr #2
    5f8c:	02122900 	andseq	r2, r2, #0, 18
    5f90:	12290000 	eorne	r0, r9, #0
    5f94:	00000002 	andeq	r0, r0, r2
    5f98:	000fa300 	andeq	sl, pc, r0, lsl #6
    5f9c:	03000400 	movweq	r0, #1024	; 0x400
    5fa0:	04000015 	streq	r0, [r0], #-21
    5fa4:	00163601 	andseq	r3, r6, r1, lsl #12
    5fa8:	19910100 	ldmibne	r1, {r8}
    5fac:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    5fb0:	05d80000 	ldrbeq	r0, [r8]
    5fb4:	00000000 	andeq	r0, r0, r0
    5fb8:	18730000 	ldmdane	r3!, {}^	; <UNPREDICTABLE>
    5fbc:	01020000 	mrseq	r0, (UNDEF: 2)
    5fc0:	00081a06 	andeq	r1, r8, r6, lsl #20
    5fc4:	0c360300 	ldceq	3, cr0, [r6], #-0
    5fc8:	1c030000 	stcne	0, cr0, [r3], {-0}
    5fcc:	00000037 	andeq	r0, r0, r7, lsr r0
    5fd0:	18080102 	stmdane	r8, {r1, r8}
    5fd4:	02000008 	andeq	r0, r0, #8
    5fd8:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    5fdc:	67030000 	strvs	r0, [r3, -r0]
    5fe0:	0300000b 	movweq	r0, #11
    5fe4:	00005026 	andeq	r5, r0, r6, lsr #32
    5fe8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5fec:	00000949 	andeq	r0, r0, r9, asr #18
    5ff0:	da050402 	ble	147000 <__Stack_Size+0x146800>
    5ff4:	03000004 	movweq	r0, #4
    5ff8:	00000b4e 	andeq	r0, r0, lr, asr #22
    5ffc:	00693803 	rsbeq	r3, r9, r3, lsl #16
    6000:	04020000 	streq	r0, [r2], #-0
    6004:	00025207 	andeq	r5, r2, r7, lsl #4
    6008:	05080200 	streq	r0, [r8, #-512]	; 0x200
    600c:	000004d5 	ldrdeq	r0, [r0], -r5
    6010:	4d070802 	stcmi	8, cr0, [r7, #-8]
    6014:	04000002 	streq	r0, [r0], #-2
    6018:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    601c:	04020074 	streq	r0, [r2], #-116	; 0x74
    6020:	00025707 	andeq	r5, r2, r7, lsl #14
    6024:	0c380300 	ldceq	3, cr0, [r8], #-0
    6028:	2a040000 	bcs	106030 <__Stack_Size+0x105830>
    602c:	0000002c 	andeq	r0, r0, ip, lsr #32
    6030:	000b6903 	andeq	r6, fp, r3, lsl #18
    6034:	45360400 	ldrmi	r0, [r6, #-1024]!	; 0x400
    6038:	03000000 	movweq	r0, #0
    603c:	00000b50 	andeq	r0, r0, r0, asr fp
    6040:	005e4204 	subseq	r4, lr, r4, lsl #4
    6044:	04020000 	streq	r0, [r2], #-0
    6048:	00078b07 	andeq	r8, r7, r7, lsl #22
    604c:	02040500 	andeq	r0, r4, #0, 10
    6050:	08210801 	stmdaeq	r1!, {r0, fp}
    6054:	1f060000 	svcne	0x00060000
    6058:	01000017 	tsteq	r0, r7, lsl r0
    605c:	010a014b 	tsteq	sl, fp, asr #2
    6060:	64070000 	strvs	r0, [r7], #-0
    6064:	01007473 	tsteq	r0, r3, ror r4
    6068:	00010a4b 	andeq	r0, r1, fp, asr #20
    606c:	19840800 	stmibne	r4, {fp}
    6070:	4c010000 	stcmi	0, cr0, [r1], {-0}
    6074:	00000110 	andeq	r0, r0, r0, lsl r1
    6078:	656e6f07 	strbvs	r6, [lr, #-3847]!	; 0xf07
    607c:	104c0100 	subne	r0, ip, r0, lsl #2
    6080:	08000001 	stmdaeq	r0, {r0}
    6084:	000019b6 			; <UNDEFINED> instruction: 0x000019b6
    6088:	008c4d01 	addeq	r4, ip, r1, lsl #26
    608c:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    6090:	0100000f 	tsteq	r0, pc
    6094:	0001164f 	andeq	r1, r1, pc, asr #12
    6098:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    609c:	007e5001 	rsbseq	r5, lr, r1
    60a0:	0b000000 	bleq	60a8 <__Stack_Size+0x58a8>
    60a4:	00008c04 	andeq	r8, r0, r4, lsl #24
    60a8:	16040b00 	strne	r0, [r4], -r0, lsl #22
    60ac:	0c000001 	stceq	0, cr0, [r0], {1}
    60b0:	0000008c 	andeq	r0, r0, ip, lsl #1
    60b4:	0015e20d 	andseq	lr, r5, sp, lsl #4
    60b8:	03220200 	teqeq	r2, #0, 4
    60bc:	0000013a 	andeq	r0, r0, sl, lsr r1
    60c0:	02007807 	andeq	r7, r0, #458752	; 0x70000
    60c4:	00010a22 	andeq	r0, r1, r2, lsr #20
    60c8:	00610700 	rsbeq	r0, r1, r0, lsl #14
    60cc:	01102202 	tsteq	r0, r2, lsl #4
    60d0:	06000000 	streq	r0, [r0], -r0
    60d4:	000017b5 			; <UNDEFINED> instruction: 0x000017b5
    60d8:	62010c01 	andvs	r0, r1, #256	; 0x100
    60dc:	07000001 	streq	r0, [r0, -r1]
    60e0:	0c010078 	stceq	0, cr0, [r1], {120}	; 0x78
    60e4:	0000010a 	andeq	r0, r0, sl, lsl #2
    60e8:	01006307 	tsteq	r0, r7, lsl #6
    60ec:	0000a20c 	andeq	sl, r0, ip, lsl #4
    60f0:	00690a00 	rsbeq	r0, r9, r0, lsl #20
    60f4:	007e0e01 	rsbseq	r0, lr, r1, lsl #28
    60f8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    60fc:	0000013a 	andeq	r0, r0, sl, lsr r1
    6100:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    6104:	0000001e 	andeq	r0, r0, lr, lsl r0
    6108:	01ae9c01 			; <UNDEFINED> instruction: 0x01ae9c01
    610c:	460f0000 	strmi	r0, [pc], -r0
    6110:	00000001 	andeq	r0, r0, r1
    6114:	0f00001c 	svceq	0x0000001c
    6118:	0000014f 	andeq	r0, r0, pc, asr #2
    611c:	00001c2e 	andeq	r1, r0, lr, lsr #24
    6120:	00015810 	andeq	r5, r1, r0, lsl r8
    6124:	001c8000 	andseq	r8, ip, r0
    6128:	21de1100 	bicscs	r1, lr, r0, lsl #2
    612c:	0f8d0800 	svceq	0x008d0800
    6130:	01120000 	tsteq	r2, r0
    6134:	124c0152 	subne	r0, ip, #-2147483628	; 0x80000014
    6138:	30015101 	andcc	r5, r1, r1, lsl #2
    613c:	05500112 	ldrbeq	r0, [r0, #-274]	; 0x112
    6140:	235001f3 	cmpcs	r0, #-1073741764	; 0xc000003c
    6144:	13000004 	movwne	r0, #4
    6148:	000016e4 	andeq	r1, r0, r4, ror #13
    614c:	21e01901 	mvncs	r1, r1, lsl #18
    6150:	006e0800 	rsbeq	r0, lr, r0, lsl #16
    6154:	9c010000 	stcls	0, cr0, [r1], {-0}
    6158:	0000023d 	andeq	r0, r0, sp, lsr r2
    615c:	01007814 	tsteq	r0, r4, lsl r8
    6160:	00010a19 	andeq	r0, r1, r9, lsl sl
    6164:	15500100 	ldrbne	r0, [r0, #-256]	; 0x100
    6168:	000019c0 	andeq	r1, r0, r0, asr #19
    616c:	023d1b01 	eorseq	r1, sp, #1024	; 0x400
    6170:	91020000 	mrsls	r0, (UNDEF: 2)
    6174:	00631658 	rsbeq	r1, r3, r8, asr r6
    6178:	00971c01 	addseq	r1, r7, r1, lsl #24
    617c:	1cb80000 	ldcne	0, cr0, [r8]
    6180:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    6184:	7e1d0100 	mufvce	f0, f5, f0
    6188:	d6000000 	strle	r0, [r0], -r0
    618c:	1700001c 	smladne	r0, ip, r0, r0
    6190:	000000bd 	strheq	r0, [r0], -sp
    6194:	08002220 	stmdaeq	r0, {r5, r9, sp}
    6198:	00000498 	muleq	r0, r8, r4
    619c:	ea0f3901 	b	3d45a8 <__Stack_Size+0x3d3da8>
    61a0:	24000000 	strcs	r0, [r0], #-0
    61a4:	1800001d 	stmdane	r0, {r0, r2, r3, r4}
    61a8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    61ac:	d40f5001 	strle	r5, [pc], #-1	; 61b4 <__Stack_Size+0x59b4>
    61b0:	3b000000 	blcc	61b8 <__Stack_Size+0x59b8>
    61b4:	1800001d 	stmdane	r0, {r0, r2, r3, r4}
    61b8:	000000c9 	andeq	r0, r0, r9, asr #1
    61bc:	98195001 	ldmdals	r9, {r0, ip, lr}
    61c0:	10000004 	andne	r0, r0, r4
    61c4:	000000f5 	strdeq	r0, [r0], -r5
    61c8:	00001d5b 	andeq	r1, r0, fp, asr sp
    61cc:	0001001a 	andeq	r0, r1, sl, lsl r0
    61d0:	00530100 	subseq	r0, r3, r0, lsl #2
    61d4:	8c1b0000 	ldchi	0, cr0, [fp], {-0}
    61d8:	4d000000 	stcmi	0, cr0, [r0, #-0]
    61dc:	1c000002 	stcne	0, cr0, [r0], {2}
    61e0:	000000ad 	andeq	r0, r0, sp, lsr #1
    61e4:	3d1d001f 	ldccc	0, cr0, [sp, #-124]	; 0xffffff84
    61e8:	01000017 	tsteq	r0, r7, lsl r0
    61ec:	00008c3c 	andeq	r8, r0, ip, lsr ip
    61f0:	00225000 	eoreq	r5, r2, r0
    61f4:	00009a08 	andeq	r9, r0, r8, lsl #20
    61f8:	9d9c0100 	ldflss	f0, [ip]
    61fc:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    6200:	3c010078 	stccc	0, cr0, [r1], {120}	; 0x78
    6204:	00000110 	andeq	r0, r0, r0, lsl r1
    6208:	00001d6e 	andeq	r1, r0, lr, ror #26
    620c:	0100791e 	tsteq	r0, lr, lsl r9
    6210:	0001103c 	andeq	r1, r1, ip, lsr r0
    6214:	001d9a00 	andseq	r9, sp, r0, lsl #20
    6218:	75731600 	ldrbvc	r1, [r3, #-1536]!	; 0x600
    621c:	3e01006d 	cdpcc	0, 0, cr0, cr1, cr13, {3}
    6220:	0000008c 	andeq	r0, r0, ip, lsl #1
    6224:	00001dc6 	andeq	r1, r0, r6, asr #27
    6228:	01006916 	tsteq	r0, r6, lsl r9
    622c:	00007e3f 	andeq	r7, r0, pc, lsr lr
    6230:	001e0e00 	andseq	r0, lr, r0, lsl #28
    6234:	bd0e0000 	stclt	0, cr0, [lr, #-0]
    6238:	ec000000 	stc	0, cr0, [r0], {-0}
    623c:	c2080022 	andgt	r0, r8, #34	; 0x22
    6240:	01000000 	mrseq	r0, (UNDEF: 0)
    6244:	0002e59c 	muleq	r2, ip, r5
    6248:	00c91800 	sbceq	r1, r9, r0, lsl #16
    624c:	50010000 	andpl	r0, r1, r0
    6250:	0000d40f 	andeq	sp, r0, pc, lsl #8
    6254:	001e5100 	andseq	r5, lr, r0, lsl #2
    6258:	00df0f00 	sbcseq	r0, pc, r0, lsl #30
    625c:	1e7d0000 	cdpne	0, 7, cr0, cr13, cr0, {0}
    6260:	ea0f0000 	b	3c6268 <__Stack_Size+0x3c5a68>
    6264:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    6268:	1000001e 	andne	r0, r0, lr, lsl r0
    626c:	000000f5 	strdeq	r0, [r0], -r5
    6270:	00001eca 	andeq	r1, r0, sl, asr #29
    6274:	00010010 	andeq	r0, r1, r0, lsl r0
    6278:	001ef300 	andseq	pc, lr, r0, lsl #6
    627c:	fc130000 	ldc2	0, cr0, [r3], {-0}
    6280:	01000015 	tsteq	r0, r5, lsl r0
    6284:	0023b056 	eoreq	fp, r3, r6, asr r0
    6288:	00004608 	andeq	r4, r0, r8, lsl #12
    628c:	3a9c0100 	bcc	fe706694 <BootRAM+0xd676e35>
    6290:	14000003 	strne	r0, [r0], #-3
    6294:	56010072 			; <UNDEFINED> instruction: 0x56010072
    6298:	0000010a 	andeq	r0, r0, sl, lsl #2
    629c:	611e5001 	tstvs	lr, r1
    62a0:	10560100 	subsne	r0, r6, r0, lsl #2
    62a4:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    62a8:	1e00001f 	mcrne	0, 0, r0, cr0, cr15, {0}
    62ac:	56010062 	strpl	r0, [r1], -r2, rrx
    62b0:	00000110 	andeq	r0, r0, r0, lsl r1
    62b4:	00001f3f 	andeq	r1, r0, pc, lsr pc
    62b8:	01006316 	tsteq	r0, r6, lsl r3
    62bc:	00009758 	andeq	r9, r0, r8, asr r7
    62c0:	001f6000 	andseq	r6, pc, r0
    62c4:	00691600 	rsbeq	r1, r9, r0, lsl #12
    62c8:	007e5901 	rsbseq	r5, lr, r1, lsl #18
    62cc:	1fa40000 	svcne	0x00a40000
    62d0:	06000000 	streq	r0, [r0], -r0
    62d4:	000016d4 	ldrdeq	r1, [r0], -r4
    62d8:	74016d01 	strvc	r6, [r1], #-3329	; 0xd01
    62dc:	07000003 	streq	r0, [r0, -r3]
    62e0:	6d010072 	stcvs	0, cr0, [r1, #-456]	; 0xfffffe38
    62e4:	0000010a 	andeq	r0, r0, sl, lsl #2
    62e8:	01006107 	tsteq	r0, r7, lsl #2
    62ec:	0001106d 	andeq	r1, r1, sp, rrx
    62f0:	00620700 	rsbeq	r0, r2, r0, lsl #14
    62f4:	01106d01 	tsteq	r0, r1, lsl #26
    62f8:	630a0000 	movwvs	r0, #40960	; 0xa000
    62fc:	a26f0100 	rsbge	r0, pc, #0, 2
    6300:	0a000000 	beq	6308 <__Stack_Size+0x5b08>
    6304:	70010069 	andvc	r0, r1, r9, rrx
    6308:	0000007e 	andeq	r0, r0, lr, ror r0
    630c:	033a0e00 	teqeq	sl, #0, 28
    6310:	23f80000 	mvnscs	r0, #0
    6314:	004c0800 	subeq	r0, ip, r0, lsl #16
    6318:	9c010000 	stcls	0, cr0, [r1], {-0}
    631c:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
    6320:	00034618 	andeq	r4, r3, r8, lsl r6
    6324:	0f500100 	svceq	0x00500100
    6328:	0000034f 	andeq	r0, r0, pc, asr #6
    632c:	00001ff2 	strdeq	r1, [r0], -r2
    6330:	0003580f 	andeq	r5, r3, pc, lsl #16
    6334:	00201300 	eoreq	r1, r0, r0, lsl #6
    6338:	03611000 	cmneq	r1, #0
    633c:	20340000 	eorscs	r0, r4, r0
    6340:	6a100000 	bvs	406348 <__Stack_Size+0x405b48>
    6344:	5f000003 	svcpl	0x00000003
    6348:	00000020 	andeq	r0, r0, r0, lsr #32
    634c:	0017ef13 	andseq	lr, r7, r3, lsl pc
    6350:	44850100 	strmi	r0, [r5], #256	; 0x100
    6354:	46080024 	strmi	r0, [r8], -r4, lsr #32
    6358:	01000000 	mrseq	r0, (UNDEF: 0)
    635c:	0003fb9c 	muleq	r3, ip, fp
    6360:	00721400 	rsbseq	r1, r2, r0, lsl #8
    6364:	010a8501 	tsteq	sl, r1, lsl #10
    6368:	50010000 	andpl	r0, r1, r0
    636c:	0100611e 	tsteq	r0, lr, lsl r1
    6370:	00011085 	andeq	r1, r1, r5, lsl #1
    6374:	0020b900 	eoreq	fp, r0, r0, lsl #18
    6378:	00631600 	rsbeq	r1, r3, r0, lsl #12
    637c:	00a28701 	adceq	r8, r2, r1, lsl #14
    6380:	20da0000 	sbcscs	r0, sl, r0
    6384:	69160000 	ldmdbvs	r6, {}	; <UNPREDICTABLE>
    6388:	7e880100 	rmfvce	f0, f0, f0
    638c:	05000000 	streq	r0, [r0, #-0]
    6390:	00000021 	andeq	r0, r0, r1, lsr #32
    6394:	0016f506 	andseq	pc, r6, r6, lsl #10
    6398:	019d0100 	orrseq	r0, sp, r0, lsl #2
    639c:	00000440 	andeq	r0, r0, r0, asr #8
    63a0:	01007207 	tsteq	r0, r7, lsl #4
    63a4:	00010a9d 	muleq	r1, sp, sl
    63a8:	00610700 	rsbeq	r0, r1, r0, lsl #14
    63ac:	01109d01 	tsteq	r0, r1, lsl #26
    63b0:	62070000 	andvs	r0, r7, #0
    63b4:	109d0100 	addsne	r0, sp, r0, lsl #2
    63b8:	0a000001 	beq	63c4 <__Stack_Size+0x5bc4>
    63bc:	9f010063 	svcls	0x00010063
    63c0:	000000a2 	andeq	r0, r0, r2, lsr #1
    63c4:	0100690a 	tsteq	r0, sl, lsl #18
    63c8:	00007ea0 	andeq	r7, r0, r0, lsr #29
    63cc:	6a0a1f00 	bvs	28dfd4 <__Stack_Size+0x28d7d4>
    63d0:	7ea30100 	fdvvcs	f0, f3, f0
    63d4:	00000000 	andeq	r0, r0, r0
    63d8:	03fb0e00 	mvnseq	r0, #0, 28
    63dc:	248c0000 	strcs	r0, [ip], #0
    63e0:	00880800 	addeq	r0, r8, r0, lsl #16
    63e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    63e8:	00000492 	muleq	r0, r2, r4
    63ec:	00040718 	andeq	r0, r4, r8, lsl r7
    63f0:	0f500100 	svceq	0x00500100
    63f4:	00000410 	andeq	r0, r0, r0, lsl r4
    63f8:	0000215f 	andeq	r2, r0, pc, asr r1
    63fc:	0004190f 	andeq	r1, r4, pc, lsl #18
    6400:	00218000 	eoreq	r8, r1, r0
    6404:	04221000 	strteq	r1, [r2], #-0
    6408:	21a10000 			; <UNDEFINED> instruction: 0x21a10000
    640c:	2b100000 	blcs	406414 <__Stack_Size+0x405c14>
    6410:	cb000004 	blgt	6428 <__Stack_Size+0x5c28>
    6414:	20000021 	andcs	r0, r0, r1, lsr #32
    6418:	08002496 	stmdaeq	r0, {r1, r2, r4, r7, sl, sp}
    641c:	0000004a 	andeq	r0, r0, sl, asr #32
    6420:	00043510 	andeq	r3, r4, r0, lsl r5
    6424:	00221900 	eoreq	r1, r2, r0, lsl #18
    6428:	13000000 	movwne	r0, #0
    642c:	000019ab 	andeq	r1, r0, fp, lsr #19
    6430:	0000ba01 	andeq	fp, r0, r1, lsl #20
    6434:	00b80000 	adcseq	r0, r8, r0
    6438:	9c010000 	stcls	0, cr0, [r1], {-0}
    643c:	00000559 	andeq	r0, r0, r9, asr r5
    6440:	0100721e 	tsteq	r0, lr, lsl r2
    6444:	00010aba 			; <UNDEFINED> instruction: 0x00010aba
    6448:	00226800 	eoreq	r6, r2, r0, lsl #16
    644c:	00611e00 	rsbeq	r1, r1, r0, lsl #28
    6450:	0110ba01 	tsteq	r0, r1, lsl #20
    6454:	22940000 	addscs	r0, r4, #0
    6458:	621e0000 	andsvs	r0, lr, #0
    645c:	10ba0100 	adcsne	r0, sl, r0, lsl #2
    6460:	b5000001 	strlt	r0, [r0, #-1]
    6464:	21000022 	tstcs	r0, r2, lsr #32
    6468:	00706d74 	rsbseq	r6, r0, r4, ror sp
    646c:	023dbc01 	eorseq	fp, sp, #256	; 0x100
    6470:	91020000 	mrsls	r0, (UNDEF: 2)
    6474:	03fb2248 	mvnseq	r2, #72, 4	; 0x80000004
    6478:	00000000 	andeq	r0, r0, r0
    647c:	04b80000 	ldrteq	r0, [r8], #0
    6480:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    6484:	00000536 	andeq	r0, r0, r6, lsr r5
    6488:	0004190f 	andeq	r1, r4, pc, lsl #18
    648c:	0022d600 	eoreq	sp, r2, r0, lsl #12
    6490:	04100f00 	ldreq	r0, [r0], #-3840	; 0xf00
    6494:	22f70000 	rscscs	r0, r7, #0
    6498:	070f0000 	streq	r0, [pc, -r0]
    649c:	18000004 	stmdane	r0, {r2}
    64a0:	19000023 	stmdbne	r0, {r0, r1, r5}
    64a4:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    64a8:	00042210 	andeq	r2, r4, r0, lsl r2
    64ac:	00234500 	eoreq	r4, r3, r0, lsl #10
    64b0:	042b1000 	strteq	r1, [fp], #-0
    64b4:	236f0000 	cmncs	pc, #0
    64b8:	00200000 	eoreq	r0, r0, r0
    64bc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    64c0:	10000000 	andne	r0, r0, r0
    64c4:	00000435 	andeq	r0, r0, r5, lsr r4
    64c8:	000023d0 	ldrdeq	r2, [r0], -r0
    64cc:	23000000 	movwcs	r0, #0
    64d0:	0000011b 	andeq	r0, r0, fp, lsl r1
    64d4:	00000000 	andeq	r0, r0, r0
    64d8:	00000026 	andeq	r0, r0, r6, lsr #32
    64dc:	300fbf01 	andcc	fp, pc, r1, lsl #30
    64e0:	1f000001 	svcne	0x00000001
    64e4:	0f000024 	svceq	0x00000024
    64e8:	00000127 	andeq	r0, r0, r7, lsr #2
    64ec:	0000244c 	andeq	r2, r0, ip, asr #8
    64f0:	07060000 	streq	r0, [r6, -r0]
    64f4:	01000016 	tsteq	r0, r6, lsl r0
    64f8:	059301c2 	ldreq	r0, [r3, #450]	; 0x1c2
    64fc:	72070000 	andvc	r0, r7, #0
    6500:	0ac20100 	beq	ff086908 <BootRAM+0xdff70a9>
    6504:	07000001 	streq	r0, [r0, -r1]
    6508:	c2010061 	andgt	r0, r1, #97	; 0x61
    650c:	00000110 	andeq	r0, r0, r0, lsl r1
    6510:	01006207 	tsteq	r0, r7, lsl #4
    6514:	0000a2c2 	andeq	sl, r0, r2, asr #5
    6518:	00630a00 	rsbeq	r0, r3, r0, lsl #20
    651c:	00a2c401 	adceq	ip, r2, r1, lsl #8
    6520:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    6524:	7ec50100 	polvcs	f0, f5, f0
    6528:	00000000 	andeq	r0, r0, r0
    652c:	0005590e 	andeq	r5, r5, lr, lsl #18
    6530:	00000000 	andeq	r0, r0, r0
    6534:	00004000 	andeq	r4, r0, r0
    6538:	d09c0100 	addsle	r0, ip, r0, lsl #2
    653c:	18000005 	stmdane	r0, {r0, r2}
    6540:	00000565 	andeq	r0, r0, r5, ror #10
    6544:	6e185001 	cdpvs	0, 1, cr5, cr8, cr1, {0}
    6548:	01000005 	tsteq	r0, r5
    654c:	05770f51 	ldrbeq	r0, [r7, #-3921]!	; 0xf51
    6550:	246d0000 	strbtcs	r0, [sp], #-0
    6554:	80100000 	andshi	r0, r0, r0
    6558:	8e000005 	cdphi	0, 0, cr0, cr0, cr5, {0}
    655c:	10000024 	andne	r0, r0, r4, lsr #32
    6560:	00000589 	andeq	r0, r0, r9, lsl #11
    6564:	000024bc 			; <UNDEFINED> instruction: 0x000024bc
    6568:	170a1300 	strne	r1, [sl, -r0, lsl #6]
    656c:	d8010000 	stmdale	r1, {}	; <UNPREDICTABLE>
    6570:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
    6574:	000005ea 	andeq	r0, r0, sl, ror #11
    6578:	09e79c01 	stmibeq	r7!, {r0, sl, fp, ip, pc}^
    657c:	72140000 	andsvc	r0, r4, #0
    6580:	0ad80100 	beq	ff606988 <BootRAM+0xe577129>
    6584:	01000001 	tsteq	r0, r1
    6588:	00781e50 	rsbseq	r1, r8, r0, asr lr
    658c:	0110d801 	tsteq	r0, r1, lsl #16
    6590:	250a0000 	strcs	r0, [sl, #-0]
    6594:	73210000 	teqvc	r1, #0
    6598:	3dda0100 	ldfcce	f0, [sl]
    659c:	02000002 	andeq	r0, r0, #2
    65a0:	690a4091 	stmdbvs	sl, {r0, r4, r7, lr}
    65a4:	7edb0100 	cdpvc	1, 13, cr0, cr11, cr0, {0}
    65a8:	22000000 	andcs	r0, r0, #0
    65ac:	000003fb 	strdeq	r0, [r0], -fp
    65b0:	08002518 	stmdaeq	r0, {r3, r4, r8, sl, sp}
    65b4:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    65b8:	066cee01 	strbteq	lr, [ip], -r1, lsl #28
    65bc:	190f0000 	stmdbne	pc, {}	; <UNPREDICTABLE>
    65c0:	2b000004 	blcs	65d8 <__Stack_Size+0x5dd8>
    65c4:	0f000025 	svceq	0x00000025
    65c8:	00000410 	andeq	r0, r0, r0, lsl r4
    65cc:	0000252b 	andeq	r2, r0, fp, lsr #10
    65d0:	0004070f 	andeq	r0, r4, pc, lsl #14
    65d4:	00254c00 	eoreq	r4, r5, r0, lsl #24
    65d8:	04d01900 	ldrbeq	r1, [r0], #2304	; 0x900
    65dc:	22100000 	andscs	r0, r0, #0
    65e0:	79000004 	stmdbvc	r0, {r2}
    65e4:	10000025 	andne	r0, r0, r5, lsr #32
    65e8:	0000042b 	andeq	r0, r0, fp, lsr #8
    65ec:	000025a3 	andeq	r2, r0, r3, lsr #11
    65f0:	00251e20 	eoreq	r1, r5, r0, lsr #28
    65f4:	00004608 	andeq	r4, r0, r8, lsl #12
    65f8:	04351000 	ldrteq	r1, [r5], #-0
    65fc:	26040000 	strcs	r0, [r4], -r0
    6600:	00000000 	andeq	r0, r0, r0
    6604:	03fb2200 	mvnseq	r2, #0, 4
    6608:	25a00000 	strcs	r0, [r0, #0]!
    660c:	04e80800 	strbteq	r0, [r8], #2048	; 0x800
    6610:	ef010000 	svc	0x00010000
    6614:	000006ba 			; <UNDEFINED> instruction: 0x000006ba
    6618:	00041924 	andeq	r1, r4, r4, lsr #18
    661c:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6620:	07240000 	streq	r0, [r4, -r0]!
    6624:	19000004 	stmdbne	r0, {r2}
    6628:	000004e8 	andeq	r0, r0, r8, ror #9
    662c:	00042210 	andeq	r2, r4, r0, lsl r2
    6630:	00265300 	eoreq	r5, r6, r0, lsl #6
    6634:	042b1000 	strteq	r1, [fp], #-0
    6638:	26710000 	ldrbtcs	r0, [r1], -r0
    663c:	a0200000 	eorge	r0, r0, r0
    6640:	44080025 	strmi	r0, [r8], #-37	; 0x25
    6644:	10000000 	andne	r0, r0, r0
    6648:	00000435 	andeq	r0, r0, r5, lsr r4
    664c:	000026b3 			; <UNDEFINED> instruction: 0x000026b3
    6650:	22000000 	andcs	r0, r0, #0
    6654:	000003fb 	strdeq	r0, [r0], -fp
    6658:	08002612 	stmdaeq	r0, {r1, r4, r9, sl, sp}
    665c:	00000500 	andeq	r0, r0, r0, lsl #10
    6660:	0704f301 	streq	pc, [r4, -r1, lsl #6]
    6664:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6668:	24000004 	strcs	r0, [r0], #-4
    666c:	00000410 	andeq	r0, r0, r0, lsl r4
    6670:	00040724 	andeq	r0, r4, r4, lsr #14
    6674:	05001900 	streq	r1, [r0, #-2304]	; 0x900
    6678:	22100000 	andscs	r0, r0, #0
    667c:	2d000004 	stccs	0, cr0, [r0, #-16]
    6680:	10000027 	andne	r0, r0, r7, lsr #32
    6684:	0000042b 	andeq	r0, r0, fp, lsr #8
    6688:	00002757 	andeq	r2, r0, r7, asr r7
    668c:	00051819 	andeq	r1, r5, r9, lsl r8
    6690:	04351000 	ldrteq	r1, [r5], #-0
    6694:	27b80000 	ldrcs	r0, [r8, r0]!
    6698:	00000000 	andeq	r0, r0, r0
    669c:	03fb2500 	mvnseq	r2, #0, 10
    66a0:	26a00000 	strtcs	r0, [r0], r0
    66a4:	00760800 	rsbseq	r0, r6, r0, lsl #16
    66a8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    66ac:	00000756 	andeq	r0, r0, r6, asr r7
    66b0:	00041924 	andeq	r1, r4, r4, lsr #18
    66b4:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    66b8:	07240000 	streq	r0, [r4, -r0]!
    66bc:	20000004 	andcs	r0, r0, r4
    66c0:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
    66c4:	00000076 	andeq	r0, r0, r6, ror r0
    66c8:	00042210 	andeq	r2, r4, r0, lsl r2
    66cc:	00280700 	eoreq	r0, r8, r0, lsl #14
    66d0:	042b1000 	strteq	r1, [fp], #-0
    66d4:	28250000 	stmdacs	r5!, {}	; <UNPREDICTABLE>
    66d8:	a0200000 	eorge	r0, r0, r0
    66dc:	48080026 	stmdami	r8, {r1, r2, r5}
    66e0:	10000000 	andne	r0, r0, r0
    66e4:	00000435 	andeq	r0, r0, r5, lsr r4
    66e8:	00002867 	andeq	r2, r0, r7, ror #16
    66ec:	25000000 	strcs	r0, [r0, #-0]
    66f0:	000003fb 	strdeq	r0, [r0], -fp
    66f4:	08002720 	stmdaeq	r0, {r5, r8, r9, sl, sp}
    66f8:	00000088 	andeq	r0, r0, r8, lsl #1
    66fc:	07a8f801 	streq	pc, [r8, r1, lsl #16]!
    6700:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6704:	24000004 	strcs	r0, [r0], #-4
    6708:	00000410 	andeq	r0, r0, r0, lsl r4
    670c:	00040724 	andeq	r0, r4, r4, lsr #14
    6710:	27202000 	strcs	r2, [r0, -r0]!
    6714:	00880800 	addeq	r0, r8, r0, lsl #16
    6718:	22100000 	andscs	r0, r0, #0
    671c:	e1000004 	tst	r0, r4
    6720:	10000028 	andne	r0, r0, r8, lsr #32
    6724:	0000042b 	andeq	r0, r0, fp, lsr #8
    6728:	000028ff 	strdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    672c:	00272020 	eoreq	r2, r7, r0, lsr #32
    6730:	00004a08 	andeq	r4, r0, r8, lsl #20
    6734:	04351000 	ldrteq	r1, [r5], #-0
    6738:	29540000 	ldmdbcs	r4, {}^	; <UNPREDICTABLE>
    673c:	00000000 	andeq	r0, r0, r0
    6740:	03fb2500 	mvnseq	r2, #0, 10
    6744:	27a80000 	strcs	r0, [r8, r0]!
    6748:	00740800 	rsbseq	r0, r4, r0, lsl #16
    674c:	fb010000 	blx	46756 <__Stack_Size+0x45f56>
    6750:	000007fa 	strdeq	r0, [r0], -sl
    6754:	00041924 	andeq	r1, r4, r4, lsr #18
    6758:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    675c:	07240000 	streq	r0, [r4, -r0]!
    6760:	20000004 	andcs	r0, r0, r4
    6764:	080027a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, sp}
    6768:	00000074 	andeq	r0, r0, r4, ror r0
    676c:	00042210 	andeq	r2, r4, r0, lsl r2
    6770:	0029a300 	eoreq	sl, r9, r0, lsl #6
    6774:	042b1000 	strteq	r1, [fp], #-0
    6778:	29c10000 	stmibcs	r1, {}^	; <UNPREDICTABLE>
    677c:	a8200000 	stmdage	r0!, {}	; <UNPREDICTABLE>
    6780:	46080027 	strmi	r0, [r8], -r7, lsr #32
    6784:	10000000 	andne	r0, r0, r0
    6788:	00000435 	andeq	r0, r0, r5, lsr r4
    678c:	00002a03 	andeq	r2, r0, r3, lsl #20
    6790:	25000000 	strcs	r0, [r0, #-0]
    6794:	000003fb 	strdeq	r0, [r0], -fp
    6798:	0800281c 	stmdaeq	r0, {r2, r3, r4, fp, sp}
    679c:	00000082 	andeq	r0, r0, r2, lsl #1
    67a0:	084cfc01 	stmdaeq	ip, {r0, sl, fp, ip, sp, lr, pc}^
    67a4:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    67a8:	24000004 	strcs	r0, [r0], #-4
    67ac:	00000410 	andeq	r0, r0, r0, lsl r4
    67b0:	00040724 	andeq	r0, r4, r4, lsr #14
    67b4:	281c2000 	ldmdacs	ip, {sp}
    67b8:	00820800 	addeq	r0, r2, r0, lsl #16
    67bc:	22100000 	andscs	r0, r0, #0
    67c0:	7d000004 	stcvc	0, cr0, [r0, #-16]
    67c4:	1000002a 	andne	r0, r0, sl, lsr #32
    67c8:	0000042b 	andeq	r0, r0, fp, lsr #8
    67cc:	00002a9b 	muleq	r0, fp, sl
    67d0:	00281c20 	eoreq	r1, r8, r0, lsr #24
    67d4:	00004808 	andeq	r4, r0, r8, lsl #16
    67d8:	04351000 	ldrteq	r1, [r5], #-0
    67dc:	2af00000 	bcs	ffc067e4 <BootRAM+0xeb76f85>
    67e0:	00000000 	andeq	r0, r0, r0
    67e4:	03fb2500 	mvnseq	r2, #0, 10
    67e8:	289e0000 	ldmcs	lr, {}	; <UNPREDICTABLE>
    67ec:	00740800 	rsbseq	r0, r4, r0, lsl #16
    67f0:	ff010000 			; <UNDEFINED> instruction: 0xff010000
    67f4:	0000089e 	muleq	r0, lr, r8
    67f8:	00041924 	andeq	r1, r4, r4, lsr #18
    67fc:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6800:	07240000 	streq	r0, [r4, -r0]!
    6804:	20000004 	andcs	r0, r0, r4
    6808:	0800289e 	stmdaeq	r0, {r1, r2, r3, r4, r7, fp, sp}
    680c:	00000074 	andeq	r0, r0, r4, ror r0
    6810:	00042210 	andeq	r2, r4, r0, lsl r2
    6814:	002b3f00 	eoreq	r3, fp, r0, lsl #30
    6818:	042b1000 	strteq	r1, [fp], #-0
    681c:	2b5d0000 	blcs	1746824 <__Stack_Size+0x1746024>
    6820:	9e200000 	cdpls	0, 2, cr0, cr0, cr0, {0}
    6824:	46080028 	strmi	r0, [r8], -r8, lsr #32
    6828:	10000000 	andne	r0, r0, r0
    682c:	00000435 	andeq	r0, r0, r5, lsr r4
    6830:	00002b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    6834:	26000000 	strcs	r0, [r0], -r0
    6838:	000003fb 	strdeq	r0, [r0], -fp
    683c:	08002912 	stmdaeq	r0, {r1, r4, r8, fp, sp}
    6840:	00000082 	andeq	r0, r0, r2, lsl #1
    6844:	f1010201 	setend	be
    6848:	24000008 	strcs	r0, [r0], #-8
    684c:	00000419 	andeq	r0, r0, r9, lsl r4
    6850:	00041024 	andeq	r1, r4, r4, lsr #32
    6854:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6858:	12200000 	eorne	r0, r0, #0
    685c:	82080029 	andhi	r0, r8, #41	; 0x29
    6860:	10000000 	andne	r0, r0, r0
    6864:	00000422 	andeq	r0, r0, r2, lsr #8
    6868:	00002c19 	andeq	r2, r0, r9, lsl ip
    686c:	00042b10 	andeq	r2, r4, r0, lsl fp
    6870:	002c3700 	eoreq	r3, ip, r0, lsl #14
    6874:	29122000 	ldmdbcs	r2, {sp}
    6878:	00480800 	subeq	r0, r8, r0, lsl #16
    687c:	35100000 	ldrcc	r0, [r0, #-0]
    6880:	8c000004 	stchi	0, cr0, [r0], {4}
    6884:	0000002c 	andeq	r0, r0, ip, lsr #32
    6888:	fb260000 	blx	986892 <__Stack_Size+0x986092>
    688c:	94000003 	strls	r0, [r0], #-3
    6890:	72080029 	andvc	r0, r8, #41	; 0x29
    6894:	01000000 	mrseq	r0, (UNDEF: 0)
    6898:	09440103 	stmdbeq	r4, {r0, r1, r8}^
    689c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    68a0:	24000004 	strcs	r0, [r0], #-4
    68a4:	00000410 	andeq	r0, r0, r0, lsl r4
    68a8:	00040724 	andeq	r0, r4, r4, lsr #14
    68ac:	29942000 	ldmibcs	r4, {sp}
    68b0:	00720800 	rsbseq	r0, r2, r0, lsl #16
    68b4:	22100000 	andscs	r0, r0, #0
    68b8:	db000004 	blle	68d0 <__Stack_Size+0x60d0>
    68bc:	1000002c 	andne	r0, r0, ip, lsr #32
    68c0:	0000042b 	andeq	r0, r0, fp, lsr #8
    68c4:	00002cf9 	strdeq	r2, [r0], -r9
    68c8:	00299420 	eoreq	r9, r9, r0, lsr #8
    68cc:	00004408 	andeq	r4, r0, r8, lsl #8
    68d0:	04351000 	ldrteq	r1, [r5], #-0
    68d4:	2d3b0000 	ldccs	0, cr0, [fp, #-0]
    68d8:	00000000 	andeq	r0, r0, r0
    68dc:	03fb2600 	mvnseq	r2, #0, 12
    68e0:	2a060000 	bcs	1868e8 <__Stack_Size+0x1860e8>
    68e4:	00820800 	addeq	r0, r2, r0, lsl #16
    68e8:	06010000 	streq	r0, [r1], -r0
    68ec:	00099701 	andeq	r9, r9, r1, lsl #14
    68f0:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    68f4:	10240000 	eorne	r0, r4, r0
    68f8:	24000004 	strcs	r0, [r0], #-4
    68fc:	00000407 	andeq	r0, r0, r7, lsl #8
    6900:	002a0620 	eoreq	r0, sl, r0, lsr #12
    6904:	00008208 	andeq	r8, r0, r8, lsl #4
    6908:	04221000 	strteq	r1, [r2], #-0
    690c:	2db50000 	ldccs	0, cr0, [r5]
    6910:	2b100000 	blcs	406918 <__Stack_Size+0x406118>
    6914:	d3000004 	movwle	r0, #4
    6918:	2000002d 	andcs	r0, r0, sp, lsr #32
    691c:	08002a06 	stmdaeq	r0, {r1, r2, r9, fp, sp}
    6920:	00000048 	andeq	r0, r0, r8, asr #32
    6924:	00043510 	andeq	r3, r4, r0, lsl r5
    6928:	002e2800 	eoreq	r2, lr, r0, lsl #16
    692c:	00000000 	andeq	r0, r0, r0
    6930:	0003fb27 	andeq	pc, r3, r7, lsr #22
    6934:	002a8800 	eoreq	r8, sl, r0, lsl #16
    6938:	00006e08 	andeq	r6, r0, r8, lsl #28
    693c:	01070100 	mrseq	r0, (UNDEF: 23)
    6940:	00041924 	andeq	r1, r4, r4, lsr #18
    6944:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6948:	07240000 	streq	r0, [r4, -r0]!
    694c:	20000004 	andcs	r0, r0, r4
    6950:	08002a88 	stmdaeq	r0, {r3, r7, r9, fp, sp}
    6954:	0000006e 	andeq	r0, r0, lr, rrx
    6958:	00042210 	andeq	r2, r4, r0, lsl r2
    695c:	002e7700 	eoreq	r7, lr, r0, lsl #14
    6960:	042b1000 	strteq	r1, [fp], #-0
    6964:	2e950000 	cdpcs	0, 9, cr0, cr5, cr0, {0}
    6968:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
    696c:	4408002a 	strmi	r0, [r8], #-42	; 0x2a
    6970:	10000000 	andne	r0, r0, r0
    6974:	00000435 	andeq	r0, r0, r5, lsr r4
    6978:	00002ed7 	ldrdeq	r2, [r0], -r7
    697c:	00000000 	andeq	r0, r0, r0
    6980:	0019a028 	andseq	sl, r9, r8, lsr #32
    6984:	010a0100 	mrseq	r0, (UNDEF: 26)
    6988:	00000000 	andeq	r0, r0, r0
    698c:	00000026 	andeq	r0, r0, r6, lsr #32
    6990:	0a659c01 	beq	196d99c <__Stack_Size+0x196d19c>
    6994:	72290000 	eorvc	r0, r9, #0
    6998:	010a0100 	mrseq	r0, (UNDEF: 26)
    699c:	0000010a 	andeq	r0, r0, sl, lsl #2
    69a0:	00002f51 	andeq	r2, r0, r1, asr pc
    69a4:	01007829 	tsteq	r0, r9, lsr #16
    69a8:	0110010a 	tsteq	r0, sl, lsl #2
    69ac:	2f6f0000 	svccs	0x006f0000
    69b0:	742a0000 	strtvc	r0, [sl], #-0
    69b4:	0100706d 	tsteq	r0, sp, rrx
    69b8:	023d010c 	eorseq	r0, sp, #12, 2
    69bc:	91020000 	mrsls	r0, (UNDEF: 2)
    69c0:	011b2650 	tsteq	fp, r0, asr r6
    69c4:	00000000 	andeq	r0, r0, r0
    69c8:	00160000 	andseq	r0, r6, r0
    69cc:	0f010000 	svceq	0x00010000
    69d0:	000a4d01 	andeq	r4, sl, r1, lsl #26
    69d4:	01300f00 	teqeq	r0, r0, lsl #30
    69d8:	2f900000 	svccs	0x00900000
    69dc:	27180000 	ldrcs	r0, [r8, -r0]
    69e0:	01000001 	tsteq	r0, r1
    69e4:	002b0055 	eoreq	r0, fp, r5, asr r0
    69e8:	d0000000 	andle	r0, r0, r0
    69ec:	12000005 	andne	r0, r0, #5
    69f0:	f3035101 	vrhadd.u8	d5, d3, d1
    69f4:	01125101 	tsteq	r2, r1, lsl #2
    69f8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    69fc:	892c0000 	stmdbhi	ip!, {}	; <UNPREDICTABLE>
    6a00:	01000019 	tsteq	r0, r9, lsl r0
    6a04:	9b010115 	blls	46e60 <__Stack_Size+0x46660>
    6a08:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    6a0c:	15010072 	strne	r0, [r1, #-114]	; 0x72
    6a10:	00010a01 	andeq	r0, r1, r1, lsl #20
    6a14:	00782d00 	rsbseq	r2, r8, r0, lsl #26
    6a18:	10011501 	andne	r1, r1, r1, lsl #10
    6a1c:	2d000001 	stccs	0, cr0, [r0, #-4]
    6a20:	15010073 	strne	r0, [r1, #-115]	; 0x73
    6a24:	00010a01 	andeq	r0, r1, r1, lsl #20
    6a28:	00692e00 	rsbeq	r2, r9, r0, lsl #28
    6a2c:	7e011701 	cdpvc	7, 0, cr1, cr1, cr1, {0}
    6a30:	00000000 	andeq	r0, r0, r0
    6a34:	0017e328 	andseq	lr, r7, r8, lsr #6
    6a38:	01300100 	teqeq	r0, r0, lsl #2
    6a3c:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
    6a40:	00000634 	andeq	r0, r0, r4, lsr r6
    6a44:	0f619c01 	svceq	0x00619c01
    6a48:	72290000 	eorvc	r0, r9, #0
    6a4c:	01300100 	teqeq	r0, r0, lsl #2
    6a50:	0000010a 	andeq	r0, r0, sl, lsl #2
    6a54:	00002fb0 			; <UNDEFINED> instruction: 0x00002fb0
    6a58:	01006129 	tsteq	r0, r9, lsr #2
    6a5c:	01100130 	tsteq	r0, r0, lsr r1
    6a60:	2fdd0000 	svccs	0x00dd0000
    6a64:	762a0000 	strtvc	r0, [sl], -r0
    6a68:	01320100 	teqeq	r2, r0, lsl #2
    6a6c:	0000023d 	andeq	r0, r0, sp, lsr r2
    6a70:	7ee09103 	urdvcs	f1, f3
    6a74:	0100692a 	tsteq	r0, sl, lsr #18
    6a78:	023d0133 	eorseq	r0, sp, #-1073741812	; 0xc000000c
    6a7c:	91030000 	mrsls	r0, (UNDEF: 3)
    6a80:	782a7f80 	stmdavc	sl!, {r7, r8, r9, sl, fp, ip, sp, lr}
    6a84:	01340100 	teqeq	r4, r0, lsl #2
    6a88:	0000023d 	andeq	r0, r0, sp, lsr r2
    6a8c:	7fa09103 	svcvc	0x00a09103
    6a90:	0100792a 	tsteq	r0, sl, lsr #18
    6a94:	023d0135 	eorseq	r0, sp, #1073741837	; 0x4000000d
    6a98:	91020000 	mrsls	r0, (UNDEF: 2)
    6a9c:	05592f40 	ldrbeq	r2, [r9, #-3904]	; 0xf40
    6aa0:	2b040000 	blcs	106aa8 <__Stack_Size+0x1062a8>
    6aa4:	05300800 	ldreq	r0, [r0, #-2048]!	; 0x800
    6aa8:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    6aac:	000b4901 	andeq	r4, fp, r1, lsl #18
    6ab0:	05773000 	ldrbeq	r3, [r7, #-0]!
    6ab4:	0f020000 	svceq	0x00020000
    6ab8:	0000056e 	andeq	r0, r0, lr, ror #10
    6abc:	00003015 	andeq	r3, r0, r5, lsl r0
    6ac0:	0005650f 	andeq	r6, r5, pc, lsl #10
    6ac4:	00304d00 	eorseq	r4, r0, r0, lsl #26
    6ac8:	05301900 	ldreq	r1, [r0, #-2304]!	; 0x900
    6acc:	80100000 	andshi	r0, r0, r0
    6ad0:	7c000005 	stcvc	0, cr0, [r0], {5}
    6ad4:	10000030 	andne	r0, r0, r0, lsr r0
    6ad8:	00000589 	andeq	r0, r0, r9, lsl #11
    6adc:	000030aa 	andeq	r3, r0, sl, lsr #1
    6ae0:	65260000 	strvs	r0, [r6, #-0]!
    6ae4:	5400000a 	strpl	r0, [r0], #-10
    6ae8:	9408002b 	strls	r0, [r8], #-43	; 0x2b
    6aec:	01000003 	tsteq	r0, r3
    6af0:	0db10139 	ldfeqs	f0, [r1, #228]!	; 0xe4
    6af4:	86240000 	strthi	r0, [r4], -r0
    6af8:	2400000a 	strcs	r0, [r0], #-10
    6afc:	00000a7c 	andeq	r0, r0, ip, ror sl
    6b00:	000a7224 	andeq	r7, sl, r4, lsr #4
    6b04:	2b542000 	blcs	150eb0c <__Stack_Size+0x150e30c>
    6b08:	03940800 	orrseq	r0, r4, #0, 16
    6b0c:	90310000 	eorsls	r0, r1, r0
    6b10:	2600000a 	strcs	r0, [r0], -sl
    6b14:	000003fb 	strdeq	r0, [r0], -fp
    6b18:	08002b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, sp}
    6b1c:	0000007a 	andeq	r0, r0, sl, ror r0
    6b20:	cd011f01 	stcgt	15, cr1, [r1, #-4]
    6b24:	2400000b 	strcs	r0, [r0], #-11
    6b28:	00000419 	andeq	r0, r0, r9, lsl r4
    6b2c:	00041024 	andeq	r1, r4, r4, lsr #32
    6b30:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6b34:	54200000 	strtpl	r0, [r0], #-0
    6b38:	7a08002b 	bvc	206bec <__Stack_Size+0x2063ec>
    6b3c:	10000000 	andne	r0, r0, r0
    6b40:	00000422 	andeq	r0, r0, r2, lsr #8
    6b44:	0000310b 	andeq	r3, r0, fp, lsl #2
    6b48:	00042b10 	andeq	r2, r4, r0, lsl fp
    6b4c:	00312900 	eorseq	r2, r1, r0, lsl #18
    6b50:	2b542000 	blcs	150eb58 <__Stack_Size+0x150e358>
    6b54:	00420800 	subeq	r0, r2, r0, lsl #16
    6b58:	35100000 	ldrcc	r0, [r0, #-0]
    6b5c:	81000004 	tsthi	r0, r4
    6b60:	00000031 	andeq	r0, r0, r1, lsr r0
    6b64:	fb2f0000 	blx	bc6b6e <__Stack_Size+0xbc636e>
    6b68:	ce000003 	cdpgt	0, 0, cr0, cr0, cr3, {0}
    6b6c:	4808002b 	stmdami	r8, {r0, r1, r3, r5}
    6b70:	01000005 	tsteq	r0, r5
    6b74:	0c1c0120 	ldfeqs	f0, [ip], {32}
    6b78:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6b7c:	24000004 	strcs	r0, [r0], #-4
    6b80:	00000410 	andeq	r0, r0, r0, lsl r4
    6b84:	00040724 	andeq	r0, r4, r4, lsr #14
    6b88:	05481900 	strbeq	r1, [r8, #-2304]	; 0x900
    6b8c:	22100000 	andscs	r0, r0, #0
    6b90:	fb000004 	blx	6baa <__Stack_Size+0x63aa>
    6b94:	10000031 	andne	r0, r0, r1, lsr r0
    6b98:	0000042b 	andeq	r0, r0, fp, lsr #8
    6b9c:	00003219 	andeq	r3, r0, r9, lsl r2
    6ba0:	002bce20 	eoreq	ip, fp, r0, lsr #28
    6ba4:	00004408 	andeq	r4, r0, r8, lsl #8
    6ba8:	04351000 	ldrteq	r1, [r5], #-0
    6bac:	326e0000 	rsbcc	r0, lr, #0
    6bb0:	00000000 	andeq	r0, r0, r0
    6bb4:	03fb2f00 	mvnseq	r2, #0, 30
    6bb8:	2c520000 	mracs	r0, r2, acc0
    6bbc:	05600800 	strbeq	r0, [r0, #-2048]!	; 0x800
    6bc0:	24010000 	strcs	r0, [r1], #-0
    6bc4:	000c6701 	andeq	r6, ip, r1, lsl #14
    6bc8:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6bcc:	10240000 	eorne	r0, r4, r0
    6bd0:	24000004 	strcs	r0, [r0], #-4
    6bd4:	00000407 	andeq	r0, r0, r7, lsl #8
    6bd8:	00056019 	andeq	r6, r5, r9, lsl r0
    6bdc:	04221000 	strteq	r1, [r2], #-0
    6be0:	32eb0000 	rsccc	r0, fp, #0
    6be4:	2b100000 	blcs	406bec <__Stack_Size+0x4063ec>
    6be8:	15000004 	strne	r0, [r0, #-4]
    6bec:	19000033 	stmdbne	r0, {r0, r1, r4, r5}
    6bf0:	00000578 	andeq	r0, r0, r8, ror r5
    6bf4:	00043510 	andeq	r3, r4, r0, lsl r5
    6bf8:	00337900 	eorseq	r7, r3, r0, lsl #18
    6bfc:	00000000 	andeq	r0, r0, r0
    6c00:	0003fb26 	andeq	pc, r3, r6, lsr #22
    6c04:	002ce200 	eoreq	lr, ip, r0, lsl #4
    6c08:	00008208 	andeq	r8, r0, r8, lsl #4
    6c0c:	01250100 	teqeq	r5, r0, lsl #2
    6c10:	00000cba 			; <UNDEFINED> instruction: 0x00000cba
    6c14:	00041924 	andeq	r1, r4, r4, lsr #18
    6c18:	04102400 	ldreq	r2, [r0], #-1024	; 0x400
    6c1c:	07240000 	streq	r0, [r4, -r0]!
    6c20:	20000004 	andcs	r0, r0, r4
    6c24:	08002ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, sp}
    6c28:	00000082 	andeq	r0, r0, r2, lsl #1
    6c2c:	00042210 	andeq	r2, r4, r0, lsl r2
    6c30:	0033f300 	eorseq	pc, r3, r0, lsl #6
    6c34:	042b1000 	strteq	r1, [fp], #-0
    6c38:	34110000 	ldrcc	r0, [r1], #-0
    6c3c:	e2200000 	eor	r0, r0, #0
    6c40:	4a08002c 	bmi	206cf8 <__Stack_Size+0x2064f8>
    6c44:	10000000 	andne	r0, r0, r0
    6c48:	00000435 	andeq	r0, r0, r5, lsr r4
    6c4c:	00003466 	andeq	r3, r0, r6, ror #8
    6c50:	26000000 	strcs	r0, [r0], -r0
    6c54:	000003fb 	strdeq	r0, [r0], -fp
    6c58:	08002d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, sp}
    6c5c:	0000007c 	andeq	r0, r0, ip, ror r0
    6c60:	0d012901 	stceq	9, cr2, [r1, #-4]
    6c64:	2400000d 	strcs	r0, [r0], #-13
    6c68:	00000419 	andeq	r0, r0, r9, lsl r4
    6c6c:	00041024 	andeq	r1, r4, r4, lsr #32
    6c70:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6c74:	76200000 	strtvc	r0, [r0], -r0
    6c78:	7c08002d 	stcvc	0, cr0, [r8], {45}	; 0x2d
    6c7c:	10000000 	andne	r0, r0, r0
    6c80:	00000422 	andeq	r0, r0, r2, lsr #8
    6c84:	000034e3 	andeq	r3, r0, r3, ror #9
    6c88:	00042b10 	andeq	r2, r4, r0, lsl fp
    6c8c:	00350100 	eorseq	r0, r5, r0, lsl #2
    6c90:	2d762000 	ldclcs	0, cr2, [r6, #-0]
    6c94:	00460800 	subeq	r0, r6, r0, lsl #16
    6c98:	35100000 	ldrcc	r0, [r0, #-0]
    6c9c:	59000004 	stmdbpl	r0, {r2}
    6ca0:	00000035 	andeq	r0, r0, r5, lsr r0
    6ca4:	fb260000 	blx	986cae <__Stack_Size+0x9864ae>
    6ca8:	f2000003 	vhadd.s8	d0, d0, d3
    6cac:	7e08002d 	cdpvc	0, 0, cr0, cr8, cr13, {1}
    6cb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cb4:	0d60012c 	stfeqe	f0, [r0, #-176]!	; 0xffffff50
    6cb8:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6cbc:	24000004 	strcs	r0, [r0], #-4
    6cc0:	00000410 	andeq	r0, r0, r0, lsl r4
    6cc4:	00040724 	andeq	r0, r4, r4, lsr #14
    6cc8:	2df22000 	ldclcs	0, cr2, [r2]
    6ccc:	007e0800 	rsbseq	r0, lr, r0, lsl #16
    6cd0:	22100000 	andscs	r0, r0, #0
    6cd4:	d3000004 	movwle	r0, #4
    6cd8:	10000035 	andne	r0, r0, r5, lsr r0
    6cdc:	0000042b 	andeq	r0, r0, fp, lsr #8
    6ce0:	000035f1 	strdeq	r3, [r0], -r1
    6ce4:	002df220 	eoreq	pc, sp, r0, lsr #4
    6ce8:	00004608 	andeq	r4, r0, r8, lsl #12
    6cec:	04351000 	ldrteq	r1, [r5], #-0
    6cf0:	36460000 	strbcc	r0, [r6], -r0
    6cf4:	00000000 	andeq	r0, r0, r0
    6cf8:	03fb2700 	mvnseq	r2, #0, 14
    6cfc:	2e700000 	cdpcs	0, 7, cr0, cr0, cr0, {0}
    6d00:	00780800 	rsbseq	r0, r8, r0, lsl #16
    6d04:	2d010000 	stccs	0, cr0, [r1, #-0]
    6d08:	04192401 	ldreq	r2, [r9], #-1025	; 0x401
    6d0c:	10240000 	eorne	r0, r4, r0
    6d10:	24000004 	strcs	r0, [r0], #-4
    6d14:	00000407 	andeq	r0, r0, r7, lsl #8
    6d18:	002e7020 	eoreq	r7, lr, r0, lsr #32
    6d1c:	00007808 	andeq	r7, r0, r8, lsl #16
    6d20:	04221000 	strteq	r1, [r2], #-0
    6d24:	36c30000 	strbcc	r0, [r3], r0
    6d28:	2b100000 	blcs	406d30 <__Stack_Size+0x406530>
    6d2c:	e1000004 	tst	r0, r4
    6d30:	20000036 	andcs	r0, r0, r6, lsr r0
    6d34:	08002e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp, sp}
    6d38:	00000042 	andeq	r0, r0, r2, asr #32
    6d3c:	00043510 	andeq	r3, r4, r0, lsl r5
    6d40:	00373900 	eorseq	r3, r7, r0, lsl #18
    6d44:	00000000 	andeq	r0, r0, r0
    6d48:	fb260000 	blx	986d52 <__Stack_Size+0x986552>
    6d4c:	e8000003 	stmda	r0, {r0, r1}
    6d50:	8008002e 	andhi	r0, r8, lr, lsr #32
    6d54:	01000000 	mrseq	r0, (UNDEF: 0)
    6d58:	0e04013c 	mcreq	1, 0, r0, cr4, cr12, {1}
    6d5c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    6d60:	24000004 	strcs	r0, [r0], #-4
    6d64:	00000410 	andeq	r0, r0, r0, lsl r4
    6d68:	00040724 	andeq	r0, r4, r4, lsr #14
    6d6c:	2ee82000 	cdpcs	0, 14, cr2, cr8, cr0, {0}
    6d70:	00800800 	addeq	r0, r0, r0, lsl #16
    6d74:	22100000 	andscs	r0, r0, #0
    6d78:	b3000004 	movwlt	r0, #4
    6d7c:	10000037 	andne	r0, r0, r7, lsr r0
    6d80:	0000042b 	andeq	r0, r0, fp, lsr #8
    6d84:	000037d1 	ldrdeq	r3, [r0], -r1
    6d88:	002ee820 	eoreq	lr, lr, r0, lsr #16
    6d8c:	00004608 	andeq	r4, r0, r8, lsl #12
    6d90:	04351000 	ldrteq	r1, [r5], #-0
    6d94:	38260000 	stmdacc	r6!, {}	; <UNPREDICTABLE>
    6d98:	00000000 	andeq	r0, r0, r0
    6d9c:	03fb2600 	mvnseq	r2, #0, 12
    6da0:	2f680000 	svccs	0x00680000
    6da4:	00700800 	rsbseq	r0, r0, r0, lsl #16
    6da8:	3d010000 	stccc	0, cr0, [r1, #-0]
    6dac:	000e5701 	andeq	r5, lr, r1, lsl #14
    6db0:	04192400 	ldreq	r2, [r9], #-1024	; 0x400
    6db4:	10240000 	eorne	r0, r4, r0
    6db8:	24000004 	strcs	r0, [r0], #-4
    6dbc:	00000407 	andeq	r0, r0, r7, lsl #8
    6dc0:	002f6820 	eoreq	r6, pc, r0, lsr #16
    6dc4:	00007008 	andeq	r7, r0, r8
    6dc8:	04221000 	strteq	r1, [r2], #-0
    6dcc:	38a30000 	stmiacc	r3!, {}	; <UNPREDICTABLE>
    6dd0:	2b100000 	blcs	406dd8 <__Stack_Size+0x4065d8>
    6dd4:	c1000004 	tstgt	r0, r4
    6dd8:	20000038 	andcs	r0, r0, r8, lsr r0
    6ddc:	08002f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, sp}
    6de0:	00000040 	andeq	r0, r0, r0, asr #32
    6de4:	00043510 	andeq	r3, r4, r0, lsl r5
    6de8:	00391800 	eorseq	r1, r9, r0, lsl #16
    6dec:	00000000 	andeq	r0, r0, r0
    6df0:	00013a26 	andeq	r3, r1, r6, lsr #20
    6df4:	002fd800 	eoreq	sp, pc, r0, lsl #16
    6df8:	00001408 	andeq	r1, r0, r8, lsl #8
    6dfc:	013e0100 	teqeq	lr, r0, lsl #2
    6e00:	00000e8a 	andeq	r0, r0, sl, lsl #29
    6e04:	00014f30 	andeq	r4, r1, r0, lsr pc
    6e08:	46240000 	strtmi	r0, [r4], -r0
    6e0c:	20000001 	andcs	r0, r0, r1
    6e10:	08002fd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, fp, sp}
    6e14:	00000014 	andeq	r0, r0, r4, lsl r0
    6e18:	00015810 	andeq	r5, r1, r0, lsl r8
    6e1c:	00399200 	eorseq	r9, r9, r0, lsl #4
    6e20:	2f000000 	svccs	0x00000000
    6e24:	0000033a 	andeq	r0, r0, sl, lsr r3
    6e28:	08002fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp}
    6e2c:	00000590 	muleq	r0, r0, r5
    6e30:	c6013f01 	strgt	r3, [r1], -r1, lsl #30
    6e34:	2400000e 	strcs	r0, [r0], #-14
    6e38:	00000358 	andeq	r0, r0, r8, asr r3
    6e3c:	00034f24 	andeq	r4, r3, r4, lsr #30
    6e40:	03462400 	movteq	r2, #25600	; 0x6400
    6e44:	90190000 	andsls	r0, r9, r0
    6e48:	10000005 	andne	r0, r0, r5
    6e4c:	00000361 	andeq	r0, r0, r1, ror #6
    6e50:	000039b2 			; <UNDEFINED> instruction: 0x000039b2
    6e54:	00036a10 	andeq	r6, r3, r0, lsl sl
    6e58:	0039db00 	eorseq	sp, r9, r0, lsl #22
    6e5c:	2f000000 	svccs	0x00000000
    6e60:	000003fb 	strdeq	r0, [r0], -fp
    6e64:	08003036 	stmdaeq	r0, {r1, r2, r4, r5, ip, sp}
    6e68:	000005a8 	andeq	r0, r0, r8, lsr #11
    6e6c:	11014201 	tstne	r1, r1, lsl #4
    6e70:	2400000f 	strcs	r0, [r0], #-15
    6e74:	00000419 	andeq	r0, r0, r9, lsl r4
    6e78:	00041024 	andeq	r1, r4, r4, lsr #32
    6e7c:	04072400 	streq	r2, [r7], #-1024	; 0x400
    6e80:	a8190000 	ldmdage	r9, {}	; <UNPREDICTABLE>
    6e84:	10000005 	andne	r0, r0, r5
    6e88:	00000422 	andeq	r0, r0, r2, lsr #8
    6e8c:	00003a3e 	andeq	r3, r0, lr, lsr sl
    6e90:	00042b10 	andeq	r2, r4, r0, lsl fp
    6e94:	003a5c00 	eorseq	r5, sl, r0, lsl #24
    6e98:	05c01900 	strbeq	r1, [r0, #2304]	; 0x900
    6e9c:	35100000 	ldrcc	r0, [r0, #-0]
    6ea0:	b1000004 	tstlt	r0, r4
    6ea4:	0000003a 	andeq	r0, r0, sl, lsr r0
    6ea8:	fb270000 	blx	9c6eb2 <__Stack_Size+0x9c66b2>
    6eac:	bc000003 	stclt	0, cr0, [r0], {3}
    6eb0:	70080030 	andvc	r0, r8, r0, lsr r0
    6eb4:	01000000 	mrseq	r0, (UNDEF: 0)
    6eb8:	19240143 	stmdbne	r4!, {r0, r1, r6, r8}
    6ebc:	24000004 	strcs	r0, [r0], #-4
    6ec0:	00000410 	andeq	r0, r0, r0, lsl r4
    6ec4:	00040724 	andeq	r0, r4, r4, lsr #14
    6ec8:	30bc2000 	adcscc	r2, ip, r0
    6ecc:	00700800 	rsbseq	r0, r0, r0, lsl #16
    6ed0:	22100000 	andscs	r0, r0, #0
    6ed4:	2e000004 	cdpcs	0, 0, cr0, cr0, cr4, {0}
    6ed8:	1000003b 	andne	r0, r0, fp, lsr r0
    6edc:	0000042b 	andeq	r0, r0, fp, lsr #8
    6ee0:	00003b4c 	andeq	r3, r0, ip, asr #22
    6ee4:	0030bc20 	eorseq	fp, r0, r0, lsr #24
    6ee8:	00004208 	andeq	r4, r0, r8, lsl #4
    6eec:	04351000 	ldrteq	r1, [r5], #-0
    6ef0:	3b8e0000 	blcc	fe386ef8 <BootRAM+0xd2f7699>
    6ef4:	00000000 	andeq	r0, r0, r0
    6ef8:	7d320000 	ldcvc	0, cr0, [r2, #-0]
    6efc:	01000019 	tsteq	r0, r9, lsl r0
    6f00:	000f7209 	andeq	r7, pc, r9, lsl #4
    6f04:	00030500 	andeq	r0, r3, r0, lsl #10
    6f08:	0c000000 	stceq	0, cr0, [r0], {-0}
    6f0c:	0000023d 	andeq	r0, r0, sp, lsr r2
    6f10:	00161932 	andseq	r1, r6, r2, lsr r9
    6f14:	880a0100 	stmdahi	sl, {r8}
    6f18:	0500000f 	streq	r0, [r0, #-15]
    6f1c:	0078b403 	rsbseq	fp, r8, r3, lsl #8
    6f20:	023d0c08 	eorseq	r0, sp, #8, 24	; 0x800
    6f24:	0c330000 	ldceq	0, cr0, [r3], #-0
    6f28:	b400000c 	strlt	r0, [r0], #-12
    6f2c:	34000000 	strcc	r0, [r0], #-0
    6f30:	000000b4 	strheq	r0, [r0], -r4
    6f34:	00007e34 	andeq	r7, r0, r4, lsr lr
    6f38:	00ad3400 	adceq	r3, sp, r0, lsl #8
    6f3c:	00000000 	andeq	r0, r0, r0
    6f40:	00000d70 	andeq	r0, r0, r0, ror sp
    6f44:	17c00004 	strbne	r0, [r0, r4]
    6f48:	01040000 	mrseq	r0, (UNDEF: 4)
    6f4c:	00001636 	andeq	r1, r0, r6, lsr r6
    6f50:	001a7301 	andseq	r7, sl, r1, lsl #6
    6f54:	00089300 	andeq	r9, r8, r0, lsl #6
    6f58:	0007b000 	andeq	fp, r7, r0
    6f5c:	00000000 	andeq	r0, r0, r0
    6f60:	001f7900 	andseq	r7, pc, r0, lsl #18
    6f64:	06010200 	streq	r0, [r1], -r0, lsl #4
    6f68:	0000081a 	andeq	r0, r0, sl, lsl r8
    6f6c:	000c3603 	andeq	r3, ip, r3, lsl #12
    6f70:	371c0300 	ldrcc	r0, [ip, -r0, lsl #6]
    6f74:	02000000 	andeq	r0, r0, #0
    6f78:	08180801 	ldmdaeq	r8, {r0, fp}
    6f7c:	02020000 	andeq	r0, r2, #0
    6f80:	0006fc05 	andeq	pc, r6, r5, lsl #24
    6f84:	0b670300 	bleq	19c7b8c <__Stack_Size+0x19c738c>
    6f88:	26030000 	strcs	r0, [r3], -r0
    6f8c:	00000050 	andeq	r0, r0, r0, asr r0
    6f90:	49070202 	stmdbmi	r7, {r1, r9}
    6f94:	02000009 	andeq	r0, r0, #9
    6f98:	04da0504 	ldrbeq	r0, [sl], #1284	; 0x504
    6f9c:	4e030000 	cdpmi	0, 0, cr0, cr3, cr0, {0}
    6fa0:	0300000b 	movweq	r0, #11
    6fa4:	00006938 	andeq	r6, r0, r8, lsr r9
    6fa8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6fac:	00000252 	andeq	r0, r0, r2, asr r2
    6fb0:	d5050802 	strle	r0, [r5, #-2050]	; 0x802
    6fb4:	02000004 	andeq	r0, r0, #4
    6fb8:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    6fbc:	04040000 	streq	r0, [r4], #-0
    6fc0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0x905
    6fc4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6fc8:	00000257 	andeq	r0, r0, r7, asr r2
    6fcc:	000c3803 	andeq	r3, ip, r3, lsl #16
    6fd0:	2c2a0400 	cfstrscs	mvf0, [sl], #-0
    6fd4:	03000000 	movweq	r0, #0
    6fd8:	00000b69 	andeq	r0, r0, r9, ror #22
    6fdc:	00453604 	subeq	r3, r5, r4, lsl #12
    6fe0:	50030000 	andpl	r0, r3, r0
    6fe4:	0400000b 	streq	r0, [r0], #-11
    6fe8:	00005e42 	andeq	r5, r0, r2, asr #28
    6fec:	0b1f0300 	bleq	7c7bf4 <__Stack_Size+0x7c73f4>
    6ff0:	d4050000 	strle	r0, [r5], #-0
    6ff4:	00000085 	andeq	r0, r0, r5, lsl #1
    6ff8:	8b070402 	blhi	1c8008 <__Stack_Size+0x1c7808>
    6ffc:	05000007 	streq	r0, [r0, #-7]
    7000:	08010204 	stmdaeq	r1, {r2, r9}
    7004:	00000821 	andeq	r0, r0, r1, lsr #16
    7008:	001a0606 	andseq	r0, sl, r6, lsl #12
    700c:	018f0100 	orreq	r0, pc, r0, lsl #2
    7010:	00000115 	andeq	r0, r0, r5, lsl r1
    7014:	74736407 	ldrbtvc	r6, [r3], #-1031	; 0x407
    7018:	158f0100 	strne	r0, [pc, #256]	; 7120 <__Stack_Size+0x6920>
    701c:	08000001 	stmdaeq	r0, {r0}
    7020:	00001984 	andeq	r1, r0, r4, lsl #19
    7024:	011b9001 	tsteq	fp, r1
    7028:	6f070000 	svcvs	0x00070000
    702c:	0100656e 	tsteq	r0, lr, ror #10
    7030:	00011b90 	muleq	r1, r0, fp
    7034:	19b60800 	ldmibne	r6!, {fp}
    7038:	91010000 	mrsls	r0, (UNDEF: 1)
    703c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7040:	000f1809 	andeq	r1, pc, r9, lsl #16
    7044:	21930100 	orrscs	r0, r3, r0, lsl #2
    7048:	0a000001 	beq	7054 <__Stack_Size+0x6854>
    704c:	94010069 	strls	r0, [r1], #-105	; 0x69
    7050:	0000007e 	andeq	r0, r0, lr, ror r0
    7054:	8c040b00 	stchi	11, cr0, [r4], {-0}
    7058:	0b000000 	bleq	7060 <__Stack_Size+0x6860>
    705c:	00012104 	andeq	r2, r1, r4, lsl #2
    7060:	008c0c00 	addeq	r0, ip, r0, lsl #24
    7064:	1f0d0000 	svcne	0x000d0000
    7068:	0100001a 	tsteq	r0, sl, lsl r0
    706c:	00007e56 	andeq	r7, r0, r6, asr lr
    7070:	01490300 	mrseq	r0, (UNDEF: 121)
    7074:	61070000 	mrsvs	r0, (UNDEF: 7)
    7078:	7e560100 	rdfvcs	f0, f6, f0
    707c:	07000000 	streq	r0, [r0, -r0]
    7080:	56010062 	strpl	r0, [r1], -r2, rrx
    7084:	0000007e 	andeq	r0, r0, lr, ror r0
    7088:	19f90e00 	ldmibne	r9!, {r9, sl, fp}^
    708c:	3d010000 	stccc	0, cr0, [r1, #-0]
    7090:	00017a01 	andeq	r7, r1, r1, lsl #20
    7094:	00780700 	rsbseq	r0, r8, r0, lsl #14
    7098:	01153d01 	tsteq	r5, r1, lsl #26
    709c:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    70a0:	7e3d0100 	rsfvce	f0, f5, f0
    70a4:	0a000000 	beq	70ac <__Stack_Size+0x68ac>
    70a8:	3f010063 	svccc	0x00010063
    70ac:	00000097 	muleq	r0, r7, r0
    70b0:	0100690a 	tsteq	r0, sl, lsl #18
    70b4:	00007e40 	andeq	r7, r0, r0, asr #28
    70b8:	670e0000 	strvs	r0, [lr, -r0]
    70bc:	0200001a 	andeq	r0, r0, #26
    70c0:	01990326 	orrseq	r0, r9, r6, lsr #6
    70c4:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    70c8:	15260200 	strne	r0, [r6, #-512]!	; 0x200
    70cc:	07000001 	streq	r0, [r0, -r1]
    70d0:	26020061 	strcs	r0, [r2], -r1, rrx
    70d4:	0000011b 	andeq	r0, r0, fp, lsl r1
    70d8:	1aa10e00 	bne	fe84a8e0 <BootRAM+0xd7bb081>
    70dc:	0c010000 	stceq	0, cr0, [r1], {-0}
    70e0:	0001ca01 	andeq	ip, r1, r1, lsl #20
    70e4:	00780700 	rsbseq	r0, r8, r0, lsl #14
    70e8:	01150c01 	tsteq	r5, r1, lsl #24
    70ec:	70070000 	andvc	r0, r7, r0
    70f0:	1b0c0100 	blne	3074f8 <__Stack_Size+0x306cf8>
    70f4:	0a000001 	beq	7100 <__Stack_Size+0x6900>
    70f8:	0e010063 	cdpeq	0, 0, cr0, cr1, cr3, {3}
    70fc:	00000097 	muleq	r0, r7, r0
    7100:	0100690a 	tsteq	r0, sl, lsl #18
    7104:	00007e0f 	andeq	r7, r0, pc, lsl #28
    7108:	5b060000 	blpl	187110 <__Stack_Size+0x186910>
    710c:	0100001a 	tsteq	r0, sl, lsl r0
    7110:	01f20149 	mvnseq	r0, r9, asr #2
    7114:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    7118:	15490100 	strbne	r0, [r9, #-256]	; 0x100
    711c:	07000001 	streq	r0, [r0, -r1]
    7120:	49010063 	stmdbmi	r1, {r0, r1, r5, r6}
    7124:	000000a2 	andeq	r0, r0, r2, lsr #1
    7128:	0100690a 	tsteq	r0, sl, lsl #18
    712c:	00007e4b 	andeq	r7, r0, fp, asr #28
    7130:	ca0f0000 	bgt	3c7138 <__Stack_Size+0x3c6938>
    7134:	00000001 	andeq	r0, r0, r1
    7138:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    713c:	01000000 	mrseq	r0, (UNDEF: 0)
    7140:	00023e9c 	muleq	r2, ip, lr
    7144:	01d61000 	bicseq	r1, r6, r0
    7148:	3c080000 	stccc	0, cr0, [r8], {-0}
    714c:	df100000 	svcle	0x00100000
    7150:	36000001 	strcc	r0, [r0], -r1
    7154:	1100003c 	tstne	r0, ip, lsr r0
    7158:	000001e8 	andeq	r0, r0, r8, ror #3
    715c:	00003c88 	andeq	r3, r0, r8, lsl #25
    7160:	00000012 	andeq	r0, r0, r2, lsl r0
    7164:	000d5a00 	andeq	r5, sp, r0, lsl #20
    7168:	52011300 	andpl	r1, r1, #0, 6
    716c:	01134c01 	tsteq	r3, r1, lsl #24
    7170:	13300151 	teqne	r0, #1073741844	; 0x40000014
    7174:	f3055001 	vhadd.u8	d5, d5, d1
    7178:	04235001 	strteq	r5, [r3], #-1
    717c:	470d0000 	strmi	r0, [sp, -r0]
    7180:	0100001a 	tsteq	r0, sl, lsl r0
    7184:	00007e28 	andeq	r7, r0, r8, lsr #28
    7188:	026a0100 	rsbeq	r0, sl, #0, 2
    718c:	70070000 	andvc	r0, r7, r0
    7190:	1b280100 	blne	a07598 <__Stack_Size+0xa06d98>
    7194:	0a000001 	beq	71a0 <__Stack_Size+0x69a0>
    7198:	2a010069 	bcs	47344 <__Stack_Size+0x46b44>
    719c:	0000007e 	andeq	r0, r0, lr, ror r0
    71a0:	0100780a 	tsteq	r0, sl, lsl #16
    71a4:	00008c2b 	andeq	r8, r0, fp, lsr #24
    71a8:	3b0e0000 	blcc	3871b0 <__Stack_Size+0x3869b0>
    71ac:	0100001a 	tsteq	r0, sl, lsl r0
    71b0:	02a60118 	adceq	r0, r6, #24, 2
    71b4:	78070000 	stmdavc	r7, {}	; <UNPREDICTABLE>
    71b8:	15180100 	ldrne	r0, [r8, #-256]	; 0x100
    71bc:	07000001 	streq	r0, [r0, -r1]
    71c0:	18010070 	stmdane	r1, {r4, r5, r6}
    71c4:	0000011b 	andeq	r0, r0, fp, lsl r1
    71c8:	0019c009 	andseq	ip, r9, r9
    71cc:	a61a0100 	ldrge	r0, [sl], -r0, lsl #2
    71d0:	0a000002 	beq	71e0 <__Stack_Size+0x69e0>
    71d4:	1b010063 	blne	47368 <__Stack_Size+0x46b68>
    71d8:	00000097 	muleq	r0, r7, r0
    71dc:	0100690a 	tsteq	r0, sl, lsl #18
    71e0:	00007e1c 	andeq	r7, r0, ip, lsl lr
    71e4:	8c140000 	ldchi	0, cr0, [r4], {-0}
    71e8:	b6000000 	strlt	r0, [r0], -r0
    71ec:	15000002 	strne	r0, [r0, #-2]
    71f0:	000000b8 	strheq	r0, [r0], -r8
    71f4:	0616001f 			; <UNDEFINED> instruction: 0x0616001f
    71f8:	01000019 	tsteq	r0, r9, lsl r0
    71fc:	0031345b 	eorseq	r3, r1, fp, asr r4
    7200:	0001a008 	andeq	sl, r1, r8
    7204:	d79c0100 	ldrle	r0, [ip, r0, lsl #2]
    7208:	17000004 	strne	r0, [r0, -r4]
    720c:	5b01006e 	blpl	473cc <__Stack_Size+0x46bcc>
    7210:	00000115 	andeq	r0, r0, r5, lsl r1
    7214:	00003cc0 	andeq	r3, r0, r0, asr #25
    7218:	01007817 	tsteq	r0, r7, lsl r8
    721c:	00011b5c 	andeq	r1, r1, ip, asr fp
    7220:	003cff00 	eorseq	pc, ip, r0, lsl #30
    7224:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0x700
    7228:	5c01006e 	stcpl	0, cr0, [r1], {110}	; 0x6e
    722c:	000000ad 	andeq	r0, r0, sp, lsr #1
    7230:	00003d3e 	andeq	r3, r0, lr, lsr sp
    7234:	001a2718 	andseq	r2, sl, r8, lsl r7
    7238:	1b5d0100 	blne	1747640 <__Stack_Size+0x1746e40>
    723c:	82000001 	andhi	r0, r0, #1
    7240:	0900003d 	stmdbeq	r0, {r0, r2, r3, r4, r5}
    7244:	00001a82 	andeq	r1, r0, r2, lsl #21
    7248:	04d75f01 	ldrbeq	r5, [r7], #3841	; 0xf01
    724c:	c7190000 	ldrgt	r0, [r9, -r0]
    7250:	01000019 	tsteq	r0, r9, lsl r0
    7254:	0004d760 	andeq	sp, r4, r0, ror #14
    7258:	003dc600 	eorseq	ip, sp, r0, lsl #12
    725c:	19d51900 	ldmibne	r5, {r8, fp, ip}^
    7260:	61010000 	mrsvs	r0, (UNDEF: 1)
    7264:	000004d7 	ldrdeq	r0, [r0], -r7
    7268:	00003de4 	andeq	r3, r0, r4, ror #27
    726c:	0019ed19 	andseq	lr, r9, r9, lsl sp
    7270:	d7620100 	strble	r0, [r2, -r0, lsl #2]!
    7274:	02000004 	andeq	r0, r0, #4
    7278:	1a00003e 	bne	7378 <__Stack_Size+0x6b78>
    727c:	63010069 	movwvs	r0, #4201	; 0x1069
    7280:	0000007e 	andeq	r0, r0, lr, ror r0
    7284:	00003e2d 	andeq	r3, r0, sp, lsr #28
    7288:	00023e1b 	andeq	r3, r2, fp, lsl lr
    728c:	00314200 	eorseq	r4, r1, r0, lsl #4
    7290:	00064808 	andeq	r4, r6, r8, lsl #16
    7294:	7d5f0100 	ldfvce	f0, [pc, #-0]	; 729c <__Stack_Size+0x6a9c>
    7298:	10000003 	andne	r0, r0, r3
    729c:	0000024e 	andeq	r0, r0, lr, asr #4
    72a0:	00003ea6 	andeq	r3, r0, r6, lsr #29
    72a4:	0006481c 	andeq	r4, r6, ip, lsl r8
    72a8:	02571100 	subseq	r1, r7, #0, 2
    72ac:	3eea0000 	cdpcc	0, 14, cr0, cr10, cr0, {0}
    72b0:	60110000 	andsvs	r0, r1, r0
    72b4:	48000002 	stmdami	r0, {r1}
    72b8:	0000003f 	andeq	r0, r0, pc, lsr r0
    72bc:	01261d00 	teqeq	r6, r0, lsl #26
    72c0:	31640000 	cmncc	r4, r0
    72c4:	00080800 	andeq	r0, r8, r0, lsl #16
    72c8:	5f010000 	svcpl	0x00010000
    72cc:	000003a3 	andeq	r0, r0, r3, lsr #7
    72d0:	00013f10 	andeq	r3, r1, r0, lsl pc
    72d4:	003f8600 	eorseq	r8, pc, r0, lsl #12
    72d8:	01361000 	teqeq	r6, r0
    72dc:	3fd60000 	svccc	0x00d60000
    72e0:	1d000000 	stcne	0, cr0, [r0, #-0]
    72e4:	00000149 	andeq	r0, r0, r9, asr #2
    72e8:	08003214 	stmdaeq	r0, {r2, r4, r9, ip, sp}
    72ec:	00000014 	andeq	r0, r0, r4, lsl r0
    72f0:	03dd6b01 	bicseq	r6, sp, #1024	; 0x400
    72f4:	5e1e0000 	cdppl	0, 1, cr0, cr14, cr0, {0}
    72f8:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    72fc:	00000155 	andeq	r0, r0, r5, asr r1
    7300:	0032141f 	eorseq	r1, r2, pc, lsl r4
    7304:	00001408 	andeq	r1, r0, r8, lsl #8
    7308:	01671100 	cmneq	r7, r0, lsl #2
    730c:	3fe90000 	svccc	0x00e90000
    7310:	70110000 	andsvc	r0, r1, r0
    7314:	07000001 	streq	r0, [r0, -r1]
    7318:	00000040 	andeq	r0, r0, r0, asr #32
    731c:	32462000 	subcc	r2, r6, #0
    7320:	00620800 	rsbeq	r0, r2, r0, lsl #16
    7324:	04bb0000 	ldrteq	r0, [fp], #0
    7328:	621a0000 	andsvs	r0, sl, #0
    732c:	01007469 	tsteq	r0, r9, ror #8
    7330:	00012170 	andeq	r2, r1, r0, ror r1
    7334:	00403200 	subeq	r3, r0, r0, lsl #4
    7338:	01491b00 	cmpeq	r9, r0, lsl #22
    733c:	32520000 	subscc	r0, r2, #0
    7340:	06680800 	strbteq	r0, [r8], -r0, lsl #16
    7344:	72010000 	andvc	r0, r1, #0
    7348:	00000433 	andeq	r0, r0, r3, lsr r4
    734c:	00015e10 	andeq	r5, r1, r0, lsl lr
    7350:	00404500 	subeq	r4, r0, r0, lsl #10
    7354:	01551e00 	cmpeq	r5, r0, lsl #28
    7358:	681c0000 	ldmdavs	ip, {}	; <UNPREDICTABLE>
    735c:	11000006 	tstne	r0, r6
    7360:	00000167 	andeq	r0, r0, r7, ror #2
    7364:	00004059 	andeq	r4, r0, r9, asr r0
    7368:	00017011 	andeq	r7, r1, r1, lsl r0
    736c:	00407800 	subeq	r7, r0, r0, lsl #16
    7370:	21000000 	mrscs	r0, (UNDEF: 0)
    7374:	0000026a 	andeq	r0, r0, sl, ror #4
    7378:	0800326e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip, sp}
    737c:	00000680 	andeq	r0, r0, r0, lsl #13
    7380:	7f1e7401 	svcvc	0x001e7401
    7384:	10000002 	andne	r0, r0, r2
    7388:	00000276 	andeq	r0, r0, r6, ror r2
    738c:	000040af 	andeq	r4, r0, pc, lsr #1
    7390:	0006801c 	andeq	r8, r6, ip, lsl r0
    7394:	02882200 	addeq	r2, r8, #0, 4
    7398:	91030000 	mrsls	r0, (UNDEF: 3)
    739c:	93117fb8 	tstls	r1, #184, 30	; 0x2e0
    73a0:	c2000002 	andgt	r0, r0, #2
    73a4:	11000040 	tstne	r0, r0, asr #32
    73a8:	0000029c 	muleq	r0, ip, r2
    73ac:	000040fa 	strdeq	r4, [r0], -sl
    73b0:	0000c823 	andeq	ip, r0, r3, lsr #16
    73b4:	00328e00 	eorseq	r8, r2, r0, lsl #28
    73b8:	00001a08 	andeq	r1, r0, r8, lsl #20
    73bc:	10240100 	eorne	r0, r4, r0, lsl #2
    73c0:	000000f5 	strdeq	r0, [r0], -r5
    73c4:	00004131 	andeq	r4, r0, r1, lsr r1
    73c8:	0000ea1e 	andeq	lr, r0, lr, lsl sl
    73cc:	00df1000 	sbcseq	r1, pc, r0
    73d0:	41520000 	cmpmi	r2, r0
    73d4:	d41e0000 	ldrle	r0, [lr], #-0
    73d8:	1f000000 	svcne	0x00000000
    73dc:	0800328e 	stmdaeq	r0, {r1, r2, r3, r7, r9, ip, sp}
    73e0:	0000001a 	andeq	r0, r0, sl, lsl r0
    73e4:	00010011 	andeq	r0, r1, r1, lsl r0
    73e8:	00416500 	subeq	r6, r1, r0, lsl #10
    73ec:	010b1100 	mrseq	r1, (UNDEF: 27)
    73f0:	41780000 	cmnmi	r8, r0
    73f4:	00000000 	andeq	r0, r0, r0
    73f8:	24000000 	strcs	r0, [r0], #-0
    73fc:	0800317a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, ip, sp}
    7400:	00000d5a 	andeq	r0, r0, sl, asr sp
    7404:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    7408:	01132008 	tsteq	r3, r8
    740c:	13300151 	teqne	r0, #1073741844	; 0x40000014
    7410:	74025001 	strvc	r5, [r2], #-1
    7414:	0c000000 	stceq	0, cr0, [r0], {-0}
    7418:	0000007e 	andeq	r0, r0, lr, ror r0
    741c:	001a9016 	andseq	r9, sl, r6, lsl r0
    7420:	00780100 	rsbseq	r0, r8, r0, lsl #2
    7424:	2c000000 	stccs	0, cr0, [r0], {-0}
    7428:	01000000 	mrseq	r0, (UNDEF: 0)
    742c:	0005619c 	muleq	r5, ip, r1
    7430:	00781700 	rsbseq	r1, r8, r0, lsl #14
    7434:	01157801 	tsteq	r5, r1, lsl #16
    7438:	41970000 	orrsmi	r0, r7, r0
    743c:	27180000 	ldrcs	r0, [r8, -r0]
    7440:	0100001a 	tsteq	r0, sl, lsl r0
    7444:	00011b78 	andeq	r1, r1, r8, ror fp
    7448:	0041c000 	subeq	ip, r1, r0
    744c:	006e2500 	rsbeq	r2, lr, r0, lsl #10
    7450:	02a67a01 	adceq	r7, r6, #4096	; 0x1000
    7454:	91020000 	mrsls	r0, (UNDEF: 2)
    7458:	017a1d50 	cmneq	sl, r0, asr sp
    745c:	00000000 	andeq	r0, r0, r0
    7460:	00160000 	andseq	r0, r6, r0
    7464:	7d010000 	stcvc	0, cr0, [r1, #-0]
    7468:	0000053d 	andeq	r0, r0, sp, lsr r5
    746c:	00018f10 	andeq	r8, r1, r0, lsl pc
    7470:	0041ec00 	subeq	lr, r1, r0, lsl #24
    7474:	01862600 	orreq	r2, r6, r0, lsl #12
    7478:	55010000 	strpl	r0, [r1, #-0]
    747c:	00002400 	andeq	r2, r0, r0, lsl #8
    7480:	02b60000 	adcseq	r0, r6, #0
    7484:	01130000 	tsteq	r3, r0
    7488:	01f30353 	mvnseq	r0, r3, asr r3
    748c:	52011351 	andpl	r1, r1, #1140850689	; 0x44000001
    7490:	13200802 	teqne	r0, #131072	; 0x20000
    7494:	75025101 	strvc	r5, [r2, #-257]	; 0x101
    7498:	50011300 	andpl	r1, r1, r0, lsl #6
    749c:	00007d02 	andeq	r7, r0, r2, lsl #26
    74a0:	1a512700 	bne	14510a8 <__Stack_Size+0x14508a8>
    74a4:	80010000 	andhi	r0, r1, r0
    74a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    74ac:	00000000 	andeq	r0, r0, r0
    74b0:	0000009a 	muleq	r0, sl, r0
    74b4:	05b19c01 	ldreq	r9, [r1, #3073]!	; 0xc01
    74b8:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    74bc:	1b800100 	blne	fe0078c4 <BootRAM+0xcf78065>
    74c0:	0c000001 	stceq	0, cr0, [r0], {1}
    74c4:	17000042 	strne	r0, [r0, -r2, asr #32]
    74c8:	80010079 	andhi	r0, r1, r9, ror r0
    74cc:	0000011b 	andeq	r0, r0, fp, lsl r1
    74d0:	00004238 	andeq	r4, r0, r8, lsr r2
    74d4:	6d75731a 	ldclvs	3, cr7, [r5, #-104]!	; 0xffffff98
    74d8:	8c820100 	stfhis	f0, [r2], {0}
    74dc:	64000000 	strvs	r0, [r0], #-0
    74e0:	1a000042 	bne	75f0 <__Stack_Size+0x6df0>
    74e4:	83010069 	movwhi	r0, #4201	; 0x1069
    74e8:	0000007e 	andeq	r0, r0, lr, ror r0
    74ec:	000042ac 	andeq	r4, r0, ip, lsr #5
    74f0:	00c80f00 	sbceq	r0, r8, r0, lsl #30
    74f4:	00000000 	andeq	r0, r0, r0
    74f8:	00c20000 	sbceq	r0, r2, r0
    74fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    7500:	000005f9 	strdeq	r0, [r0], -r9
    7504:	0000d426 	andeq	sp, r0, r6, lsr #8
    7508:	10500100 	subsne	r0, r0, r0, lsl #2
    750c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7510:	000042ef 	andeq	r4, r0, pc, ror #5
    7514:	0000ea10 	andeq	lr, r0, r0, lsl sl
    7518:	00431b00 	subeq	r1, r3, r0, lsl #22
    751c:	00f51000 	rscseq	r1, r5, r0
    7520:	43470000 	movtmi	r0, #28672	; 0x7000
    7524:	00110000 	andseq	r0, r1, r0
    7528:	68000001 	stmdavs	r0, {r0}
    752c:	11000043 	tstne	r0, r3, asr #32
    7530:	0000010b 	andeq	r0, r0, fp, lsl #2
    7534:	00004391 	muleq	r0, r1, r3
    7538:	18790600 	ldmdane	r9!, {r9, sl}^
    753c:	9a010000 	bls	47544 <__Stack_Size+0x46d44>
    7540:	00062301 	andeq	r2, r6, r1, lsl #6
    7544:	00720700 	rsbseq	r0, r2, r0, lsl #14
    7548:	01159a01 	tsteq	r5, r1, lsl #20
    754c:	61070000 	mrsvs	r0, (UNDEF: 7)
    7550:	1b9a0100 	blne	fe687958 <BootRAM+0xd5f80f9>
    7554:	08000001 	stmdaeq	r0, {r0}
    7558:	00001a27 	andeq	r1, r0, r7, lsr #20
    755c:	011b9a01 	tsteq	fp, r1, lsl #20
    7560:	0f000000 	svceq	0x00000000
    7564:	000005f9 	strdeq	r0, [r0], -r9
    7568:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
    756c:	00000058 	andeq	r0, r0, r8, asr r0
    7570:	07149c01 	ldreq	r9, [r4, -r1, lsl #24]
    7574:	05260000 	streq	r0, [r6, #-0]!
    7578:	01000006 	tsteq	r0, r6
    757c:	060e1050 			; <UNDEFINED> instruction: 0x060e1050
    7580:	43bc0000 			; <UNDEFINED> instruction: 0x43bc0000
    7584:	17100000 	ldrne	r0, [r0, -r0]
    7588:	dd000006 	stcle	0, cr0, [r0, #-24]	; 0xffffffe8
    758c:	1b000043 	blne	76a0 <__Stack_Size+0x6ea0>
    7590:	00000199 	muleq	r0, r9, r1
    7594:	080032d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip, sp}
    7598:	00000698 	muleq	r0, r8, r6
    759c:	068b9c01 	streq	r9, [fp], r1, lsl #24
    75a0:	ae100000 	cdpge	0, 1, cr0, cr0, cr0, {0}
    75a4:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
    75a8:	26000043 	strcs	r0, [r0], -r3, asr #32
    75ac:	000001a5 	andeq	r0, r0, r5, lsr #3
    75b0:	981c5001 	ldmdals	ip, {r0, ip, lr}
    75b4:	11000006 	tstne	r0, r6
    75b8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
    75bc:	0000441f 	andeq	r4, r0, pc, lsl r4
    75c0:	0001c011 	andeq	ip, r1, r1, lsl r0
    75c4:	00443e00 	subeq	r3, r4, r0, lsl #28
    75c8:	23000000 	movwcs	r0, #0
    75cc:	0000026a 	andeq	r0, r0, sl, ror #4
    75d0:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
    75d4:	00000032 	andeq	r0, r0, r2, lsr r0
    75d8:	7f1e9d01 	svcvc	0x001e9d01
    75dc:	1e000002 	cdpne	0, 0, cr0, cr0, cr2, {0}
    75e0:	00000276 	andeq	r0, r0, r6, ror r2
    75e4:	0032f41f 	eorseq	pc, r2, pc, lsl r4	; <UNPREDICTABLE>
    75e8:	00003208 	andeq	r3, r0, r8, lsl #4
    75ec:	02882200 	addeq	r2, r8, #0, 4
    75f0:	91020000 	mrsls	r0, (UNDEF: 2)
    75f4:	02931150 	addseq	r1, r3, #80, 2
    75f8:	44750000 	ldrbtmi	r0, [r5], #-0
    75fc:	9c110000 	ldcls	0, cr0, [r1], {-0}
    7600:	a1000002 	tstge	r0, r2
    7604:	23000044 	movwcs	r0, #68	; 0x44
    7608:	000000c8 	andeq	r0, r0, r8, asr #1
    760c:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
    7610:	0000001a 	andeq	r0, r0, sl, lsl r0
    7614:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    7618:	cc000000 	stcgt	0, cr0, [r0], {-0}
    761c:	26000044 	strcs	r0, [r0], -r4, asr #32
    7620:	000000ea 	andeq	r0, r0, sl, ror #1
    7624:	df105001 	svcle	0x00105001
    7628:	ed000000 	stc	0, cr0, [r0, #-0]
    762c:	26000044 	strcs	r0, [r0], -r4, asr #32
    7630:	000000d4 	ldrdeq	r0, [r0], -r4
    7634:	0c1f5001 	ldceq	0, cr5, [pc], {1}
    7638:	1a080033 	bne	20770c <__Stack_Size+0x206f0c>
    763c:	22000000 	andcs	r0, r0, #0
    7640:	00000100 	andeq	r0, r0, r0, lsl #2
    7644:	0b115101 	bleq	45ba50 <__Stack_Size+0x45b250>
    7648:	1a000001 	bne	7654 <__Stack_Size+0x6e54>
    764c:	00000045 	andeq	r0, r0, r5, asr #32
    7650:	00000000 	andeq	r0, r0, r0
    7654:	001a1416 	andseq	r1, sl, r6, lsl r4
    7658:	00a00100 	adceq	r0, r0, r0, lsl #2
    765c:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    7660:	01000000 	mrseq	r0, (UNDEF: 0)
    7664:	0008a99c 	muleq	r8, ip, r9
    7668:	00722800 	rsbseq	r2, r2, r0, lsl #16
    766c:	0115a001 	tsteq	r5, r1
    7670:	50010000 	andpl	r0, r1, r0
    7674:	01006117 	tsteq	r0, r7, lsl r1
    7678:	00011ba0 	andeq	r1, r1, r0, lsr #23
    767c:	00453900 	subeq	r3, r5, r0, lsl #18
    7680:	1a271800 	bne	9cd688 <__Stack_Size+0x9cce88>
    7684:	a0010000 	andge	r0, r1, r0
    7688:	0000011b 	andeq	r0, r0, fp, lsl r1
    768c:	0000455a 	andeq	r4, r0, sl, asr r5
    7690:	0001991b 	andeq	r9, r1, fp, lsl r9
    7694:	00000000 	andeq	r0, r0, r0
    7698:	0006b000 	andeq	fp, r6, r0
    769c:	8ca20100 	stfhis	f0, [r2]
    76a0:	10000007 	andne	r0, r0, r7
    76a4:	000001ae 	andeq	r0, r0, lr, lsr #3
    76a8:	0000457b 	andeq	r4, r0, fp, ror r5
    76ac:	0001a526 	andeq	sl, r1, r6, lsr #10
    76b0:	1c500100 	ldfnee	f0, [r0], {-0}
    76b4:	000006b0 			; <UNDEFINED> instruction: 0x000006b0
    76b8:	0001b711 	andeq	fp, r1, r1, lsl r7
    76bc:	00459c00 	subeq	r9, r5, r0, lsl #24
    76c0:	01c01100 	biceq	r1, r0, r0, lsl #2
    76c4:	45bb0000 	ldrmi	r0, [fp, #0]!
    76c8:	00000000 	andeq	r0, r0, r0
    76cc:	00026a1d 	andeq	r6, r2, sp, lsl sl
    76d0:	00000000 	andeq	r0, r0, r0
    76d4:	00003200 	andeq	r3, r0, r0, lsl #4
    76d8:	1aa30100 	bne	fe8c7ae0 <BootRAM+0xd838281>
    76dc:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
    76e0:	0000027f 	andeq	r0, r0, pc, ror r2
    76e4:	0002761e 	andeq	r7, r2, lr, lsl r6
    76e8:	00001f00 	andeq	r1, r0, r0, lsl #30
    76ec:	00320000 	eorseq	r0, r2, r0
    76f0:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    76f4:	02000002 	andeq	r0, r0, #2
    76f8:	93115091 	tstls	r1, #145	; 0x91
    76fc:	f2000002 	vhadd.s8	d0, d0, d2
    7700:	11000045 	tstne	r0, r5, asr #32
    7704:	0000029c 	muleq	r0, ip, r2
    7708:	0000461e 	andeq	r4, r0, lr, lsl r6
    770c:	0000c823 	andeq	ip, r0, r3, lsr #16
    7710:	00000000 	andeq	r0, r0, r0
    7714:	00001a00 	andeq	r1, r0, r0, lsl #20
    7718:	10240100 	eorne	r0, r4, r0, lsl #2
    771c:	000000f5 	strdeq	r0, [r0], -r5
    7720:	00004649 	andeq	r4, r0, r9, asr #12
    7724:	0000ea26 	andeq	lr, r0, r6, lsr #20
    7728:	10500100 	subsne	r0, r0, r0, lsl #2
    772c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7730:	0000466a 	andeq	r4, r0, sl, ror #12
    7734:	0000d426 	andeq	sp, r0, r6, lsr #8
    7738:	1f500100 	svcne	0x00500100
    773c:	00000000 	andeq	r0, r0, r0
    7740:	0000001a 	andeq	r0, r0, sl, lsl r0
    7744:	00010011 	andeq	r0, r1, r1, lsl r0
    7748:	00469700 	subeq	r9, r6, r0, lsl #14
    774c:	010b1100 	mrseq	r1, (UNDEF: 27)
    7750:	46aa0000 	strtmi	r0, [sl], r0
    7754:	00000000 	andeq	r0, r0, r0
    7758:	6a230000 	bvs	8c7760 <__Stack_Size+0x8c6f60>
    775c:	00000002 	andeq	r0, r0, r2
    7760:	36000000 	strcc	r0, [r0], -r0
    7764:	01000000 	mrseq	r0, (UNDEF: 0)
    7768:	027f10a4 	rsbseq	r1, pc, #164	; 0xa4
    776c:	46c90000 	strbmi	r0, [r9], r0
    7770:	76260000 	strtvc	r0, [r6], -r0
    7774:	01000002 	tsteq	r0, r2
    7778:	00001f50 	andeq	r1, r0, r0, asr pc
    777c:	00360000 	eorseq	r0, r6, r0
    7780:	88220000 	stmdahi	r2!, {}	; <UNPREDICTABLE>
    7784:	02000002 	andeq	r0, r0, #2
    7788:	93115091 	tstls	r1, #145	; 0x91
    778c:	ea000002 	b	779c <__Stack_Size+0x6f9c>
    7790:	11000046 	tstne	r0, r6, asr #32
    7794:	0000029c 	muleq	r0, ip, r2
    7798:	00004722 	andeq	r4, r0, r2, lsr #14
    779c:	0000c823 	andeq	ip, r0, r3, lsr #16
    77a0:	00000000 	andeq	r0, r0, r0
    77a4:	00001a00 	andeq	r1, r0, r0, lsl #20
    77a8:	10240100 	eorne	r0, r4, r0, lsl #2
    77ac:	000000f5 	strdeq	r0, [r0], -r5
    77b0:	00004759 	andeq	r4, r0, r9, asr r7
    77b4:	0000ea26 	andeq	lr, r0, r6, lsr #20
    77b8:	10500100 	subsne	r0, r0, r0, lsl #2
    77bc:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    77c0:	0000477a 	andeq	r4, r0, sl, ror r7
    77c4:	0000d426 	andeq	sp, r0, r6, lsr #8
    77c8:	1f500100 	svcne	0x00500100
    77cc:	00000000 	andeq	r0, r0, r0
    77d0:	0000001a 	andeq	r0, r0, sl, lsl r0
    77d4:	00010022 	andeq	r0, r1, r2, lsr #32
    77d8:	11510100 	cmpne	r1, r0, lsl #2
    77dc:	0000010b 	andeq	r0, r0, fp, lsl #2
    77e0:	000047a7 	andeq	r4, r0, r7, lsr #15
    77e4:	00000000 	andeq	r0, r0, r0
    77e8:	18a41600 	stmiane	r4!, {r9, sl, ip}
    77ec:	a7010000 	strge	r0, [r1, -r0]
    77f0:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    77f4:	0000013e 	andeq	r0, r0, lr, lsr r1
    77f8:	0b9b9c01 	bleq	fe6ee804 <BootRAM+0xd65efa5>
    77fc:	72170000 	andsvc	r0, r7, #0
    7800:	15a70100 	strne	r0, [r7, #256]!	; 0x100
    7804:	c6000001 	strgt	r0, [r0], -r1
    7808:	17000047 	strne	r0, [r0, -r7, asr #32]
    780c:	a7010061 	strge	r0, [r1, -r1, rrx]
    7810:	0000011b 	andeq	r0, r0, fp, lsl r1
    7814:	000047e4 	andeq	r4, r0, r4, ror #15
    7818:	01006217 	tsteq	r0, r7, lsl r2
    781c:	00011ba7 	andeq	r1, r1, r7, lsr #23
    7820:	00480200 	subeq	r0, r8, r0, lsl #4
    7824:	1a271800 	bne	9cd82c <__Stack_Size+0x9cd02c>
    7828:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    782c:	0000011b 	andeq	r0, r0, fp, lsl r1
    7830:	00004820 	andeq	r4, r0, r0, lsr #16
    7834:	0100691a 	tsteq	r0, sl, lsl r9
    7838:	00007eaa 	andeq	r7, r0, sl, lsr #29
    783c:	00483e00 	subeq	r3, r8, r0, lsl #28
    7840:	023e1b00 	eorseq	r1, lr, #0, 22
    7844:	33420000 	movtcc	r0, #8192	; 0x2000
    7848:	06c80800 	strbeq	r0, [r8], r0, lsl #16
    784c:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    7850:	00000934 	andeq	r0, r0, r4, lsr r9
    7854:	00024e26 	andeq	r4, r2, r6, lsr #28
    7858:	1c570100 	ldfnee	f0, [r7], {-0}
    785c:	000006c8 	andeq	r0, r0, r8, asr #13
    7860:	00025711 	andeq	r5, r2, r1, lsl r7
    7864:	00486b00 	subeq	r6, r8, r0, lsl #22
    7868:	02601100 	rsbeq	r1, r0, #0, 2
    786c:	48bc0000 	ldmmi	ip!, {}	; <UNPREDICTABLE>
    7870:	00000000 	andeq	r0, r0, r0
    7874:	00336620 	eorseq	r6, r3, r0, lsr #12
    7878:	0000ea08 	andeq	lr, r0, r8, lsl #20
    787c:	000b7f00 	andeq	r7, fp, r0, lsl #30
    7880:	69621a00 	stmdbvs	r2!, {r9, fp, ip}^
    7884:	af010074 	svcge	0x00010074
    7888:	00000121 	andeq	r0, r0, r1, lsr #2
    788c:	000048ee 	andeq	r4, r0, lr, ror #17
    7890:	0019f329 	andseq	pc, r9, r9, lsr #6
    7894:	a6b00100 	ldrtge	r0, [r0], r0, lsl #2
    7898:	03000002 	movweq	r0, #2
    789c:	1b7f9891 	blne	1fedae8 <__Stack_Size+0x1fed2e8>
    78a0:	00000149 	andeq	r0, r0, r9, asr #2
    78a4:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
    78a8:	000006e0 	andeq	r0, r0, r0, ror #13
    78ac:	0999b201 	ldmibeq	r9, {r0, r9, ip, sp, pc}
    78b0:	5e100000 	cdppl	0, 1, cr0, cr0, cr0, {0}
    78b4:	0f000001 	svceq	0x00000001
    78b8:	1e000049 	cdpne	0, 0, cr0, cr0, cr9, {2}
    78bc:	00000155 	andeq	r0, r0, r5, asr r1
    78c0:	0006e01c 	andeq	lr, r6, ip, lsl r0
    78c4:	01671100 	cmneq	r7, r0, lsl #2
    78c8:	49230000 	stmdbmi	r3!, {}	; <UNPREDICTABLE>
    78cc:	70110000 	andsvc	r0, r1, r0
    78d0:	42000001 	andmi	r0, r0, #1
    78d4:	00000049 	andeq	r0, r0, r9, asr #32
    78d8:	026a1d00 	rsbeq	r1, sl, #0, 26
    78dc:	33940000 	orrscc	r0, r4, #0
    78e0:	002e0800 	eoreq	r0, lr, r0, lsl #16
    78e4:	b3010000 	movwlt	r0, #4096	; 0x1000
    78e8:	00000a24 	andeq	r0, r0, r4, lsr #20
    78ec:	00027f1e 	andeq	r7, r2, lr, lsl pc
    78f0:	02761e00 	rsbseq	r1, r6, #0, 28
    78f4:	941f0000 	ldrls	r0, [pc], #-0	; 78fc <__Stack_Size+0x70fc>
    78f8:	2e080033 	mcrcs	0, 0, r0, cr8, cr3, {1}
    78fc:	22000000 	andcs	r0, r0, #0
    7900:	00000288 	andeq	r0, r0, r8, lsl #5
    7904:	7fb89103 	svcvc	0x00b89103
    7908:	00029311 	andeq	r9, r2, r1, lsl r3
    790c:	00497900 	subeq	r7, r9, r0, lsl #18
    7910:	029c1100 	addseq	r1, ip, #0, 2
    7914:	49a50000 	stmibmi	r5!, {}	; <UNPREDICTABLE>
    7918:	c8230000 	stmdagt	r3!, {}	; <UNPREDICTABLE>
    791c:	aa000000 	bge	7924 <__Stack_Size+0x7124>
    7920:	18080033 	stmdane	r8, {r0, r1, r4, r5}
    7924:	01000000 	mrseq	r0, (UNDEF: 0)
    7928:	00f51024 	rscseq	r1, r5, r4, lsr #32
    792c:	49d00000 	ldmibmi	r0, {}^	; <UNPREDICTABLE>
    7930:	ea1e0000 	b	787938 <__Stack_Size+0x787138>
    7934:	10000000 	andne	r0, r0, r0
    7938:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    793c:	000049f1 	strdeq	r4, [r0], -r1
    7940:	0000d41e 	andeq	sp, r0, lr, lsl r4
    7944:	33aa1f00 			; <UNDEFINED> instruction: 0x33aa1f00
    7948:	00180800 	andseq	r0, r8, r0, lsl #16
    794c:	00110000 	andseq	r0, r1, r0
    7950:	04000001 	streq	r0, [r0], #-1
    7954:	1100004a 	tstne	r0, sl, asr #32
    7958:	0000010b 	andeq	r0, r0, fp, lsl #2
    795c:	00004a17 	andeq	r4, r0, r7, lsl sl
    7960:	00000000 	andeq	r0, r0, r0
    7964:	00017a1b 	andeq	r7, r1, fp, lsl sl
    7968:	0033c200 	eorseq	ip, r3, r0, lsl #4
    796c:	0006f808 	andeq	pc, r6, r8, lsl #16
    7970:	4ab50100 	bmi	fed47d78 <BootRAM+0xdcb8519>
    7974:	1000000a 	andne	r0, r0, sl
    7978:	0000018f 	andeq	r0, r0, pc, lsl #3
    797c:	00004a36 	andeq	r4, r0, r6, lsr sl
    7980:	00018610 	andeq	r8, r1, r0, lsl r6
    7984:	004a4900 	subeq	r4, sl, r0, lsl #18
    7988:	f91b0000 			; <UNDEFINED> instruction: 0xf91b0000
    798c:	d6000005 	strle	r0, [r0], -r5
    7990:	10080033 	andne	r0, r8, r3, lsr r0
    7994:	01000007 	tsteq	r0, r7
    7998:	000b36b6 			; <UNDEFINED> instruction: 0x000b36b6
    799c:	06171e00 	ldreq	r1, [r7], -r0, lsl #28
    79a0:	0e1e0000 	cdpeq	0, 1, cr0, cr14, cr0, {0}
    79a4:	10000006 	andne	r0, r0, r6
    79a8:	00000605 	andeq	r0, r0, r5, lsl #12
    79ac:	00004a5c 	andeq	r4, r0, ip, asr sl
    79b0:	0001991b 	andeq	r9, r1, fp, lsl r9
    79b4:	0033d600 	eorseq	sp, r3, r0, lsl #12
    79b8:	00072808 	andeq	r2, r7, r8, lsl #16
    79bc:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    79c0:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    79c4:	000001ae 	andeq	r0, r0, lr, lsr #3
    79c8:	0001a51e 	andeq	sl, r1, lr, lsl r5
    79cc:	07281c00 	streq	r1, [r8, -r0, lsl #24]!
    79d0:	b7110000 	ldrlt	r0, [r1, -r0]
    79d4:	6f000001 	svcvs	0x00000001
    79d8:	1100004a 	tstne	r0, sl, asr #32
    79dc:	000001c0 	andeq	r0, r0, r0, asr #3
    79e0:	00004aa4 	andeq	r4, r0, r4, lsr #21
    79e4:	6a230000 	bvs	8c79ec <__Stack_Size+0x8c71ec>
    79e8:	fc000002 	stc2	0, cr0, [r0], {2}
    79ec:	34080033 	strcc	r0, [r8], #-51	; 0x33
    79f0:	01000000 	mrseq	r0, (UNDEF: 0)
    79f4:	027f1e9d 	rsbseq	r1, pc, #2512	; 0x9d0
    79f8:	761e0000 	ldrvc	r0, [lr], -r0
    79fc:	1f000002 	svcne	0x00000002
    7a00:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    7a04:	00000034 	andeq	r0, r0, r4, lsr r0
    7a08:	00028822 	andeq	r8, r2, r2, lsr #16
    7a0c:	b8910300 	ldmlt	r1, {r8, r9}
    7a10:	0293117f 	addseq	r1, r3, #-1073741793	; 0xc000001f
    7a14:	4adb0000 	bmi	ff6c7a1c <BootRAM+0xe6381bd>
    7a18:	9c110000 	ldcls	0, cr0, [r1], {-0}
    7a1c:	07000002 	streq	r0, [r0, -r2]
    7a20:	2300004b 	movwcs	r0, #75	; 0x4b
    7a24:	000000c8 	andeq	r0, r0, r8, asr #1
    7a28:	08003414 	stmdaeq	r0, {r2, r4, sl, ip, sp}
    7a2c:	0000001c 	andeq	r0, r0, ip, lsl r0
    7a30:	f5102401 			; <UNDEFINED> instruction: 0xf5102401
    7a34:	32000000 	andcc	r0, r0, #0
    7a38:	1000004b 	andne	r0, r0, fp, asr #32
    7a3c:	000000ea 	andeq	r0, r0, sl, ror #1
    7a40:	00004b53 	andeq	r4, r0, r3, asr fp
    7a44:	0000df10 	andeq	sp, r0, r0, lsl pc
    7a48:	004b6600 	subeq	r6, fp, r0, lsl #12
    7a4c:	00d41000 	sbcseq	r1, r4, r0
    7a50:	4b530000 	blmi	14c7a58 <__Stack_Size+0x14c7258>
    7a54:	141f0000 	ldrne	r0, [pc], #-0	; 7a5c <__Stack_Size+0x725c>
    7a58:	1c080034 	stcne	0, cr0, [r8], {52}	; 0x34
    7a5c:	11000000 	mrsne	r0, (UNDEF: 0)
    7a60:	00000100 	andeq	r0, r0, r0, lsl #2
    7a64:	00004b79 	andeq	r4, r0, r9, ror fp
    7a68:	00010b11 	andeq	r0, r1, r1, lsl fp
    7a6c:	004b8c00 	subeq	r8, fp, r0, lsl #24
    7a70:	00000000 	andeq	r0, r0, r0
    7a74:	c8230000 	stmdagt	r3!, {}	; <UNPREDICTABLE>
    7a78:	30000000 	andcc	r0, r0, r0
    7a7c:	20080034 	andcs	r0, r8, r4, lsr r0
    7a80:	01000000 	mrseq	r0, (UNDEF: 0)
    7a84:	00f510b8 	ldrhteq	r1, [r5], #8
    7a88:	4bab0000 	blmi	feac7a90 <BootRAM+0xda38231>
    7a8c:	ea100000 	b	407a94 <__Stack_Size+0x407294>
    7a90:	cc000000 	stcgt	0, cr0, [r0], {-0}
    7a94:	1e00004b 	cdpne	0, 0, cr0, cr0, cr11, {2}
    7a98:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7a9c:	0000d41e 	andeq	sp, r0, lr, lsl r4
    7aa0:	34301f00 	ldrtcc	r1, [r0], #-3840	; 0xf00
    7aa4:	00200800 	eoreq	r0, r0, r0, lsl #16
    7aa8:	00110000 	andseq	r0, r1, r0
    7aac:	df000001 	svcle	0x00000001
    7ab0:	1100004b 	tstne	r0, fp, asr #32
    7ab4:	0000010b 	andeq	r0, r0, fp, lsl #2
    7ab8:	00004bf2 	strdeq	r4, [r0], -r2
    7abc:	24000000 	strcs	r0, [r0], #-0
    7ac0:	08003342 	stmdaeq	r0, {r1, r6, r8, r9, ip, sp}
    7ac4:	00000d5a 	andeq	r0, r0, sl, asr sp
    7ac8:	02520113 	subseq	r0, r2, #-1073741820	; 0xc0000004
    7acc:	01132008 	tsteq	r3, r8
    7ad0:	13300151 	teqne	r0, #1073741844	; 0x40000014
    7ad4:	75025001 	strvc	r5, [r2, #-1]
    7ad8:	16000000 	strne	r0, [r0], -r0
    7adc:	000019e2 	andeq	r1, r0, r2, ror #19
    7ae0:	0000bc01 	andeq	fp, r0, r1, lsl #24
    7ae4:	00d20000 	sbcseq	r0, r2, r0
    7ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
    7aec:	00000d2e 	andeq	r0, r0, lr, lsr #26
    7af0:	01007217 	tsteq	r0, r7, lsl r2
    7af4:	000115bc 			; <UNDEFINED> instruction: 0x000115bc
    7af8:	004c1100 	subeq	r1, ip, r0, lsl #2
    7afc:	00611700 	rsbeq	r1, r1, r0, lsl #14
    7b00:	011bbc01 	tsteq	fp, r1, lsl #24
    7b04:	4c2f0000 	stcmi	0, cr0, [pc], #-0	; 7b0c <__Stack_Size+0x730c>
    7b08:	27180000 	ldrcs	r0, [r8, -r0]
    7b0c:	0100001a 	tsteq	r0, sl, lsl r0
    7b10:	00011bbc 			; <UNDEFINED> instruction: 0x00011bbc
    7b14:	004c4d00 	subeq	r4, ip, r0, lsl #26
    7b18:	6d702500 	cfldr64vs	mvdx2, [r0, #-0]
    7b1c:	be010032 	mcrlt	0, 0, r0, cr1, cr2, {1}
    7b20:	000002a6 	andeq	r0, r0, r6, lsr #5
    7b24:	7fa89103 	svcvc	0x00a89103
    7b28:	0100631a 	tsteq	r0, sl, lsl r3
    7b2c:	000097bf 			; <UNDEFINED> instruction: 0x000097bf
    7b30:	004c6b00 	subeq	r6, ip, r0, lsl #22
    7b34:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    7b38:	007ec001 	rsbseq	ip, lr, r1
    7b3c:	4ca00000 	stcmi	0, cr0, [r0]
    7b40:	7a1b0000 	bvc	6c7b48 <__Stack_Size+0x6c7348>
    7b44:	00000001 	andeq	r0, r0, r1
    7b48:	40000000 	andmi	r0, r0, r0
    7b4c:	01000007 	tsteq	r0, r7
    7b50:	000c28c3 	andeq	r2, ip, r3, asr #17
    7b54:	018f1000 	orreq	r1, pc, r0
    7b58:	4d1f0000 	ldcmi	0, cr0, [pc, #-0]	; 7b60 <__Stack_Size+0x7360>
    7b5c:	86100000 	ldrhi	r0, [r0], -r0
    7b60:	3d000001 	stccc	0, cr0, [r0, #-4]
    7b64:	0000004d 	andeq	r0, r0, sp, asr #32
    7b68:	0001ca1d 	andeq	ip, r1, sp, lsl sl
    7b6c:	00000000 	andeq	r0, r0, r0
    7b70:	00001800 	andeq	r1, r0, r0, lsl #16
    7b74:	5dcb0100 	stfple	f0, [fp]
    7b78:	1000000c 	andne	r0, r0, ip
    7b7c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7b80:	00004d69 	andeq	r4, r0, r9, ror #26
    7b84:	0001d61e 	andeq	sp, r1, lr, lsl r6
    7b88:	00001f00 	andeq	r1, r0, r0, lsl #30
    7b8c:	00180000 	andseq	r0, r8, r0
    7b90:	e8110000 	ldmda	r1, {}	; <UNPREDICTABLE>
    7b94:	89000001 	stmdbhi	r0, {r0}
    7b98:	0000004d 	andeq	r0, r0, sp, asr #32
    7b9c:	023e1b00 	eorseq	r1, lr, #0, 22
    7ba0:	00000000 	andeq	r0, r0, r0
    7ba4:	07600000 	strbeq	r0, [r0, -r0]!
    7ba8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    7bac:	00000c8e 	andeq	r0, r0, lr, lsl #25
    7bb0:	00024e1e 	andeq	r4, r2, lr, lsl lr
    7bb4:	07601c00 	strbeq	r1, [r0, -r0, lsl #24]!
    7bb8:	57110000 	ldrpl	r0, [r1, -r0]
    7bbc:	cd000002 	stcgt	0, cr0, [r0, #-8]
    7bc0:	1100004d 	tstne	r0, sp, asr #32
    7bc4:	00000260 	andeq	r0, r0, r0, ror #4
    7bc8:	00004e2a 	andeq	r4, r0, sl, lsr #28
    7bcc:	782a0000 	stmdavc	sl!, {}	; <UNPREDICTABLE>
    7bd0:	13000007 	movwne	r0, #7
    7bd4:	2500000d 	strcs	r0, [r0, #-13]
    7bd8:	01003272 	tsteq	r0, r2, ror r2
    7bdc:	0002a6ce 	andeq	sl, r2, lr, asr #13
    7be0:	48910200 	ldmmi	r1, {r9}
    7be4:	00017a1b 	andeq	r7, r1, fp, lsl sl
    7be8:	00000000 	andeq	r0, r0, r0
    7bec:	00079800 	andeq	r9, r7, r0, lsl #16
    7bf0:	cad50100 	bgt	ff547ff8 <BootRAM+0xe4b8799>
    7bf4:	1000000c 	andne	r0, r0, ip
    7bf8:	0000018f 	andeq	r0, r0, pc, lsl #3
    7bfc:	00004e5c 	andeq	r4, r0, ip, asr lr
    7c00:	00018610 	andeq	r8, r1, r0, lsl r6
    7c04:	004ebb00 	subeq	fp, lr, r0, lsl #22
    7c08:	002b0000 	eoreq	r0, fp, r0
    7c0c:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    7c10:	f0000008 			; <UNDEFINED> instruction: 0xf0000008
    7c14:	1300000c 	movwne	r0, #12
    7c18:	77025301 	strvc	r5, [r2, -r1, lsl #6]
    7c1c:	52011300 	andpl	r1, r1, #0, 6
    7c20:	13007602 	movwne	r7, #1538	; 0x602
    7c24:	76025101 	strvc	r5, [r2], -r1, lsl #2
    7c28:	50011300 	andpl	r1, r1, r0, lsl #6
    7c2c:	00489102 	subeq	r9, r8, r2, lsl #2
    7c30:	00000024 	andeq	r0, r0, r4, lsr #32
    7c34:	0008a900 	andeq	sl, r8, r0, lsl #18
    7c38:	53011300 	movwpl	r1, #4864	; 0x1300
    7c3c:	13007702 	movwne	r7, #1794	; 0x702
    7c40:	78025201 	stmdavc	r2, {r0, r9, ip, lr}
    7c44:	51011300 	mrspl	r1, SP_irq
    7c48:	13489102 	movtne	r9, #33026	; 0x8102
    7c4c:	76025001 	strvc	r5, [r2], -r1
    7c50:	24000000 	strcs	r0, [r0], #-0
    7c54:	00000000 	andeq	r0, r0, r0
    7c58:	00000d5a 	andeq	r0, r0, sl, asr sp
    7c5c:	01520113 	cmpeq	r2, r3, lsl r1
    7c60:	5101134c 	tstpl	r1, ip, asr #6
    7c64:	01133001 	tsteq	r3, r1
    7c68:	04760250 	ldrbteq	r0, [r6], #-592	; 0x250
    7c6c:	2f2c0000 	svccs	0x002c0000
    7c70:	0100001a 	tsteq	r0, sl, lsl r0
    7c74:	000d3f09 	andeq	r3, sp, r9, lsl #30
    7c78:	00030500 	andeq	r0, r3, r0, lsl #10
    7c7c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7c80:	000002a6 	andeq	r0, r0, r6, lsr #5
    7c84:	001aa92c 	andseq	sl, sl, ip, lsr #18
    7c88:	550a0100 	strpl	r0, [sl, #-256]	; 0x100
    7c8c:	0500000d 	streq	r0, [r0, #-13]
    7c90:	00000003 	andeq	r0, r0, r3
    7c94:	02a60c00 	adceq	r0, r6, #0, 24
    7c98:	0c2d0000 	stceq	0, cr0, [sp], #-0
    7c9c:	bf00000c 	svclt	0x0000000c
    7ca0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    7ca4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    7ca8:	00007e2e 	andeq	r7, r0, lr, lsr #28
    7cac:	00b82e00 	adcseq	r2, r8, r0, lsl #28
    7cb0:	00000000 	andeq	r0, r0, r0
    7cb4:	00000626 	andeq	r0, r0, r6, lsr #12
    7cb8:	1a260004 	bne	987cd0 <__Stack_Size+0x9874d0>
    7cbc:	01040000 	mrseq	r0, (UNDEF: 4)
    7cc0:	00001636 	andeq	r1, r0, r6, lsr r6
    7cc4:	001ab401 	andseq	fp, sl, r1, lsl #8
    7cc8:	00089300 	andeq	r9, r8, r0, lsl #6
    7ccc:	00082000 	andeq	r2, r8, r0
    7cd0:	00000000 	andeq	r0, r0, r0
    7cd4:	00237700 	eoreq	r7, r3, r0, lsl #14
    7cd8:	06010200 	streq	r0, [r1], -r0, lsl #4
    7cdc:	0000081a 	andeq	r0, r0, sl, lsl r8
    7ce0:	000c3603 	andeq	r3, ip, r3, lsl #12
    7ce4:	371c0200 	ldrcc	r0, [ip, -r0, lsl #4]
    7ce8:	02000000 	andeq	r0, r0, #0
    7cec:	08180801 	ldmdaeq	r8, {r0, fp}
    7cf0:	02020000 	andeq	r0, r2, #0
    7cf4:	0006fc05 	andeq	pc, r6, r5, lsl #24
    7cf8:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7cfc:	00000949 	andeq	r0, r0, r9, asr #18
    7d00:	da050402 	ble	148d10 <__Stack_Size+0x148510>
    7d04:	02000004 	andeq	r0, r0, #4
    7d08:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    7d0c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7d10:	0004d505 	andeq	sp, r4, r5, lsl #10
    7d14:	07080200 	streq	r0, [r8, -r0, lsl #4]
    7d18:	0000024d 	andeq	r0, r0, sp, asr #4
    7d1c:	69050404 	stmdbvs	r5, {r2, sl}
    7d20:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    7d24:	02570704 	subseq	r0, r7, #4, 14	; 0x100000
    7d28:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7d2c:	0300000c 	movweq	r0, #12
    7d30:	00002c2a 	andeq	r2, r0, sl, lsr #24
    7d34:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7d38:	0000078b 	andeq	r0, r0, fp, lsl #15
    7d3c:	21080102 	tstcs	r8, r2, lsl #2
    7d40:	05000008 	streq	r0, [r0, #-8]
    7d44:	00001acd 	andeq	r1, r0, sp, asr #21
    7d48:	00000a01 	andeq	r0, r0, r1, lsl #20
    7d4c:	00400000 	subeq	r0, r0, r0
    7d50:	9c010000 	stcls	0, cr0, [r1], {-0}
    7d54:	00000168 	andeq	r0, r0, r8, ror #2
    7d58:	001ae206 	andseq	lr, sl, r6, lsl #4
    7d5c:	680a0100 	stmdavs	sl, {r8}
    7d60:	d9000001 	stmdble	r0, {r0}
    7d64:	0700004e 	streq	r0, [r0, -lr, asr #32]
    7d68:	0a010079 	beq	47f54 <__Stack_Size+0x47754>
    7d6c:	0000016e 	andeq	r0, r0, lr, ror #2
    7d70:	00004f05 	andeq	r4, r0, r5, lsl #30
    7d74:	001ac708 	andseq	ip, sl, r8, lsl #14
    7d78:	790c0100 	stmdbvc	ip, {r8}
    7d7c:	03000001 	movweq	r0, #1
    7d80:	087fb091 	ldmdaeq	pc!, {r0, r4, r7, ip, sp, pc}^	; <UNPREDICTABLE>
    7d84:	00001b02 	andeq	r1, r0, r2, lsl #22
    7d88:	01790d01 	cmneq	r9, r1, lsl #26
    7d8c:	91020000 	mrsls	r0, (UNDEF: 2)
    7d90:	00000950 	andeq	r0, r0, r0, asr r9
    7d94:	054f0000 	strbeq	r0, [pc, #-0]	; 7d9c <__Stack_Size+0x759c>
    7d98:	00fd0000 	rscseq	r0, sp, r0
    7d9c:	010a0000 	mrseq	r0, (UNDEF: 10)
    7da0:	00750252 	rsbseq	r0, r5, r2, asr r2
    7da4:	0251010a 	subseq	r0, r1, #-2147483646	; 0x80000002
    7da8:	010a0076 	tsteq	sl, r6, ror r0
    7dac:	007d0250 	rsbseq	r0, sp, r0, asr r2
    7db0:	00000900 	andeq	r0, r0, r0, lsl #18
    7db4:	056a0000 	strbeq	r0, [sl, #-0]!
    7db8:	01170000 	tsteq	r7, r0
    7dbc:	010a0000 	mrseq	r0, (UNDEF: 10)
    7dc0:	007d0251 	rsbseq	r0, sp, r1, asr r2
    7dc4:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7dc8:	09005091 	stmdbeq	r0, {r0, r4, r7, ip, lr}
    7dcc:	00000000 	andeq	r0, r0, r0
    7dd0:	00000580 	andeq	r0, r0, r0, lsl #11
    7dd4:	00000137 	andeq	r0, r0, r7, lsr r1
    7dd8:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7ddc:	010a0075 	tsteq	sl, r5, ror r0
    7de0:	00760251 	rsbseq	r0, r6, r1, asr r2
    7de4:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7de8:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    7dec:	00000000 	andeq	r0, r0, r0
    7df0:	0000059b 	muleq	r0, fp, r5
    7df4:	00000157 	andeq	r0, r0, r7, asr r1
    7df8:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7dfc:	010a5091 	swpeq	r5, r1, [sl]
    7e00:	007d0251 	rsbseq	r0, sp, r1, asr r2
    7e04:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7e08:	0b000074 	bleq	7fe0 <__Stack_Size+0x77e0>
    7e0c:	00000000 	andeq	r0, r0, r0
    7e10:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    7e14:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7e18:	00000074 	andeq	r0, r0, r4, ror r0
    7e1c:	0076040c 	rsbseq	r0, r6, ip, lsl #8
    7e20:	040c0000 	streq	r0, [ip], #-0
    7e24:	00000174 	andeq	r0, r0, r4, ror r1
    7e28:	0000760d 	andeq	r7, r0, sp, lsl #12
    7e2c:	00760e00 	rsbseq	r0, r6, r0, lsl #28
    7e30:	01890000 	orreq	r0, r9, r0
    7e34:	810f0000 	mrshi	r0, CPSR
    7e38:	1f000000 	svcne	0x00000000
    7e3c:	1adc1000 	bne	ff70be44 <BootRAM+0xe67c5e5>
    7e40:	16010000 	strne	r0, [r1], -r0
    7e44:	0001bc01 	andeq	fp, r1, r1, lsl #24
    7e48:	79651100 	stmdbvc	r5!, {r8, ip}^
    7e4c:	68160100 	ldmdavs	r6, {r8}
    7e50:	11000001 	tstne	r0, r1
    7e54:	0100786d 	tsteq	r0, sp, ror #16
    7e58:	00016e16 	andeq	r6, r1, r6, lsl lr
    7e5c:	006e1200 	rsbeq	r1, lr, r0, lsl #4
    7e60:	01791801 	cmneq	r9, r1, lsl #16
    7e64:	64120000 	ldrvs	r0, [r2], #-0
    7e68:	79190100 	ldmdbvc	r9, {r8}
    7e6c:	00000001 	andeq	r0, r0, r1
    7e70:	001aed13 	andseq	lr, sl, r3, lsl sp
    7e74:	76210100 	strtvc	r0, [r1], -r0, lsl #2
    7e78:	01000000 	mrseq	r0, (UNDEF: 0)
    7e7c:	0000022f 	andeq	r0, r0, pc, lsr #4
    7e80:	01007811 	tsteq	r0, r1, lsl r8
    7e84:	00016821 	andeq	r6, r1, r1, lsr #16
    7e88:	00791100 	rsbseq	r1, r9, r0, lsl #2
    7e8c:	016e2101 	cmneq	lr, r1, lsl #2
    7e90:	61140000 	tstvs	r4, r0
    7e94:	01000017 	tsteq	r0, r7, lsl r0
    7e98:	00006821 	andeq	r6, r0, r1, lsr #16
    7e9c:	00641500 	rsbeq	r1, r4, r0, lsl #10
    7ea0:	022f2301 	eoreq	r2, pc, #67108864	; 0x4000000
    7ea4:	a3200000 	teqge	r0, #0
    7ea8:	ca135978 	bgt	4de490 <__Stack_Size+0x4ddc90>
    7eac:	ab75eb4d 	blge	1d82be8 <__Stack_Size+0x1d823e8>
    7eb0:	4d4141d8 	stfmie	f4, [r1, #-864]	; 0xfffffca0
    7eb4:	9800700a 	stmdals	r0, {r1, r3, ip, sp, lr}
    7eb8:	797779e8 	ldmdbvc	r7!, {r3, r5, r6, r7, r8, fp, ip, sp, lr}^
    7ebc:	738cc740 	orrvc	ip, ip, #64, 14	; 0x1000000
    7ec0:	ee2b6ffe 	mcr	15, 1, r6, cr11, cr14, {7}
    7ec4:	1252036c 	subsne	r0, r2, #108, 6	; 0xb0000001
    7ec8:	2a010061 	bcs	48054 <__Stack_Size+0x47854>
    7ecc:	00000179 	andeq	r0, r0, r9, ror r1
    7ed0:	01006212 	tsteq	r0, r2, lsl r2
    7ed4:	0001792b 	andeq	r7, r1, fp, lsr #18
    7ed8:	00631200 	rsbeq	r1, r3, r0, lsl #4
    7edc:	01792c01 	cmneq	r9, r1, lsl #24
    7ee0:	0d000000 	stceq	0, cr0, [r0, #-0]
    7ee4:	00000179 	andeq	r0, r0, r9, ror r1
    7ee8:	001af316 	andseq	pc, sl, r6, lsl r3	; <UNPREDICTABLE>
    7eec:	764b0100 	strbvc	r0, [fp], -r0, lsl #2
    7ef0:	00000000 	andeq	r0, r0, r0
    7ef4:	d4000000 	strle	r0, [r0], #-0
    7ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    7efc:	00053f9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
    7f00:	78650700 	stmdavc	r5!, {r8, r9, sl}^
    7f04:	684b0100 	stmdavs	fp, {r8}^
    7f08:	3c000001 	stccc	0, cr0, [r0], {1}
    7f0c:	0700004f 	streq	r0, [r0, -pc, asr #32]
    7f10:	01007965 	tsteq	r0, r5, ror #18
    7f14:	0001684b 	andeq	r6, r1, fp, asr #16
    7f18:	004f6800 	subeq	r6, pc, r0, lsl #16
    7f1c:	786d0700 	stmdavc	sp!, {r8, r9, sl}^
    7f20:	6e4c0100 	dvfvse	f0, f4, f0
    7f24:	94000001 	strls	r0, [r0], #-1
    7f28:	0600004f 	streq	r0, [r0], -pc, asr #32
    7f2c:	00001761 	andeq	r1, r0, r1, ror #14
    7f30:	00684c01 	rsbeq	r4, r8, r1, lsl #24
    7f34:	4fc00000 	svcmi	0x00c00000
    7f38:	6f120000 	svcvs	0x00120000
    7f3c:	4e01006b 	cdpmi	0, 0, cr0, cr1, cr11, {3}
    7f40:	00000076 	andeq	r0, r0, r6, ror r0
    7f44:	00018917 	andeq	r8, r1, r7, lsl r9
    7f48:	00000000 	andeq	r0, r0, r0
    7f4c:	00080000 	andeq	r0, r8, r0
    7f50:	47500100 	ldrbmi	r0, [r0, -r0, lsl #2]
    7f54:	18000003 	stmdane	r0, {r0, r1}
    7f58:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    7f5c:	00004fec 	andeq	r4, r0, ip, ror #31
    7f60:	00019518 	andeq	r9, r1, r8, lsl r5
    7f64:	00501800 	subseq	r1, r0, r0, lsl #16
    7f68:	08001900 	stmdaeq	r0, {r8, fp, ip}
    7f6c:	a91a0000 	ldmdbge	sl, {}	; <UNPREDICTABLE>
    7f70:	03000001 	movweq	r0, #1
    7f74:	1a7fa891 	bne	1ff21c0 <__Stack_Size+0x1ff19c0>
    7f78:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    7f7c:	09489102 	stmdbeq	r8, {r1, r8, ip, pc}^
    7f80:	00000000 	andeq	r0, r0, r0
    7f84:	00000580 	andeq	r0, r0, r0, lsl #11
    7f88:	000002ec 	andeq	r0, r0, ip, ror #5
    7f8c:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7f90:	010a0076 	tsteq	sl, r6, ror r0
    7f94:	00770251 	rsbseq	r0, r7, r1, asr r2
    7f98:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    7f9c:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    7fa0:	00000009 	andeq	r0, r0, r9
    7fa4:	00056a00 	andeq	r6, r5, r0, lsl #20
    7fa8:	00030700 	andeq	r0, r3, r0, lsl #14
    7fac:	51010a00 	tstpl	r1, r0, lsl #20
    7fb0:	7fa89103 	svcvc	0x00a89103
    7fb4:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    7fb8:	09004891 	stmdbeq	r0, {r0, r4, r7, fp, lr}
    7fbc:	00000000 	andeq	r0, r0, r0
    7fc0:	0000054f 	andeq	r0, r0, pc, asr #10
    7fc4:	00000328 	andeq	r0, r0, r8, lsr #6
    7fc8:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    7fcc:	010a0076 	tsteq	sl, r6, ror r0
    7fd0:	00770251 	rsbseq	r0, r7, r1, asr r2
    7fd4:	0350010a 	cmpeq	r0, #-2147483646	; 0x80000002
    7fd8:	007fa891 			; <UNDEFINED> instruction: 0x007fa891
    7fdc:	0000000b 	andeq	r0, r0, fp
    7fe0:	00059b00 	andeq	r9, r5, r0, lsl #22
    7fe4:	52010a00 	andpl	r0, r1, #0, 20
    7fe8:	0a489102 	beq	122c3f8 <__Stack_Size+0x122bbf8>
    7fec:	91035101 	tstls	r3, r1, lsl #2
    7ff0:	010a7fa8 	smlatbeq	sl, r8, pc, r7	; <UNPREDICTABLE>
    7ff4:	00740250 	rsbseq	r0, r4, r0, asr r2
    7ff8:	1b000000 	blne	8000 <__Stack_Size+0x7800>
    7ffc:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
    8000:	00000000 	andeq	r0, r0, r0
    8004:	00000080 	andeq	r0, r0, r0, lsl #1
    8008:	051a5101 	ldreq	r5, [sl, #-257]	; 0x101
    800c:	de180000 	cdple	0, 1, cr0, cr8, cr0, {0}
    8010:	44000001 	strmi	r0, [r0], #-1
    8014:	18000050 	stmdane	r0, {r4, r6}
    8018:	000001d5 	ldrdeq	r0, [r0], -r5
    801c:	00005065 	andeq	r5, r0, r5, rrx
    8020:	0001cc18 	andeq	ip, r1, r8, lsl ip
    8024:	00508600 	subseq	r8, r0, r0, lsl #12
    8028:	00001c00 	andeq	r1, r0, r0, lsl #24
    802c:	00800000 	addeq	r0, r0, r0
    8030:	131a0000 	tstne	sl, #0
    8034:	03000002 	movweq	r0, #2
    8038:	1a7f8891 	bne	1fea284 <__Stack_Size+0x1fe9a84>
    803c:	0000021c 	andeq	r0, r0, ip, lsl r2
    8040:	7fa89103 	svcvc	0x00a89103
    8044:	0002251a 	andeq	r2, r2, sl, lsl r5
    8048:	48910200 	ldmmi	r1, {r9}
    804c:	0001e91a 	andeq	lr, r1, sl, lsl r9
    8050:	00030500 	andeq	r0, r3, r0, lsl #10
    8054:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    8058:	00000000 	andeq	r0, r0, r0
    805c:	0000059b 	muleq	r0, fp, r5
    8060:	000003c3 	andeq	r0, r0, r3, asr #7
    8064:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    8068:	010a0074 	tsteq	sl, r4, ror r0
    806c:	00740251 	rsbseq	r0, r4, r1, asr r2
    8070:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    8074:	09004891 	stmdbeq	r0, {r0, r4, r7, fp, lr}
    8078:	00000000 	andeq	r0, r0, r0
    807c:	0000059b 	muleq	r0, fp, r5
    8080:	000003e7 	andeq	r0, r0, r7, ror #7
    8084:	0552010a 	ldrbeq	r0, [r2, #-266]	; 0x10a
    8088:	00000003 	andeq	r0, r0, r3
    808c:	51010a00 	tstpl	r1, r0, lsl #20
    8090:	0a489102 	beq	122c4a0 <__Stack_Size+0x122bca0>
    8094:	91035001 	tstls	r3, r1
    8098:	09007fa8 	stmdbeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    809c:	00000000 	andeq	r0, r0, r0
    80a0:	00000580 	andeq	r0, r0, r0, lsl #11
    80a4:	00000408 	andeq	r0, r0, r8, lsl #8
    80a8:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    80ac:	010a0076 	tsteq	sl, r6, ror r0
    80b0:	a8910351 	ldmge	r1, {r0, r4, r6, r8, r9}
    80b4:	50010a7f 	andpl	r0, r1, pc, ror sl
    80b8:	00007d02 	andeq	r7, r0, r2, lsl #26
    80bc:	00000009 	andeq	r0, r0, r9
    80c0:	00056a00 	andeq	r6, r5, r0, lsl #20
    80c4:	00042300 	andeq	r2, r4, r0, lsl #6
    80c8:	51010a00 	tstpl	r1, r0, lsl #20
    80cc:	0a007d02 	beq	274dc <__Stack_Size+0x26cdc>
    80d0:	91035001 	tstls	r3, r1
    80d4:	09007fa8 	stmdbeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    80d8:	00000000 	andeq	r0, r0, r0
    80dc:	0000054f 	andeq	r0, r0, pc, asr #10
    80e0:	00000443 	andeq	r0, r0, r3, asr #8
    80e4:	0252010a 	subseq	r0, r2, #-2147483646	; 0x80000002
    80e8:	010a0076 	tsteq	sl, r6, ror r0
    80ec:	48910251 	ldmmi	r1, {r0, r4, r6, r9}
    80f0:	0250010a 	subseq	r0, r0, #-2147483646	; 0x80000002
    80f4:	0900007d 	stmdbeq	r0, {r0, r2, r3, r4, r5, r6}
    80f8:	00000000 	andeq	r0, r0, r0
    80fc:	0000059b 	muleq	r0, fp, r5
    8100:	00000464 	andeq	r0, r0, r4, ror #8
    8104:	0352010a 	cmpeq	r2, #-2147483646	; 0x80000002
    8108:	0a7fa891 	beq	1ff2354 <__Stack_Size+0x1ff1b54>
    810c:	7d025101 	stfvcs	f5, [r2, #-4]
    8110:	50010a00 	andpl	r0, r1, r0, lsl #20
    8114:	00489102 	subeq	r9, r8, r2, lsl #2
    8118:	00000009 	andeq	r0, r0, r9
    811c:	0005c700 	andeq	ip, r5, r0, lsl #14
    8120:	00047e00 	andeq	r7, r4, r0, lsl #28
    8124:	51010a00 	tstpl	r1, r0, lsl #20
    8128:	0a489102 	beq	122c538 <__Stack_Size+0x122bd38>
    812c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    8130:	00090000 	andeq	r0, r9, r0
    8134:	dd000000 	stcle	0, cr0, [r0, #-0]
    8138:	99000005 	stmdbls	r0, {r0, r2}
    813c:	0a000004 	beq	8154 <__Stack_Size+0x7954>
    8140:	7d025101 	stfvcs	f5, [r2, #-4]
    8144:	50010a00 	andpl	r0, r1, r0, lsl #20
    8148:	7fa89103 	svcvc	0x00a89103
    814c:	00000900 	andeq	r0, r0, r0, lsl #18
    8150:	05f30000 	ldrbeq	r0, [r3, #0]!
    8154:	04ba0000 	ldrteq	r0, [sl], #0
    8158:	010a0000 	mrseq	r0, (UNDEF: 10)
    815c:	a8910352 	ldmge	r1, {r1, r4, r6, r8, r9}
    8160:	51010a7f 	tstpl	r1, pc, ror sl
    8164:	0a007d02 	beq	27574 <__Stack_Size+0x26d74>
    8168:	75025001 	strvc	r5, [r2, #-1]
    816c:	00090000 	andeq	r0, r9, r0
    8170:	9b000000 	blls	8178 <__Stack_Size+0x7978>
    8174:	da000005 	ble	8190 <__Stack_Size+0x7990>
    8178:	0a000004 	beq	8190 <__Stack_Size+0x7990>
    817c:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    8180:	51010a00 	tstpl	r1, r0, lsl #20
    8184:	0a007502 	beq	25594 <__Stack_Size+0x24d94>
    8188:	7d025001 	stcvc	0, cr5, [r2, #-4]
    818c:	00090000 	andeq	r0, r9, r0
    8190:	b6000000 	strlt	r0, [r0], -r0
    8194:	ee000005 	cdp	0, 0, cr0, cr0, cr5, {0}
    8198:	0a000004 	beq	81b0 <__Stack_Size+0x79b0>
    819c:	7d025001 	stcvc	0, cr5, [r2, #-4]
    81a0:	00090000 	andeq	r0, r9, r0
    81a4:	b6000000 	strlt	r0, [r0], -r0
    81a8:	02000005 	andeq	r0, r0, #5
    81ac:	0a000005 	beq	81c8 <__Stack_Size+0x79c8>
    81b0:	91025001 	tstls	r2, r1
    81b4:	000b0048 	andeq	r0, fp, r8, asr #32
    81b8:	13000000 	movwne	r0, #0
    81bc:	0a000006 	beq	81dc <__Stack_Size+0x79dc>
    81c0:	91025101 	tstls	r2, r1, lsl #2
    81c4:	50010a48 	andpl	r0, r1, r8, asr #20
    81c8:	00007d02 	andeq	r7, r0, r2, lsl #26
    81cc:	00090000 	andeq	r0, r9, r0
    81d0:	b6000000 	strlt	r0, [r0], -r0
    81d4:	2e000005 	cdpcs	0, 0, cr0, cr0, cr5, {0}
    81d8:	0a000005 	beq	81f4 <__Stack_Size+0x79f4>
    81dc:	75025001 	strvc	r5, [r2, #-1]
    81e0:	000b0000 	andeq	r0, fp, r0
    81e4:	b6000000 	strlt	r0, [r0], -r0
    81e8:	0a000005 	beq	8204 <__Stack_Size+0x7a04>
    81ec:	74025001 	strvc	r5, [r2], #-1
    81f0:	1d000000 	stcne	0, cr0, [r0, #-0]
    81f4:	00001619 	andeq	r1, r0, r9, lsl r6
    81f8:	054a1c04 	strbeq	r1, [sl, #-3076]	; 0xc04
    81fc:	790d0000 	stmdbvc	sp, {}	; <UNPREDICTABLE>
    8200:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    8204:	000016d4 	ldrdeq	r1, [r0], -r4
    8208:	056a3b04 	strbeq	r3, [sl, #-2820]!	; 0xb04
    820c:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    8210:	1f000001 	svcne	0x00000001
    8214:	0000016e 	andeq	r0, r0, lr, ror #2
    8218:	00016e1f 	andeq	r6, r1, pc, lsl lr
    821c:	0a1e0000 	beq	788224 <__Stack_Size+0x787a24>
    8220:	04000017 	streq	r0, [r0], #-23
    8224:	00058051 	andeq	r8, r5, r1, asr r0
    8228:	01681f00 	cmneq	r8, r0, lsl #30
    822c:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    8230:	00000001 	andeq	r0, r0, r1
    8234:	0015fc1e 	andseq	pc, r5, lr, lsl ip	; <UNPREDICTABLE>
    8238:	9b3a0400 	blls	e89240 <__Stack_Size+0xe88a40>
    823c:	1f000005 	svcne	0x00000005
    8240:	00000168 	andeq	r0, r0, r8, ror #2
    8244:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8248:	016e1f00 	cmneq	lr, r0, lsl #30
    824c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    8250:	000016f5 	strdeq	r1, [r0], -r5
    8254:	05b64404 	ldreq	r4, [r6, #1028]!	; 0x404
    8258:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    825c:	1f000001 	svcne	0x00000001
    8260:	0000016e 	andeq	r0, r0, lr, ror #2
    8264:	00016e1f 	andeq	r6, r1, pc, lsl lr
    8268:	e41e0000 	ldr	r0, [lr], #-0
    826c:	04000016 	streq	r0, [r0], #-22
    8270:	0005c728 	andeq	ip, r5, r8, lsr #14
    8274:	01681f00 	cmneq	r8, r0, lsl #30
    8278:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    827c:	000017e3 	andeq	r1, r0, r3, ror #15
    8280:	05dd5a04 	ldrbeq	r5, [sp, #2564]	; 0xa04
    8284:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    8288:	1f000001 	svcne	0x00000001
    828c:	0000016e 	andeq	r0, r0, lr, ror #2
    8290:	17ef1e00 	strbne	r1, [pc, r0, lsl #28]!
    8294:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    8298:	000005f3 	strdeq	r0, [r0], -r3
    829c:	0001681f 	andeq	r6, r1, pc, lsl r8
    82a0:	016e1f00 	cmneq	lr, r0, lsl #30
    82a4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    82a8:	0000171f 	andeq	r1, r0, pc, lsl r7
    82ac:	06133304 	ldreq	r3, [r3], -r4, lsl #6
    82b0:	681f0000 	ldmdavs	pc, {}	; <UNPREDICTABLE>
    82b4:	1f000001 	svcne	0x00000001
    82b8:	0000016e 	andeq	r0, r0, lr, ror #2
    82bc:	00016e1f 	andeq	r6, r1, pc, lsl lr
    82c0:	00761f00 	rsbseq	r1, r6, r0, lsl #30
    82c4:	20000000 	andcs	r0, r0, r0
    82c8:	0000173d 	andeq	r1, r0, sp, lsr r7
    82cc:	00762d04 	rsbseq	r2, r6, r4, lsl #26
    82d0:	6e1f0000 	cdpvs	0, 1, cr0, cr15, cr0, {0}
    82d4:	1f000001 	svcne	0x00000001
    82d8:	0000016e 	andeq	r0, r0, lr, ror #2
    82dc:	05ac0000 	streq	r0, [ip, #0]!
    82e0:	00040000 	andeq	r0, r4, r0
    82e4:	00001be2 	andeq	r1, r0, r2, ror #23
    82e8:	16360104 	ldrtne	r0, [r6], -r4, lsl #2
    82ec:	24010000 	strcs	r0, [r1], #-0
    82f0:	9300001b 	movwls	r0, #27
    82f4:	a8000008 	stmdage	r0, {r3}
    82f8:	00000008 	andeq	r0, r0, r8
    82fc:	cd000000 	stcgt	0, cr0, [r0, #-0]
    8300:	02000024 	andeq	r0, r0, #36	; 0x24
    8304:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8308:	04030074 	streq	r0, [r3], #-116	; 0x74
    830c:	00025707 	andeq	r5, r2, r7, lsl #14
    8310:	06010300 	streq	r0, [r1], -r0, lsl #6
    8314:	0000081a 	andeq	r0, r0, sl, lsl r8
    8318:	18080103 	stmdane	r8, {r0, r1, r8}
    831c:	03000008 	movweq	r0, #8
    8320:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    8324:	02030000 	andeq	r0, r3, #0
    8328:	00094907 	andeq	r4, r9, r7, lsl #18
    832c:	05040300 	streq	r0, [r4, #-768]	; 0x300
    8330:	000004da 	ldrdeq	r0, [r0], -sl
    8334:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    8338:	03000002 	movweq	r0, #2
    833c:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    8340:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8344:	00024d07 	andeq	r4, r2, r7, lsl #26
    8348:	07040300 	streq	r0, [r4, -r0, lsl #6]
    834c:	0000078b 	andeq	r0, r0, fp, lsl #15
    8350:	04050404 	streq	r0, [r5], #-1028	; 0x404
    8354:	0000003a 	andeq	r0, r0, sl, lsr r0
    8358:	21080103 	tstcs	r8, r3, lsl #2
    835c:	06000008 	streq	r0, [r0], -r8
    8360:	ae0c0268 	cdpge	2, 0, cr0, cr12, cr8, {3}
    8364:	07000000 	streq	r0, [r0, -r0]
    8368:	00001a8a 	andeq	r1, r0, sl, lsl #21
    836c:	00ae0e02 	adceq	r0, lr, r2, lsl #28
    8370:	07000000 	streq	r0, [r0, -r0]
    8374:	00001950 	andeq	r1, r0, r0, asr r9
    8378:	00be0f02 	adcseq	r0, lr, r2, lsl #30
    837c:	07080000 	streq	r0, [r8, -r0]
    8380:	0000046c 	andeq	r0, r0, ip, ror #8
    8384:	00ce1002 	sbceq	r1, lr, r2
    8388:	00280000 	eoreq	r0, r8, r0
    838c:	00005608 	andeq	r5, r0, r8, lsl #12
    8390:	0000be00 	andeq	fp, r0, r0, lsl #28
    8394:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    8398:	00010000 	andeq	r0, r1, r0
    839c:	00005608 	andeq	r5, r0, r8, lsl #12
    83a0:	0000ce00 	andeq	ip, r0, r0, lsl #28
    83a4:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    83a8:	00070000 	andeq	r0, r7, r0
    83ac:	00003a08 	andeq	r3, r0, r8, lsl #20
    83b0:	0000de00 	andeq	sp, r0, r0, lsl #28
    83b4:	006b0900 	rsbeq	r0, fp, r0, lsl #18
    83b8:	003f0000 	eorseq	r0, pc, r0
    83bc:	000cef0a 	andeq	lr, ip, sl, lsl #30
    83c0:	81120200 	tsthi	r2, r0, lsl #4
    83c4:	0b000000 	bleq	83cc <__Stack_Size+0x7bcc>
    83c8:	00000b35 	andeq	r0, r0, r5, lsr fp
    83cc:	2d01c101 	stfcsd	f4, [r1, #-4]
    83d0:	0c000001 	stceq	0, cr0, [r0], {1}
    83d4:	00787463 	rsbseq	r7, r8, r3, ror #8
    83d8:	012dc101 	teqeq	sp, r1, lsl #2
    83dc:	260d0000 	strcs	r0, [sp], -r0
    83e0:	0100000b 	tsteq	r0, fp
    83e4:	000074c1 	andeq	r7, r0, r1, asr #9
    83e8:	14df0d00 	ldrbne	r0, [pc], #3328	; 83f0 <__Stack_Size+0x7bf0>
    83ec:	c1010000 	mrsgt	r0, (UNDEF: 1)
    83f0:	00000056 	andeq	r0, r0, r6, asr r0
    83f4:	001b100e 	andseq	r1, fp, lr
    83f8:	56c30100 	strbpl	r0, [r3], r0, lsl #2
    83fc:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8400:	00001b15 	andeq	r1, r0, r5, lsl fp
    8404:	0056c301 	subseq	ip, r6, r1, lsl #6
    8408:	05000000 	streq	r0, [r0, #-0]
    840c:	0000de04 	andeq	sp, r0, r4, lsl #28
    8410:	0c130f00 	ldceq	15, cr0, [r3], {-0}
    8414:	2f010000 	svccs	0x00010000
    8418:	0800346c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, sp}
    841c:	00000058 	andeq	r0, r0, r8, asr r0
    8420:	01569c01 	cmpeq	r6, r1, lsl #24
    8424:	63100000 	tstvs	r0, #0
    8428:	01007874 	tsteq	r0, r4, ror r8
    842c:	00012d2f 	andeq	r2, r1, pc, lsr #26
    8430:	00500100 	subseq	r0, r0, r0, lsl #2
    8434:	001b330f 	andseq	r3, fp, pc, lsl #6
    8438:	c43e0100 	ldrtgt	r0, [lr], #-256	; 0x100
    843c:	64080034 	strvs	r0, [r8], #-52	; 0x34
    8440:	0100001f 	tsteq	r0, pc, lsl r0
    8444:	00021d9c 	muleq	r2, ip, sp
    8448:	74631100 	strbtvc	r1, [r3], #-256	; 0x100
    844c:	3e010078 	mcrcc	0, 0, r0, cr1, cr8, {3}
    8450:	0000012d 	andeq	r0, r0, sp, lsr #2
    8454:	000050a7 	andeq	r5, r0, r7, lsr #1
    8458:	000d8a12 	andeq	r8, sp, r2, lsl sl
    845c:	743e0100 	ldrtvc	r0, [lr], #-256	; 0x100
    8460:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    8464:	13000050 	movwne	r0, #80	; 0x50
    8468:	00001b42 	andeq	r1, r0, r2, asr #22
    846c:	00564001 	subseq	r4, r6, r1
    8470:	511f0000 	tstpl	pc, r0
    8474:	48130000 	ldmdami	r3, {}	; <UNPREDICTABLE>
    8478:	0100001b 	tsteq	r0, fp, lsl r0
    847c:	00005640 	andeq	r5, r0, r0, asr #12
    8480:	00539100 	subseq	r9, r3, r0, lsl #2
    8484:	00571400 	subseq	r1, r7, r0, lsl #8
    8488:	021d4001 	andseq	r4, sp, #1
    848c:	603b0000 	eorsvs	r0, fp, r0
    8490:	41140000 	tstmi	r4, r0
    8494:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    8498:	20000000 	andcs	r0, r0, r0
    849c:	14000069 	strne	r0, [r0], #-105	; 0x69
    84a0:	41010042 	tstmi	r1, r2, asr #32
    84a4:	00000056 	andeq	r0, r0, r6, asr r0
    84a8:	000069a3 	andeq	r6, r0, r3, lsr #19
    84ac:	01004314 	tsteq	r0, r4, lsl r3
    84b0:	00005641 	andeq	r5, r0, r1, asr #12
    84b4:	006a0500 	rsbeq	r0, sl, r0, lsl #10
    84b8:	00441400 	subeq	r1, r4, r0, lsl #8
    84bc:	00564101 	subseq	r4, r6, r1, lsl #2
    84c0:	6a5a0000 	bvs	16884c8 <__Stack_Size+0x1687cc8>
    84c4:	45140000 	ldrmi	r0, [r4, #-0]
    84c8:	56410100 	strbpl	r0, [r1], -r0, lsl #2
    84cc:	af000000 	svcge	0x00000000
    84d0:	1400006a 	strne	r0, [r0], #-106	; 0x6a
    84d4:	41010046 	tstmi	r1, r6, asr #32
    84d8:	00000056 	andeq	r0, r0, r6, asr r0
    84dc:	00006b30 	andeq	r6, r0, r0, lsr fp
    84e0:	01004714 	tsteq	r0, r4, lsl r7
    84e4:	00005641 	andeq	r5, r0, r1, asr #12
    84e8:	006ba800 	rsbeq	sl, fp, r0, lsl #16
    84ec:	00481400 	subeq	r1, r8, r0, lsl #8
    84f0:	00564101 	subseq	r4, r6, r1, lsl #2
    84f4:	6c200000 	stcvs	0, cr0, [r0], #-0
    84f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84fc:	00000056 	andeq	r0, r0, r6, asr r0
    8500:	0000022d 	andeq	r0, r0, sp, lsr #4
    8504:	00006b09 	andeq	r6, r0, r9, lsl #22
    8508:	15003f00 	strne	r3, [r0, #-3840]	; 0xf00
    850c:	000000e9 	andeq	r0, r0, r9, ror #1
    8510:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
    8514:	0000008e 	andeq	r0, r0, lr, lsl #1
    8518:	02f29c01 	rscseq	r9, r2, #256	; 0x100
    851c:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
    8520:	a3000000 	movwge	r0, #0
    8524:	1600006c 	strne	r0, [r0], -ip, rrx
    8528:	00000100 	andeq	r0, r0, r0, lsl #2
    852c:	00006cfb 	strdeq	r6, [r0], -fp
    8530:	00010b16 	andeq	r0, r1, r6, lsl fp
    8534:	006d5900 	rsbeq	r5, sp, r0, lsl #18
    8538:	01161700 	tsteq	r6, r0, lsl #14
    853c:	21170000 	tstcs	r7, r0
    8540:	18000001 	stmdane	r0, {r0}
    8544:	00000838 	andeq	r0, r0, r8, lsr r8
    8548:	00010b16 	andeq	r0, r1, r6, lsl fp
    854c:	006db700 	rsbeq	fp, sp, r0, lsl #14
    8550:	01001600 	tsteq	r0, r0, lsl #12
    8554:	6e0f0000 	cdpvs	0, 0, cr0, cr15, cr0, {0}
    8558:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
    855c:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    8560:	1800006e 	stmdane	r0, {r1, r2, r3, r5, r6}
    8564:	00000838 	andeq	r0, r0, r8, lsr r8
    8568:	00011619 	andeq	r1, r1, r9, lsl r6
    856c:	006eb100 	rsbeq	fp, lr, r0, lsl #2
    8570:	01211900 	teqeq	r1, r0, lsl #18
    8574:	6ef20000 	cdpvs	0, 15, cr0, cr2, cr0, {0}
    8578:	5c1a0000 	ldcpl	0, cr0, [sl], {-0}
    857c:	56080054 			; <UNDEFINED> instruction: 0x56080054
    8580:	b6000001 	strlt	r0, [r0], -r1
    8584:	1b000002 	blne	8594 <__Stack_Size+0x7d94>
    8588:	74025101 	strvc	r5, [r2], #-257	; 0x101
    858c:	50011b00 	andpl	r1, r1, r0, lsl #22
    8590:	00007602 	andeq	r7, r0, r2, lsl #12
    8594:	0054941c 	subseq	r9, r4, ip, lsl r4
    8598:	00058b08 	andeq	r8, r5, r8, lsl #22
    859c:	54a21a00 	strtpl	r1, [r2], #2560	; 0xa00
    85a0:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    85a4:	02d90000 	sbcseq	r0, r9, #0
    85a8:	011b0000 	tsteq	fp, r0
    85ac:	00740252 	rsbseq	r0, r4, r2, asr r2
    85b0:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    85b4:	1d000078 	stcne	0, cr0, [r0, #-480]	; 0xfffffe20
    85b8:	080054ac 	stmdaeq	r0, {r2, r3, r5, r7, sl, ip, lr}
    85bc:	00000156 	andeq	r0, r0, r6, asr r1
    85c0:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    85c4:	011b2876 	tsteq	fp, r6, ror r8
    85c8:	00760250 	rsbseq	r0, r6, r0, asr r2
    85cc:	00000000 	andeq	r0, r0, r0
    85d0:	000b790f 	andeq	r7, fp, pc, lsl #18
    85d4:	b8f00100 	ldmlt	r0!, {r8}^
    85d8:	18080054 	stmdane	r8, {r2, r4, r6}
    85dc:	01000002 	tsteq	r0, r2
    85e0:	00054b9c 	muleq	r5, ip, fp
    85e4:	74631100 	strbtvc	r1, [r3], #-256	; 0x100
    85e8:	f0010078 			; <UNDEFINED> instruction: 0xf0010078
    85ec:	0000012d 	andeq	r0, r0, sp, lsr #2
    85f0:	00006f2a 	andeq	r6, r0, sl, lsr #30
    85f4:	001b5d12 	andseq	r5, fp, r2, lsl sp
    85f8:	74f00100 	ldrbtvc	r0, [r0], #256	; 0x100
    85fc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    8600:	1300006f 	movwne	r0, #111	; 0x6f
    8604:	00001b64 	andeq	r1, r0, r4, ror #22
    8608:	0056f201 	subseq	pc, r6, r1, lsl #4
    860c:	6f920000 	svcvs	0x00920000
    8610:	1a130000 	bne	4c8618 <__Stack_Size+0x4c7e18>
    8614:	0100001b 	tsteq	r0, fp, lsl r0
    8618:	000056f2 	strdeq	r5, [r0], -r2
    861c:	006fc600 	rsbeq	ip, pc, r0, lsl #12
    8620:	1b1f1300 	blne	7cd228 <__Stack_Size+0x7cca28>
    8624:	f3010000 	vhadd.u8	d0, d1, d0
    8628:	00000056 	andeq	r0, r0, r6, asr r0
    862c:	00006fef 	andeq	r6, r0, pc, ror #31
    8630:	776f6c14 			; <UNDEFINED> instruction: 0x776f6c14
    8634:	56f30100 	ldrbtpl	r0, [r3], r0, lsl #2
    8638:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    863c:	1e000070 	mcrne	0, 0, r0, cr0, cr0, {3}
    8640:	00001b09 	andeq	r1, r0, r9, lsl #22
    8644:	054bf401 	strbeq	pc, [fp, #-1025]	; 0x401	; <UNPREDICTABLE>
    8648:	91020000 	mrsls	r0, (UNDEF: 2)
    864c:	00e91f50 	rsceq	r1, r9, r0, asr pc
    8650:	54e00000 	strbtpl	r0, [r0], #0
    8654:	08500800 	ldmdaeq	r0, {fp}^
    8658:	00010000 	andeq	r0, r1, r0
    865c:	00045b01 	andeq	r5, r4, r1, lsl #22
    8660:	010b1600 	tsteq	fp, r0, lsl #12
    8664:	6fc60000 	svcvs	0x00c60000
    8668:	00200000 	eoreq	r0, r0, r0
    866c:	06000001 	streq	r0, [r0], -r1
    8670:	0002c403 	andeq	ip, r2, r3, lsl #8
    8674:	f5209f20 			; <UNDEFINED> instruction: 0xf5209f20
    8678:	01000000 	mrseq	r0, (UNDEF: 0)
    867c:	08501854 	ldmdaeq	r0, {r2, r4, r6, fp, ip}^
    8680:	16170000 	ldrne	r0, [r7], -r0
    8684:	17000001 	strne	r0, [r0, -r1]
    8688:	00000121 	andeq	r0, r0, r1, lsr #2
    868c:	00085018 	andeq	r5, r8, r8, lsl r0
    8690:	010b1600 	tsteq	fp, r0, lsl #12
    8694:	70410000 	subvc	r0, r1, r0
    8698:	00160000 	andseq	r0, r6, r0
    869c:	a4000001 	strge	r0, [r0], #-1
    86a0:	20000070 	andcs	r0, r0, r0, ror r0
    86a4:	000000f5 	strdeq	r0, [r0], -r5
    86a8:	50185401 	andspl	r5, r8, r1, lsl #8
    86ac:	19000008 	stmdbne	r0, {r3}
    86b0:	00000116 	andeq	r0, r0, r6, lsl r1
    86b4:	000070fd 	strdeq	r7, [r0], -sp
    86b8:	00012119 	andeq	r2, r1, r9, lsl r1
    86bc:	00713e00 	rsbseq	r3, r1, r0, lsl #28
    86c0:	55461a00 	strbpl	r1, [r6, #-2560]	; 0xa00
    86c4:	058b0800 	streq	r0, [fp, #2048]	; 0x800
    86c8:	04020000 	streq	r0, [r2], #-0
    86cc:	011b0000 	tsteq	fp, r0
    86d0:	00790251 	rsbseq	r0, r9, r1, asr r2
    86d4:	0750011b 	smmlaeq	r0, fp, r1, r0
    86d8:	00760074 	rsbseq	r0, r6, r4, ror r0
    86dc:	00282322 	eoreq	r2, r8, r2, lsr #6
    86e0:	00562c1a 	subseq	r2, r6, sl, lsl ip
    86e4:	00058b08 	andeq	r8, r5, r8, lsl #22
    86e8:	00042700 	andeq	r2, r4, r0, lsl #14
    86ec:	52011b00 	andpl	r1, r1, #0, 22
    86f0:	1b007702 	blne	26300 <__Stack_Size+0x25b00>
    86f4:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    86f8:	50011b00 	andpl	r1, r1, r0, lsl #22
    86fc:	76007407 	strvc	r7, [r0], -r7, lsl #8
    8700:	28232200 	stmdacs	r3!, {r9, sp}
    8704:	563c1a00 	ldrtpl	r1, [ip], -r0, lsl #20
    8708:	01560800 	cmpeq	r6, r0, lsl #16
    870c:	04410000 	strbeq	r0, [r1], #-0
    8710:	011b0000 	tsteq	fp, r0
    8714:	28740251 	ldmdacs	r4!, {r0, r4, r6, r9}^
    8718:	0250011b 	subseq	r0, r0, #-1073741818	; 0xc0000006
    871c:	1d000074 	stcne	0, cr0, [r0, #-464]	; 0xfffffe30
    8720:	08005650 	stmdaeq	r0, {r4, r6, r9, sl, ip, lr}
    8724:	00000156 	andeq	r0, r0, r6, asr r1
    8728:	0251011b 	subseq	r0, r1, #-1073741818	; 0xc0000006
    872c:	011b0076 	tsteq	fp, r6, ror r0
    8730:	00740250 	rsbseq	r0, r4, r0, asr r2
    8734:	00000000 	andeq	r0, r0, r0
    8738:	00e92100 	rsceq	r2, r9, r0, lsl #2
    873c:	55460000 	strbpl	r0, [r6, #-0]
    8740:	08880800 	stmeq	r8, {fp}
    8744:	01010000 	mrseq	r0, (UNDEF: 1)
    8748:	010b1601 	tsteq	fp, r1, lsl #12
    874c:	719c0000 	orrsvc	r0, ip, r0
    8750:	00160000 	andseq	r0, r6, r0
    8754:	c8000001 	stmdagt	r0, {r0}
    8758:	16000071 			; <UNDEFINED> instruction: 0x16000071
    875c:	000000f5 	strdeq	r0, [r0], -r5
    8760:	000071fe 	strdeq	r7, [r0], -lr
    8764:	00088818 	andeq	r8, r8, r8, lsl r8
    8768:	01161700 	tsteq	r6, r0, lsl #14
    876c:	21170000 	tstcs	r7, r0
    8770:	18000001 	stmdane	r0, {r0}
    8774:	00000888 	andeq	r0, r0, r8, lsl #17
    8778:	00010b16 	andeq	r0, r1, r6, lsl fp
    877c:	00722700 	rsbseq	r2, r2, r0, lsl #14
    8780:	01001600 	tsteq	r0, r0, lsl #12
    8784:	72760000 	rsbsvc	r0, r6, #0
    8788:	f5160000 			; <UNDEFINED> instruction: 0xf5160000
    878c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    8790:	18000071 	stmdane	r0, {r0, r4, r5, r6}
    8794:	00000888 	andeq	r0, r0, r8, lsl #17
    8798:	00011619 	andeq	r1, r1, r9, lsl r6
    879c:	0072b500 	rsbseq	fp, r2, r0, lsl #10
    87a0:	01211900 	teqeq	r1, r0, lsl #18
    87a4:	72eb0000 	rscvc	r0, fp, #0
    87a8:	801a0000 	andshi	r0, sl, r0
    87ac:	8b080055 	blhi	208908 <__Stack_Size+0x208108>
    87b0:	f1000005 	cps	#5
    87b4:	1b000004 	blne	87cc <__Stack_Size+0x7fcc>
    87b8:	76025201 	strvc	r5, [r2], -r1, lsl #4
    87bc:	51011b00 	tstpl	r1, r0, lsl #22
    87c0:	1b007902 	blne	26bd0 <__Stack_Size+0x263d0>
    87c4:	74075001 	strvc	r5, [r7], #-1
    87c8:	22007800 	andcs	r7, r0, #0, 16
    87cc:	1a002823 	bne	12860 <__Stack_Size+0x12060>
    87d0:	08005680 	stmdaeq	r0, {r7, r9, sl, ip, lr}
    87d4:	0000058b 	andeq	r0, r0, fp, lsl #11
    87d8:	00000516 	andeq	r0, r0, r6, lsl r5
    87dc:	0252011b 	subseq	r0, r2, #-1073741818	; 0xc0000006
    87e0:	011b0079 	tsteq	fp, r9, ror r0
    87e4:	007d0251 	rsbseq	r0, sp, r1, asr r2
    87e8:	0750011b 	smmlaeq	r0, fp, r1, r0
    87ec:	00780074 	rsbseq	r0, r8, r4, ror r0
    87f0:	00282322 	eoreq	r2, r8, r2, lsr #6
    87f4:	0056921a 	subseq	r9, r6, sl, lsl r2
    87f8:	00015608 	andeq	r5, r1, r8, lsl #12
    87fc:	00053000 	andeq	r3, r5, r0
    8800:	51011b00 	tstpl	r1, r0, lsl #22
    8804:	1b287402 	blne	a25814 <__Stack_Size+0xa25014>
    8808:	74025001 	strvc	r5, [r2], #-1
    880c:	a21d0000 	andsge	r0, sp, #0
    8810:	56080056 			; <UNDEFINED> instruction: 0x56080056
    8814:	1b000001 	blne	8820 <__Stack_Size+0x8020>
    8818:	77025101 	strvc	r5, [r2, -r1, lsl #2]
    881c:	50011b00 	andpl	r1, r1, r0, lsl #22
    8820:	00007402 	andeq	r7, r0, r2, lsl #8
    8824:	00000000 	andeq	r0, r0, r0
    8828:	003a0800 	eorseq	r0, sl, r0, lsl #16
    882c:	055b0000 	ldrbeq	r0, [fp, #-0]
    8830:	6b090000 	blvs	248838 <__Stack_Size+0x248038>
    8834:	07000000 	streq	r0, [r0, -r0]
    8838:	1b4e1e00 	blne	1390040 <__Stack_Size+0x138f840>
    883c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    8840:	000000ce 	andeq	r0, r0, lr, asr #1
    8844:	02c40305 	sbceq	r0, r4, #335544320	; 0x14000000
    8848:	2c082000 	stccs	0, cr2, [r8], {-0}
    884c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8850:	09000005 	stmdbeq	r0, {r0, r2}
    8854:	0000006b 	andeq	r0, r0, fp, rrx
    8858:	6b22003f 	blvs	88895c <__Stack_Size+0x88815c>
    885c:	6c120100 	ldfvss	f0, [r2], {-0}
    8860:	05000005 	streq	r0, [r0, #-5]
    8864:	00030403 	andeq	r0, r3, r3, lsl #8
    8868:	174d2320 	strbne	r2, [sp, -r0, lsr #6]
    886c:	00720000 	rsbseq	r0, r2, r0
    8870:	05a80000 	streq	r0, [r8, #0]!
    8874:	72240000 	eorvc	r0, r4, #0
    8878:	24000000 	strcs	r0, [r0], #-0
    887c:	000005a8 	andeq	r0, r0, r8, lsr #11
    8880:	00006b24 	andeq	r6, r0, r4, lsr #22
    8884:	04050000 	streq	r0, [r5], #-0
    8888:	000005ae 	andeq	r0, r0, lr, lsr #11
    888c:	077f0025 	ldrbeq	r0, [pc, -r5, lsr #32]!
    8890:	00040000 	andeq	r0, r4, r0
    8894:	00001dc2 	andeq	r1, r0, r2, asr #27
    8898:	16360104 	ldrtne	r0, [r6], -r4, lsl #2
    889c:	9d010000 	stcls	0, cr0, [r1, #-0]
    88a0:	9300001b 	movwls	r0, #27
    88a4:	20000008 	andcs	r0, r0, r8
    88a8:	0000000b 	andeq	r0, r0, fp
    88ac:	d6000000 	strle	r0, [r0], -r0
    88b0:	0200002c 	andeq	r0, r0, #44	; 0x2c
    88b4:	024d0708 	subeq	r0, sp, #8, 14	; 0x200000
    88b8:	01020000 	mrseq	r0, (UNDEF: 2)
    88bc:	00081808 	andeq	r1, r8, r8, lsl #16
    88c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    88c4:	00000257 	andeq	r0, r0, r7, asr r2
    88c8:	1a060102 	bne	188cd8 <__Stack_Size+0x1884d8>
    88cc:	03000008 	movweq	r0, #8
    88d0:	00000c36 	andeq	r0, r0, r6, lsr ip
    88d4:	002c1c02 	eoreq	r1, ip, r2, lsl #24
    88d8:	02020000 	andeq	r0, r2, #0
    88dc:	0006fc05 	andeq	pc, r6, r5, lsl #24
    88e0:	07020200 	streq	r0, [r2, -r0, lsl #4]
    88e4:	00000949 	andeq	r0, r0, r9, asr #18
    88e8:	da050402 	ble	1498f8 <__Stack_Size+0x1490f8>
    88ec:	02000004 	andeq	r0, r0, #4
    88f0:	02520704 	subseq	r0, r2, #4, 14	; 0x100000
    88f4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    88f8:	0004d505 	andeq	sp, r4, r5, lsl #10
    88fc:	18d80300 	ldmne	r8, {r8, r9}^
    8900:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    8904:	00000025 	andeq	r0, r0, r5, lsr #32
    8908:	69050404 	stmdbvs	r5, {r2, sl}
    890c:	0300746e 	movweq	r7, #1134	; 0x46e
    8910:	00000c38 	andeq	r0, r0, r8, lsr ip
    8914:	00412a03 	subeq	r2, r1, r3, lsl #20
    8918:	da030000 	ble	c8920 <__Stack_Size+0xc8120>
    891c:	03000018 	movweq	r0, #24
    8920:	00006f4e 	andeq	r6, r0, lr, asr #30
    8924:	0b1f0300 	bleq	7c952c <__Stack_Size+0x7c8d2c>
    8928:	d4040000 	strle	r0, [r4], #-0
    892c:	00000033 	andeq	r0, r0, r3, lsr r0
    8930:	8b070402 	blhi	1c9940 <__Stack_Size+0x1c9140>
    8934:	05000007 	streq	r0, [r0, #-7]
    8938:	08010204 	stmdaeq	r1, {r2, r9}
    893c:	00000821 	andeq	r0, r0, r1, lsr #16
    8940:	00194906 	andseq	r4, r9, r6, lsl #18
    8944:	14054000 	strne	r4, [r5], #-0
    8948:	000000c9 	andeq	r0, r0, r9, asr #1
    894c:	05006807 	streq	r6, [r0, #-2055]	; 0x807
    8950:	0000c915 	andeq	ip, r0, r5, lsl r9
    8954:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8958:	0000008c 	andeq	r0, r0, ip, lsl #1
    895c:	000000d9 	ldrdeq	r0, [r0], -r9
    8960:	0000a209 	andeq	sl, r0, r9, lsl #4
    8964:	0a000700 	beq	a56c <__Stack_Size+0x9d6c>
    8968:	00001b8f 	andeq	r1, r0, pc, lsl #23
    896c:	008c5f01 	addeq	r5, ip, r1, lsl #30
    8970:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    8974:	0b000000 	bleq	897c <__Stack_Size+0x817c>
    8978:	5f010078 	svcpl	0x00010078
    897c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8980:	0019dd0c 	andseq	sp, r9, ip, lsl #26
    8984:	7a5f0100 	bvc	17c8d8c <__Stack_Size+0x17c858c>
    8988:	00000000 	andeq	r0, r0, r0
    898c:	001b950d 	andseq	r9, fp, sp, lsl #10
    8990:	034b0100 	movteq	r0, #45312	; 0xb100
    8994:	0000011d 	andeq	r0, r0, sp, lsl r1
    8998:	0100780b 	tsteq	r0, fp, lsl #16
    899c:	00011d4b 	andeq	r1, r1, fp, asr #26
    89a0:	00760b00 	rsbseq	r0, r6, r0, lsl #22
    89a4:	008c4b01 	addeq	r4, ip, r1, lsl #22
    89a8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    89ac:	00008104 	andeq	r8, r0, r4, lsl #2
    89b0:	1bac0a00 	blne	feb0b1b8 <BootRAM+0xda7b959>
    89b4:	3b010000 	blcc	489bc <__Stack_Size+0x481bc>
    89b8:	0000008c 	andeq	r0, r0, ip, lsl #1
    89bc:	00014603 	andeq	r4, r1, r3, lsl #12
    89c0:	00780b00 	rsbseq	r0, r8, r0, lsl #22
    89c4:	01463b01 	cmpeq	r6, r1, lsl #22
    89c8:	720f0000 	andvc	r0, pc, #0
    89cc:	8c3d0100 	ldfhis	f0, [sp], #-0
    89d0:	00000000 	andeq	r0, r0, r0
    89d4:	014c040e 	cmpeq	ip, lr, lsl #8
    89d8:	81100000 	tsthi	r0, r0
    89dc:	11000000 	mrsne	r0, (UNDEF: 0)
    89e0:	00001970 	andeq	r1, r0, r0, ror r9
    89e4:	56d06401 	ldrbpl	r6, [r0], r1, lsl #8
    89e8:	04940800 	ldreq	r0, [r4], #2048	; 0x800
    89ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    89f0:	00000461 	andeq	r0, r0, r1, ror #8
    89f4:	01007312 	tsteq	r0, r2, lsl r3
    89f8:	00046164 	andeq	r6, r4, r4, ror #2
    89fc:	00734200 	rsbseq	r4, r3, r0, lsl #4
    8a00:	6c621200 	sfmvs	f1, 2, [r2], #-0
    8a04:	6401006b 	strvs	r0, [r1], #-107	; 0x6b
    8a08:	00000146 	andeq	r0, r0, r6, asr #2
    8a0c:	0000736f 	andeq	r7, r0, pc, ror #6
    8a10:	01007713 	tsteq	r0, r3, lsl r7
    8a14:	00046766 	andeq	r6, r4, r6, ror #14
    8a18:	e0910300 	adds	r0, r1, r0, lsl #6
    8a1c:	0061147e 	rsbeq	r1, r1, lr, ror r4
    8a20:	008c6701 	addeq	r6, ip, r1, lsl #14
    8a24:	738d0000 	orrvc	r0, sp, #0
    8a28:	62140000 	andsvs	r0, r4, #0
    8a2c:	8c670100 	stfhie	f0, [r7], #-0
    8a30:	ed000000 	stc	0, cr0, [r0, #-0]
    8a34:	14000073 	strne	r0, [r0], #-115	; 0x73
    8a38:	67010063 	strvs	r0, [r1, -r3, rrx]
    8a3c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8a40:	0000742f 	andeq	r7, r0, pc, lsr #8
    8a44:	01006414 	tsteq	r0, r4, lsl r4
    8a48:	00008c67 	andeq	r8, r0, r7, ror #24
    8a4c:	00747800 	rsbseq	r7, r4, r0, lsl #16
    8a50:	00651400 	rsbeq	r1, r5, r0, lsl #8
    8a54:	008c6701 	addeq	r6, ip, r1, lsl #14
    8a58:	74dc0000 	ldrbvc	r0, [ip], #0
    8a5c:	66140000 	ldrvs	r0, [r4], -r0
    8a60:	8c670100 	stfhie	f0, [r7], #-0
    8a64:	30000000 	andcc	r0, r0, r0
    8a68:	14000075 	strne	r0, [r0], #-117	; 0x75
    8a6c:	67010067 	strvs	r0, [r1, -r7, rrx]
    8a70:	0000008c 	andeq	r0, r0, ip, lsl #1
    8a74:	00007571 	andeq	r7, r0, r1, ror r5
    8a78:	01006814 	tsteq	r0, r4, lsl r8
    8a7c:	00008c67 	andeq	r8, r0, r7, ror #24
    8a80:	0075b900 	rsbseq	fp, r5, r0, lsl #18
    8a84:	00691400 	rsbeq	r1, r9, r0, lsl #8
    8a88:	007a6801 	rsbseq	r6, sl, r1, lsl #16
    8a8c:	76050000 	strvc	r0, [r5], -r0
    8a90:	23150000 	tstcs	r5, #0
    8a94:	e0000001 	and	r0, r0, r1
    8a98:	d0080056 	andle	r0, r8, r6, asr r0
    8a9c:	01000008 	tsteq	r0, r8
    8aa0:	0002306b 	andeq	r3, r2, fp, rrx
    8aa4:	01331600 	teqeq	r3, r0, lsl #12
    8aa8:	76480000 	strbvc	r0, [r8], -r0
    8aac:	d0170000 	andsle	r0, r7, r0
    8ab0:	18000008 	stmdane	r0, {r3}
    8ab4:	0000013c 	andeq	r0, r0, ip, lsr r1
    8ab8:	000076c3 	andeq	r7, r0, r3, asr #13
    8abc:	2c190000 	ldccs	0, cr0, [r9], {-0}
    8ac0:	62080058 	andvs	r0, r8, #88	; 0x58
    8ac4:	14000002 	strne	r0, [r0], #-2
    8ac8:	01006977 	tsteq	r0, r7, ror r9
    8acc:	0004777b 	andeq	r7, r4, fp, ror r7
    8ad0:	00779f00 	rsbseq	r9, r7, r0, lsl #30
    8ad4:	1b741a00 	blne	1d0f2dc <__Stack_Size+0x1d0eadc>
    8ad8:	7c010000 	stcvc	0, cr0, [r1], {-0}
    8adc:	00000477 	andeq	r0, r0, r7, ror r4
    8ae0:	000077b4 			; <UNDEFINED> instruction: 0x000077b4
    8ae4:	32697714 	rsbcc	r7, r9, #20, 14	; 0x500000
    8ae8:	777d0100 	ldrbvc	r0, [sp, -r0, lsl #2]!
    8aec:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    8af0:	14000078 	strne	r0, [r0], #-120	; 0x78
    8af4:	00376977 	eorseq	r6, r7, r7, ror r9
    8af8:	04777e01 	ldrbteq	r7, [r7], #-3585	; 0xe01
    8afc:	78520000 	ldmdavc	r2, {}^	; <UNPREDICTABLE>
    8b00:	73140000 	tstvc	r4, #0
    8b04:	7f010030 	svcvc	0x00010030
    8b08:	00000477 	andeq	r0, r0, r7, ror r4
    8b0c:	0000789a 	muleq	r0, sl, r8
    8b10:	00317314 	eorseq	r7, r1, r4, lsl r3
    8b14:	04778101 	ldrbteq	r8, [r7], #-257	; 0x101
    8b18:	79d60000 	ldmibvc	r6, {}^	; <UNPREDICTABLE>
    8b1c:	53140000 	tstpl	r4, #0
    8b20:	85010030 	strhi	r0, [r1, #-48]	; 0x30
    8b24:	00000477 	andeq	r0, r0, r7, ror r4
    8b28:	00007abf 			; <UNDEFINED> instruction: 0x00007abf
    8b2c:	00315314 	eorseq	r5, r1, r4, lsl r3
    8b30:	04778601 	ldrbteq	r8, [r7], #-1537	; 0x601
    8b34:	7b840000 	blvc	fe108b3c <BootRAM+0xd0792dd>
    8b38:	63140000 	tstvs	r4, #0
    8b3c:	87010068 	strhi	r0, [r1, -r8, rrx]
    8b40:	00000477 	andeq	r0, r0, r7, ror r4
    8b44:	00007c46 	andeq	r7, r0, r6, asr #24
    8b48:	001b421a 	andseq	r4, fp, sl, lsl r2
    8b4c:	77880100 	strvc	r0, [r8, r0, lsl #2]
    8b50:	90000004 	andls	r0, r0, r4
    8b54:	1400007c 	strne	r0, [r0], #-124	; 0x7c
    8b58:	006a616d 	rsbeq	r6, sl, sp, ror #2
    8b5c:	04778901 	ldrbteq	r8, [r7], #-2305	; 0x901
    8b60:	7ca80000 	stcvc	0, cr0, [r8]
    8b64:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    8b68:	0100001b 	tsteq	r0, fp, lsl r0
    8b6c:	0004778a 	andeq	r7, r4, sl, lsl #15
    8b70:	007d0400 	rsbseq	r0, sp, r0, lsl #8
    8b74:	00d91500 	sbcseq	r1, r9, r0, lsl #10
    8b78:	58640000 	stmdapl	r4!, {}^	; <UNPREDICTABLE>
    8b7c:	08e80800 	stmiaeq	r8!, {fp}^
    8b80:	86010000 	strhi	r0, [r1], -r0
    8b84:	0000030d 	andeq	r0, r0, sp, lsl #6
    8b88:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    8b8c:	007d2c00 	rsbseq	r2, sp, r0, lsl #24
    8b90:	00e91600 	rsceq	r1, r9, r0, lsl #12
    8b94:	7d4c0000 	stclvc	0, cr0, [ip, #-0]
    8b98:	15000000 	strne	r0, [r0, #-0]
    8b9c:	000000d9 	ldrdeq	r0, [r0], -r9
    8ba0:	0800586e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, lr}
    8ba4:	00000910 	andeq	r0, r0, r0, lsl r9
    8ba8:	03338601 	teqeq	r3, #1048576	; 0x100000
    8bac:	f2160000 	vhadd.s16	d0, d6, d0
    8bb0:	81000000 	mrshi	r0, (UNDEF: 0)
    8bb4:	1600007d 			; <UNDEFINED> instruction: 0x1600007d
    8bb8:	000000e9 	andeq	r0, r0, r9, ror #1
    8bbc:	00007d4c 	andeq	r7, r0, ip, asr #26
    8bc0:	00d91500 	sbcseq	r1, r9, r0, lsl #10
    8bc4:	58a00000 	stmiapl	r0!, {}	; <UNPREDICTABLE>
    8bc8:	09380800 	ldmdbeq	r8!, {fp}
    8bcc:	86010000 	strhi	r0, [r1], -r0
    8bd0:	00000359 	andeq	r0, r0, r9, asr r3
    8bd4:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    8bd8:	007da100 	rsbseq	sl, sp, r0, lsl #2
    8bdc:	00e91600 	rsceq	r1, r9, r0, lsl #12
    8be0:	7d4c0000 	stclvc	0, cr0, [ip, #-0]
    8be4:	15000000 	strne	r0, [r0, #-0]
    8be8:	000000d9 	ldrdeq	r0, [r0], -r9
    8bec:	080058a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, lr}
    8bf0:	00000970 	andeq	r0, r0, r0, ror r9
    8bf4:	037f8001 	cmneq	pc, #1
    8bf8:	f2160000 	vhadd.s16	d0, d6, d0
    8bfc:	c3000000 	movwgt	r0, #0
    8c00:	1600007d 			; <UNDEFINED> instruction: 0x1600007d
    8c04:	000000e9 	andeq	r0, r0, r9, ror #1
    8c08:	000077b4 			; <UNDEFINED> instruction: 0x000077b4
    8c0c:	00d91500 	sbcseq	r1, r9, r0, lsl #10
    8c10:	58bc0000 	ldmpl	ip!, {}	; <UNPREDICTABLE>
    8c14:	09a80800 	stmibeq	r8!, {fp}
    8c18:	80010000 	andhi	r0, r1, r0
    8c1c:	000003a5 	andeq	r0, r0, r5, lsr #7
    8c20:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    8c24:	007de300 	rsbseq	lr, sp, r0, lsl #6
    8c28:	00e91600 	rsceq	r1, r9, r0, lsl #12
    8c2c:	77b40000 	ldrvc	r0, [r4, r0]!
    8c30:	15000000 	strne	r0, [r0, #-0]
    8c34:	000000d9 	ldrdeq	r0, [r0], -r9
    8c38:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
    8c3c:	000009d8 	ldrdeq	r0, [r0], -r8
    8c40:	03cb8201 	biceq	r8, fp, #268435456	; 0x10000000
    8c44:	f2160000 	vhadd.s16	d0, d6, d0
    8c48:	03000000 	movweq	r0, #0
    8c4c:	1600007e 			; <UNDEFINED> instruction: 0x1600007e
    8c50:	000000e9 	andeq	r0, r0, r9, ror #1
    8c54:	0000780e 	andeq	r7, r0, lr, lsl #16
    8c58:	00d91500 	sbcseq	r1, r9, r0, lsl #10
    8c5c:	59100000 	ldmdbpl	r0, {}	; <UNPREDICTABLE>
    8c60:	09f00800 	ldmibeq	r0!, {fp}^
    8c64:	85010000 	strhi	r0, [r1, #-0]
    8c68:	000003f1 	strdeq	r0, [r0], -r1
    8c6c:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    8c70:	007e2300 	rsbseq	r2, lr, r0, lsl #6
    8c74:	00e91600 	rsceq	r1, r9, r0, lsl #12
    8c78:	7e450000 	cdpvc	0, 4, cr0, cr5, cr0, {0}
    8c7c:	15000000 	strne	r0, [r0, #-0]
    8c80:	000000d9 	ldrdeq	r0, [r0], -r9
    8c84:	0800591a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, lr}
    8c88:	00000a18 	andeq	r0, r0, r8, lsl sl
    8c8c:	04178501 	ldreq	r8, [r7], #-1281	; 0x501
    8c90:	f2160000 	vhadd.s16	d0, d6, d0
    8c94:	7a000000 	bvc	8c9c <__Stack_Size+0x849c>
    8c98:	1600007e 			; <UNDEFINED> instruction: 0x1600007e
    8c9c:	000000e9 	andeq	r0, r0, r9, ror #1
    8ca0:	00007e45 	andeq	r7, r0, r5, asr #28
    8ca4:	00d91500 	sbcseq	r1, r9, r0, lsl #10
    8ca8:	597c0000 	ldmdbpl	ip!, {}^	; <UNPREDICTABLE>
    8cac:	0a400800 	beq	100acb4 <__Stack_Size+0x100a4b4>
    8cb0:	82010000 	andhi	r0, r1, #0
    8cb4:	0000043d 	andeq	r0, r0, sp, lsr r4
    8cb8:	0000f216 	andeq	pc, r0, r6, lsl r2	; <UNPREDICTABLE>
    8cbc:	007e9a00 	rsbseq	r9, lr, r0, lsl #20
    8cc0:	00e91600 	rsceq	r1, r9, r0, lsl #12
    8cc4:	780e0000 	stmdavc	lr, {}	; <UNPREDICTABLE>
    8cc8:	1b000000 	blne	8cd0 <__Stack_Size+0x84d0>
    8ccc:	000000d9 	ldrdeq	r0, [r0], -r9
    8cd0:	080059e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, lr}
    8cd4:	00000a60 	andeq	r0, r0, r0, ror #20
    8cd8:	f2168501 	vrshl.s16	d8, d1, d6
    8cdc:	bc000000 	stclt	0, cr0, [r0], {-0}
    8ce0:	1600007e 			; <UNDEFINED> instruction: 0x1600007e
    8ce4:	000000e9 	andeq	r0, r0, r9, ror #1
    8ce8:	00007e45 	andeq	r7, r0, r5, asr #28
    8cec:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    8cf0:	0000b204 	andeq	fp, r0, r4, lsl #4
    8cf4:	008c0800 	addeq	r0, ip, r0, lsl #16
    8cf8:	04770000 	ldrbteq	r0, [r7], #-0
    8cfc:	a2090000 	andge	r0, r9, #0
    8d00:	0f000000 	svceq	0x00000000
    8d04:	008c1000 	addeq	r1, ip, r0
    8d08:	42110000 	andsmi	r0, r1, #0
    8d0c:	01000018 	tsteq	r0, r8, lsl r0
    8d10:	005b64a5 	subseq	r6, fp, r5, lsr #9
    8d14:	00008808 	andeq	r8, r0, r8, lsl #16
    8d18:	8f9c0100 	svchi	0x009c0100
    8d1c:	12000005 	andne	r0, r0, #5
    8d20:	a5010073 	strge	r0, [r1, #-115]	; 0x73
    8d24:	00000461 	andeq	r0, r0, r1, ror #8
    8d28:	00007ede 	ldrdeq	r7, [r0], -lr
    8d2c:	6b6c6212 	blvs	1b2157c <__Stack_Size+0x1b20d7c>
    8d30:	46a50100 	strtmi	r0, [r5], r0, lsl #2
    8d34:	fc000001 	stc2	0, cr0, [r0], {1}
    8d38:	1c00007e 	stcne	0, cr0, [r0], {126}	; 0x7e
    8d3c:	00001b69 	andeq	r1, r0, r9, ror #22
    8d40:	0097a601 	addseq	sl, r7, r1, lsl #12
    8d44:	7f1a0000 	svcvc	0x001a0000
    8d48:	8a1d0000 	bhi	748d50 <__Stack_Size+0x748550>
    8d4c:	0100001b 	tsteq	r0, fp, lsl r0
    8d50:	00058fa8 	andeq	r8, r5, r8, lsr #31
    8d54:	e0910300 	adds	r0, r1, r0, lsl #6
    8d58:	1b791a7e 	blne	1e4f758 <__Stack_Size+0x1e4ef58>
    8d5c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    8d60:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    8d64:	00007f51 	andeq	r7, r0, r1, asr pc
    8d68:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
    8d6c:	005b8800 	subseq	r8, fp, r0, lsl #16
    8d70:	000a9808 	andeq	r9, sl, r8, lsl #16
    8d74:	00b50100 	adcseq	r0, r5, r0, lsl #2
    8d78:	16000005 	strne	r0, [r0], -r5
    8d7c:	00000113 	andeq	r0, r0, r3, lsl r1
    8d80:	00007f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    8d84:	00010a16 	andeq	r0, r1, r6, lsl sl
    8d88:	007fbd00 	rsbseq	fp, pc, r0, lsl #26
    8d8c:	7c1e0000 	ldcvc	0, cr0, [lr], {-0}
    8d90:	4108005b 	qaddmi	r0, fp, r8
    8d94:	1f000007 	svcne	0x00000007
    8d98:	1f000005 	svcne	0x00000005
    8d9c:	75025201 	strvc	r5, [r2, #-513]	; 0x201
    8da0:	51011f00 	tstpl	r1, r0, lsl #30
    8da4:	011f3001 	tsteq	pc, r1
    8da8:	007d0250 	rsbseq	r0, sp, r0, asr r2
    8dac:	5bba1e00 	blpl	fee905b4 <BootRAM+0xde00d55>
    8db0:	01510800 	cmpeq	r1, r0, lsl #16
    8db4:	05390000 	ldreq	r0, [r9, #-0]!
    8db8:	011f0000 	tsteq	pc, r0
    8dbc:	007d0251 	rsbseq	r0, sp, r1, asr r2
    8dc0:	0250011f 	subseq	r0, r0, #-1073741817	; 0xc0000007
    8dc4:	1e00007a 	mcrne	0, 0, r0, cr0, cr10, {3}
    8dc8:	08005bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip, lr}
    8dcc:	0000075e 	andeq	r0, r0, lr, asr r7
    8dd0:	00000559 	andeq	r0, r0, r9, asr r5
    8dd4:	0252011f 	subseq	r0, r2, #-1073741817	; 0xc0000007
    8dd8:	011f0076 	tsteq	pc, r6, ror r0	; <UNPREDICTABLE>
    8ddc:	00770251 	rsbseq	r0, r7, r1, asr r2
    8de0:	0250011f 	subseq	r0, r0, #-1073741817	; 0xc0000007
    8de4:	1e00007d 	mcrne	0, 0, r0, cr0, cr13, {3}
    8de8:	08005be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp, ip, lr}
    8dec:	00000151 	andeq	r0, r0, r1, asr r1
    8df0:	00000573 	andeq	r0, r0, r3, ror r5
    8df4:	0251011f 	subseq	r0, r1, #-1073741817	; 0xc0000007
    8df8:	011f007d 	tsteq	pc, sp, ror r0	; <UNPREDICTABLE>
    8dfc:	007a0250 	rsbseq	r0, sl, r0, asr r2
    8e00:	5bea2000 	blpl	ffa90e08 <BootRAM+0xea015a9>
    8e04:	07410800 	strbeq	r0, [r1, -r0, lsl #16]
    8e08:	011f0000 	tsteq	pc, r0
    8e0c:	00750252 	rsbseq	r0, r5, r2, asr r2
    8e10:	0151011f 	cmpeq	r1, pc, lsl r1
    8e14:	50011f30 	andpl	r1, r1, r0, lsr pc
    8e18:	00007d02 	andeq	r7, r0, r2, lsl #26
    8e1c:	00810800 	addeq	r0, r1, r0, lsl #16
    8e20:	059f0000 	ldreq	r0, [pc]	; 8e28 <__Stack_Size+0x8628>
    8e24:	a2090000 	andge	r0, r9, #0
    8e28:	7f000000 	svcvc	0x00000000
    8e2c:	00971000 	addseq	r1, r7, r0
    8e30:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    8e34:	01000018 	tsteq	r0, r8, lsl r0
    8e38:	005becb9 	ldrheq	lr, [fp], #-201	; 0xffffff37
    8e3c:	00029608 	andeq	r9, r2, r8, lsl #12
    8e40:	ef9c0100 	svc	0x009c0100
    8e44:	12000006 	andne	r0, r0, #6
    8e48:	b9010073 	stmdblt	r1, {r0, r1, r4, r5, r6}
    8e4c:	000006ef 	andeq	r0, r0, pc, ror #13
    8e50:	00008020 	andeq	r8, r0, r0, lsr #32
    8e54:	000f821c 	andeq	r8, pc, ip, lsl r2	; <UNPREDICTABLE>
    8e58:	1db90100 	ldfnes	f0, [r9]
    8e5c:	3f000001 	svccc	0x00000001
    8e60:	1c000080 	stcne	0, cr0, [r0], {128}	; 0x80
    8e64:	00001b83 	andeq	r1, r0, r3, lsl #23
    8e68:	0033ba01 	eorseq	fp, r3, r1, lsl #20
    8e6c:	80820000 	addhi	r0, r2, r0
    8e70:	6c120000 	ldcvs	0, cr0, [r2], {-0}
    8e74:	01006e65 	tsteq	r0, r5, ror #28
    8e78:	000033ba 			; <UNDEFINED> instruction: 0x000033ba
    8e7c:	0080a300 	addeq	sl, r0, r0, lsl #6
    8e80:	00691400 	rsbeq	r1, r9, r0, lsl #8
    8e84:	007abc01 	rsbseq	fp, sl, r1, lsl #24
    8e88:	81180000 	tsthi	r8, r0
    8e8c:	fe150000 	cdp2	0, 1, cr0, cr5, cr0, {0}
    8e90:	46000000 	strmi	r0, [r0], -r0
    8e94:	b008005c 	andlt	r0, r8, ip, asr r0
    8e98:	0100000a 	tsteq	r0, sl
    8e9c:	000626d8 	ldrdeq	r2, [r6], -r8
    8ea0:	01131600 	tsteq	r3, r0, lsl #12
    8ea4:	813c0000 	teqhi	ip, r0
    8ea8:	0a160000 	beq	588eb0 <__Stack_Size+0x5886b0>
    8eac:	b2000001 	andlt	r0, r0, #1
    8eb0:	00000081 	andeq	r0, r0, r1, lsl #1
    8eb4:	005cf821 	subseq	pc, ip, r1, lsr #16
    8eb8:	0000e208 	andeq	lr, r0, r8, lsl #4
    8ebc:	00069000 	andeq	r9, r6, r0
    8ec0:	6d741300 	ldclvs	3, cr1, [r4, #-0]
    8ec4:	ca010070 	bgt	4908c <__Stack_Size+0x4888c>
    8ec8:	000006fa 	strdeq	r0, [r0], -sl
    8ecc:	14509102 	ldrbne	r9, [r0], #-258	; 0x102
    8ed0:	cb010063 	blgt	49064 <__Stack_Size+0x48864>
    8ed4:	00000033 	andeq	r0, r0, r3, lsr r0
    8ed8:	00008220 	andeq	r8, r0, r0, lsr #4
    8edc:	0000fe15 	andeq	pc, r0, r5, lsl lr	; <UNPREDICTABLE>
    8ee0:	005d0200 	subseq	r0, sp, r0, lsl #4
    8ee4:	000ad008 	andeq	sp, sl, r8
    8ee8:	70d00100 	sbcsvc	r0, r0, r0, lsl #2
    8eec:	22000006 	andcs	r0, r0, #6
    8ef0:	00000113 	andeq	r0, r0, r3, lsl r1
    8ef4:	00010a16 	andeq	r0, r1, r6, lsl sl
    8ef8:	00823300 	addeq	r3, r2, r0, lsl #6
    8efc:	c8200000 	stmdagt	r0!, {}	; <UNPREDICTABLE>
    8f00:	5e08005d 	mcrpl	0, 0, r0, cr8, cr13, {2}
    8f04:	1f000007 	svcne	0x00000007
    8f08:	91095101 	tstls	r9, r1, lsl #2
    8f0c:	06449100 	strbeq	r9, [r4], -r0, lsl #2
    8f10:	1c300822 	ldcne	8, cr0, [r0], #-136	; 0xffffff78
    8f14:	0450011f 	ldrbeq	r0, [r0], #-287	; 0x11f
    8f18:	067fac91 			; <UNDEFINED> instruction: 0x067fac91
    8f1c:	da190000 	ble	648f24 <__Stack_Size+0x648724>
    8f20:	a208005d 	andge	r0, r8, #93	; 0x5d
    8f24:	13000000 	movwne	r0, #0
    8f28:	00706d74 	rsbseq	r6, r0, r4, ror sp
    8f2c:	06fadf01 	ldrbteq	sp, [sl], r1, lsl #30
    8f30:	91020000 	mrsls	r0, (UNDEF: 2)
    8f34:	00fe1550 	rscseq	r1, lr, r0, asr r5
    8f38:	5dea0000 	stclpl	0, cr0, [sl]
    8f3c:	0b000800 	bleq	af44 <__Stack_Size+0xa744>
    8f40:	e1010000 	mrs	r0, (UNDEF: 1)
    8f44:	000006cd 	andeq	r0, r0, sp, asr #13
    8f48:	00011316 	andeq	r1, r1, r6, lsl r3
    8f4c:	00824800 	addeq	r4, r2, r0, lsl #16
    8f50:	010a1600 	tsteq	sl, r0, lsl #12
    8f54:	82c50000 	sbchi	r0, r5, #0
    8f58:	20000000 	andcs	r0, r0, r0
    8f5c:	08005e7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
    8f60:	0000075e 	andeq	r0, r0, lr, asr r7
    8f64:	0452011f 	ldrbeq	r0, [r2], #-287	; 0x11f
    8f68:	067fa491 			; <UNDEFINED> instruction: 0x067fa491
    8f6c:	0251011f 	subseq	r0, r1, #-1073741817	; 0xc0000007
    8f70:	011f5091 			; <UNDEFINED> instruction: 0x011f5091
    8f74:	ac910450 	cfldrsge	mvf0, [r1], {80}	; 0x50
    8f78:	0000067f 	andeq	r0, r0, pc, ror r6
    8f7c:	f5040e00 			; <UNDEFINED> instruction: 0xf5040e00
    8f80:	10000006 	andne	r0, r0, r6
    8f84:	000000b2 	strheq	r0, [r0], -r2
    8f88:	00008108 	andeq	r8, r0, r8, lsl #2
    8f8c:	00070a00 	andeq	r0, r7, r0, lsl #20
    8f90:	00a20900 	adceq	r0, r2, r0, lsl #18
    8f94:	00070000 	andeq	r0, r7, r0
    8f98:	00008c08 	andeq	r8, r0, r8, lsl #24
    8f9c:	00071a00 	andeq	r1, r7, r0, lsl #20
    8fa0:	00a20900 	adceq	r0, r2, r0, lsl #18
    8fa4:	004f0000 	subeq	r0, pc, r0
    8fa8:	001bb31d 	andseq	fp, fp, sp, lsl r3
    8fac:	2b100100 	blcs	4093b4 <__Stack_Size+0x408bb4>
    8fb0:	05000007 	streq	r0, [r0, #-7]
    8fb4:	00791803 	rsbseq	r1, r9, r3, lsl #16
    8fb8:	070a1008 	streq	r1, [sl, -r8]
    8fbc:	84230000 	strthi	r0, [r3], #-0
    8fc0:	01000018 	tsteq	r0, r8, lsl r0
    8fc4:	0006f509 	andeq	pc, r6, r9, lsl #10
    8fc8:	d8030500 	stmdale	r3, {r8, sl}
    8fcc:	24080078 	strcs	r0, [r8], #-120	; 0x78
    8fd0:	00000c0c 	andeq	r0, r0, ip, lsl #24
    8fd4:	000000a9 	andeq	r0, r0, r9, lsr #1
    8fd8:	0000075e 	andeq	r0, r0, lr, asr r7
    8fdc:	0000a925 	andeq	sl, r0, r5, lsr #18
    8fe0:	007a2500 	rsbseq	r2, sl, r0, lsl #10
    8fe4:	a2250000 	eorge	r0, r5, #0
    8fe8:	00000000 	andeq	r0, r0, r0
    8fec:	00174d24 	andseq	r4, r7, r4, lsr #26
    8ff0:	0000a900 	andeq	sl, r0, r0, lsl #18
    8ff4:	00077b00 	andeq	r7, r7, r0, lsl #22
    8ff8:	00a92500 	adceq	r2, r9, r0, lsl #10
    8ffc:	7b250000 	blvc	949004 <__Stack_Size+0x948804>
    9000:	25000007 	strcs	r0, [r0, #-7]
    9004:	000000a2 	andeq	r0, r0, r2, lsr #1
    9008:	81040e00 	tsthi	r4, r0, lsl #28
    900c:	26000007 	strcs	r0, [r0], -r7
    9010:	0001cc00 	andeq	ip, r1, r0, lsl #24
    9014:	a7000400 	strge	r0, [r0, -r0, lsl #8]
    9018:	0400001f 	streq	r0, [r0], #-31
    901c:	00063901 	andeq	r3, r6, r1, lsl #18
    9020:	1c2a0100 	stfnes	f0, [sl], #-0
    9024:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    9028:	0b400000 	bleq	1009030 <__Stack_Size+0x1008830>
    902c:	00000000 	andeq	r0, r0, r0
    9030:	320a0000 	andcc	r0, sl, #0
    9034:	01020000 	mrseq	r0, (UNDEF: 2)
    9038:	00460c02 	subeq	r0, r6, r2, lsl #24
    903c:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    9040:	0000000b 	andeq	r0, r0, fp
    9044:	000b6003 	andeq	r6, fp, r3
    9048:	11030100 	mrsne	r0, (UNDEF: 19)
    904c:	0200000d 	andeq	r0, r0, #13
    9050:	000b7203 	andeq	r7, fp, r3, lsl #4
    9054:	04000300 	streq	r0, [r0], #-768	; 0x300
    9058:	00000dce 	andeq	r0, r0, lr, asr #27
    905c:	00250e02 	eoreq	r0, r5, r2, lsl #28
    9060:	02050000 	andeq	r0, r5, #0
    9064:	00721002 	rsbseq	r1, r2, r2
    9068:	db060000 	blle	189070 <__Stack_Size+0x188870>
    906c:	0200000d 	andeq	r0, r0, #13
    9070:	00004612 	andeq	r4, r0, r2, lsl r6
    9074:	87060000 	strhi	r0, [r6, -r0]
    9078:	0200000b 	andeq	r0, r0, #11
    907c:	00007213 	andeq	r7, r0, r3, lsl r2
    9080:	07000100 	streq	r0, [r0, -r0, lsl #2]
    9084:	08210801 	stmdaeq	r1!, {r0, fp}
    9088:	9d040000 	stcls	0, cr0, [r4, #-0]
    908c:	0200000b 	andeq	r0, r0, #11
    9090:	00005114 	andeq	r5, r0, r4, lsl r1
    9094:	1bf70800 	blne	ffdcb09c <BootRAM+0xed3b83d>
    9098:	0a010000 	beq	490a0 <__Stack_Size+0x488a0>
    909c:	000000ca 	andeq	r0, r0, sl, asr #1
    90a0:	00000000 	andeq	r0, r0, r0
    90a4:	00000018 	andeq	r0, r0, r8, lsl r0
    90a8:	00ca9c01 	sbceq	r9, sl, r1, lsl #24
    90ac:	bb090000 	bllt	2490b4 <__Stack_Size+0x2488b4>
    90b0:	0100001b 	tsteq	r0, fp, lsl r0
    90b4:	0000720a 	andeq	r7, r0, sl, lsl #4
    90b8:	00832800 	addeq	r2, r3, r0, lsl #16
    90bc:	1bc40a00 	blne	ff10b8c4 <BootRAM+0xe07c065>
    90c0:	0c010000 	stceq	0, cr0, [r1], {-0}
    90c4:	000000e8 	andeq	r0, r0, r8, ror #1
    90c8:	00000305 	andeq	r0, r0, r5, lsl #6
    90cc:	e00b0000 	and	r0, fp, r0
    90d0:	0100001b 	tsteq	r0, fp, lsl r0
    90d4:	0000ed0d 	andeq	lr, r0, sp, lsl #26
    90d8:	0c005000 	stceq	0, cr5, [r0], {-0}
    90dc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    90e0:	720d0074 	andvc	r0, sp, #116	; 0x74
    90e4:	e1000000 	mrs	r0, (UNDEF: 0)
    90e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    90ec:	000000e1 	andeq	r0, r0, r1, ror #1
    90f0:	0407004f 	streq	r0, [r7], #-79	; 0x4f
    90f4:	00078b07 	andeq	r8, r7, r7, lsl #22
    90f8:	00d10f00 	sbcseq	r0, r1, r0, lsl #30
    90fc:	720f0000 	andvc	r0, pc, #0
    9100:	10000000 	andne	r0, r0, r0
    9104:	00000e24 	andeq	r0, r0, r4, lsr #28
    9108:	00001301 	andeq	r1, r0, r1, lsl #6
    910c:	00080000 	andeq	r0, r8, r0
    9110:	9c010000 	stcls	0, cr0, [r1], {-0}
    9114:	00000115 	andeq	r0, r0, r5, lsl r1
    9118:	001c1311 	andseq	r1, ip, r1, lsl r3
    911c:	15130100 	ldrne	r0, [r3, #-256]	; 0x100
    9120:	01000001 	tsteq	r0, r1
    9124:	04120050 	ldreq	r0, [r2], #-80	; 0x50
    9128:	00000079 	andeq	r0, r0, r9, ror r0
    912c:	000bc308 	andeq	ip, fp, r8, lsl #6
    9130:	ca190100 	bgt	649538 <__Stack_Size+0x648d38>
	...
    913c:	01000001 	tsteq	r0, r1
    9140:	0001be9c 	muleq	r1, ip, lr
    9144:	1c0b0900 	stcne	9, cr0, [fp], {-0}
    9148:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    914c:	000001be 			; <UNDEFINED> instruction: 0x000001be
    9150:	00008354 	andeq	r8, r0, r4, asr r3
    9154:	001bcd09 	andseq	ip, fp, r9, lsl #26
    9158:	c4190100 	ldrgt	r0, [r9], #-256	; 0x100
    915c:	ca000001 	bgt	9168 <__Stack_Size+0x8968>
    9160:	09000083 	stmdbeq	r0, {r0, r1, r7}
    9164:	00001c1c 	andeq	r1, r0, ip, lsl ip
    9168:	01c91901 	biceq	r1, r9, r1, lsl #18
    916c:	84350000 	ldrthi	r0, [r5], #-0
    9170:	13090000 	movwne	r0, #36864	; 0x9000
    9174:	0100001c 	tsteq	r0, ip, lsl r0
    9178:	00011519 	andeq	r1, r1, r9, lsl r5
    917c:	00845300 	addeq	r5, r4, r0, lsl #6
    9180:	1bee1300 	blne	ffb8dd88 <BootRAM+0xeafe529>
    9184:	1b010000 	blne	4918c <__Stack_Size+0x4898c>
    9188:	000001be 			; <UNDEFINED> instruction: 0x000001be
    918c:	00008471 	andeq	r8, r0, r1, ror r4
    9190:	000b8713 	andeq	r8, fp, r3, lsl r7
    9194:	c91c0100 	ldmdbgt	ip, {r8}
    9198:	1e000001 	cdpne	0, 0, cr0, cr0, cr1, {0}
    919c:	14000085 	strne	r0, [r0], #-133	; 0x85
    91a0:	00001bd7 	ldrdeq	r1, [r0], -r7
    91a4:	00721d01 	rsbseq	r1, r2, r1, lsl #26
    91a8:	00150000 	andseq	r0, r5, r0
    91ac:	84000000 	strhi	r0, [r0], #-0
    91b0:	15000000 	strne	r0, [r0, #-0]
    91b4:	00000000 	andeq	r0, r0, r0
    91b8:	00000084 	andeq	r0, r0, r4, lsl #1
    91bc:	00000015 	andeq	r0, r0, r5, lsl r0
    91c0:	00008400 	andeq	r8, r0, r0, lsl #8
    91c4:	00001500 	andeq	r1, r0, r0, lsl #10
    91c8:	00840000 	addeq	r0, r4, r0
    91cc:	12000000 	andne	r0, r0, #0
    91d0:	0000ed04 	andeq	lr, r0, r4, lsl #26
    91d4:	00ca0f00 	sbceq	r0, sl, r0, lsl #30
    91d8:	04120000 	ldreq	r0, [r2], #-0
    91dc:	00000072 	andeq	r0, r0, r2, ror r0
    91e0:	00026700 	andeq	r6, r2, r0, lsl #14
    91e4:	cb000400 	blgt	a1ec <__Stack_Size+0x99ec>
    91e8:	04000020 	streq	r0, [r0], #-32
    91ec:	00063901 	andeq	r3, r6, r1, lsl #18
    91f0:	1c8a0100 	stfnes	f0, [sl], {0}
    91f4:	08930000 	ldmeq	r3, {}	; <UNPREDICTABLE>
    91f8:	0b600000 	bleq	1809200 <__Stack_Size+0x1808a00>
    91fc:	00000000 	andeq	r0, r0, r0
    9200:	32ce0000 	sbccc	r0, lr, #0
    9204:	01020000 	mrseq	r0, (UNDEF: 2)
    9208:	00400c02 	subeq	r0, r0, r2, lsl #24
    920c:	ca030000 	bgt	c9214 <__Stack_Size+0xc8a14>
    9210:	0000000a 	andeq	r0, r0, sl
    9214:	000c0503 	andeq	r0, ip, r3, lsl #10
    9218:	dc030100 	stfles	f0, [r3], {-0}
    921c:	0200000a 	andeq	r0, r0, #10
    9220:	0d180400 	cfldrseq	mvf0, [r8, #-0]
    9224:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    9228:	00000025 	andeq	r0, r0, r5, lsr #32
    922c:	10020805 	andne	r0, r2, r5, lsl #16
    9230:	00000078 	andeq	r0, r0, r8, ror r0
    9234:	000ddb06 	andeq	sp, sp, r6, lsl #22
    9238:	40120200 	andsmi	r0, r2, r0, lsl #4
    923c:	00000000 	andeq	r0, r0, r0
    9240:	000ac306 	andeq	ip, sl, r6, lsl #6
    9244:	78130200 	ldmdavc	r3, {r9}
    9248:	01000000 	mrseq	r0, (UNDEF: 0)
    924c:	000e0606 	andeq	r0, lr, r6, lsl #12
    9250:	7f140200 	svcvc	0x00140200
    9254:	04000000 	streq	r0, [r0], #-0
    9258:	08010700 	stmdaeq	r1, {r8, r9, sl}
    925c:	00000821 	andeq	r0, r0, r1, lsr #16
    9260:	69050408 	stmdbvs	r5, {r3, sl}
    9264:	0400746e 	streq	r7, [r0], #-1134	; 0x46e
    9268:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    926c:	004b1502 	subeq	r1, fp, r2, lsl #10
    9270:	ab090000 	blge	249278 <__Stack_Size+0x248a78>
    9274:	0100000a 	tsteq	r0, sl
    9278:	005e840c 	subseq	r8, lr, ip, lsl #8
    927c:	00000a08 	andeq	r0, r0, r8, lsl #20
    9280:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    9284:	0a000000 	beq	928c <__Stack_Size+0x8a8c>
    9288:	00001c13 	andeq	r1, r0, r3, lsl ip
    928c:	00b40c01 	adcseq	r0, r4, r1, lsl #24
    9290:	50010000 	andpl	r0, r1, r0
    9294:	86040b00 	strhi	r0, [r4], -r0, lsl #22
    9298:	0c000000 	stceq	0, cr0, [r0], {-0}
    929c:	00001c3b 	andeq	r1, r0, fp, lsr ip
    92a0:	00781301 	rsbseq	r1, r8, r1, lsl #6
    92a4:	5e900000 	cdppl	0, 9, cr0, cr0, cr0, {0}
    92a8:	00100800 	andseq	r0, r0, r0, lsl #16
    92ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    92b0:	000000ee 	andeq	r0, r0, lr, ror #1
    92b4:	001bbb0d 	andseq	fp, fp, sp, lsl #22
    92b8:	78130100 	ldmdavc	r3, {r8}
    92bc:	b5000000 	strlt	r0, [r0, #-0]
    92c0:	0e000085 	cdpeq	0, 0, cr0, cr0, cr5, {4}
    92c4:	00001c69 	andeq	r1, r0, r9, ror #24
    92c8:	00ee1501 	rsceq	r1, lr, r1, lsl #10
    92cc:	0f000000 	svceq	0x00000000
    92d0:	000000f3 	strdeq	r0, [r0], -r3
    92d4:	00f9040b 	rscseq	r0, r9, fp, lsl #8
    92d8:	780f0000 	stmdavc	pc, {}	; <UNPREDICTABLE>
    92dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    92e0:	00000e10 	andeq	r0, r0, r0, lsl lr
    92e4:	007f1a01 	rsbseq	r1, pc, r1, lsl #20
    92e8:	5ea00000 	cdppl	0, 10, cr0, cr0, cr0, {0}
    92ec:	00d60800 	sbcseq	r0, r6, r0, lsl #16
    92f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    92f4:	000001f5 	strdeq	r0, [r0], -r5
    92f8:	001c5c0d 	andseq	r5, ip, sp, lsl #24
    92fc:	f31a0100 	vrhadd.u16	d0, d10, d0
    9300:	d6000000 	strle	r0, [r0], -r0
    9304:	0d000085 	stceq	0, cr0, [r0, #-532]	; 0xfffffdec
    9308:	00001bcd 	andeq	r1, r0, sp, asr #23
    930c:	007f1a01 	rsbseq	r1, pc, r1, lsl #20
    9310:	86290000 	strthi	r0, [r9], -r0
    9314:	810d0000 	mrshi	r0, (UNDEF: 13)
    9318:	0100001c 	tsteq	r0, ip, lsl r0
    931c:	0001f51a 	andeq	pc, r1, sl, lsl r5	; <UNPREDICTABLE>
    9320:	00867c00 	addeq	r7, r6, r0, lsl #24
    9324:	1c130d00 	ldcne	13, cr0, [r3], {-0}
    9328:	1a010000 	bne	49330 <__Stack_Size+0x48b30>
    932c:	000000b4 	strheq	r0, [r0], -r4
    9330:	000086c6 	andeq	r8, r0, r6, asr #13
    9334:	000b8710 	andeq	r8, fp, r0, lsl r7
    9338:	f31c0100 	vrhadd.u16	d0, d12, d0
    933c:	e4000000 	str	r0, [r0], #-0
    9340:	11000086 	smlabbne	r0, r6, r0, r0
    9344:	00001c4f 	andeq	r1, r0, pc, asr #24
    9348:	00ee1d01 	rsceq	r1, lr, r1, lsl #26
    934c:	5b010000 	blpl	49354 <__Stack_Size+0x48b54>
    9350:	001bee10 	andseq	lr, fp, r0, lsl lr
    9354:	f51e0100 			; <UNDEFINED> instruction: 0xf51e0100
    9358:	44000001 	strmi	r0, [r0], #-1
    935c:	10000087 	andne	r0, r0, r7, lsl #1
    9360:	00000ac3 	andeq	r0, r0, r3, asr #21
    9364:	00781f01 	rsbseq	r1, r8, r1, lsl #30
    9368:	87cb0000 	strbhi	r0, [fp, r0]
    936c:	d7100000 	ldrle	r0, [r0, -r0]
    9370:	0100001b 	tsteq	r0, fp, lsl r0
    9374:	00007820 	andeq	r7, r0, r0, lsr #16
    9378:	00886100 	addeq	r6, r8, r0, lsl #2
    937c:	5ee21200 	cdppl	2, 14, cr1, cr2, cr0, {0}
    9380:	00ba0800 	adcseq	r0, sl, r0, lsl #16
    9384:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9388:	01130000 	tsteq	r3, r0
    938c:	00760450 	rsbseq	r0, r6, r0, asr r4
    9390:	12002532 	andne	r2, r0, #209715200	; 0xc800000
    9394:	08005f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip, lr}
    9398:	000000ba 	strheq	r0, [r0], -sl
    939c:	000001cb 	andeq	r0, r0, fp, asr #3
    93a0:	07500113 	smmlaeq	r0, r3, r1, r0
    93a4:	25340075 	ldrcs	r0, [r4, #-117]!	; 0x75
    93a8:	00210076 	eoreq	r0, r1, r6, ror r0
    93ac:	005f4212 	subseq	r4, pc, r2, lsl r2	; <UNPREDICTABLE>
    93b0:	0000ba08 	andeq	fp, r0, r8, lsl #20
    93b4:	0001e400 	andeq	lr, r1, r0, lsl #8
    93b8:	50011300 	andpl	r1, r1, r0, lsl #6
    93bc:	36007907 	strcc	r7, [r0], -r7, lsl #18
    93c0:	21007625 	tstcs	r0, r5, lsr #12
    93c4:	5f4e1400 	svcpl	0x004e1400
    93c8:	00ba0800 	adcseq	r0, sl, r0, lsl #16
    93cc:	01130000 	tsteq	r3, r0
    93d0:	00760250 	rsbseq	r0, r6, r0, asr r2
    93d4:	040b0000 	streq	r0, [fp], #-0
    93d8:	00000078 	andeq	r0, r0, r8, ror r0
    93dc:	000da40c 	andeq	sl, sp, ip, lsl #8
    93e0:	7f570100 	svcvc	0x00570100
    93e4:	76000000 	strvc	r0, [r0], -r0
    93e8:	4008005f 	andmi	r0, r8, pc, asr r0
    93ec:	01000000 	mrseq	r0, (UNDEF: 0)
    93f0:	0002549c 	muleq	r2, ip, r4
    93f4:	1c810d00 	stcne	13, cr0, [r1], {0}
    93f8:	57010000 	strpl	r0, [r1, -r0]
    93fc:	000001f5 	strdeq	r0, [r0], -r5
    9400:	000088ad 	andeq	r8, r0, sp, lsr #17
    9404:	001c130d 	andseq	r1, ip, sp, lsl #6
    9408:	b4570100 	ldrblt	r0, [r7], #-256	; 0x100
    940c:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    9410:	10000088 	andne	r0, r0, r8, lsl #1
    9414:	00001bee 	andeq	r1, r0, lr, ror #23
    9418:	01f55901 	mvnseq	r5, r1, lsl #18
    941c:	894a0000 	stmdbhi	sl, {}^	; <UNPREDICTABLE>
    9420:	8a150000 	bhi	549428 <__Stack_Size+0x548c28>
    9424:	ba08005f 	blt	2095a8 <__Stack_Size+0x208da8>
    9428:	15000000 	strne	r0, [r0, #-0]
    942c:	08005f9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, fp, ip, lr}
    9430:	000000ba 	strheq	r0, [r0], -sl
    9434:	1c721600 	ldclne	6, cr1, [r2], #-0
    9438:	0a010000 	beq	49440 <__Stack_Size+0x48c40>
    943c:	00000265 	andeq	r0, r0, r5, ror #4
    9440:	00000305 	andeq	r0, r0, r5, lsl #6
    9444:	7f0f0000 	svcvc	0x000f0000
    9448:	00000000 	andeq	r0, r0, r0
    944c:	00000a4b 	andeq	r0, r0, fp, asr #20
    9450:	22030004 	andcs	r0, r3, #4
    9454:	01040000 	mrseq	r0, (UNDEF: 4)
    9458:	00000639 	andeq	r0, r0, r9, lsr r6
    945c:	001c9b01 	andseq	r9, ip, r1, lsl #22
    9460:	00089300 	andeq	r9, r8, r0, lsl #6
    9464:	000b8800 	andeq	r8, fp, r0, lsl #16
    9468:	00000000 	andeq	r0, r0, r0
    946c:	0033ad00 	eorseq	sl, r3, r0, lsl #26
    9470:	0b1f0200 	bleq	7c9c78 <__Stack_Size+0x7c9478>
    9474:	d4020000 	strle	r0, [r2], #-0
    9478:	00000030 	andeq	r0, r0, r0, lsr r0
    947c:	57070403 	strpl	r0, [r7, -r3, lsl #8]
    9480:	04000002 	streq	r0, [r0], #-2
    9484:	05040504 	streq	r0, [r4, #-1284]	; 0x504
    9488:	00746e69 	rsbseq	r6, r4, r9, ror #28
    948c:	1a060103 	bne	1898a0 <__Stack_Size+0x1890a0>
    9490:	02000008 	andeq	r0, r0, #8
    9494:	00000c36 	andeq	r0, r0, r6, lsr ip
    9498:	00521c03 	subseq	r1, r2, r3, lsl #24
    949c:	01030000 	mrseq	r0, (UNDEF: 3)
    94a0:	00081808 	andeq	r1, r8, r8, lsl #16
    94a4:	05020300 	streq	r0, [r2, #-768]	; 0x300
    94a8:	000006fc 	strdeq	r0, [r0], -ip
    94ac:	000b6702 	andeq	r6, fp, r2, lsl #14
    94b0:	6b260300 	blvs	98a0b8 <__Stack_Size+0x9898b8>
    94b4:	03000000 	movweq	r0, #0
    94b8:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    94bc:	04030000 	streq	r0, [r3], #-0
    94c0:	0004da05 	andeq	sp, r4, r5, lsl #20
    94c4:	0b4e0200 	bleq	1389ccc <__Stack_Size+0x13894cc>
    94c8:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    94cc:	00000084 	andeq	r0, r0, r4, lsl #1
    94d0:	52070403 	andpl	r0, r7, #50331648	; 0x3000000
    94d4:	03000002 	movweq	r0, #2
    94d8:	04d50508 	ldrbeq	r0, [r5], #1288	; 0x508
    94dc:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    94e0:	00024d07 	andeq	r4, r2, r7, lsl #26
    94e4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    94e8:	0000078b 	andeq	r0, r0, fp, lsl #15
    94ec:	00520406 	subseq	r0, r2, r6, lsl #8
    94f0:	04060000 	streq	r0, [r6], #-0
    94f4:	000000ac 	andeq	r0, r0, ip, lsr #1
    94f8:	21080103 	tstcs	r8, r3, lsl #2
    94fc:	06000008 	streq	r0, [r0], -r8
    9500:	0000b904 	andeq	fp, r0, r4, lsl #18
    9504:	00ac0700 	adceq	r0, ip, r0, lsl #14
    9508:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
    950c:	0400000c 	streq	r0, [r0], #-12
    9510:	0000472a 	andeq	r4, r0, sl, lsr #14
    9514:	0b690200 	bleq	1a49d1c <__Stack_Size+0x1a4951c>
    9518:	36040000 	strcc	r0, [r4], -r0
    951c:	00000060 	andeq	r0, r0, r0, rrx
    9520:	000b5002 	andeq	r5, fp, r2
    9524:	79420400 	stmdbvc	r2, {sl}^
    9528:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    952c:	00323375 	eorseq	r3, r2, r5, ror r3
    9530:	00842705 	addeq	r2, r4, r5, lsl #14
    9534:	5a020000 	bpl	8953c <__Stack_Size+0x88d3c>
    9538:	05000003 	streq	r0, [r0, #-3]
    953c:	0000f52f 	andeq	pc, r0, pc, lsr #10
    9540:	00840900 	addeq	r0, r4, r0, lsl #18
    9544:	010a0000 	mrseq	r0, (UNDEF: 10)
    9548:	010f3705 	tsteq	pc, r5, lsl #14
    954c:	530b0000 	movwpl	r0, #45056	; 0xb000
    9550:	00000007 	andeq	r0, r0, r7
    9554:	0001a70b 	andeq	sl, r1, fp, lsl #14
    9558:	02000100 	andeq	r0, r0, #0, 2
    955c:	0000052d 	andeq	r0, r0, sp, lsr #10
    9560:	00fa3705 	rscseq	r3, sl, r5, lsl #14
    9564:	4f0c0000 	svcmi	0x000c0000
    9568:	0c00000d 	stceq	0, cr0, [r0], {13}
    956c:	5c011506 	cfstr32pl	mvfx1, [r1], {6}
    9570:	0d000001 	stceq	0, cr0, [r0, #-4]
    9574:	00000c31 	andeq	r0, r0, r1, lsr ip
    9578:	c9011606 	stmdbgt	r1, {r1, r2, r9, sl, ip}
    957c:	00000000 	andeq	r0, r0, r0
    9580:	000ae30d 	andeq	lr, sl, sp, lsl #6
    9584:	01170600 	tsteq	r7, r0, lsl #12
    9588:	000000c9 	andeq	r0, r0, r9, asr #1
    958c:	0afb0d02 	beq	ffecc99c <BootRAM+0xee3d13d>
    9590:	18060000 	stmdane	r6, {}	; <UNPREDICTABLE>
    9594:	0000d401 	andeq	sp, r0, r1, lsl #8
    9598:	110d0400 	tstne	sp, r0, lsl #8
    959c:	0600000b 	streq	r0, [r0], -fp
    95a0:	00d40119 	sbcseq	r0, r4, r9, lsl r1
    95a4:	00080000 	andeq	r0, r8, r0
    95a8:	0c07680e 	stceq	8, cr6, [r7], {14}
    95ac:	00000189 	andeq	r0, r0, r9, lsl #3
    95b0:	001a8a0f 	andseq	r8, sl, pc, lsl #20
    95b4:	890e0700 	stmdbhi	lr, {r8, r9, sl}
    95b8:	00000001 	andeq	r0, r0, r1
    95bc:	0019500f 	andseq	r5, r9, pc
    95c0:	990f0700 	stmdbls	pc, {r8, r9, sl}	; <UNPREDICTABLE>
    95c4:	08000001 	stmdaeq	r0, {r0}
    95c8:	00046c0f 	andeq	r6, r4, pc, lsl #24
    95cc:	a9100700 	ldmdbge	r0, {r8, r9, sl}
    95d0:	28000001 	stmdacs	r0, {r0}
    95d4:	00841000 	addeq	r1, r4, r0
    95d8:	01990000 	orrseq	r0, r9, r0
    95dc:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    95e0:	01000000 	mrseq	r0, (UNDEF: 0)
    95e4:	00841000 	addeq	r1, r4, r0
    95e8:	01a90000 			; <UNDEFINED> instruction: 0x01a90000
    95ec:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    95f0:	07000000 	streq	r0, [r0, -r0]
    95f4:	00521000 	subseq	r1, r2, r0
    95f8:	01b90000 			; <UNDEFINED> instruction: 0x01b90000
    95fc:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    9600:	3f000000 	svccc	0x00000000
    9604:	0cef0200 	sfmeq	f0, 2, [pc]	; 960c <__Stack_Size+0x8e0c>
    9608:	12070000 	andne	r0, r7, #0
    960c:	0000015c 	andeq	r0, r0, ip, asr r1
    9610:	000ae812 	andeq	lr, sl, r2, lsl r8
    9614:	0d081400 	cfstrseq	mvf1, [r8, #-0]
    9618:	00000219 	andeq	r0, r0, r9, lsl r2
    961c:	000c4b0f 	andeq	r4, ip, pc, lsl #22
    9620:	d40e0800 	strle	r0, [lr], #-2048	; 0x800
    9624:	00000000 	andeq	r0, r0, r0
    9628:	000df70f 	andeq	pc, sp, pc, lsl #14
    962c:	d4100800 	ldrle	r0, [r0], #-2048	; 0x800
    9630:	04000000 	streq	r0, [r0], #-0
    9634:	000ce00f 	andeq	lr, ip, pc
    9638:	d4110800 	ldrle	r0, [r1], #-2048	; 0x800
    963c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9640:	000de00f 	andeq	lr, sp, pc
    9644:	d4130800 	ldrle	r0, [r3], #-2048	; 0x800
    9648:	0c000000 	stceq	0, cr0, [r0], {-0}
    964c:	000d2a0f 	andeq	r2, sp, pc, lsl #20
    9650:	d4140800 	ldrle	r0, [r4], #-2048	; 0x800
    9654:	10000000 	andne	r0, r0, r0
    9658:	000be20f 	andeq	lr, fp, pc, lsl #4
    965c:	19150800 	ldmdbne	r5, {fp}
    9660:	14000002 	strne	r0, [r0], #-2
    9664:	00be1000 	adcseq	r1, lr, r0
    9668:	02280000 	eoreq	r0, r8, #0
    966c:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    9670:	00000000 	andeq	r0, r0, r0
    9674:	000ae902 	andeq	lr, sl, r2, lsl #18
    9678:	c4160800 	ldrgt	r0, [r6], #-2048	; 0x800
    967c:	12000001 	andne	r0, r0, #1
    9680:	00000c67 	andeq	r0, r0, r7, ror #24
    9684:	7c180814 	ldcvc	8, cr0, [r8], {20}
    9688:	0f000002 	svceq	0x00000002
    968c:	00000d54 	andeq	r0, r0, r4, asr sp
    9690:	027c1908 	rsbseq	r1, ip, #8, 18	; 0x20000
    9694:	0f000000 	svceq	0x00000000
    9698:	00000cc8 	andeq	r0, r0, r8, asr #25
    969c:	00d41a08 	sbcseq	r1, r4, r8, lsl #20
    96a0:	0f040000 	svceq	0x00040000
    96a4:	00000d07 	andeq	r0, r0, r7, lsl #26
    96a8:	00252008 	eoreq	r2, r5, r8
    96ac:	0f080000 	svceq	0x00080000
    96b0:	00000c94 	muleq	r0, r4, ip
    96b4:	00392208 	eorseq	r2, r9, r8, lsl #4
    96b8:	0f0c0000 	svceq	0x000c0000
    96bc:	00000def 	andeq	r0, r0, pc, ror #27
    96c0:	00392308 	eorseq	r2, r9, r8, lsl #6
    96c4:	00100000 	andseq	r0, r0, r0
    96c8:	02280406 	eoreq	r0, r8, #100663296	; 0x6000000
    96cc:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
    96d0:	0800000c 	stmdaeq	r0, {r2, r3}
    96d4:	00023324 	andeq	r3, r2, r4, lsr #6
    96d8:	0bf30200 	bleq	ffcc9ee0 <BootRAM+0xec3a681>
    96dc:	27080000 	strcs	r0, [r8, -r0]
    96e0:	00000298 	muleq	r0, r8, r2
    96e4:	02330406 	eorseq	r0, r3, #100663296	; 0x6000000
    96e8:	74120000 	ldrvc	r0, [r2], #-0
    96ec:	1000001d 	andne	r0, r0, sp, lsl r0
    96f0:	02db3808 	sbcseq	r3, fp, #8, 16	; 0x80000
    96f4:	c90f0000 	stmdbgt	pc, {}	; <UNPREDICTABLE>
    96f8:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    96fc:	0000d439 	andeq	sp, r0, r9, lsr r4
    9700:	e90f0000 	stmdb	pc, {}	; <UNPREDICTABLE>
    9704:	0800001b 	stmdaeq	r0, {r0, r1, r3, r4}
    9708:	0000d43a 	andeq	sp, r0, sl, lsr r4
    970c:	cf0f0400 	svcgt	0x000f0400
    9710:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9714:	0000d43b 	andeq	sp, r0, fp, lsr r4
    9718:	e10f0800 	tst	pc, r0, lsl #16
    971c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9720:	0000d43c 	andeq	sp, r0, ip, lsr r4
    9724:	02000c00 	andeq	r0, r0, #0, 24
    9728:	00001d74 	andeq	r1, r0, r4, ror sp
    972c:	029e3d08 	addseq	r3, lr, #8, 26	; 0x200
    9730:	0f120000 	svceq	0x00120000
    9734:	4400001d 	strmi	r0, [r0], #-29
    9738:	030b3f08 	movweq	r3, #48904	; 0xbf08
    973c:	e10f0000 	mrs	r0, CPSR
    9740:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9744:	0000d440 	andeq	sp, r0, r0, asr #8
    9748:	5b0f0000 	blpl	3c9750 <__Stack_Size+0x3c8f50>
    974c:	0800001d 	stmdaeq	r0, {r0, r2, r3, r4}
    9750:	00030b41 	andeq	r0, r3, r1, asr #22
    9754:	10000400 	andne	r0, r0, r0, lsl #8
    9758:	000000be 	strheq	r0, [r0], -lr
    975c:	0000031b 	andeq	r0, r0, fp, lsl r3
    9760:	00009911 	andeq	r9, r0, r1, lsl r9
    9764:	02003f00 	andeq	r3, r0, #0, 30
    9768:	00001d0f 	andeq	r1, r0, pc, lsl #26
    976c:	02e64208 	rsceq	r4, r6, #8, 4	; 0x80000000
    9770:	b4120000 	ldrlt	r0, [r2], #-0
    9774:	5400001c 	strpl	r0, [r0], #-28
    9778:	034b4508 	movteq	r4, #46344	; 0xb508
    977c:	a30f0000 	movwge	r0, #61440	; 0xf000
    9780:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9784:	0002db46 	andeq	sp, r2, r6, asr #22
    9788:	f80f0000 			; <UNDEFINED> instruction: 0xf80f0000
    978c:	0800001c 	stmdaeq	r0, {r2, r3, r4}
    9790:	00031b47 	andeq	r1, r3, r7, asr #22
    9794:	02001000 	andeq	r1, r0, #0
    9798:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    979c:	03264808 	teqeq	r6, #8, 16	; 0x80000
    97a0:	04060000 	streq	r0, [r6], #-0
    97a4:	0000034b 	andeq	r0, r0, fp, asr #6
    97a8:	001d6a14 	andseq	r6, sp, r4, lsl sl
    97ac:	b8260100 	stmdalt	r6!, {r8}
    97b0:	4408005f 	strmi	r0, [r8], #-95	; 0x5f
    97b4:	01000000 	mrseq	r0, (UNDEF: 0)
    97b8:	0003f89c 	muleq	r3, ip, r8
    97bc:	5fc01500 	svcpl	0x00c01500
    97c0:	08db0800 	ldmeq	fp, {fp}^
    97c4:	03880000 	orreq	r0, r8, #0
    97c8:	01160000 	tsteq	r6, r0
    97cc:	000c0550 	andeq	r0, ip, r0, asr r5
    97d0:	00080080 	andeq	r0, r8, r0, lsl #1
    97d4:	005fc615 	subseq	ip, pc, r5, lsl r6	; <UNPREDICTABLE>
    97d8:	0008db08 	andeq	sp, r8, r8, lsl #22
    97dc:	00039f00 	andeq	r9, r3, r0, lsl #30
    97e0:	50011600 	andpl	r1, r1, r0, lsl #12
    97e4:	84000c05 	strhi	r0, [r0], #-3077	; 0xc05
    97e8:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    97ec:	08005fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp, ip, lr}
    97f0:	000008db 	ldrdeq	r0, [r0], -fp
    97f4:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
    97f8:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    97fc:	0083200c 	addeq	r2, r3, ip
    9800:	d2150008 	andsle	r0, r5, #8
    9804:	db08005f 	blle	209988 <__Stack_Size+0x209188>
    9808:	cd000008 	stcgt	0, cr0, [r0, #-32]	; 0xffffffe0
    980c:	16000003 	strne	r0, [r0], -r3
    9810:	0c055001 	stceq	0, cr5, [r5], {1}
    9814:	080084b0 	stmdaeq	r0, {r4, r5, r7, sl, pc}
    9818:	5fd81500 	svcpl	0x00d81500
    981c:	08db0800 	ldmeq	fp, {fp}^
    9820:	03e40000 	mvneq	r0, #0
    9824:	01160000 	tsteq	r6, r0
    9828:	400c0550 	andmi	r0, ip, r0, asr r5
    982c:	00080086 	andeq	r0, r8, r6, lsl #1
    9830:	005fe217 	subseq	lr, pc, r7, lsl r2	; <UNPREDICTABLE>
    9834:	0008db08 	andeq	sp, r8, r8, lsl #22
    9838:	50011600 	andpl	r1, r1, r0, lsl #12
    983c:	87d00c05 	ldrbhi	r0, [r0, r5, lsl #24]
    9840:	00000800 	andeq	r0, r0, r0, lsl #16
    9844:	000c9b18 	andeq	r9, ip, r8, lsl fp
    9848:	39300100 	ldmdbcc	r0!, {r8}
    984c:	fc000000 	stc2	0, cr0, [r0], {-0}
    9850:	dc08005f 	stcle	0, cr0, [r8], {95}	; 0x5f
    9854:	01000001 	tsteq	r0, r1
    9858:	0008499c 	muleq	r8, ip, r9
    985c:	1caa1900 	stcne	9, cr1, [sl]
    9860:	30010000 	andcc	r0, r1, r0
    9864:	00000849 	andeq	r0, r0, r9, asr #16
    9868:	000089e4 	andeq	r8, r0, r4, ror #19
    986c:	001ceb19 	andseq	lr, ip, r9, lsl fp
    9870:	ea300100 	b	c09c78 <__Stack_Size+0xc09478>
    9874:	10000000 	andne	r0, r0, r0
    9878:	1900008a 	stmdbne	r0, {r1, r3, r7}
    987c:	00001d31 	andeq	r1, r0, r1, lsr sp
    9880:	010f3001 	tsteq	pc, r1
    9884:	8a3d0000 	bhi	f4988c <__Stack_Size+0xf4908c>
    9888:	681a0000 	ldmdavs	sl, {}	; <UNPREDICTABLE>
    988c:	01007264 	tsteq	r0, r4, ror #4
    9890:	00035632 	andeq	r5, r3, r2, lsr r6
    9894:	008a5e00 	addeq	r5, sl, r0, lsl #28
    9898:	19501b00 	ldmdbne	r0, {r8, r9, fp, ip}^
    989c:	33010000 	movwcc	r0, #4096	; 0x1000
    98a0:	00000282 	andeq	r0, r0, r2, lsl #5
    98a4:	7ca49103 	stfvcd	f1, [r4], #12
    98a8:	001d501c 	andseq	r5, sp, ip, lsl r0
    98ac:	39340100 	ldmdbcc	r4!, {r8}
    98b0:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    98b4:	001d251d 	andseq	r2, sp, sp, lsl r5
    98b8:	4f350100 	svcmi	0x00350100
    98bc:	82000008 	andhi	r0, r0, #8
    98c0:	1b00008a 	blne	9af0 <__Stack_Size+0x92f0>
    98c4:	00001d05 	andeq	r1, r0, r5, lsl #26
    98c8:	08615f01 	stmdaeq	r1!, {r0, r8, r9, sl, fp, ip, lr}^
    98cc:	91030000 	mrsls	r0, (UNDEF: 3)
    98d0:	631e7cd0 	tstvs	lr, #208, 24	; 0xd000
    98d4:	01007874 	tsteq	r0, r4, ror r8
    98d8:	0001b963 	andeq	fp, r1, r3, ror #18
    98dc:	b0910300 	addslt	r0, r1, r0, lsl #6
    98e0:	1cd81d7d 	ldclne	13, cr1, [r8], {125}	; 0x7d
    98e4:	66010000 	strvs	r0, [r1], -r0
    98e8:	00000039 	andeq	r0, r0, r9, lsr r0
    98ec:	00008ad6 	ldrdeq	r8, [r0], -r6
    98f0:	0008841f 	andeq	r8, r8, pc, lsl r4
    98f4:	008aea00 	addeq	lr, sl, r0, lsl #20
    98f8:	1d4b2000 	stclne	0, cr2, [fp, #-0]
    98fc:	67010000 	strvs	r0, [r1, -r0]
    9900:	00000871 	andeq	r0, r0, r1, ror r8
    9904:	0100691a 	tsteq	r0, sl, lsl r9
    9908:	00003969 	andeq	r3, r0, r9, ror #18
    990c:	008afe00 	addeq	pc, sl, r0, lsl #28
    9910:	0b801d00 	bleq	fe010d18 <BootRAM+0xcf814b9>
    9914:	6c010000 	stcvs	0, cr0, [r1], {-0}
    9918:	00000039 	andeq	r0, r0, r9, lsr r0
    991c:	00008b1e 	andeq	r8, r0, lr, lsl fp
    9920:	000f7c21 	andeq	r7, pc, r1, lsr #24
    9924:	39a20100 	stmibcc	r2!, {r8}
    9928:	e5000000 	str	r0, [r0, #-0]
    992c:	22000004 	andcs	r0, r0, #4
    9930:	1d481b00 	vstrne	d17, [r8, #-0]
    9934:	a4010000 	strge	r0, [r1], #-0
    9938:	00000889 	andeq	r0, r0, r9, lsl #17
    993c:	7e989103 	cosvce	f1, f3
    9940:	0060dc23 	rsbeq	sp, r0, r3, lsr #24
    9944:	00006008 	andeq	r6, r0, r8
    9948:	00065d00 	andeq	r5, r6, r0, lsl #26
    994c:	64691e00 	strbtvs	r1, [r9], #-3584	; 0xe00
    9950:	1a810100 	bne	fe049d58 <BootRAM+0xcfba4f9>
    9954:	03000001 	movweq	r0, #1
    9958:	1b7c9891 	blne	1f2fba4 <__Stack_Size+0x1f2f3a4>
    995c:	00000d9b 	muleq	r0, fp, sp
    9960:	08998201 	ldmeq	r9, {r0, r9, pc}
    9964:	91030000 	mrsls	r0, (UNDEF: 3)
    9968:	001b7cb8 			; <UNDEFINED> instruction: 0x001b7cb8
    996c:	0100001d 	tsteq	r0, sp, lsl r0
    9970:	00086183 	andeq	r6, r8, r3, lsl #3
    9974:	f0910300 			; <UNDEFINED> instruction: 0xf0910300
    9978:	0c531b7c 	mrrceq	11, 7, r1, r3, cr12
    997c:	84010000 	strhi	r0, [r1], #-0
    9980:	000008a9 	andeq	r0, r0, r9, lsr #17
    9984:	7d909103 	ldfvcd	f1, [r0, #12]
    9988:	001cc41b 	andseq	ip, ip, fp, lsl r4
    998c:	b9890100 	stmiblt	r9, {r8}
    9990:	03000001 	movweq	r0, #1
    9994:	157e9891 	ldrbne	r9, [lr, #-2193]!	; 0x891
    9998:	080060e2 	stmdaeq	r0, {r1, r5, r6, r7, sp, lr}
    999c:	000008f1 	strdeq	r0, [r0], -r1
    99a0:	00000560 	andeq	r0, r0, r0, ror #10
    99a4:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    99a8:	007c9891 			; <UNDEFINED> instruction: 0x007c9891
    99ac:	0060fa15 	rsbeq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    99b0:	00090908 	andeq	r0, r9, r8, lsl #18
    99b4:	00057e00 	andeq	r7, r5, r0, lsl #28
    99b8:	51011600 	tstpl	r1, r0, lsl #12
    99bc:	75980305 	ldrvc	r0, [r8, #773]	; 0x305
    99c0:	01160800 	tsteq	r6, r0, lsl #16
    99c4:	b8910350 	ldmlt	r1, {r4, r6, r8, r9}
    99c8:	0015007c 	andseq	r0, r5, ip, ror r0
    99cc:	24080061 	strcs	r0, [r8], #-97	; 0x61
    99d0:	93000009 	movwls	r0, #9
    99d4:	16000005 	strne	r0, [r0], -r5
    99d8:	91035001 	tstls	r3, r1
    99dc:	15007e98 	strne	r7, [r0, #-3736]	; 0xe98
    99e0:	0800610a 	stmdaeq	r0, {r1, r3, r8, sp, lr}
    99e4:	0000093b 	andeq	r0, r0, fp, lsr r9
    99e8:	000005b4 			; <UNDEFINED> instruction: 0x000005b4
    99ec:	01520116 	cmpeq	r2, r6, lsl r1
    99f0:	51011647 	tstpl	r1, r7, asr #12
    99f4:	7cb89103 	ldfvcd	f1, [r8], #12
    99f8:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    99fc:	007e9891 			; <UNDEFINED> instruction: 0x007e9891
    9a00:	00611215 	rsbeq	r1, r1, r5, lsl r2
    9a04:	00095608 	andeq	r5, r9, r8, lsl #12
    9a08:	0005d000 	andeq	sp, r5, r0
    9a0c:	51011600 	tstpl	r1, r0, lsl #12
    9a10:	7cf09103 	ldfvcp	f1, [r0], #12
    9a14:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9a18:	007e9891 			; <UNDEFINED> instruction: 0x007e9891
    9a1c:	00611c15 	rsbeq	r1, r1, r5, lsl ip
    9a20:	00096c08 	andeq	r6, r9, r8, lsl #24
    9a24:	0005f000 	andeq	pc, r5, r0
    9a28:	52011600 	andpl	r1, r1, #0, 12
    9a2c:	16200802 	strtne	r0, [r0], -r2, lsl #16
    9a30:	30015101 	andcc	r5, r1, r1, lsl #2
    9a34:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9a38:	007d9091 			; <UNDEFINED> instruction: 0x007d9091
    9a3c:	00612415 	rsbeq	r2, r1, r5, lsl r4
    9a40:	00098908 	andeq	r8, r9, r8, lsl #18
    9a44:	00060c00 	andeq	r0, r6, r0, lsl #24
    9a48:	51011600 	tstpl	r1, r0, lsl #12
    9a4c:	7cf09103 	ldfvcp	f1, [r0], #12
    9a50:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9a54:	007d9091 			; <UNDEFINED> instruction: 0x007d9091
    9a58:	00612a15 	rsbeq	r2, r1, r5, lsl sl
    9a5c:	0009b008 	andeq	fp, r9, r8
    9a60:	00062300 	andeq	r2, r6, r0, lsl #6
    9a64:	50011600 	andpl	r1, r1, r0, lsl #12
    9a68:	7c770305 	ldclvc	3, cr0, [r7], #-20	; 0xffffffec
    9a6c:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    9a70:	08006132 	stmdaeq	r0, {r1, r4, r5, r8, sp, lr}
    9a74:	000009c3 	andeq	r0, r0, r3, asr #19
    9a78:	0000063e 	andeq	r0, r0, lr, lsr r6
    9a7c:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
    9a80:	01162008 	tsteq	r6, r8
    9a84:	90910350 	addsls	r0, r1, r0, asr r3
    9a88:	3c24007d 	stccc	0, cr0, [r4], #-500	; 0xfffffe0c
    9a8c:	3b080061 	blcc	209c18 <__Stack_Size+0x209418>
    9a90:	16000009 	strne	r0, [r0], -r9
    9a94:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    9a98:	51011620 	tstpl	r1, r0, lsr #12
    9a9c:	7d909103 	ldfvcd	f1, [r0, #12]
    9aa0:	03500116 	cmpeq	r0, #-2147483643	; 0x80000005
    9aa4:	007db091 			; <UNDEFINED> instruction: 0x007db091
    9aa8:	60121500 	andsvs	r1, r2, r0, lsl #10
    9aac:	09da0800 	ldmibeq	sl, {fp}^
    9ab0:	067e0000 	ldrbteq	r0, [lr], -r0
    9ab4:	01160000 	tsteq	r6, r0
    9ab8:	68080252 	stmdavs	r8, {r1, r4, r6, r9}
    9abc:	02510116 	subseq	r0, r1, #-2147483643	; 0x80000005
    9ac0:	0116ff08 	tsteq	r6, r8, lsl #30
    9ac4:	80910350 	addshi	r0, r1, r0, asr r3
    9ac8:	1e15007f 	mrcne	0, 0, r0, cr5, cr15, {3}
    9acc:	f9080060 			; <UNDEFINED> instruction: 0xf9080060
    9ad0:	99000009 	stmdbls	r0, {r0, r3}
    9ad4:	16000006 	strne	r0, [r0], -r6
    9ad8:	08025201 	stmdaeq	r2, {r0, r9, ip, lr}
    9adc:	50011668 	andpl	r1, r1, r8, ror #12
    9ae0:	7f809103 	svcvc	0x00809103
    9ae4:	60281500 	eorvs	r1, r8, r0, lsl #10
    9ae8:	096c0800 	stmdbeq	ip!, {fp}^
    9aec:	06b70000 	ldrteq	r0, [r7], r0
    9af0:	01160000 	tsteq	r6, r0
    9af4:	16440152 			; <UNDEFINED> instruction: 0x16440152
    9af8:	30015101 	andcc	r5, r1, r1, lsl #2
    9afc:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    9b00:	25000076 	strcs	r0, [r0, #-118]	; 0x76
    9b04:	08006042 	stmdaeq	r0, {r1, r6, sp, lr}
    9b08:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    9b0c:	00605025 	rsbeq	r5, r0, r5, lsr #32
    9b10:	00035c08 	andeq	r5, r3, r8, lsl #24
    9b14:	60621500 	rsbvs	r1, r2, r0, lsl #10
    9b18:	09b00800 	ldmibeq	r0!, {fp}
    9b1c:	06e00000 	strbteq	r0, [r0], r0
    9b20:	01160000 	tsteq	r6, r0
    9b24:	1d030550 	cfstr32ne	mvfx0, [r3, #-320]	; 0xfffffec0
    9b28:	0008007c 	andeq	r0, r8, ip, ror r0
    9b2c:	00607615 	rsbeq	r7, r0, r5, lsl r6
    9b30:	0009da08 	andeq	sp, r9, r8, lsl #20
    9b34:	00070100 	andeq	r0, r7, r0, lsl #2
    9b38:	52011600 	andpl	r1, r1, #0, 12
    9b3c:	16200802 	strtne	r0, [r0], -r2, lsl #16
    9b40:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    9b44:	500116ff 	strdpl	r1, [r1], -pc	; <UNPREDICTABLE>
    9b48:	7cd09103 	ldfvcp	f1, [r0], {3}
    9b4c:	607c1500 	rsbsvs	r1, ip, r0, lsl #10
    9b50:	09240800 	stmdbeq	r4!, {fp}
    9b54:	07160000 	ldreq	r0, [r6, -r0]
    9b58:	01160000 	tsteq	r6, r0
    9b5c:	b0910350 	addslt	r0, r1, r0, asr r3
    9b60:	8615007d 			; <UNDEFINED> instruction: 0x8615007d
    9b64:	c3080060 	movwgt	r0, #32864	; 0x8060
    9b68:	29000009 	stmdbcs	r0, {r0, r3}
    9b6c:	16000007 	strne	r0, [r0], -r7
    9b70:	40015101 	andmi	r5, r1, r1, lsl #2
    9b74:	60981500 	addsvs	r1, r8, r0, lsl #10
    9b78:	09b00800 	ldmibeq	r0!, {fp}
    9b7c:	07400000 	strbeq	r0, [r0, -r0]
    9b80:	01160000 	tsteq	r6, r0
    9b84:	2d030550 	cfstr32cs	mvfx0, [r3, #-320]	; 0xfffffec0
    9b88:	0008007c 	andeq	r0, r8, ip, ror r0
    9b8c:	0060ac15 	rsbeq	sl, r0, r5, lsl ip
    9b90:	00093b08 	andeq	r3, r9, r8, lsl #22
    9b94:	00075a00 	andeq	r5, r7, r0, lsl #20
    9b98:	52011600 	andpl	r1, r1, #0, 12
    9b9c:	01163101 	tsteq	r6, r1, lsl #2
    9ba0:	b0910350 	addslt	r0, r1, r0, asr r3
    9ba4:	ba15007d 	blt	549da0 <__Stack_Size+0x5495a0>
    9ba8:	b0080060 	andlt	r0, r8, r0, rrx
    9bac:	71000009 	tstvc	r0, r9
    9bb0:	16000007 	strne	r0, [r0], -r7
    9bb4:	03055001 	movweq	r5, #20481	; 0x5001
    9bb8:	08007c43 	stmdaeq	r0, {r0, r1, r6, sl, fp, ip, sp, lr}
    9bbc:	60c41500 	sbcvs	r1, r4, r0, lsl #10
    9bc0:	09c30800 	stmibeq	r3, {fp}^
    9bc4:	07840000 	streq	r0, [r4, r0]
    9bc8:	01160000 	tsteq	r6, r0
    9bcc:	00400151 	subeq	r0, r0, r1, asr r1
    9bd0:	0060d615 	rsbeq	sp, r0, r5, lsl r6
    9bd4:	0009b008 	andeq	fp, r9, r8
    9bd8:	00079b00 	andeq	r9, r7, r0, lsl #22
    9bdc:	50011600 	andpl	r1, r1, r0, lsl #12
    9be0:	7c510305 	mrrcvc	3, 0, r0, r1, cr5
    9be4:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    9be8:	08006144 	stmdaeq	r0, {r2, r6, r8, sp, lr}
    9bec:	00000956 	andeq	r0, r0, r6, asr r9
    9bf0:	000007b7 			; <UNDEFINED> instruction: 0x000007b7
    9bf4:	03510116 	cmpeq	r1, #-2147483643	; 0x80000005
    9bf8:	167cd091 			; <UNDEFINED> instruction: 0x167cd091
    9bfc:	91035001 	tstls	r3, r1
    9c00:	15007db0 	strne	r7, [r0, #-3504]	; 0xdb0
    9c04:	0800614a 	stmdaeq	r0, {r1, r3, r6, r8, sp, lr}
    9c08:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    9c0c:	000007ce 	andeq	r0, r0, lr, asr #15
    9c10:	05500116 	ldrbeq	r0, [r0, #-278]	; 0x116
    9c14:	007c8303 	rsbseq	r8, ip, r3, lsl #6
    9c18:	52150008 	andspl	r0, r5, #8
    9c1c:	c3080061 	movwgt	r0, #32865	; 0x8061
    9c20:	e9000009 	stmdb	r0, {r0, r3}
    9c24:	16000007 	strne	r0, [r0], -r7
    9c28:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    9c2c:	50011640 	andpl	r1, r1, r0, asr #12
    9c30:	7f949103 	svcvc	0x00949103
    9c34:	61581500 	cmpvs	r8, r0, lsl #10
    9c38:	09b00800 	ldmibeq	r0!, {fp}
    9c3c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    9c40:	01160000 	tsteq	r6, r0
    9c44:	8f030550 	svchi	0x00030550
    9c48:	0008007c 	andeq	r0, r8, ip, ror r0
    9c4c:	00616215 	rsbeq	r6, r1, r5, lsl r2
    9c50:	000a1d08 	andeq	r1, sl, r8, lsl #26
    9c54:	00081500 	andeq	r1, r8, r0, lsl #10
    9c58:	50011600 	andpl	r1, r1, r0, lsl #12
    9c5c:	7cd09103 	ldfvcp	f1, [r0], {3}
    9c60:	61821500 	orrvs	r1, r2, r0, lsl #10
    9c64:	0a2e0800 	beq	b8bc6c <__Stack_Size+0xb8b46c>
    9c68:	083f0000 	ldmdaeq	pc!, {}	; <UNPREDICTABLE>
    9c6c:	01160000 	tsteq	r6, r0
    9c70:	20080253 	andcs	r0, r8, r3, asr r2
    9c74:	03520116 	cmpeq	r2, #-2147483643	; 0x80000005
    9c78:	167cd091 			; <UNDEFINED> instruction: 0x167cd091
    9c7c:	03055101 	movweq	r5, #20737	; 0x5101
    9c80:	20000404 	andcs	r0, r0, r4, lsl #8
    9c84:	02500116 	subseq	r0, r0, #-2147483643	; 0x80000005
    9c88:	25005074 	strcs	r5, [r0, #-116]	; 0x74
    9c8c:	08006192 	stmdaeq	r0, {r1, r4, r7, r8, sp, lr}
    9c90:	0000035c 	andeq	r0, r0, ip, asr r3
    9c94:	8d040600 	stchi	6, cr0, [r4, #-0]
    9c98:	10000002 	andne	r0, r0, r2
    9c9c:	00000052 	andeq	r0, r0, r2, asr r0
    9ca0:	00000861 	andeq	r0, r0, r1, ror #16
    9ca4:	00009926 	andeq	r9, r0, r6, lsr #18
    9ca8:	67080200 	strvs	r0, [r8, -r0, lsl #4]
    9cac:	00521000 	subseq	r1, r2, r0
    9cb0:	08710000 	ldmdaeq	r1!, {}^	; <UNPREDICTABLE>
    9cb4:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    9cb8:	1f000000 	svcne	0x00000000
    9cbc:	00ac1000 	adceq	r1, ip, r0
    9cc0:	08840000 	stmeq	r4, {}	; <UNPREDICTABLE>
    9cc4:	99270000 	stmdbls	r7!, {}	; <UNPREDICTABLE>
    9cc8:	a4000000 	strge	r0, [r0], #-0
    9ccc:	00000004 	andeq	r0, r0, r4
    9cd0:	00009907 	andeq	r9, r0, r7, lsl #18
    9cd4:	00ac1000 	adceq	r1, ip, r0
    9cd8:	08990000 	ldmeq	r9, {}	; <UNPREDICTABLE>
    9cdc:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    9ce0:	3f000000 	svccc	0x00000000
    9ce4:	00521000 	subseq	r1, r2, r0
    9ce8:	08a90000 	stmiaeq	r9!, {}	; <UNPREDICTABLE>
    9cec:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    9cf0:	16000000 	strne	r0, [r0], -r0
    9cf4:	00be1000 	adcseq	r1, lr, r0
    9cf8:	08b90000 	ldmeq	r9!, {}	; <UNPREDICTABLE>
    9cfc:	99110000 	ldmdbls	r1, {}	; <UNPREDICTABLE>
    9d00:	1f000000 	svcne	0x00000000
    9d04:	00b12800 	adcseq	r2, r1, r0, lsl #16
    9d08:	2c090000 	stccs	0, cr0, [r9], {-0}
    9d0c:	00000039 	andeq	r0, r0, r9, lsr r0
    9d10:	04880305 	streq	r0, [r8], #773	; 0x305
    9d14:	7b282000 	blvc	a11d1c <__Stack_Size+0xa1151c>
    9d18:	0100000c 	tsteq	r0, ip
    9d1c:	0008a918 	andeq	sl, r8, r8, lsl r9
    9d20:	04030500 	streq	r0, [r3], #-1280	; 0x500
    9d24:	29200004 	stmdbcs	r0!, {r2}
    9d28:	00000e3c 	andeq	r0, r0, ip, lsr lr
    9d2c:	0f013406 	svceq	0x00013406
    9d30:	f1000001 	cps	#1
    9d34:	2a000008 	bcs	9d5c <__Stack_Size+0x955c>
    9d38:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9d3c:	0b2c2b00 	bleq	b14944 <__Stack_Size+0xb14144>
    9d40:	42060000 	andmi	r0, r6, #0
    9d44:	00090301 	andeq	r0, r9, r1, lsl #6
    9d48:	09032a00 	stmdbeq	r3, {r9, fp, sp}
    9d4c:	06000000 	streq	r0, [r0], -r0
    9d50:	00011a04 	andeq	r1, r1, r4, lsl #20
    9d54:	0f032c00 	svceq	0x00032c00
    9d58:	d90a0000 	stmdble	sl, {}	; <UNPREDICTABLE>
    9d5c:	00000039 	andeq	r0, r0, r9, lsr r0
    9d60:	00000924 	andeq	r0, r0, r4, lsr #18
    9d64:	0000a62a 	andeq	sl, r0, sl, lsr #12
    9d68:	00b32a00 	adcseq	r2, r3, r0, lsl #20
    9d6c:	00220000 	eoreq	r0, r2, r0
    9d70:	000c132d 	andeq	r1, ip, sp, lsr #6
    9d74:	35140700 	ldrcc	r0, [r4, #-1792]	; 0x700
    9d78:	2a000009 	bcs	9da4 <__Stack_Size+0x95a4>
    9d7c:	00000935 	andeq	r0, r0, r5, lsr r9
    9d80:	b9040600 	stmdblt	r4, {r9, sl}
    9d84:	2d000001 	stccs	0, cr0, [r0, #-4]
    9d88:	00000b35 	andeq	r0, r0, r5, lsr fp
    9d8c:	09561507 	ldmdbeq	r6, {r0, r1, r2, r8, sl, ip}^
    9d90:	352a0000 	strcc	r0, [sl, #-0]!
    9d94:	2a000009 	bcs	9dc0 <__Stack_Size+0x95c0>
    9d98:	000000a0 	andeq	r0, r0, r0, lsr #1
    9d9c:	0000842a 	andeq	r8, r0, sl, lsr #8
    9da0:	792d0000 	pushvc	{}	; <UNPREDICTABLE>
    9da4:	0700000b 	streq	r0, [r0, -fp]
    9da8:	00096c16 	andeq	r6, r9, r6, lsl ip
    9dac:	09352a00 	ldmdbeq	r5!, {r9, fp, sp}
    9db0:	a02a0000 	eorge	r0, sl, r0
    9db4:	00000000 	andeq	r0, r0, r0
    9db8:	000c0c2e 	andeq	r0, ip, lr, lsr #24
    9dbc:	00003700 	andeq	r3, r0, r0, lsl #14
    9dc0:	00098900 	andeq	r8, r9, r0, lsl #18
    9dc4:	00372a00 	eorseq	r2, r7, r0, lsl #20
    9dc8:	392a0000 	stmdbcc	sl!, {}	; <UNPREDICTABLE>
    9dcc:	2a000000 	bcs	9dd4 <__Stack_Size+0x95d4>
    9dd0:	00000099 	muleq	r0, r9, r0
    9dd4:	0c822d00 	stceq	13, cr2, [r2], {0}
    9dd8:	250b0000 	strcs	r0, [fp, #-0]
    9ddc:	0000099f 	muleq	r0, pc, r9	; <UNPREDICTABLE>
    9de0:	00099f2a 	andeq	r9, r9, sl, lsr #30
    9de4:	09a52a00 	stmibeq	r5!, {r9, fp, sp}
    9de8:	06000000 	streq	r0, [r0], -r0
    9dec:	0000be04 	andeq	fp, r0, r4, lsl #28
    9df0:	ab040600 	blge	10b5f8 <__Stack_Size+0x10adf8>
    9df4:	07000009 	streq	r0, [r0, -r9]
    9df8:	000000be 	strheq	r0, [r0], -lr
    9dfc:	000dbb2b 	andeq	fp, sp, fp, lsr #22
    9e00:	013f0600 	teqeq	pc, r0, lsl #12
    9e04:	000009c3 	andeq	r0, r0, r3, asr #19
    9e08:	0000b32a 	andeq	fp, r0, sl, lsr #6
    9e0c:	2b002200 	blcs	12614 <__Stack_Size+0x11e14>
    9e10:	00000f1d 	andeq	r0, r0, sp, lsl pc
    9e14:	da014006 	ble	59e34 <__Stack_Size+0x59634>
    9e18:	2a000009 	bcs	9e44 <__Stack_Size+0x9644>
    9e1c:	000000a0 	andeq	r0, r0, r0, lsr #1
    9e20:	0000252a 	andeq	r2, r0, sl, lsr #10
    9e24:	0c2c0000 	stceq	0, cr0, [ip], #-0
    9e28:	0c00000c 	stceq	0, cr0, [r0], {12}
    9e2c:	00003719 	andeq	r3, r0, r9, lsl r7
    9e30:	0009f900 	andeq	pc, r9, r0, lsl #18
    9e34:	00372a00 	eorseq	r2, r7, r0, lsl #20
    9e38:	392a0000 	stmdbcc	sl!, {}	; <UNPREDICTABLE>
    9e3c:	2a000000 	bcs	9e44 <__Stack_Size+0x9644>
    9e40:	00000025 	andeq	r0, r0, r5, lsr #32
    9e44:	174d2e00 	strbne	r2, [sp, -r0, lsl #28]
    9e48:	00370000 	eorseq	r0, r7, r0
    9e4c:	0a160000 	beq	589e54 <__Stack_Size+0x589654>
    9e50:	372a0000 	strcc	r0, [sl, -r0]!
    9e54:	2a000000 	bcs	9e5c <__Stack_Size+0x965c>
    9e58:	00000a16 	andeq	r0, r0, r6, lsl sl
    9e5c:	0000992a 	andeq	r9, r0, sl, lsr #18
    9e60:	04060000 	streq	r0, [r6], #-0
    9e64:	00000a1c 	andeq	r0, r0, ip, lsl sl
    9e68:	0f7c212f 	svceq	0x007c212f
    9e6c:	a2010000 	andge	r0, r1, #0
    9e70:	00000039 	andeq	r0, r0, r9, lsr r0
    9e74:	00000a2e 	andeq	r0, r0, lr, lsr #20
    9e78:	56300022 	ldrtpl	r0, [r0], -r2, lsr #32
    9e7c:	0b000019 	bleq	9ee8 <__Stack_Size+0x96e8>
    9e80:	0000be2f 	andeq	fp, r0, pc, lsr #28
    9e84:	09a52a00 	stmibeq	r5!, {r9, fp, sp}
    9e88:	a52a0000 	strge	r0, [sl, #-0]!
    9e8c:	2a000009 	bcs	9eb8 <__Stack_Size+0x96b8>
    9e90:	000009a5 	andeq	r0, r0, r5, lsr #19
    9e94:	0000252a 	andeq	r2, r0, sl, lsr #10
    9e98:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    9e9c:	0400000c 	streq	r0, [r0], #-12
    9ea0:	00248800 	eoreq	r8, r4, r0, lsl #16
    9ea4:	39010400 	stmdbcc	r1, {sl}
    9ea8:	01000006 	tsteq	r0, r6
    9eac:	00001ef5 	strdeq	r1, [r0], -r5
    9eb0:	00000893 	muleq	r0, r3, r8
    9eb4:	00000c50 	andeq	r0, r0, r0, asr ip
    9eb8:	00000000 	andeq	r0, r0, r0
    9ebc:	00003619 	andeq	r3, r0, r9, lsl r6
    9ec0:	da050402 	ble	14aed0 <__Stack_Size+0x14a6d0>
    9ec4:	02000004 	andeq	r0, r0, #4
    9ec8:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    9ecc:	01020000 	mrseq	r0, (UNDEF: 2)
    9ed0:	00081a06 	andeq	r1, r8, r6, lsl #20
    9ed4:	33750300 	cmncc	r5, #0, 6
    9ed8:	24020032 	strcs	r0, [r2], #-50	; 0x32
    9edc:	00000045 	andeq	r0, r0, r5, asr #32
    9ee0:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    9ee4:	03000002 	movweq	r0, #2
    9ee8:	00363175 	eorseq	r3, r6, r5, ror r1
    9eec:	00572502 	subseq	r2, r7, r2, lsl #10
    9ef0:	02020000 	andeq	r0, r2, #0
    9ef4:	00094907 	andeq	r4, r9, r7, lsl #18
    9ef8:	38750300 	ldmdacc	r5!, {r8, r9}^
    9efc:	68260200 	stmdavs	r6!, {r9}
    9f00:	02000000 	andeq	r0, r0, #0
    9f04:	08180801 	ldmdaeq	r8, {r0, fp}
    9f08:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    9f0c:	0100001e 	tsteq	r0, lr, lsl r0
    9f10:	008e1603 	addeq	r1, lr, r3, lsl #12
    9f14:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    9f18:	0000001f 	andeq	r0, r0, pc, lsl r0
    9f1c:	001dd305 	andseq	sp, sp, r5, lsl #6
    9f20:	af050100 	svcge	0x00050100
    9f24:	0200001e 	andeq	r0, r0, #30
    9f28:	1e090600 	cfmadd32ne	mvax0, mvfx0, mvfx9, mvfx0
    9f2c:	1c030000 	stcne	0, cr0, [r3], {-0}
    9f30:	0000006f 	andeq	r0, r0, pc, rrx
    9f34:	001fe407 	andseq	lr, pc, r7, lsl #8
    9f38:	4c9b0100 	ldfmis	f0, [fp], {0}
    9f3c:	01000000 	mrseq	r0, (UNDEF: 0)
    9f40:	000000b5 	strheq	r0, [r0], -r5
    9f44:	0020fa08 	eoreq	pc, r0, r8, lsl #20
    9f48:	5e9b0100 	fmlple	f0, f3, f0
    9f4c:	00000000 	andeq	r0, r0, r0
    9f50:	00203b09 	eoreq	r3, r0, r9, lsl #22
    9f54:	00220100 	eoreq	r0, r2, r0, lsl #2
    9f58:	0c000000 	stceq	0, cr0, [r0], {-0}
    9f5c:	01000000 	mrseq	r0, (UNDEF: 0)
    9f60:	0000d89c 	muleq	r0, ip, r8
    9f64:	1fda0a00 	svcne	0x00da0a00
    9f68:	22010000 	andcs	r0, r1, #0
    9f6c:	0000004c 	andeq	r0, r0, ip, asr #32
    9f70:	0b005001 	bleq	1df7c <__Stack_Size+0x1d77c>
    9f74:	00001e42 	andeq	r1, r0, r2, asr #28
    9f78:	004c2e01 	subeq	r2, ip, r1, lsl #28
    9f7c:	00000000 	andeq	r0, r0, r0
    9f80:	000c0000 	andeq	r0, ip, r0
    9f84:	9c010000 	stcls	0, cr0, [r1], {-0}
    9f88:	001e1509 	andseq	r1, lr, r9, lsl #10
    9f8c:	003a0100 	eorseq	r0, sl, r0, lsl #2
    9f90:	0c000000 	stceq	0, cr0, [r0], {-0}
    9f94:	01000000 	mrseq	r0, (UNDEF: 0)
    9f98:	0001109c 	muleq	r1, ip, r0
    9f9c:	1fda0a00 	svcne	0x00da0a00
    9fa0:	3a010000 	bcc	49fa8 <__Stack_Size+0x497a8>
    9fa4:	0000004c 	andeq	r0, r0, ip, asr #32
    9fa8:	0b005001 	bleq	1dfb4 <__Stack_Size+0x1d7b4>
    9fac:	00001fd2 	ldrdeq	r1, [r0], -r2
    9fb0:	004c4601 	subeq	r4, ip, r1, lsl #12
    9fb4:	00000000 	andeq	r0, r0, r0
    9fb8:	000c0000 	andeq	r0, ip, r0
    9fbc:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fc0:	0020a60b 	eoreq	sl, r0, fp, lsl #12
    9fc4:	4c520100 	ldfmie	f0, [r2], {-0}
    9fc8:	00000000 	andeq	r0, r0, r0
    9fcc:	0c000000 	stceq	0, cr0, [r0], {-0}
    9fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    9fd4:	2008099c 	mulcs	r8, ip, r9
    9fd8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    9fdc:	00000000 	andeq	r0, r0, r0
    9fe0:	0000000c 	andeq	r0, r0, ip
    9fe4:	015d9c01 	cmpeq	sp, r1, lsl #24
    9fe8:	da0a0000 	ble	289ff0 <__Stack_Size+0x2897f0>
    9fec:	0100001f 	tsteq	r0, pc, lsl r0
    9ff0:	00004c5e 	andeq	r4, r0, lr, asr ip
    9ff4:	00500100 	subseq	r0, r0, r0, lsl #2
    9ff8:	001e5b0b 	andseq	r5, lr, fp, lsl #22
    9ffc:	4c6a0100 	stfmie	f0, [sl], #-0
    a000:	00000000 	andeq	r0, r0, r0
    a004:	0c000000 	stceq	0, cr0, [r0], {-0}
    a008:	01000000 	mrseq	r0, (UNDEF: 0)
    a00c:	2043099c 	umaalcs	r0, r3, ip, r9
    a010:	76010000 	strvc	r0, [r1], -r0
    a014:	00000000 	andeq	r0, r0, r0
    a018:	00000010 	andeq	r0, r0, r0, lsl r0
    a01c:	01959c01 	orrseq	r9, r5, r1, lsl #24
    a020:	da0a0000 	ble	28a028 <__Stack_Size+0x289828>
    a024:	0100001f 	tsteq	r0, pc, lsl r0
    a028:	00004c76 	andeq	r4, r0, r6, ror ip
    a02c:	00500100 	subseq	r0, r0, r0, lsl #2
    a030:	001fc80b 	andseq	ip, pc, fp, lsl #16
    a034:	4c820100 	stfmis	f0, [r2], {0}
    a038:	00000000 	andeq	r0, r0, r0
    a03c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a040:	01000000 	mrseq	r0, (UNDEF: 0)
    a044:	2101099c 			; <UNDEFINED> instruction: 0x2101099c
    a048:	8f010000 	svchi	0x00010000
    a04c:	00000000 	andeq	r0, r0, r0
    a050:	0000000e 	andeq	r0, r0, lr
    a054:	01dc9c01 	bicseq	r9, ip, r1, lsl #24
    a058:	fa0c0000 	blx	30a060 <__Stack_Size+0x309860>
    a05c:	01000020 	tsteq	r0, r0, lsr #32
    a060:	00005e8f 	andeq	r5, r0, pc, lsl #29
    a064:	008b3100 	addeq	r3, fp, r0, lsl #2
    a068:	1fda0a00 	svcne	0x00da0a00
    a06c:	8f010000 	svchi	0x00010000
    a070:	0000004c 	andeq	r0, r0, ip, asr #32
    a074:	0d005101 	stfeqs	f5, [r0, #-4]
    a078:	00000099 	muleq	r0, r9, r0
    a07c:	00000000 	andeq	r0, r0, r0
    a080:	00000010 	andeq	r0, r0, r0, lsl r0
    a084:	01f99c01 	mvnseq	r9, r1, lsl #24
    a088:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    a08c:	52000000 	andpl	r0, r0, #0
    a090:	0000008b 	andeq	r0, r0, fp, lsl #1
    a094:	001ea509 	andseq	sl, lr, r9, lsl #10
    a098:	00a80100 	adceq	r0, r8, r0, lsl #2
    a09c:	1c000000 	stcne	0, cr0, [r0], {-0}
    a0a0:	01000000 	mrseq	r0, (UNDEF: 0)
    a0a4:	00022d9c 	muleq	r2, ip, sp
    a0a8:	20fa0c00 	rscscs	r0, sl, r0, lsl #24
    a0ac:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    a0b0:	0000005e 	andeq	r0, r0, lr, asr r0
    a0b4:	00008b73 	andeq	r8, r0, r3, ror fp
    a0b8:	001eef0c 	andseq	lr, lr, ip, lsl #30
    a0bc:	4ca80100 	stfmis	f0, [r8]
    a0c0:	94000000 	strls	r0, [r0], #-0
    a0c4:	0000008b 	andeq	r0, r0, fp, lsl #1
    a0c8:	001f780f 	andseq	r7, pc, pc, lsl #16
    a0cc:	4cb40100 	ldfmis	f0, [r4]
    a0d0:	00000000 	andeq	r0, r0, r0
    a0d4:	12000000 	andne	r0, r0, #0
    a0d8:	01000000 	mrseq	r0, (UNDEF: 0)
    a0dc:	0002569c 	muleq	r2, ip, r6
    a0e0:	20fa0c00 	rscscs	r0, sl, r0, lsl #24
    a0e4:	b4010000 	strlt	r0, [r1], #-0
    a0e8:	0000005e 	andeq	r0, r0, lr, asr r0
    a0ec:	00008bb5 			; <UNDEFINED> instruction: 0x00008bb5
    a0f0:	20ec0900 	rsccs	r0, ip, r0, lsl #18
    a0f4:	c1010000 	mrsgt	r0, (UNDEF: 1)
    a0f8:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    a0fc:	0000002a 	andeq	r0, r0, sl, lsr #32
    a100:	029f9c01 	addseq	r9, pc, #256	; 0x100
    a104:	fa0c0000 	blx	30a10c <__Stack_Size+0x30990c>
    a108:	01000020 	tsteq	r0, r0, lsr #32
    a10c:	00005ec1 	andeq	r5, r0, r1, asr #29
    a110:	008bd600 	addeq	sp, fp, r0, lsl #12
    a114:	15a70a00 	strne	r0, [r7, #2560]!	; 0xa00
    a118:	c1010000 	mrsgt	r0, (UNDEF: 1)
    a11c:	0000004c 	andeq	r0, r0, ip, asr #32
    a120:	d8105101 	ldmdale	r0, {r0, r8, ip, lr}
    a124:	2a080061 	bcs	20a2b0 <__Stack_Size+0x209ab0>
    a128:	11000000 	mrsne	r0, (UNDEF: 0)
    a12c:	0000075e 	andeq	r0, r0, lr, asr r7
    a130:	004cc301 	subeq	ip, ip, r1, lsl #6
    a134:	53010000 	movwpl	r0, #4096	; 0x1000
    a138:	78090000 	stmdavc	r9, {}	; <UNPREDICTABLE>
    a13c:	0100001e 	tsteq	r0, lr, lsl r0
    a140:	000000ce 	andeq	r0, r0, lr, asr #1
    a144:	00002a00 	andeq	r2, r0, r0, lsl #20
    a148:	e89c0100 	ldm	ip, {r8}
    a14c:	0c000002 	stceq	0, cr0, [r0], {2}
    a150:	000020fa 	strdeq	r2, [r0], -sl
    a154:	005ece01 	subseq	ip, lr, r1, lsl #28
    a158:	8bf70000 	blhi	ffdca160 <BootRAM+0xed3a901>
    a15c:	a70a0000 	strge	r0, [sl, -r0]
    a160:	01000015 	tsteq	r0, r5, lsl r0
    a164:	00004cce 	andeq	r4, r0, lr, asr #25
    a168:	10510100 	subsne	r0, r1, r0, lsl #2
    a16c:	00000000 	andeq	r0, r0, r0
    a170:	0000002a 	andeq	r0, r0, sl, lsr #32
    a174:	00075e11 	andeq	r5, r7, r1, lsl lr
    a178:	4cd00100 	ldfmie	f0, [r0], {0}
    a17c:	01000000 	mrseq	r0, (UNDEF: 0)
    a180:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    a184:	00001dbe 			; <UNDEFINED> instruction: 0x00001dbe
    a188:	0000db01 	andeq	sp, r0, r1, lsl #22
    a18c:	00240000 	eoreq	r0, r4, r0
    a190:	9c010000 	stcls	0, cr0, [r1], {-0}
    a194:	0000033e 	andeq	r0, r0, lr, lsr r3
    a198:	0020fa0c 	eoreq	pc, r0, ip, lsl #20
    a19c:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    a1a0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a1a4:	0a00008c 	beq	a3dc <__Stack_Size+0x9bdc>
    a1a8:	00001eea 	andeq	r1, r0, sl, ror #29
    a1ac:	005edb01 	subseq	sp, lr, r1, lsl #22
    a1b0:	51010000 	mrspl	r0, (UNDEF: 1)
    a1b4:	0020be12 	eoreq	fp, r0, r2, lsl lr
    a1b8:	4cdd0100 	ldfmie	f0, [sp], {0}
    a1bc:	13000000 	movwne	r0, #0
    a1c0:	00000099 	muleq	r0, r9, r0
    a1c4:	00000000 	andeq	r0, r0, r0
    a1c8:	00000ba0 	andeq	r0, r0, r0, lsr #23
    a1cc:	a90ede01 	stmdbge	lr, {r0, r9, sl, fp, ip, lr, pc}
    a1d0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a1d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    a1d8:	1edc0f00 	cdpne	15, 13, cr0, cr12, cr0, {0}
    a1dc:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    a1e0:	0000004c 	andeq	r0, r0, ip, asr #32
    a1e4:	00000000 	andeq	r0, r0, r0
    a1e8:	00000012 	andeq	r0, r0, r2, lsl r0
    a1ec:	03679c01 	cmneq	r7, #256	; 0x100
    a1f0:	fa0c0000 	blx	30a1f8 <__Stack_Size+0x3099f8>
    a1f4:	01000020 	tsteq	r0, r0, lsr #32
    a1f8:	00005ef0 	strdeq	r5, [r0], -r0
    a1fc:	008c3900 	addeq	r3, ip, r0, lsl #18
    a200:	df0f0000 	svcle	0x000f0000
    a204:	0100001d 	tsteq	r0, sp, lsl r0
    a208:	00004cfc 	strdeq	r4, [r0], -ip
    a20c:	00000000 	andeq	r0, r0, r0
    a210:	00001200 	andeq	r1, r0, r0, lsl #4
    a214:	909c0100 	addsls	r0, ip, r0, lsl #2
    a218:	0c000003 	stceq	0, cr0, [r0], {3}
    a21c:	000020fa 	strdeq	r2, [r0], -sl
    a220:	005efc01 	subseq	pc, lr, r1, lsl #24
    a224:	8c5a0000 	mrahi	r0, sl, acc0
    a228:	14000000 	strne	r0, [r0], #-0
    a22c:	00001db1 			; <UNDEFINED> instruction: 0x00001db1
    a230:	00010801 	andeq	r0, r1, r1, lsl #16
    a234:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a238:	01000000 	mrseq	r0, (UNDEF: 0)
    a23c:	0003d19c 	muleq	r3, ip, r1
    a240:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a244:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a248:	00005e01 	andeq	r5, r0, r1, lsl #28
    a24c:	008c7b00 	addeq	r7, ip, r0, lsl #22
    a250:	00001000 	andeq	r1, r0, r0
    a254:	001e0000 	andseq	r0, lr, r0
    a258:	5e160000 	cdppl	0, 1, cr0, cr6, cr0, {0}
    a25c:	01000007 	tsteq	r0, r7
    a260:	004c010a 	subeq	r0, ip, sl, lsl #2
    a264:	8c9c0000 	ldchi	0, cr0, [ip], {0}
    a268:	00000000 	andeq	r0, r0, r0
    a26c:	00037f14 	andeq	r7, r3, r4, lsl pc
    a270:	01140100 	tsteq	r4, r0, lsl #2
    a274:	08006202 	stmdaeq	r0, {r1, r9, sp, lr}
    a278:	0000001e 	andeq	r0, r0, lr, lsl r0
    a27c:	04129c01 	ldreq	r9, [r2], #-3073	; 0xc01
    a280:	fa150000 	blx	54a288 <__Stack_Size+0x549a88>
    a284:	01000020 	tsteq	r0, r0, lsr #32
    a288:	005e0114 	subseq	r0, lr, r4, lsl r1
    a28c:	8cc70000 	stclhi	0, cr0, [r7], {0}
    a290:	02100000 	andseq	r0, r0, #0
    a294:	1e080062 	cdpne	0, 0, cr0, cr8, cr2, {3}
    a298:	16000000 	strne	r0, [r0], -r0
    a29c:	0000075e 	andeq	r0, r0, lr, asr r7
    a2a0:	4c011601 	stcmi	6, cr1, [r1], {1}
    a2a4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    a2a8:	0000008c 	andeq	r0, r0, ip, lsl #1
    a2ac:	1fa31400 	svcne	0x00a31400
    a2b0:	20010000 	andcs	r0, r1, r0
    a2b4:	00000001 	andeq	r0, r0, r1
    a2b8:	00001e00 	andeq	r1, r0, r0, lsl #28
    a2bc:	399c0100 	ldmibcc	ip, {r8}
    a2c0:	15000004 	strne	r0, [r0, #-4]
    a2c4:	000020fa 	strdeq	r2, [r0], -sl
    a2c8:	5e012001 	cdppl	0, 0, cr2, cr1, cr1, {0}
    a2cc:	16000000 	strne	r0, [r0], -r0
    a2d0:	0000008d 	andeq	r0, r0, sp, lsl #1
    a2d4:	001fbb14 	andseq	fp, pc, r4, lsl fp	; <UNPREDICTABLE>
    a2d8:	012c0100 	teqeq	ip, r0, lsl #2
    a2dc:	00000000 	andeq	r0, r0, r0
    a2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
    a2e4:	04609c01 	strbteq	r9, [r0], #-3073	; 0xc01
    a2e8:	fa150000 	blx	54a2f0 <__Stack_Size+0x549af0>
    a2ec:	01000020 	tsteq	r0, r0, lsr #32
    a2f0:	005e012c 	subseq	r0, lr, ip, lsr #2
    a2f4:	8d370000 	ldchi	0, cr0, [r7, #-0]
    a2f8:	14000000 	strne	r0, [r0], #-0
    a2fc:	00000794 	muleq	r0, r4, r7
    a300:	20013701 	andcs	r3, r1, r1, lsl #14
    a304:	1c080062 	stcne	0, cr0, [r8], {98}	; 0x62
    a308:	01000000 	mrseq	r0, (UNDEF: 0)
    a30c:	0004879c 	muleq	r4, ip, r7
    a310:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a314:	37010000 	strcc	r0, [r1, -r0]
    a318:	00005e01 	andeq	r5, r0, r1, lsl #28
    a31c:	008d5800 	addeq	r5, sp, r0, lsl #16
    a320:	97140000 	ldrls	r0, [r4, -r0]
    a324:	01000020 	tsteq	r0, r0, lsr #32
    a328:	00000142 	andeq	r0, r0, r2, asr #2
    a32c:	001e0000 	andseq	r0, lr, r0
    a330:	9c010000 	stcls	0, cr0, [r1], {-0}
    a334:	000004ae 	andeq	r0, r0, lr, lsr #9
    a338:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a33c:	01420100 	mrseq	r0, (UNDEF: 82)
    a340:	0000005e 	andeq	r0, r0, lr, asr r0
    a344:	00008d79 	andeq	r8, r0, r9, ror sp
    a348:	1f321400 	svcne	0x00321400
    a34c:	4d010000 	stcmi	0, cr0, [r1, #-0]
    a350:	00000001 	andeq	r0, r0, r1
    a354:	00001e00 	andeq	r1, r0, r0, lsl #28
    a358:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    a35c:	15000004 	strne	r0, [r0, #-4]
    a360:	000020fa 	strdeq	r2, [r0], -sl
    a364:	5e014d01 	cdppl	13, 0, cr4, cr1, cr1, {0}
    a368:	9a000000 	bls	a370 <__Stack_Size+0x9b70>
    a36c:	0000008d 	andeq	r0, r0, sp, lsl #1
    a370:	001f5514 	andseq	r5, pc, r4, lsl r5	; <UNPREDICTABLE>
    a374:	01580100 	cmpeq	r8, r0, lsl #2
    a378:	00000000 	andeq	r0, r0, r0
    a37c:	0000001c 	andeq	r0, r0, ip, lsl r0
    a380:	04fc9c01 	ldrbteq	r9, [ip], #3073	; 0xc01
    a384:	fa150000 	blx	54a38c <__Stack_Size+0x549b8c>
    a388:	01000020 	tsteq	r0, r0, lsr #32
    a38c:	005e0158 	subseq	r0, lr, r8, asr r1
    a390:	8dbb0000 	ldchi	0, cr0, [fp]
    a394:	17000000 	strne	r0, [r0, -r0]
    a398:	00001d8f 	andeq	r1, r0, pc, lsl #27
    a39c:	4c016301 	stcmi	3, cr6, [r1], {1}
    a3a0:	00000000 	andeq	r0, r0, r0
    a3a4:	1a000000 	bne	a3ac <__Stack_Size+0x9bac>
    a3a8:	01000000 	mrseq	r0, (UNDEF: 0)
    a3ac:	0005279c 	muleq	r5, ip, r7
    a3b0:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a3b4:	63010000 	movwvs	r0, #4096	; 0x1000
    a3b8:	00005e01 	andeq	r5, r0, r1, lsl #28
    a3bc:	008ddc00 	addeq	sp, sp, r0, lsl #24
    a3c0:	4a170000 	bmi	5ca3c8 <__Stack_Size+0x5c9bc8>
    a3c4:	0100001e 	tsteq	r0, lr, lsl r0
    a3c8:	004c016e 	subeq	r0, ip, lr, ror #2
    a3cc:	00000000 	andeq	r0, r0, r0
    a3d0:	001a0000 	andseq	r0, sl, r0
    a3d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a3d8:	00000552 	andeq	r0, r0, r2, asr r5
    a3dc:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a3e0:	016e0100 	cmneq	lr, r0, lsl #2
    a3e4:	0000005e 	andeq	r0, r0, lr, asr r0
    a3e8:	00008dfd 	strdeq	r8, [r0], -sp
    a3ec:	1f821400 	svcne	0x00821400
    a3f0:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    a3f4:	00000001 	andeq	r0, r0, r1
    a3f8:	00001800 	andeq	r1, r0, r0, lsl #16
    a3fc:	799c0100 	ldmibvc	ip, {r8}
    a400:	15000005 	strne	r0, [r0, #-5]
    a404:	000020fa 	strdeq	r2, [r0], -sl
    a408:	5e017901 	cdppl	9, 0, cr7, cr1, cr1, {0}
    a40c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a410:	0000008e 	andeq	r0, r0, lr, lsl #1
    a414:	00205a14 	eoreq	r5, r0, r4, lsl sl
    a418:	01840100 	orreq	r0, r4, r0, lsl #2
    a41c:	00000000 	andeq	r0, r0, r0
    a420:	0000001c 	andeq	r0, r0, ip, lsl r0
    a424:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    a428:	fa150000 	blx	54a430 <__Stack_Size+0x549c30>
    a42c:	01000020 	tsteq	r0, r0, lsr #32
    a430:	005e0184 	subseq	r0, lr, r4, lsl #3
    a434:	8e3f0000 	cdphi	0, 3, cr0, cr15, cr0, {0}
    a438:	14000000 	strne	r0, [r0], #-0
    a43c:	00001e86 	andeq	r1, r0, r6, lsl #29
    a440:	00018f01 	andeq	r8, r1, r1, lsl #30
    a444:	20000000 	andcs	r0, r0, r0
    a448:	01000000 	mrseq	r0, (UNDEF: 0)
    a44c:	0005c79c 	muleq	r5, ip, r7
    a450:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a454:	8f010000 	svchi	0x00010000
    a458:	00005e01 	andeq	r5, r0, r1, lsl #28
    a45c:	008e6000 	addeq	r6, lr, r0
    a460:	ed140000 	ldc	0, cr0, [r4, #-0]
    a464:	0100001d 	tsteq	r0, sp, lsl r0
    a468:	0000019a 	muleq	r0, sl, r1
    a46c:	00200000 	eoreq	r0, r0, r0
    a470:	9c010000 	stcls	0, cr0, [r1], {-0}
    a474:	000005ee 	andeq	r0, r0, lr, ror #11
    a478:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a47c:	019a0100 	orrseq	r0, sl, r0, lsl #2
    a480:	0000005e 	andeq	r0, r0, lr, asr r0
    a484:	00008e81 	andeq	r8, r0, r1, lsl #29
    a488:	1e2f1400 	cdpne	4, 2, cr1, cr15, cr0, {0}
    a48c:	a5010000 	strge	r0, [r1, #-0]
    a490:	00623c01 	rsbeq	r3, r2, r1, lsl #24
    a494:	00002008 	andeq	r2, r0, r8
    a498:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    a49c:	15000006 	strne	r0, [r0, #-6]
    a4a0:	000020fa 	strdeq	r2, [r0], -sl
    a4a4:	5e01a501 	cfsh32pl	mvfx10, mvfx1, #1
    a4a8:	a2000000 	andge	r0, r0, #0
    a4ac:	0000008e 	andeq	r0, r0, lr, lsl #1
    a4b0:	0020df14 	eoreq	sp, r0, r4, lsl pc
    a4b4:	01b00100 	lslseq	r0, r0, #2
    a4b8:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
    a4bc:	00000020 	andeq	r0, r0, r0, lsr #32
    a4c0:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    a4c4:	fa150000 	blx	54a4cc <__Stack_Size+0x549ccc>
    a4c8:	01000020 	tsteq	r0, r0, lsr #32
    a4cc:	005e01b0 	ldrheq	r0, [lr], #-16
    a4d0:	8ec30000 	cdphi	0, 12, cr0, cr3, cr0, {0}
    a4d4:	14000000 	strne	r0, [r0], #-0
    a4d8:	00001e6b 	andeq	r1, r0, fp, ror #28
    a4dc:	0001bc01 	andeq	fp, r1, r1, lsl #24
    a4e0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    a4e4:	01000000 	mrseq	r0, (UNDEF: 0)
    a4e8:	0006739c 	muleq	r6, ip, r3
    a4ec:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a4f0:	bc010000 	stclt	0, cr0, [r1], {-0}
    a4f4:	00005e01 	andeq	r5, r0, r1, lsl #28
    a4f8:	008ee400 	addeq	lr, lr, r0, lsl #8
    a4fc:	1e3c1500 	cfabs32ne	mvfx1, mvfx12
    a500:	bc010000 	stclt	0, cr0, [r1], {-0}
    a504:	00005e01 	andeq	r5, r0, r1, lsl #28
    a508:	008f0500 	addeq	r0, pc, r0, lsl #10
    a50c:	fb170000 	blx	5ca516 <__Stack_Size+0x5c9d16>
    a510:	0100001d 	tsteq	r0, sp, lsl r0
    a514:	005e01c7 	subseq	r0, lr, r7, asr #3
    a518:	00000000 	andeq	r0, r0, r0
    a51c:	00120000 	andseq	r0, r2, r0
    a520:	9c010000 	stcls	0, cr0, [r1], {-0}
    a524:	0000069e 	muleq	r0, lr, r6
    a528:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a52c:	01c70100 	biceq	r0, r7, r0, lsl #2
    a530:	0000005e 	andeq	r0, r0, lr, asr r0
    a534:	00008f26 	andeq	r8, r0, r6, lsr #30
    a538:	1f491400 	svcne	0x00491400
    a53c:	d3010000 	movwle	r0, #4096	; 0x1000
    a540:	00000001 	andeq	r0, r0, r1
    a544:	00002000 	andeq	r2, r0, r0
    a548:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    a54c:	15000006 	strne	r0, [r0, #-6]
    a550:	000020fa 	strdeq	r2, [r0], -sl
    a554:	5e01d301 	cdppl	3, 0, cr13, cr1, cr1, {0}
    a558:	47000000 	strmi	r0, [r0, -r0]
    a55c:	1500008f 	strne	r0, [r0, #-143]	; 0x8f
    a560:	00001ff0 	strdeq	r1, [r0], -r0
    a564:	4c01d301 	stcmi	3, cr13, [r1], {1}
    a568:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    a56c:	0000008f 	andeq	r0, r0, pc, lsl #1
    a570:	00210d14 	eoreq	r0, r1, r4, lsl sp
    a574:	01df0100 	bicseq	r0, pc, r0, lsl #2
    a578:	00000000 	andeq	r0, r0, r0
    a57c:	00000020 	andeq	r0, r0, r0, lsr #32
    a580:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
    a584:	fa150000 	blx	54a58c <__Stack_Size+0x549d8c>
    a588:	01000020 	tsteq	r0, r0, lsr #32
    a58c:	005e01df 	ldrsbeq	r0, [lr], #-31	; 0xffffffe1
    a590:	8f890000 	svchi	0x00890000
    a594:	f0150000 			; <UNDEFINED> instruction: 0xf0150000
    a598:	0100001f 	tsteq	r0, pc, lsl r0
    a59c:	004c01df 	ldrdeq	r0, [ip], #-31	; 0xffffffe1
    a5a0:	8faa0000 	svchi	0x00aa0000
    a5a4:	17000000 	strne	r0, [r0, -r0]
    a5a8:	000020d3 	ldrdeq	r2, [r0], -r3
    a5ac:	4c01ea01 	stcmi	10, cr14, [r1], {1}
    a5b0:	7c000000 	stcvc	0, cr0, [r0], {-0}
    a5b4:	1c080062 	stcne	0, cr0, [r8], {98}	; 0x62
    a5b8:	01000000 	mrseq	r0, (UNDEF: 0)
    a5bc:	0007379c 	muleq	r7, ip, r7
    a5c0:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a5c4:	ea010000 	b	4a5cc <__Stack_Size+0x49dcc>
    a5c8:	00005e01 	andeq	r5, r0, r1, lsl #28
    a5cc:	008fcb00 	addeq	ip, pc, r0, lsl #22
    a5d0:	bf170000 	svclt	0x00170000
    a5d4:	0100001e 	tsteq	r0, lr, lsl r0
    a5d8:	004c01f5 	strdeq	r0, [ip], #-21	; 0xffffffeb
    a5dc:	62980000 	addsvs	r0, r8, #0
    a5e0:	001c0800 	andseq	r0, ip, r0, lsl #16
    a5e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a5e8:	00000762 	andeq	r0, r0, r2, ror #14
    a5ec:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a5f0:	01f50100 	mvnseq	r0, r0, lsl #2
    a5f4:	0000005e 	andeq	r0, r0, lr, asr r0
    a5f8:	00008fec 	andeq	r8, r0, ip, ror #31
    a5fc:	1fae1400 	svcne	0x00ae1400
    a600:	01010000 	mrseq	r0, (UNDEF: 1)
    a604:	0062b402 	rsbeq	fp, r2, r2, lsl #8
    a608:	00001c08 	andeq	r1, r0, r8, lsl #24
    a60c:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    a610:	15000007 	strne	r0, [r0, #-7]
    a614:	000020fa 	strdeq	r2, [r0], -sl
    a618:	5e020101 	adfpls	f0, f2, f1
    a61c:	0d000000 	stceq	0, cr0, [r0, #-0]
    a620:	18000090 	stmdane	r0, {r4, r7}
    a624:	00001e64 	andeq	r1, r0, r4, ror #28
    a628:	4c020101 	stfmis	f0, [r2], {1}
    a62c:	01000000 	mrseq	r0, (UNDEF: 0)
    a630:	18140051 	ldmdane	r4, {r0, r4, r6}
    a634:	01000020 	tsteq	r0, r0, lsr #32
    a638:	0000020d 	andeq	r0, r0, sp, lsl #4
    a63c:	00260000 	eoreq	r0, r6, r0
    a640:	9c010000 	stcls	0, cr0, [r1], {-0}
    a644:	000007e6 	andeq	r0, r0, r6, ror #15
    a648:	00201118 	eoreq	r1, r0, r8, lsl r1
    a64c:	020d0100 	andeq	r0, sp, #0, 2
    a650:	000007e6 	andeq	r0, r0, r6, ror #15
    a654:	64155001 	ldrvs	r5, [r5], #-1
    a658:	0100001e 	tsteq	r0, lr, lsl r0
    a65c:	004c020d 	subeq	r0, ip, sp, lsl #4
    a660:	902e0000 	eorls	r0, lr, r0
    a664:	00100000 	andseq	r0, r0, r0
    a668:	26000000 	strcs	r0, [r0], -r0
    a66c:	16000000 	strne	r0, [r0], -r0
    a670:	00001e26 	andeq	r1, r0, r6, lsr #28
    a674:	4c020f01 	stcmi	15, cr0, [r2], {1}
    a678:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    a67c:	00000090 	muleq	r0, r0, r0
    a680:	3a041900 	bcc	110a88 <__Stack_Size+0x110288>
    a684:	14000000 	strne	r0, [r0], #-0
    a688:	0000099c 	muleq	r0, ip, r9
    a68c:	d0021901 	andle	r1, r2, r1, lsl #18
    a690:	40080062 	andmi	r0, r8, r2, rrx
    a694:	01000000 	mrseq	r0, (UNDEF: 0)
    a698:	0008519c 	muleq	r8, ip, r1
    a69c:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a6a0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    a6a4:	00005e02 	andeq	r5, r0, r2, lsl #28
    a6a8:	00909100 	addseq	r9, r0, r0, lsl #2
    a6ac:	1e641500 	cdpne	5, 6, cr1, cr4, cr0, {0}
    a6b0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    a6b4:	00004c02 	andeq	r4, r0, r2, lsl #24
    a6b8:	0090b200 	addseq	fp, r0, r0, lsl #4
    a6bc:	62d01000 	sbcsvs	r1, r0, #0
    a6c0:	00400800 	subeq	r0, r0, r0, lsl #16
    a6c4:	111a0000 	tstne	sl, r0
    a6c8:	01000020 	tsteq	r0, r0, lsr #32
    a6cc:	07e6021b 			; <UNDEFINED> instruction: 0x07e6021b
    a6d0:	52010000 	andpl	r0, r1, #0
    a6d4:	000bb81b 	andeq	fp, fp, fp, lsl r8
    a6d8:	1e261600 	cfmadda32ne	mvax0, mvax1, mvfx6, mvfx0
    a6dc:	1b010000 	blne	4a6e4 <__Stack_Size+0x49ee4>
    a6e0:	00004c02 	andeq	r4, r0, r2, lsl #24
    a6e4:	0090d300 	addseq	sp, r0, r0, lsl #6
    a6e8:	00000000 	andeq	r0, r0, r0
    a6ec:	00204d17 	eoreq	r4, r0, r7, lsl sp
    a6f0:	02240100 	eoreq	r0, r4, #0, 2
    a6f4:	0000004c 	andeq	r0, r0, ip, asr #32
    a6f8:	00000000 	andeq	r0, r0, r0
    a6fc:	00000020 	andeq	r0, r0, r0, lsr #32
    a700:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    a704:	fa150000 	blx	54a70c <__Stack_Size+0x549f0c>
    a708:	01000020 	tsteq	r0, r0, lsr #32
    a70c:	005e0224 	subseq	r0, lr, r4, lsr #4
    a710:	910b0000 	mrsls	r0, (UNDEF: 11)
    a714:	17000000 	strne	r0, [r0, -r0]
    a718:	00002028 	andeq	r2, r0, r8, lsr #32
    a71c:	4c022f01 	stcmi	15, cr2, [r2], {1}
    a720:	00000000 	andeq	r0, r0, r0
    a724:	20000000 	andcs	r0, r0, r0
    a728:	01000000 	mrseq	r0, (UNDEF: 0)
    a72c:	0008a79c 	muleq	r8, ip, r7
    a730:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a734:	2f010000 	svccs	0x00010000
    a738:	00005e02 	andeq	r5, r0, r2, lsl #28
    a73c:	00912c00 	addseq	r2, r1, r0, lsl #24
    a740:	94140000 	ldrls	r0, [r4], #-0
    a744:	0100001e 	tsteq	r0, lr, lsl r0
    a748:	0000023c 	andeq	r0, r0, ip, lsr r2
    a74c:	00380000 	eorseq	r0, r8, r0
    a750:	9c010000 	stcls	0, cr0, [r1], {-0}
    a754:	000008ee 	andeq	r0, r0, lr, ror #17
    a758:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a75c:	023c0100 	eorseq	r0, ip, #0, 2
    a760:	0000005e 	andeq	r0, r0, lr, asr r0
    a764:	0000914d 	andeq	r9, r0, sp, asr #2
    a768:	00208d15 	eoreq	r8, r0, r5, lsl sp
    a76c:	023c0100 	eorseq	r0, ip, #0, 2
    a770:	0000004c 	andeq	r0, r0, ip, asr #32
    a774:	0000916e 	andeq	r9, r0, lr, ror #2
    a778:	001f2315 	andseq	r2, pc, r5, lsl r3	; <UNPREDICTABLE>
    a77c:	023c0100 	eorseq	r0, ip, #0, 2
    a780:	0000004c 	andeq	r0, r0, ip, asr #32
    a784:	0000918f 	andeq	r9, r0, pc, lsl #3
    a788:	1ecb1400 	cdpne	4, 12, cr1, cr11, cr0, {0}
    a78c:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    a790:	00000002 	andeq	r0, r0, r2
    a794:	00002000 	andeq	r2, r0, r0
    a798:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    a79c:	15000009 	strne	r0, [r0, #-9]
    a7a0:	000020fa 	strdeq	r2, [r0], -sl
    a7a4:	5e024801 	cdppl	8, 0, cr4, cr2, cr1, {0}
    a7a8:	b0000000 	andlt	r0, r0, r0
    a7ac:	15000091 	strne	r0, [r0, #-145]	; 0x91
    a7b0:	0000208d 	andeq	r2, r0, sp, lsl #1
    a7b4:	4c024801 	stcmi	8, cr4, [r2], {1}
    a7b8:	d1000000 	mrsle	r0, (UNDEF: 0)
    a7bc:	00000091 	muleq	r0, r1, r0
    a7c0:	001da014 	andseq	sl, sp, r4, lsl r0
    a7c4:	02540100 	subseq	r0, r4, #0, 2
    a7c8:	00000000 	andeq	r0, r0, r0
    a7cc:	00000020 	andeq	r0, r0, r0, lsr #32
    a7d0:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    a7d4:	fa150000 	blx	54a7dc <__Stack_Size+0x549fdc>
    a7d8:	01000020 	tsteq	r0, r0, lsr #32
    a7dc:	005e0254 	subseq	r0, lr, r4, asr r2
    a7e0:	91f20000 	mvnsls	r0, r0
    a7e4:	23150000 	tstcs	r5, #0
    a7e8:	0100001f 	tsteq	r0, pc, lsl r0
    a7ec:	004c0254 	subeq	r0, ip, r4, asr r2
    a7f0:	92130000 	andsls	r0, r3, #0
    a7f4:	17000000 	strne	r0, [r0, -r0]
    a7f8:	000020ad 	andeq	r2, r0, sp, lsr #1
    a7fc:	4c025f01 	stcmi	15, cr5, [r2], {1}
    a800:	00000000 	andeq	r0, r0, r0
    a804:	1c000000 	stcne	0, cr0, [r0], {-0}
    a808:	01000000 	mrseq	r0, (UNDEF: 0)
    a80c:	0009879c 	muleq	r9, ip, r7
    a810:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a814:	5f010000 	svcpl	0x00010000
    a818:	00005e02 	andeq	r5, r0, r2, lsl #28
    a81c:	00923400 	addseq	r3, r2, r0, lsl #8
    a820:	67170000 	ldrvs	r0, [r7, -r0]
    a824:	0100001f 	tsteq	r0, pc, lsl r0
    a828:	004c026a 	subeq	r0, ip, sl, ror #4
    a82c:	00000000 	andeq	r0, r0, r0
    a830:	001c0000 	andseq	r0, ip, r0
    a834:	9c010000 	stcls	0, cr0, [r1], {-0}
    a838:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    a83c:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    a840:	026a0100 	rsbeq	r0, sl, #0, 2
    a844:	0000005e 	andeq	r0, r0, lr, asr r0
    a848:	00009255 	andeq	r9, r0, r5, asr r2
    a84c:	1f911400 	svcne	0x00911400
    a850:	76010000 	strvc	r0, [r1], -r0
    a854:	00000002 	andeq	r0, r0, r2
    a858:	0000a800 	andeq	sl, r0, r0, lsl #16
    a85c:	599c0100 	ldmibpl	ip, {r8}
    a860:	1500000a 	strne	r0, [r0, #-10]
    a864:	000020fa 	strdeq	r2, [r0], -sl
    a868:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    a86c:	76000000 	strvc	r0, [r0], -r0
    a870:	15000092 	strne	r0, [r0, #-146]	; 0x92
    a874:	00001eea 	andeq	r1, r0, sl, ror #29
    a878:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    a87c:	bb000000 	bllt	a884 <__Stack_Size+0xa084>
    a880:	15000092 	strne	r0, [r0, #-146]	; 0x92
    a884:	00001e64 	andeq	r1, r0, r4, ror #28
    a888:	4c027601 	stcmi	6, cr7, [r2], {1}
    a88c:	00000000 	andeq	r0, r0, r0
    a890:	1c000093 	stcne	0, cr0, [r0], {147}	; 0x93
    a894:	00000000 	andeq	r0, r0, r0
    a898:	0000003a 	andeq	r0, r0, sl, lsr r0
    a89c:	00000a2c 	andeq	r0, r0, ip, lsr #20
    a8a0:	00201116 	eoreq	r1, r0, r6, lsl r1
    a8a4:	02780100 	rsbseq	r0, r8, #0, 2
    a8a8:	000007e6 	andeq	r0, r0, r6, ror #15
    a8ac:	0000932c 	andeq	r9, r0, ip, lsr #6
    a8b0:	000bd01b 	andeq	sp, fp, fp, lsl r0
    a8b4:	1e261600 	cfmadda32ne	mvax0, mvax1, mvfx6, mvfx0
    a8b8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    a8bc:	00004c02 	andeq	r4, r0, r2, lsl #24
    a8c0:	00934a00 	addseq	r4, r3, r0, lsl #20
    a8c4:	1b000000 	blne	a8cc <__Stack_Size+0xa0cc>
    a8c8:	00000be8 	andeq	r0, r0, r8, ror #23
    a8cc:	00201116 	eoreq	r1, r0, r6, lsl r1
    a8d0:	02780100 	rsbseq	r0, r8, #0, 2
    a8d4:	000007e6 	andeq	r0, r0, r6, ror #15
    a8d8:	00009382 	andeq	r9, r0, r2, lsl #7
    a8dc:	000c001b 	andeq	r0, ip, fp, lsl r0
    a8e0:	1e261600 	cfmadda32ne	mvax0, mvax1, mvfx6, mvfx0
    a8e4:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    a8e8:	00004c02 	andeq	r4, r0, r2, lsl #24
    a8ec:	0093a000 	addseq	sl, r3, r0
    a8f0:	00000000 	andeq	r0, r0, r0
    a8f4:	00207b14 	eoreq	r7, r0, r4, lsl fp
    a8f8:	02820100 	addeq	r0, r2, #0, 2
    a8fc:	00000000 	andeq	r0, r0, r0
    a900:	0000005c 	andeq	r0, r0, ip, asr r0
    a904:	0ad09c01 	beq	ff431910 <BootRAM+0xe3a20b1>
    a908:	fa150000 	blx	54a910 <__Stack_Size+0x54a110>
    a90c:	01000020 	tsteq	r0, r0, lsr #32
    a910:	005e0282 	subseq	r0, lr, r2, lsl #5
    a914:	93d80000 	bicsls	r0, r8, #0
    a918:	ea150000 	b	54a920 <__Stack_Size+0x54a120>
    a91c:	0100001e 	tsteq	r0, lr, lsl r0
    a920:	005e0282 	subseq	r0, lr, r2, lsl #5
    a924:	94120000 	ldrls	r0, [r2], #-0
    a928:	64150000 	ldrvs	r0, [r5], #-0
    a92c:	0100001e 	tsteq	r0, lr, lsl r0
    a930:	004c0282 	subeq	r0, ip, r2, lsl #5
    a934:	943e0000 	ldrtls	r0, [lr], #-0
    a938:	00100000 	andseq	r0, r0, r0
    a93c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    a940:	16000000 	strne	r0, [r0], -r0
    a944:	00002011 	andeq	r2, r0, r1, lsl r0
    a948:	e6028401 	str	r8, [r2], -r1, lsl #8
    a94c:	6a000007 	bvs	a970 <__Stack_Size+0xa170>
    a950:	1b000094 	blne	aba8 <__Stack_Size+0xa3a8>
    a954:	00000c20 	andeq	r0, r0, r0, lsr #24
    a958:	001e2616 	andseq	r2, lr, r6, lsl r6
    a95c:	02840100 	addeq	r0, r4, #0, 2
    a960:	0000004c 	andeq	r0, r0, ip, asr #32
    a964:	0000947d 	andeq	r9, r0, sp, ror r4
    a968:	14000000 	strne	r0, [r0], #-0
    a96c:	00002119 	andeq	r2, r0, r9, lsl r1
    a970:	00028e01 	andeq	r8, r2, r1, lsl #28
    a974:	5c000000 	stcpl	0, cr0, [r0], {-0}
    a978:	01000000 	mrseq	r0, (UNDEF: 0)
    a97c:	000b479c 	muleq	fp, ip, r7
    a980:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    a984:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    a988:	00005e02 	andeq	r5, r0, r2, lsl #28
    a98c:	0094b500 	addseq	fp, r4, r0, lsl #10
    a990:	1eea1500 	cdpne	5, 14, cr1, cr10, cr0, {0}
    a994:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    a998:	00005e02 	andeq	r5, r0, r2, lsl #28
    a99c:	0094ef00 	addseq	lr, r4, r0, lsl #30
    a9a0:	1e641500 	cdpne	5, 6, cr1, cr4, cr0, {0}
    a9a4:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    a9a8:	00004c02 	andeq	r4, r0, r2, lsl #24
    a9ac:	00951b00 	addseq	r1, r5, r0, lsl #22
    a9b0:	00001000 	andeq	r1, r0, r0
    a9b4:	00380000 	eorseq	r0, r8, r0
    a9b8:	11160000 	tstne	r6, r0
    a9bc:	01000020 	tsteq	r0, r0, lsr #32
    a9c0:	07e60290 			; <UNDEFINED> instruction: 0x07e60290
    a9c4:	95470000 	strbls	r0, [r7, #-0]
    a9c8:	381b0000 	ldmdacc	fp, {}	; <UNPREDICTABLE>
    a9cc:	1600000c 	strne	r0, [r0], -ip
    a9d0:	00001e26 	andeq	r1, r0, r6, lsr #28
    a9d4:	4c029001 	stcmi	0, cr9, [r2], {1}
    a9d8:	5a000000 	bpl	a9e0 <__Stack_Size+0xa1e0>
    a9dc:	00000095 	muleq	r0, r5, r0
    a9e0:	f6170000 			; <UNDEFINED> instruction: 0xf6170000
    a9e4:	0100001f 	tsteq	r0, pc, lsl r0
    a9e8:	004c029a 	umaaleq	r0, ip, sl, r2
    a9ec:	00000000 	andeq	r0, r0, r0
    a9f0:	00200000 	eoreq	r0, r0, r0
    a9f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a9f8:	00000b72 	andeq	r0, r0, r2, ror fp
    a9fc:	0020fa15 	eoreq	pc, r0, r5, lsl sl	; <UNPREDICTABLE>
    aa00:	029a0100 	addseq	r0, sl, #0, 2
    aa04:	0000005e 	andeq	r0, r0, lr, asr r0
    aa08:	00009592 	muleq	r0, r2, r5
    aa0c:	20691700 	rsbcs	r1, r9, r0, lsl #14
    aa10:	a6010000 	strge	r0, [r1], -r0
    aa14:	00004c02 	andeq	r4, r0, r2, lsl #24
    aa18:	00000000 	andeq	r0, r0, r0
    aa1c:	00002000 	andeq	r2, r0, r0
    aa20:	9d9c0100 	ldflss	f0, [ip]
    aa24:	1500000b 	strne	r0, [r0, #-11]
    aa28:	000020fa 	strdeq	r2, [r0], -sl
    aa2c:	5e02a601 	cfmadd32pl	mvax0, mvfx10, mvfx2, mvfx1
    aa30:	b3000000 	movwlt	r0, #0
    aa34:	00000095 	muleq	r0, r5, r0
    aa38:	001f1417 	andseq	r1, pc, r7, lsl r4	; <UNPREDICTABLE>
    aa3c:	02b20100 	adcseq	r0, r2, #0, 2
    aa40:	0000008e 	andeq	r0, r0, lr, lsl #1
    aa44:	00000000 	andeq	r0, r0, r0
    aa48:	00000044 	andeq	r0, r0, r4, asr #32
    aa4c:	0bc89c01 	bleq	ff231a58 <BootRAM+0xe1a21f9>
    aa50:	fa150000 	blx	54aa58 <__Stack_Size+0x54a258>
    aa54:	01000020 	tsteq	r0, r0, lsr #32
    aa58:	005e02b2 	ldrheq	r0, [lr], #-34	; 0xffffffde
    aa5c:	95d40000 	ldrbls	r0, [r4]
    aa60:	14000000 	strne	r0, [r0], #-0
    aa64:	00001d80 	andeq	r1, r0, r0, lsl #27
    aa68:	0002c301 	andeq	ip, r2, r1, lsl #6
    aa6c:	3a000000 	bcc	aa74 <__Stack_Size+0xa274>
    aa70:	01000000 	mrseq	r0, (UNDEF: 0)
    aa74:	000bfd9c 	muleq	fp, ip, sp
    aa78:	20fa1500 	rscscs	r1, sl, r0, lsl #10
    aa7c:	c3010000 	movwgt	r0, #4096	; 0x1000
    aa80:	00005e02 	andeq	r5, r0, r2, lsl #28
    aa84:	0095f500 	addseq	pc, r5, r0, lsl #10
    aa88:	1eea1800 	cdpne	8, 14, cr1, cr10, cr0, {0}
    aa8c:	c3010000 	movwgt	r0, #4096	; 0x1000
    aa90:	00005e02 	andeq	r5, r0, r2, lsl #28
    aa94:	00510100 	subseq	r0, r1, r0, lsl #2
    aa98:	001f4217 	andseq	r4, pc, r7, lsl r2	; <UNPREDICTABLE>
    aa9c:	02d60100 	sbcseq	r0, r6, #0, 2
    aaa0:	0000004c 	andeq	r0, r0, ip, asr #32
    aaa4:	00000000 	andeq	r0, r0, r0
    aaa8:	00000006 	andeq	r0, r0, r6
    aaac:	0c449c01 	mcrreq	12, 0, r9, r4, cr1
    aab0:	621d0000 	andsvs	r0, sp, #0
    aab4:	d6010068 	strle	r0, [r1], -r8, rrx
    aab8:	00005e02 	andeq	r5, r0, r2, lsl #28
    aabc:	00962f00 	addseq	r2, r6, r0, lsl #30
    aac0:	6c621e00 	stclvs	14, cr1, [r2], #-0
    aac4:	02d60100 	sbcseq	r0, r6, #0, 2
    aac8:	0000005e 	andeq	r0, r0, lr, asr r0
    aacc:	ba165101 	blt	59eed8 <__Stack_Size+0x59e6d8>
    aad0:	0100001e 	tsteq	r0, lr, lsl r0
    aad4:	004c02d8 	ldrdeq	r0, [ip], #-40	; 0xffffffd8
    aad8:	96500000 	ldrbls	r0, [r0], -r0
    aadc:	1f000000 	svcne	0x00000000
    aae0:	00001e1d 	andeq	r1, r0, sp, lsl lr
    aae4:	4c02e301 	stcmi	3, cr14, [r2], {1}
    aae8:	00000000 	andeq	r0, r0, r0
    aaec:	0a000000 	beq	aaf4 <__Stack_Size+0xa2f4>
    aaf0:	01000000 	mrseq	r0, (UNDEF: 0)
    aaf4:	1f2d159c 	svcne	0x002d159c
    aaf8:	e3010000 	movw	r0, #4096	; 0x1000
    aafc:	00004c02 	andeq	r4, r0, r2, lsl #24
    ab00:	00968900 	addseq	r8, r6, r0, lsl #18
    ab04:	20351600 	eorscs	r1, r5, r0, lsl #12
    ab08:	e5010000 	str	r0, [r1, #-0]
    ab0c:	00005e02 	andeq	r5, r0, r2, lsl #28
    ab10:	0096aa00 	addseq	sl, r6, r0, lsl #20
    ab14:	1eba1600 	cdpne	6, 11, cr1, cr10, cr0, {0}
    ab18:	e6010000 	str	r0, [r1], -r0
    ab1c:	00004c02 	andeq	r4, r0, r2, lsl #24
    ab20:	0096bd00 	addseq	fp, r6, r0, lsl #26
    ab24:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    ab28:	04000001 	streq	r0, [r0], #-1
    ab2c:	00267d00 	eoreq	r7, r6, r0, lsl #26
    ab30:	39010400 	stmdbcc	r1, {sl}
    ab34:	01000006 	tsteq	r0, r6
    ab38:	0000215e 	andeq	r2, r0, lr, asr r1
    ab3c:	00000893 	muleq	r0, r3, r8
    ab40:	00000e30 	andeq	r0, r0, r0, lsr lr
    ab44:	00000000 	andeq	r0, r0, r0
    ab48:	00003ae4 	andeq	r3, r0, r4, ror #21
    ab4c:	da050402 	ble	14bb5c <__Stack_Size+0x14b35c>
    ab50:	02000004 	andeq	r0, r0, #4
    ab54:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    ab58:	01020000 	mrseq	r0, (UNDEF: 2)
    ab5c:	00081a06 	andeq	r1, r8, r6, lsl #20
    ab60:	33750300 	cmncc	r5, #0, 6
    ab64:	24020032 	strcs	r0, [r2], #-50	; 0x32
    ab68:	00000045 	andeq	r0, r0, r5, asr #32
    ab6c:	52070402 	andpl	r0, r7, #33554432	; 0x2000000
    ab70:	03000002 	movweq	r0, #2
    ab74:	00363175 	eorseq	r3, r6, r5, ror r1
    ab78:	00572502 	subseq	r2, r7, r2, lsl #10
    ab7c:	02020000 	andeq	r0, r2, #0
    ab80:	00094907 	andeq	r4, r9, r7, lsl #18
    ab84:	38750300 	ldmdacc	r5!, {r8, r9}^
    ab88:	68260200 	stmdavs	r6!, {r9}
    ab8c:	02000000 	andeq	r0, r0, #0
    ab90:	08180801 	ldmdaeq	r8, {r0, fp}
    ab94:	05040000 	streq	r0, [r4, #-0]
    ab98:	00006f04 	andeq	r6, r0, r4, lsl #30
    ab9c:	08340600 	ldmdaeq	r4!, {r9, sl}
    aba0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    aba4:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
    aba8:	00000154 	andeq	r0, r0, r4, asr r1
    abac:	012a9c01 	teqeq	sl, r1, lsl #24
    abb0:	57070000 	strpl	r0, [r7, -r0]
    abb4:	01000021 	tsteq	r0, r1, lsr #32
    abb8:	00003a2b 	andeq	r3, r0, fp, lsr #20
    abbc:	0096dc00 	addseq	sp, r6, r0, lsl #24
    abc0:	634c0800 	movtvs	r0, #51200	; 0xc800
    abc4:	00120800 	andseq	r0, r2, r0, lsl #16
    abc8:	00b70000 	adcseq	r0, r7, r0
    abcc:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    abd0:	01000007 	tsteq	r0, r7
    abd4:	00004c3c 	andeq	r4, r0, ip, lsr ip
    abd8:	00974c00 	addseq	r4, r7, r0, lsl #24
    abdc:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
    abe0:	12080063 	andne	r0, r8, #99	; 0x63
    abe4:	d4000000 	strle	r0, [r0], #-0
    abe8:	07000000 	streq	r0, [r0, -r0]
    abec:	0000075e 	andeq	r0, r0, lr, asr r7
    abf0:	004c3d01 	subeq	r3, ip, r1, lsl #26
    abf4:	97900000 	ldrls	r0, [r0, r0]
    abf8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    abfc:	080063b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sp, lr}
    ac00:	00000022 	andeq	r0, r0, r2, lsr #32
    ac04:	000000f1 	strdeq	r0, [r0], -r1
    ac08:	00075e07 	andeq	r5, r7, r7, lsl #28
    ac0c:	4c720100 	ldfmie	f0, [r2], #-0
    ac10:	0a000000 	beq	ac18 <__Stack_Size+0xa418>
    ac14:	00000098 	muleq	r0, r8, r0
    ac18:	0063d408 	rsbeq	sp, r3, r8, lsl #8
    ac1c:	00002008 	andeq	r2, r0, r8
    ac20:	00010e00 	andeq	r0, r1, r0, lsl #28
    ac24:	075e0700 	ldrbeq	r0, [lr, -r0, lsl #14]
    ac28:	73010000 	movwvc	r0, #4096	; 0x1000
    ac2c:	0000004c 	andeq	r0, r0, ip, asr #32
    ac30:	0000982b 	andeq	r9, r0, fp, lsr #16
    ac34:	638a0900 	orrvs	r0, sl, #0, 18
    ac38:	01ba0800 			; <UNDEFINED> instruction: 0x01ba0800
    ac3c:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    ac40:	c5080063 	strgt	r0, [r8, #-99]	; 0x63
    ac44:	09000001 	stmdbeq	r0, {r0}
    ac48:	080063b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sp, lr}
    ac4c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    ac50:	212b0600 	teqcs	fp, r0, lsl #12
    ac54:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    ac58:	00000000 	andeq	r0, r0, r0
    ac5c:	00000070 	andeq	r0, r0, r0, ror r0
    ac60:	014f9c01 	cmpeq	pc, r1, lsl #24
    ac64:	57070000 	strpl	r0, [r7, -r0]
    ac68:	01000021 	tsteq	r0, r1, lsr #32
    ac6c:	00003aa0 	andeq	r3, r0, r0, lsr #21
    ac70:	00983e00 	addseq	r3, r8, r0, lsl #28
    ac74:	020a0000 	andeq	r0, sl, #0
    ac78:	03000008 	movweq	r0, #8
    ac7c:	015b022a 	cmpeq	fp, sl, lsr #4
    ac80:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    ac84:	0c000000 	stceq	0, cr0, [r0], {-0}
    ac88:	00002141 	andeq	r2, r0, r1, asr #2
    ac8c:	004c1701 	subeq	r1, ip, r1, lsl #14
    ac90:	03050000 	movweq	r0, #20480	; 0x5000
    ac94:	20000576 	andcs	r0, r0, r6, ror r5
    ac98:	00214c0c 	eoreq	r4, r1, ip, lsl #24
    ac9c:	4c180100 	ldfmis	f0, [r8], {-0}
    aca0:	05000000 	streq	r0, [r0, #-0]
    aca4:	00057803 	andeq	r7, r5, r3, lsl #16
    aca8:	21890d20 	orrcs	r0, r9, r0, lsr #26
    acac:	1d040000 	stcne	0, cr0, [r4, #-0]
    acb0:	0000005e 	andeq	r0, r0, lr, asr r0
    acb4:	0000700e 	andeq	r7, r0, lr
    acb8:	00019d00 	andeq	r9, r1, r0, lsl #26
    acbc:	019d0f00 	orrseq	r0, sp, r0, lsl #30
    acc0:	00060000 	andeq	r0, r6, r0
    acc4:	8b070402 	blhi	1cbcd4 <__Stack_Size+0x1cb4d4>
    acc8:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    accc:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    acd0:	018d1b01 	orreq	r1, sp, r1, lsl #22
    acd4:	650d0000 	strvs	r0, [sp, #-0]
    acd8:	01000009 	tsteq	r0, r9
    acdc:	00018d1c 	andeq	r8, r1, ip, lsl sp
    ace0:	21701000 	cmncs	r0, r0
    ace4:	dc050000 	stcle	0, cr0, [r5], {-0}
    ace8:	0000005e 	andeq	r0, r0, lr, asr r0
    acec:	00213210 	eoreq	r3, r1, r0, lsl r2
    acf0:	5ed90500 	cdppl	5, 13, cr0, cr9, cr0, {0}
    acf4:	10000000 	andne	r0, r0, r0
    acf8:	0000217c 	andeq	r2, r0, ip, ror r1
    acfc:	005edb05 	subseq	sp, lr, r5, lsl #22
    ad00:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    ad04:	04000003 	streq	r0, [r0], #-3
    ad08:	00275700 	eoreq	r5, r7, r0, lsl #14
    ad0c:	39010400 	stmdbcc	r1, {sl}
    ad10:	01000006 	tsteq	r0, r6
    ad14:	0000219b 	muleq	r0, fp, r1
    ad18:	00000893 	muleq	r0, r3, r8
    ad1c:	00000e48 	andeq	r0, r0, r8, asr #28
    ad20:	00000000 	andeq	r0, r0, r0
    ad24:	00003b9c 	muleq	r0, ip, fp
    ad28:	da050402 	ble	14bd38 <__Stack_Size+0x14b538>
    ad2c:	02000004 	andeq	r0, r0, #4
    ad30:	06fc0502 	ldrbteq	r0, [ip], r2, lsl #10
    ad34:	01020000 	mrseq	r0, (UNDEF: 2)
    ad38:	00081a06 	andeq	r1, r8, r6, lsl #20
    ad3c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    ad40:	00000252 	andeq	r0, r0, r2, asr r2
    ad44:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    ad48:	4c250200 	sfmmi	f0, 4, [r5], #-0
    ad4c:	02000000 	andeq	r0, r0, #0
    ad50:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    ad54:	75030000 	strvc	r0, [r3, #-0]
    ad58:	26020038 			; <UNDEFINED> instruction: 0x26020038
    ad5c:	0000005d 	andeq	r0, r0, sp, asr r0
    ad60:	18080102 	stmdane	r8, {r1, r8}
    ad64:	04000008 	streq	r0, [r0], #-8
    ad68:	00005304 	andeq	r5, r0, r4, lsl #6
    ad6c:	07c00500 	strbeq	r0, [r0, r0, lsl #10]
    ad70:	03010000 	movweq	r0, #4096	; 0x1000
    ad74:	00008f2d 	andeq	r8, r0, sp, lsr #30
    ad78:	02860600 	addeq	r0, r6, #0, 12
    ad7c:	06000000 	streq	r0, [r0], -r0
    ad80:	000009a9 	andeq	r0, r0, r9, lsr #19
    ad84:	01300601 	teqeq	r0, r1, lsl #12
    ad88:	06020000 	streq	r0, [r2], -r0
    ad8c:	0000062b 	andeq	r0, r0, fp, lsr #12
    ad90:	c1070003 	tstgt	r7, r3
    ad94:	03000007 	movweq	r0, #7
    ad98:	00006a34 	andeq	r6, r0, r4, lsr sl
    ad9c:	05ff0800 	ldrbeq	r0, [pc, #2048]!	; b5a4 <__Stack_Size+0xada4>
    ada0:	030c0000 	movweq	r0, #49152	; 0xc000
    ada4:	0000d738 	andeq	sp, r0, r8, lsr r7
    ada8:	01d70900 	bicseq	r0, r7, r0, lsl #18
    adac:	50030000 	andpl	r0, r3, r0
    adb0:	00000041 	andeq	r0, r0, r1, asr #32
    adb4:	086d0900 	stmdaeq	sp!, {r8, fp}^
    adb8:	51030000 	mrspl	r0, (UNDEF: 3)
    adbc:	00000041 	andeq	r0, r0, r1, asr #32
    adc0:	23670902 	cmncs	r7, #32768	; 0x8000
    adc4:	52030000 	andpl	r0, r3, #0
    adc8:	00000041 	andeq	r0, r0, r1, asr #32
    adcc:	07380904 	ldreq	r0, [r8, -r4, lsl #18]!
    add0:	53030000 	movwpl	r0, #12288	; 0x3000
    add4:	000000e6 	andeq	r0, r0, r6, ror #1
    add8:	640a0008 	strvs	r0, [sl], #-8
    addc:	e6000000 	str	r0, [r0], -r0
    ade0:	0b000000 	bleq	ade8 <__Stack_Size+0xa5e8>
    ade4:	00000041 	andeq	r0, r0, r1, asr #32
    ade8:	d7040400 	strle	r0, [r4, -r0, lsl #8]
    adec:	07000000 	streq	r0, [r0, -r0]
    adf0:	00000600 	andeq	r0, r0, r0, lsl #12
    adf4:	009a5403 	addseq	r5, sl, r3, lsl #8
    adf8:	420c0000 	andmi	r0, ip, #0
    adfc:	03020057 	movweq	r0, #8279	; 0x2057
    ae00:	00011b62 	andeq	r1, r1, r2, ror #22
    ae04:	62620d00 	rsbvs	r0, r2, #0, 26
    ae08:	65030030 	strvs	r0, [r3, #-48]	; 0x30
    ae0c:	00000053 	andeq	r0, r0, r3, asr r0
    ae10:	62620d00 	rsbvs	r0, r2, #0, 26
    ae14:	66030031 			; <UNDEFINED> instruction: 0x66030031
    ae18:	00000053 	andeq	r0, r0, r3, asr r0
    ae1c:	020e0001 	andeq	r0, lr, #1
    ae20:	01375f03 	teqeq	r7, r3, lsl #30
    ae24:	770f0000 	strvc	r0, [pc, -r0]
    ae28:	41610300 	cmnmi	r1, r0, lsl #6
    ae2c:	0f000000 	svceq	0x00000000
    ae30:	03007762 	movweq	r7, #1890	; 0x762
    ae34:	0000f768 	andeq	pc, r0, r8, ror #14
    ae38:	30070000 	andcc	r0, r7, r0
    ae3c:	03000009 	movweq	r0, #9
    ae40:	00011b69 	andeq	r1, r1, r9, ror #22
    ae44:	01140800 	tsteq	r4, r0, lsl #16
    ae48:	031c0000 	tsteq	ip, #0
    ae4c:	0001d36b 	andeq	sp, r1, fp, ror #6
    ae50:	07670900 	strbeq	r0, [r7, -r0, lsl #18]!
    ae54:	6d030000 	stcvs	0, cr0, [r3, #-0]
    ae58:	00000053 	andeq	r0, r0, r3, asr r0
    ae5c:	00150900 	andseq	r0, r5, r0, lsl #18
    ae60:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    ae64:	00000053 	andeq	r0, r0, r3, asr r0
    ae68:	03110901 	tsteq	r1, #16384	; 0x4000
    ae6c:	6f030000 	svcvs	0x00030000
    ae70:	00000137 	andeq	r0, r0, r7, lsr r1
    ae74:	01480902 	cmpeq	r8, r2, lsl #18
    ae78:	70030000 	andvc	r0, r3, r0
    ae7c:	00000137 	andeq	r0, r0, r7, lsr r1
    ae80:	04eb0904 	strbteq	r0, [fp], #2308	; 0x904
    ae84:	71030000 	mrsvc	r0, (UNDEF: 3)
    ae88:	00000137 	andeq	r0, r0, r7, lsr r1
    ae8c:	06ef0906 	strbteq	r0, [pc], r6, lsl #18
    ae90:	73030000 	movwvc	r0, #12288	; 0x3000
    ae94:	00000053 	andeq	r0, r0, r3, asr r0
    ae98:	08080908 	stmdaeq	r8, {r3, r8, fp}
    ae9c:	74030000 	strvc	r0, [r3], #-0
    aea0:	00000053 	andeq	r0, r0, r3, asr r0
    aea4:	05070909 	streq	r0, [r7, #-2313]	; 0x909
    aea8:	75030000 	strvc	r0, [r3, #-0]
    aeac:	00000053 	andeq	r0, r0, r3, asr r0
    aeb0:	054f090a 	strbeq	r0, [pc, #-2314]	; a5ae <__Stack_Size+0x9dae>
    aeb4:	76030000 	strvc	r0, [r3], -r0
    aeb8:	00000053 	andeq	r0, r0, r3, asr r0
    aebc:	05d6090b 	ldrbeq	r0, [r6, #2315]	; 0x90b
    aec0:	77030000 	strvc	r0, [r3, -r0]
    aec4:	00000053 	andeq	r0, r0, r3, asr r0
    aec8:	07c8090c 	strbeq	r0, [r8, ip, lsl #18]
    aecc:	7a030000 	bvc	caed4 <__Stack_Size+0xca6d4>
    aed0:	000000ec 	andeq	r0, r0, ip, ror #1
    aed4:	15070010 	strne	r0, [r7, #-16]
    aed8:	03000001 	movweq	r0, #1
    aedc:	0001427b 	andeq	r4, r1, fp, ror r2
    aee0:	03a90800 			; <UNDEFINED> instruction: 0x03a90800
    aee4:	03340000 	teqeq	r4, #0
    aee8:	0002877d 	andeq	r8, r2, sp, ror r7
    aeec:	02960900 	addseq	r0, r6, #0, 18
    aef0:	7f030000 	svcvc	0x00030000
    aef4:	00000288 	andeq	r0, r0, r8, lsl #5
    aef8:	04b80900 	ldrteq	r0, [r8], #2304	; 0x900
    aefc:	80030000 	andhi	r0, r3, r0
    af00:	00000288 	andeq	r0, r0, r8, lsl #5
    af04:	09370904 	ldmdbeq	r7!, {r2, r8, fp}
    af08:	83030000 	movwhi	r0, #12288	; 0x3000
    af0c:	00000288 	andeq	r0, r0, r8, lsl #5
    af10:	07780908 	ldrbeq	r0, [r8, -r8, lsl #18]!
    af14:	84030000 	strhi	r0, [r3], #-0
    af18:	00000288 	andeq	r0, r0, r8, lsl #5
    af1c:	02c3090c 	sbceq	r0, r3, #12, 18	; 0x30000
    af20:	96030000 	strls	r0, [r3], -r0
    af24:	0000029d 	muleq	r0, sp, r2
    af28:	006d0910 	rsbeq	r0, sp, r0, lsl r9
    af2c:	a1030000 	mrsge	r0, (UNDEF: 3)
    af30:	0000029d 	muleq	r0, sp, r2
    af34:	09c50914 	stmibeq	r5, {r2, r4, r8, fp}^
    af38:	ab030000 	blge	caf40 <__Stack_Size+0xca740>
    af3c:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    af40:	02d70918 	sbcseq	r0, r7, #24, 18	; 0x60000
    af44:	ad030000 	stcge	0, cr0, [r3, #-0]
    af48:	000000e6 	andeq	r0, r0, r6, ror #1
    af4c:	03b9091c 			; <UNDEFINED> instruction: 0x03b9091c
    af50:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    af54:	000000e6 	andeq	r0, r0, r6, ror #1
    af58:	01c30920 	biceq	r0, r3, r0, lsr #18
    af5c:	af030000 	svcge	0x00030000
    af60:	000000e6 	andeq	r0, r0, r6, ror #1
    af64:	03420924 	movteq	r0, #10532	; 0x2924
    af68:	b0030000 	andlt	r0, r3, r0
    af6c:	000000e6 	andeq	r0, r0, r6, ror #1
    af70:	04670928 	strbteq	r0, [r7], #-2344	; 0x928
    af74:	b2030000 	andlt	r0, r3, #0
    af78:	00000064 	andeq	r0, r0, r4, rrx
    af7c:	2364092c 	cmncs	r4, #44, 18	; 0xb0000
    af80:	b3030000 	movwlt	r0, #12288	; 0x3000
    af84:	00000053 	andeq	r0, r0, r3, asr r0
    af88:	04100030 	ldreq	r0, [r0], #-48	; 0x30
    af8c:	00028704 	andeq	r8, r2, r4, lsl #14
    af90:	008f0a00 	addeq	r0, pc, r0, lsl #20
    af94:	029d0000 	addseq	r0, sp, #0
    af98:	530b0000 	movwpl	r0, #45056	; 0xb000
    af9c:	00000000 	andeq	r0, r0, r0
    afa0:	028e0404 	addeq	r0, lr, #4, 8	; 0x4000000
    afa4:	8f0a0000 	svchi	0x000a0000
    afa8:	b7000000 	strlt	r0, [r0, -r0]
    afac:	0b000002 	bleq	afbc <__Stack_Size+0xa7bc>
    afb0:	00000053 	andeq	r0, r0, r3, asr r0
    afb4:	0000530b 	andeq	r5, r0, fp, lsl #6
    afb8:	04040000 	streq	r0, [r4], #-0
    afbc:	000002a3 	andeq	r0, r0, r3, lsr #5
    afc0:	0003aa07 	andeq	sl, r3, r7, lsl #20
    afc4:	deb50300 	cdple	3, 11, cr0, cr5, cr0, {0}
    afc8:	08000001 	stmdaeq	r0, {r0}
    afcc:	0000008a 	andeq	r0, r0, sl, lsl #1
    afd0:	41b70324 			; <UNDEFINED> instruction: 0x41b70324
    afd4:	09000003 	stmdbeq	r0, {r0, r1}
    afd8:	000005a0 	andeq	r0, r0, r0, lsr #11
    afdc:	0288b903 	addeq	fp, r8, #49152	; 0xc000
    afe0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    afe4:	0000041d 	andeq	r0, r0, sp, lsl r4
    afe8:	0288ba03 	addeq	fp, r8, #12288	; 0x3000
    afec:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    aff0:	0000029b 	muleq	r0, fp, r2
    aff4:	0288bb03 	addeq	fp, r8, #3072	; 0xc00
    aff8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    affc:	00000433 	andeq	r0, r0, r3, lsr r4
    b000:	0288bc03 	addeq	fp, r8, #768	; 0x300
    b004:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    b008:	000000a2 	andeq	r0, r0, r2, lsr #1
    b00c:	0288bd03 	addeq	fp, r8, #3, 26	; 0xc0
    b010:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    b014:	00000741 	andeq	r0, r0, r1, asr #14
    b018:	0288be03 	addeq	fp, r8, #3, 28	; 0x30
    b01c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    b020:	000008f8 	strdeq	r0, [r0], -r8
    b024:	0288bf03 	addeq	fp, r8, #3, 30
    b028:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    b02c:	00000191 	muleq	r0, r1, r1
    b030:	0288c003 	addeq	ip, r8, #3
    b034:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    b038:	000002ad 	andeq	r0, r0, sp, lsr #5
    b03c:	0288c103 	addeq	ip, r8, #-1073741824	; 0xc0000000
    b040:	00200000 	eoreq	r0, r0, r0
    b044:	00008b07 	andeq	r8, r0, r7, lsl #22
    b048:	c8c30300 	stmiagt	r3, {r8, r9}^
    b04c:	11000002 	tstne	r0, r2
    b050:	00000292 	muleq	r0, r2, r2
    b054:	64643501 	strbtvs	r3, [r4], #-1281	; 0x501
    b058:	00380800 	eorseq	r0, r8, r0, lsl #16
    b05c:	9c010000 	stcls	0, cr0, [r1], {-0}
    b060:	0002eb12 	andeq	lr, r2, r2, lsl fp
    b064:	bdec0300 	stcllt	3, cr0, [ip]
    b068:	12000002 	andne	r0, r0, #2
    b06c:	000021af 	andeq	r2, r0, pc, lsr #3
    b070:	0341ed03 	movteq	lr, #7427	; 0x1d03
    b074:	c6130000 	ldrgt	r0, [r3], -r0
    b078:	01000021 	tsteq	r0, r1, lsr #32
    b07c:	0001d327 	andeq	sp, r1, r7, lsr #6
    b080:	88030500 	stmdahi	r3, {r8, sl}
    b084:	13200005 	teqne	r0, #5
    b088:	00002189 	andeq	r2, r0, r9, lsl #3
    b08c:	00531801 	subseq	r1, r3, r1, lsl #16
    b090:	03050000 	movweq	r0, #20480	; 0x5000
    b094:	20000584 	andcs	r0, r0, r4, lsl #11
    b098:	0001e813 	andeq	lr, r1, r3, lsl r8
    b09c:	a61d0100 	ldrge	r0, [sp], -r0, lsl #2
    b0a0:	05000003 	streq	r0, [r0, #-3]
    b0a4:	0005a803 	andeq	sl, r5, r3, lsl #16
    b0a8:	d3040420 	movwle	r0, #17440	; 0x4420
    b0ac:	13000001 	movwne	r0, #1
    b0b0:	0000013e 	andeq	r0, r0, lr, lsr r1
    b0b4:	03bd2001 			; <UNDEFINED> instruction: 0x03bd2001
    b0b8:	03050000 	movweq	r0, #20480	; 0x5000
    b0bc:	20000580 	andcs	r0, r0, r0, lsl #11
    b0c0:	02bd0404 	adcseq	r0, sp, #4, 8	; 0x4000000
    b0c4:	ae130000 	cdpge	0, 1, cr0, cr3, cr0, {0}
    b0c8:	01000021 	tsteq	r0, r1, lsr #32
    b0cc:	0003d428 	andeq	sp, r3, r8, lsr #8
    b0d0:	a4030500 	strge	r0, [r3], #-1280	; 0x500
    b0d4:	04200005 	strteq	r0, [r0], #-5
    b0d8:	00034104 	andeq	r4, r3, r4, lsl #2
    b0dc:	21911300 	orrscs	r1, r1, r0, lsl #6
    b0e0:	25010000 	strcs	r0, [r1, #-0]
    b0e4:	00000041 	andeq	r0, r0, r1, asr #32
    b0e8:	057c0305 	ldrbeq	r0, [ip, #-773]!	; 0x305
    b0ec:	1d132000 	ldcne	0, cr2, [r3, #-0]
    b0f0:	01000005 	tsteq	r0, r5
    b0f4:	00004126 	andeq	r4, r0, r6, lsr #2
    b0f8:	ac030500 	cfstr32ge	mvfx0, [r3], {-0}
    b0fc:	00200005 	eoreq	r0, r0, r5
    b100:	00000de0 	andeq	r0, r0, r0, ror #27
    b104:	285a0004 	ldmdacs	sl, {r2}^
    b108:	01040000 	mrseq	r0, (UNDEF: 4)
    b10c:	00000639 	andeq	r0, r0, r9, lsr r6
    b110:	0021d201 	eoreq	sp, r1, r1, lsl #4
    b114:	00089300 	andeq	r9, r8, r0, lsl #6
    b118:	000e9000 	andeq	r9, lr, r0
    b11c:	00000000 	andeq	r0, r0, r0
    b120:	003c0300 	eorseq	r0, ip, r0, lsl #6
    b124:	05040200 	streq	r0, [r4, #-512]	; 0x200
    b128:	000004da 	ldrdeq	r0, [r0], -sl
    b12c:	fc050202 	stc2	2, cr0, [r5], {2}
    b130:	02000006 	andeq	r0, r0, #6
    b134:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    b138:	75030000 	strvc	r0, [r3, #-0]
    b13c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    b140:	00004524 	andeq	r4, r0, r4, lsr #10
    b144:	07040200 	streq	r0, [r4, -r0, lsl #4]
    b148:	00000252 	andeq	r0, r0, r2, asr r2
    b14c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    b150:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    b154:	02000000 	andeq	r0, r0, #0
    b158:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    b15c:	75030000 	strvc	r0, [r3, #-0]
    b160:	26020038 			; <UNDEFINED> instruction: 0x26020038
    b164:	00000068 	andeq	r0, r0, r8, rrx
    b168:	18080102 	stmdane	r8, {r1, r8}
    b16c:	04000008 	streq	r0, [r0], #-8
    b170:	0000035a 	andeq	r0, r0, sl, asr r3
    b174:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
    b178:	45050000 	strmi	r0, [r5, #-0]
    b17c:	06000000 	streq	r0, [r0], -r0
    b180:	94360201 	ldrtls	r0, [r6], #-513	; 0x201
    b184:	07000000 	streq	r0, [r0, -r0]
    b188:	00000753 	andeq	r0, r0, r3, asr r7
    b18c:	01a70700 			; <UNDEFINED> instruction: 0x01a70700
    b190:	00010000 	andeq	r0, r1, r0
    b194:	00052d04 	andeq	r2, r5, r4, lsl #26
    b198:	7f390200 	svcvc	0x00390200
    b19c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b1a0:	0000023d 	andeq	r0, r0, sp, lsr r2
    b1a4:	c4160301 	ldrgt	r0, [r6], #-769	; 0x301
    b1a8:	07000000 	streq	r0, [r0, -r0]
    b1ac:	00000532 	andeq	r0, r0, r2, lsr r5
    b1b0:	07240700 	streq	r0, [r4, -r0, lsl #14]!
    b1b4:	07010000 	streq	r0, [r1, -r0]
    b1b8:	0000017e 	andeq	r0, r0, lr, ror r1
    b1bc:	09200702 	stmdbeq	r0!, {r1, r8, r9, sl}
    b1c0:	00030000 	andeq	r0, r3, r0
    b1c4:	00008f08 	andeq	r8, r0, r8, lsl #30
    b1c8:	1f030100 	svcne	0x00030100
    b1cc:	00000125 	andeq	r0, r0, r5, lsr #2
    b1d0:	00234407 	eoreq	r4, r3, r7, lsl #8
    b1d4:	73070000 	movwvc	r0, #28672	; 0x7000
    b1d8:	01000025 	tsteq	r0, r5, lsr #32
    b1dc:	00115e07 	andseq	r5, r1, r7, lsl #28
    b1e0:	4f070200 	svcmi	0x00070200
    b1e4:	03000023 	movweq	r0, #35	; 0x23
    b1e8:	00116807 	andseq	r6, r1, r7, lsl #16
    b1ec:	02070400 	andeq	r0, r7, #0, 8
    b1f0:	05000025 	streq	r0, [r0, #-37]	; 0x25
    b1f4:	00253207 	eoreq	r3, r5, r7, lsl #4
    b1f8:	b9070600 	stmdblt	r7, {r9, sl}
    b1fc:	07000023 	streq	r0, [r0, -r3, lsr #32]
    b200:	00241807 	eoreq	r1, r4, r7, lsl #16
    b204:	69070800 	stmdbvs	r7, {fp}
    b208:	09000024 	stmdbeq	r0, {r2, r5}
    b20c:	00231a07 	eoreq	r1, r3, r7, lsl #20
    b210:	c8070a00 	stmdagt	r7, {r9, fp}
    b214:	0b000023 	bleq	b2a8 <__Stack_Size+0xaaa8>
    b218:	00248b07 	eoreq	r8, r4, r7, lsl #22
    b21c:	97070c00 	strls	r0, [r7, -r0, lsl #24]
    b220:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    b224:	24390800 	ldrtcs	r0, [r9], #-2048	; 0x800
    b228:	03010000 	movweq	r0, #4096	; 0x1000
    b22c:	00015032 	andeq	r5, r1, r2, lsr r0
    b230:	22840700 	addcs	r0, r4, #0, 14
    b234:	07010000 	streq	r0, [r1, -r0]
    b238:	000024e3 	andeq	r2, r0, r3, ror #9
    b23c:	22960702 	addscs	r0, r6, #524288	; 0x80000
    b240:	07030000 	streq	r0, [r3, -r0]
    b244:	0000249a 	muleq	r0, sl, r4
    b248:	24cf0704 	strbcs	r0, [pc], #1796	; b250 <__Stack_Size+0xaa50>
    b24c:	00050000 	andeq	r0, r5, r0
    b250:	0023d608 	eoreq	sp, r3, r8, lsl #12
    b254:	3c030100 	stfccs	f0, [r3], {-0}
    b258:	00000169 	andeq	r0, r0, r9, ror #2
    b25c:	0021e507 	eoreq	lr, r1, r7, lsl #10
    b260:	43070000 	movwmi	r0, #28672	; 0x7000
    b264:	01000022 	tsteq	r0, r2, lsr #32
    b268:	242a0800 	strtcs	r0, [sl], #-2048	; 0x800
    b26c:	04010000 	streq	r0, [r1], #-0
    b270:	0001b216 	andeq	fp, r1, r6, lsl r2
    b274:	254e0700 	strbcs	r0, [lr, #-1792]	; 0x700
    b278:	07000000 	streq	r0, [r0, -r0]
    b27c:	0000244a 	andeq	r2, r0, sl, asr #8
    b280:	22ce0701 	sbccs	r0, lr, #262144	; 0x40000
    b284:	07020000 	streq	r0, [r2, -r0]
    b288:	00002586 	andeq	r2, r0, r6, lsl #11
    b28c:	22c90703 	sbccs	r0, r9, #786432	; 0xc0000
    b290:	07040000 	streq	r0, [r4, -r0]
    b294:	00002581 	andeq	r2, r0, r1, lsl #11
    b298:	25640705 	strbcs	r0, [r4, #-1797]!	; 0x705
    b29c:	07060000 	streq	r0, [r6, -r0]
    b2a0:	0000247b 	andeq	r2, r0, fp, ror r4
    b2a4:	22580707 	subscs	r0, r8, #1835008	; 0x1c0000
    b2a8:	07080000 	streq	r0, [r8, -r0]
    b2ac:	0000230a 	andeq	r2, r0, sl, lsl #6
    b2b0:	33090009 	movwcc	r0, #36873	; 0x9009
    b2b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b2b8:	01d72404 	bicseq	r2, r7, r4, lsl #8
    b2bc:	e00a0000 	and	r0, sl, r0
    b2c0:	04000002 	streq	r0, [r0], #-2
    b2c4:	0001d726 	andeq	sp, r1, r6, lsr #14
    b2c8:	f10a0000 	cpsie	,#0
    b2cc:	04000003 	streq	r0, [r0], #-3
    b2d0:	00004c27 	andeq	r4, r0, r7, lsr #24
    b2d4:	0b000400 	bleq	c2dc <__Stack_Size+0xbadc>
    b2d8:	00005e04 	andeq	r5, r0, r4, lsl #28
    b2dc:	05720400 	ldrbeq	r0, [r2, #-1024]!	; 0x400
    b2e0:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    b2e4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    b2e8:	0007c008 	andeq	ip, r7, r8
    b2ec:	2d040100 	stfcss	f0, [r4, #-0]
    b2f0:	0000020d 	andeq	r0, r0, sp, lsl #4
    b2f4:	00028607 	andeq	r8, r2, r7, lsl #12
    b2f8:	a9070000 	stmdbge	r7, {}	; <UNPREDICTABLE>
    b2fc:	01000009 	tsteq	r0, r9
    b300:	00013007 	andeq	r3, r1, r7
    b304:	2b070200 	blcs	1cbb0c <__Stack_Size+0x1cb30c>
    b308:	03000006 	movweq	r0, #6
    b30c:	07c10400 	strbeq	r0, [r1, r0, lsl #8]
    b310:	34040000 	strcc	r0, [r4], #-0
    b314:	000001e8 	andeq	r0, r0, r8, ror #3
    b318:	0005ff09 	andeq	pc, r5, r9, lsl #30
    b31c:	38040c00 	stmdacc	r4, {sl, fp}
    b320:	00000255 	andeq	r0, r0, r5, asr r2
    b324:	0001d70a 	andeq	sp, r1, sl, lsl #14
    b328:	4c500400 	cfldrdmi	mvd0, [r0], {-0}
    b32c:	00000000 	andeq	r0, r0, r0
    b330:	00086d0a 	andeq	r6, r8, sl, lsl #26
    b334:	4c510400 	cfldrdmi	mvd0, [r1], {-0}
    b338:	02000000 	andeq	r0, r0, #0
    b33c:	0023670a 	eoreq	r6, r3, sl, lsl #14
    b340:	4c520400 	cfldrdmi	mvd0, [r2], {-0}
    b344:	04000000 	streq	r0, [r0], #-0
    b348:	0007380a 	andeq	r3, r7, sl, lsl #16
    b34c:	64530400 	ldrbvs	r0, [r3], #-1024	; 0x400
    b350:	08000002 	stmdaeq	r0, {r1}
    b354:	01d70c00 	bicseq	r0, r7, r0, lsl #24
    b358:	02640000 	rsbeq	r0, r4, #0
    b35c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    b360:	00000000 	andeq	r0, r0, r0
    b364:	0255040b 	subseq	r0, r5, #184549376	; 0xb000000
    b368:	00040000 	andeq	r0, r4, r0
    b36c:	04000006 	streq	r0, [r0], #-6
    b370:	00021854 	andeq	r1, r2, r4, asr r8
    b374:	06230900 	strteq	r0, [r3], -r0, lsl #18
    b378:	04020000 	streq	r0, [r2], #-0
    b37c:	00029a58 	andeq	r9, r2, r8, asr sl
    b380:	03700a00 	cmneq	r0, #0, 20
    b384:	5a040000 	bpl	10b38c <__Stack_Size+0x10ab8c>
    b388:	0000005e 	andeq	r0, r0, lr, asr r0
    b38c:	058c0a00 	streq	r0, [ip, #2560]	; 0xa00
    b390:	5b040000 	blpl	10b398 <__Stack_Size+0x10ab98>
    b394:	0000005e 	andeq	r0, r0, lr, asr r0
    b398:	24040001 	strcs	r0, [r4], #-1
    b39c:	04000006 	streq	r0, [r0], #-6
    b3a0:	0002755d 	andeq	r7, r2, sp, asr r5
    b3a4:	57420e00 	strbpl	r0, [r2, -r0, lsl #28]
    b3a8:	62040200 	andvs	r0, r4, #0, 4
    b3ac:	000002c9 	andeq	r0, r0, r9, asr #5
    b3b0:	3062620f 	rsbcc	r6, r2, pc, lsl #4
    b3b4:	5e650400 	cdppl	4, 6, cr0, cr5, cr0, {0}
    b3b8:	00000000 	andeq	r0, r0, r0
    b3bc:	3162620f 	cmncc	r2, pc, lsl #4
    b3c0:	5e660400 	cdppl	4, 6, cr0, cr6, cr0, {0}
    b3c4:	01000000 	mrseq	r0, (UNDEF: 0)
    b3c8:	04021000 	streq	r1, [r2], #-0
    b3cc:	0002e55f 	andeq	lr, r2, pc, asr r5
    b3d0:	00771100 	rsbseq	r1, r7, r0, lsl #2
    b3d4:	004c6104 	subeq	r6, ip, r4, lsl #2
    b3d8:	62110000 	andsvs	r0, r1, #0
    b3dc:	68040077 	stmdavs	r4, {r0, r1, r2, r4, r5, r6}
    b3e0:	000002a5 	andeq	r0, r0, r5, lsr #5
    b3e4:	09300400 	ldmdbeq	r0!, {sl}
    b3e8:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    b3ec:	000002c9 	andeq	r0, r0, r9, asr #5
    b3f0:	00011409 	andeq	r1, r1, r9, lsl #8
    b3f4:	6b041c00 	blvs	1123fc <__Stack_Size+0x111bfc>
    b3f8:	00000381 	andeq	r0, r0, r1, lsl #7
    b3fc:	0007670a 	andeq	r6, r7, sl, lsl #14
    b400:	5e6d0400 	cdppl	4, 6, cr0, cr13, cr0, {0}
    b404:	00000000 	andeq	r0, r0, r0
    b408:	0000150a 	andeq	r1, r0, sl, lsl #10
    b40c:	5e6e0400 	cdppl	4, 6, cr0, cr14, cr0, {0}
    b410:	01000000 	mrseq	r0, (UNDEF: 0)
    b414:	0003110a 	andeq	r1, r3, sl, lsl #2
    b418:	e56f0400 	strb	r0, [pc, #-1024]!	; b020 <__Stack_Size+0xa820>
    b41c:	02000002 	andeq	r0, r0, #2
    b420:	0001480a 	andeq	r4, r1, sl, lsl #16
    b424:	e5700400 	ldrb	r0, [r0, #-1024]!	; 0x400
    b428:	04000002 	streq	r0, [r0], #-2
    b42c:	0004eb0a 	andeq	lr, r4, sl, lsl #22
    b430:	e5710400 	ldrb	r0, [r1, #-1024]!	; 0x400
    b434:	06000002 	streq	r0, [r0], -r2
    b438:	0006ef0a 	andeq	lr, r6, sl, lsl #30
    b43c:	5e730400 	cdppl	4, 7, cr0, cr3, cr0, {0}
    b440:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    b444:	0008080a 	andeq	r0, r8, sl, lsl #16
    b448:	5e740400 	cdppl	4, 7, cr0, cr4, cr0, {0}
    b44c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    b450:	0005070a 	andeq	r0, r5, sl, lsl #14
    b454:	5e750400 	cdppl	4, 7, cr0, cr5, cr0, {0}
    b458:	0a000000 	beq	b460 <__Stack_Size+0xac60>
    b45c:	00054f0a 	andeq	r4, r5, sl, lsl #30
    b460:	5e760400 	cdppl	4, 7, cr0, cr6, cr0, {0}
    b464:	0b000000 	bleq	b46c <__Stack_Size+0xac6c>
    b468:	0005d60a 	andeq	sp, r5, sl, lsl #12
    b46c:	5e770400 	cdppl	4, 7, cr0, cr7, cr0, {0}
    b470:	0c000000 	stceq	0, cr0, [r0], {-0}
    b474:	0007c80a 	andeq	ip, r7, sl, lsl #16
    b478:	6a7a0400 	bvs	1e8c480 <__Stack_Size+0x1e8bc80>
    b47c:	10000002 	andne	r0, r0, r2
    b480:	01150400 	tsteq	r5, r0, lsl #8
    b484:	7b040000 	blvc	10b48c <__Stack_Size+0x10ac8c>
    b488:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    b48c:	0003a909 	andeq	sl, r3, r9, lsl #18
    b490:	7d043400 	cfstrsvc	mvf3, [r4, #-0]
    b494:	00000435 	andeq	r0, r0, r5, lsr r4
    b498:	0002960a 	andeq	r9, r2, sl, lsl #12
    b49c:	367f0400 	ldrbtcc	r0, [pc], -r0, lsl #8
    b4a0:	00000004 	andeq	r0, r0, r4
    b4a4:	0004b80a 	andeq	fp, r4, sl, lsl #16
    b4a8:	36800400 	strcc	r0, [r0], r0, lsl #8
    b4ac:	04000004 	streq	r0, [r0], #-4
    b4b0:	0009370a 	andeq	r3, r9, sl, lsl #14
    b4b4:	36830400 	strcc	r0, [r3], r0, lsl #8
    b4b8:	08000004 	stmdaeq	r0, {r2}
    b4bc:	0007780a 	andeq	r7, r7, sl, lsl #16
    b4c0:	36840400 	strcc	r0, [r4], r0, lsl #8
    b4c4:	0c000004 	stceq	0, cr0, [r0], {4}
    b4c8:	0002c30a 	andeq	ip, r2, sl, lsl #6
    b4cc:	4b960400 	blmi	fe58c4d4 <BootRAM+0xd4fcc75>
    b4d0:	10000004 	andne	r0, r0, r4
    b4d4:	00006d0a 	andeq	r6, r0, sl, lsl #26
    b4d8:	4ba10400 	blmi	fe84c4e0 <BootRAM+0xd7bcc81>
    b4dc:	14000004 	strne	r0, [r0], #-4
    b4e0:	0009c50a 	andeq	ip, r9, sl, lsl #10
    b4e4:	65ab0400 	strvs	r0, [fp, #1024]!	; 0x400
    b4e8:	18000004 	stmdane	r0, {r2}
    b4ec:	0002d70a 	andeq	sp, r2, sl, lsl #14
    b4f0:	64ad0400 	strtvs	r0, [sp], #1024	; 0x400
    b4f4:	1c000002 	stcne	0, cr0, [r0], {2}
    b4f8:	0003b90a 	andeq	fp, r3, sl, lsl #18
    b4fc:	64ae0400 	strtvs	r0, [lr], #1024	; 0x400
    b500:	20000002 	andcs	r0, r0, r2
    b504:	0001c30a 	andeq	ip, r1, sl, lsl #6
    b508:	64af0400 	strtvs	r0, [pc], #1024	; b510 <__Stack_Size+0xad10>
    b50c:	24000002 	strcs	r0, [r0], #-2
    b510:	0003420a 	andeq	r4, r3, sl, lsl #4
    b514:	64b00400 	ldrtvs	r0, [r0], #1024	; 0x400
    b518:	28000002 	stmdacs	r0, {r1}
    b51c:	0004670a 	andeq	r6, r4, sl, lsl #14
    b520:	d7b20400 	ldrle	r0, [r2, r0, lsl #8]!
    b524:	2c000001 	stccs	0, cr0, [r0], {1}
    b528:	0023640a 	eoreq	r6, r3, sl, lsl #8
    b52c:	5eb30400 	cdppl	4, 11, cr0, cr3, cr0, {0}
    b530:	30000000 	andcc	r0, r0, r0
    b534:	040b1200 	streq	r1, [fp], #-512	; 0x200
    b538:	00000435 	andeq	r0, r0, r5, lsr r4
    b53c:	00020d0c 	andeq	r0, r2, ip, lsl #26
    b540:	00044b00 	andeq	r4, r4, r0, lsl #22
    b544:	005e0d00 	subseq	r0, lr, r0, lsl #26
    b548:	0b000000 	bleq	b550 <__Stack_Size+0xad50>
    b54c:	00043c04 	andeq	r3, r4, r4, lsl #24
    b550:	020d0c00 	andeq	r0, sp, #0, 24
    b554:	04650000 	strbteq	r0, [r5], #-0
    b558:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    b55c:	0d000000 	stceq	0, cr0, [r0, #-0]
    b560:	0000005e 	andeq	r0, r0, lr, asr r0
    b564:	51040b00 	tstpl	r4, r0, lsl #22
    b568:	04000004 	streq	r0, [r0], #-4
    b56c:	000003aa 	andeq	r0, r0, sl, lsr #7
    b570:	038cb504 	orreq	fp, ip, #4, 10	; 0x1000000
    b574:	8a090000 	bhi	24b57c <__Stack_Size+0x24ad7c>
    b578:	24000000 	strcs	r0, [r0], #-0
    b57c:	04efb704 	strbteq	fp, [pc], #1796	; b584 <__Stack_Size+0xad84>
    b580:	a00a0000 	andge	r0, sl, r0
    b584:	04000005 	streq	r0, [r0], #-5
    b588:	000436b9 			; <UNDEFINED> instruction: 0x000436b9
    b58c:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    b590:	04000004 	streq	r0, [r0], #-4
    b594:	000436ba 			; <UNDEFINED> instruction: 0x000436ba
    b598:	9b0a0400 	blls	28c5a0 <__Stack_Size+0x28bda0>
    b59c:	04000002 	streq	r0, [r0], #-2
    b5a0:	000436bb 			; <UNDEFINED> instruction: 0x000436bb
    b5a4:	330a0800 	movwcc	r0, #43008	; 0xa800
    b5a8:	04000004 	streq	r0, [r0], #-4
    b5ac:	000436bc 			; <UNDEFINED> instruction: 0x000436bc
    b5b0:	a20a0c00 	andge	r0, sl, #0, 24
    b5b4:	04000000 	streq	r0, [r0], #-0
    b5b8:	000436bd 			; <UNDEFINED> instruction: 0x000436bd
    b5bc:	410a1000 	mrsmi	r1, (UNDEF: 10)
    b5c0:	04000007 	streq	r0, [r0], #-7
    b5c4:	000436be 			; <UNDEFINED> instruction: 0x000436be
    b5c8:	f80a1400 			; <UNDEFINED> instruction: 0xf80a1400
    b5cc:	04000008 	streq	r0, [r0], #-8
    b5d0:	000436bf 			; <UNDEFINED> instruction: 0x000436bf
    b5d4:	910a1800 	tstls	sl, r0, lsl #16
    b5d8:	04000001 	streq	r0, [r0], #-1
    b5dc:	000436c0 	andeq	r3, r4, r0, asr #13
    b5e0:	ad0a1c00 	stcge	12, cr1, [sl, #-0]
    b5e4:	04000002 	streq	r0, [r0], #-2
    b5e8:	000436c1 	andeq	r3, r4, r1, asr #13
    b5ec:	04002000 	streq	r2, [r0], #-0
    b5f0:	0000008b 	andeq	r0, r0, fp, lsl #1
    b5f4:	0476c304 	ldrbteq	ip, [r6], #-772	; 0x304
    b5f8:	e8130000 	ldmda	r3, {}	; <UNPREDICTABLE>
    b5fc:	01000023 	tsteq	r0, r3, lsr #32
    b600:	0001d735 	andeq	sp, r1, r5, lsr r7
    b604:	00649c00 	rsbeq	r9, r4, r0, lsl #24
    b608:	00002408 	andeq	r2, r0, r8, lsl #8
    b60c:	239c0100 	orrscs	r0, ip, #0, 2
    b610:	14000005 	strne	r0, [r0], #-5
    b614:	00000de8 	andeq	r0, r0, r8, ror #27
    b618:	004c3501 	subeq	r3, ip, r1, lsl #10
    b61c:	98800000 	stmls	r0, {}	; <UNPREDICTABLE>
    b620:	13000000 	movwne	r0, #0
    b624:	000023a3 	andeq	r2, r0, r3, lsr #7
    b628:	01d76301 	bicseq	r6, r7, r1, lsl #6
    b62c:	64c00000 	strbvs	r0, [r0], #0
    b630:	00240800 	eoreq	r0, r4, r0, lsl #16
    b634:	9c010000 	stcls	0, cr0, [r1], {-0}
    b638:	0000054c 	andeq	r0, r0, ip, asr #10
    b63c:	000de814 	andeq	lr, sp, r4, lsl r8
    b640:	4c630100 	stfmie	f0, [r3], #-0
    b644:	a1000000 	mrsge	r0, (UNDEF: 0)
    b648:	00000098 	muleq	r0, r8, r0
    b64c:	0024bc13 	eoreq	fp, r4, r3, lsl ip
    b650:	d79b0100 	ldrle	r0, [fp, r0, lsl #2]
    b654:	e4000001 	str	r0, [r0], #-1
    b658:	90080064 	andls	r0, r8, r4, rrx
    b65c:	01000000 	mrseq	r0, (UNDEF: 0)
    b660:	0005b69c 	muleq	r5, ip, r6
    b664:	0de81400 	cfstrdeq	mvd1, [r8]
    b668:	9b010000 	blls	4b670 <__Stack_Size+0x4ae70>
    b66c:	0000004c 	andeq	r0, r0, ip, asr #32
    b670:	000098c2 	andeq	r9, r0, r2, asr #17
    b674:	00650415 	rsbeq	r0, r5, r5, lsl r4
    b678:	00001c08 	andeq	r1, r0, r8, lsl #24
    b67c:	00059100 	andeq	r9, r5, r0, lsl #2
    b680:	08101600 	ldmdaeq	r0, {r9, sl, ip}
    b684:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    b688:	0000005e 	andeq	r0, r0, lr, asr r0
    b68c:	000098e3 	andeq	r9, r0, r3, ror #17
    b690:	65281700 	strvs	r1, [r8, #-1792]!	; 0x700
    b694:	00300800 	eorseq	r0, r0, r0, lsl #16
    b698:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
    b69c:	01000025 	tsteq	r0, r5, lsr #32
    b6a0:	00005ec3 	andeq	r5, r0, r3, asr #29
    b6a4:	0098f700 	addseq	pc, r8, r0, lsl #14
    b6a8:	252a1800 	strcs	r1, [sl, #-2048]!	; 0x800
    b6ac:	c4010000 	strgt	r0, [r1], #-0
    b6b0:	0000005e 	andeq	r0, r0, lr, asr r0
    b6b4:	37190000 	ldrcc	r0, [r9, -r0]
    b6b8:	01000022 	tsteq	r0, r2, lsr #32
    b6bc:	657401e0 	ldrbvs	r0, [r4, #-480]!	; 0x1e0
    b6c0:	00a80800 	adceq	r0, r8, r0, lsl #16
    b6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    b6c8:	0000067b 	andeq	r0, r0, fp, ror r6
    b6cc:	0024fa1a 	eoreq	pc, r4, sl, lsl sl	; <UNPREDICTABLE>
    b6d0:	01e20100 	mvneq	r0, r0, lsl #2
    b6d4:	0000067b 	andeq	r0, r0, fp, ror r6
    b6d8:	00009928 	andeq	r9, r0, r8, lsr #18
    b6dc:	0024af1a 	eoreq	sl, r4, sl, lsl pc
    b6e0:	01e30100 	mvneq	r0, r0, lsl #2
    b6e4:	0000003a 	andeq	r0, r0, sl, lsr r0
    b6e8:	0000993d 	andeq	r9, r0, sp, lsr r9
    b6ec:	0006ef1a 	andeq	lr, r6, sl, lsl pc
    b6f0:	01e40100 	mvneq	r0, r0, lsl #2
    b6f4:	0000003a 	andeq	r0, r0, sl, lsr r0
    b6f8:	00009981 	andeq	r9, r0, r1, lsl #19
    b6fc:	0022091a 	eoreq	r0, r2, sl, lsl r9
    b700:	01e60100 	mvneq	r0, r0, lsl #2
    b704:	000001d7 	ldrdeq	r0, [r0], -r7
    b708:	000099cc 	andeq	r9, r0, ip, asr #19
    b70c:	000de81a 	andeq	lr, sp, sl, lsl r8
    b710:	01e70100 	mvneq	r0, r0, lsl #2
    b714:	0000003a 	andeq	r0, r0, sl, lsr r0
    b718:	000099ea 	andeq	r9, r0, sl, ror #19
    b71c:	0022f81b 	eoreq	pc, r2, fp, lsl r8	; <UNPREDICTABLE>
    b720:	02100100 	andseq	r0, r0, #0, 2
    b724:	080065f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, sp, lr}
    b728:	0065c61c 	rsbeq	ip, r5, ip, lsl r6
    b72c:	00063808 	andeq	r3, r6, r8, lsl #16
    b730:	50011d00 	andpl	r1, r1, r0, lsl #26
    b734:	00007502 	andeq	r7, r0, r2, lsl #10
    b738:	0065ce1e 	rsbeq	ip, r5, lr, lsl lr
    b73c:	000d1c08 	andeq	r1, sp, r8, lsl #24
    b740:	00064b00 	andeq	r4, r6, r0, lsl #22
    b744:	50011d00 	andpl	r1, r1, r0, lsl #26
    b748:	1e003001 	cdpne	0, 0, cr3, cr0, cr1, {0}
    b74c:	080065d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sl, sp, lr}
    b750:	00000d32 	andeq	r0, r0, r2, lsr sp
    b754:	00000665 	andeq	r0, r0, r5, ror #12
    b758:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    b75c:	011d0075 	tsteq	sp, r5, ror r0
    b760:	00790250 	rsbseq	r0, r9, r0, asr r2
    b764:	65e01f00 	strbvs	r1, [r0, #3840]!	; 0xf00
    b768:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    b76c:	011d0000 	tsteq	sp, r0
    b770:	00750251 	rsbseq	r0, r5, r1, asr r2
    b774:	0150011d 	cmpeq	r0, sp, lsl r1
    b778:	0b000030 	bleq	b840 <__Stack_Size+0xb040>
    b77c:	00026a04 	andeq	r6, r2, r4, lsl #20
    b780:	221d2000 	andscs	r2, sp, #0
    b784:	4a010000 	bmi	4b78c <__Stack_Size+0x4af8c>
    b788:	0000020d 	andeq	r0, r0, sp, lsl #4
    b78c:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
    b790:	00000038 	andeq	r0, r0, r8, lsr r0
    b794:	e2139c01 	ands	r9, r3, #256	; 0x100
    b798:	01000022 	tsteq	r0, r2, lsr #32
    b79c:	00020d78 	andeq	r0, r2, r8, ror sp
    b7a0:	00665400 	rsbeq	r5, r6, r0, lsl #8
    b7a4:	00004808 	andeq	r4, r0, r8, lsl #16
    b7a8:	be9c0100 	fmllte	f0, f4, f0
    b7ac:	21000006 	tstcs	r0, r6
    b7b0:	01006552 	tsteq	r0, r2, asr r5
    b7b4:	00020d7a 	andeq	r0, r2, sl, ror sp
    b7b8:	009a2800 	addseq	r2, sl, r0, lsl #16
    b7bc:	02130000 	andseq	r0, r3, #0
    b7c0:	01000024 	tsteq	r0, r4, lsr #32
    b7c4:	00020de9 	andeq	r0, r2, r9, ror #27
    b7c8:	00669c00 	rsbeq	r9, r6, r0, lsl #24
    b7cc:	0000d008 	andeq	sp, r0, r8
    b7d0:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    b7d4:	16000007 	strne	r0, [r0], -r7
    b7d8:	00002260 	andeq	r2, r0, r0, ror #4
    b7dc:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    b7e0:	9a460000 	bls	118b7e8 <__Stack_Size+0x118afe8>
    b7e4:	d8160000 	ldmdale	r6, {}	; <UNPREDICTABLE>
    b7e8:	01000014 	tsteq	r0, r4, lsl r0
    b7ec:	00003aec 	andeq	r3, r0, ip, ror #21
    b7f0:	009a7e00 	addseq	r7, sl, r0, lsl #28
    b7f4:	66b81700 	ldrtvs	r1, [r8], r0, lsl #14
    b7f8:	009e0800 	addseq	r0, lr, r0, lsl #16
    b7fc:	72180000 	andsvc	r0, r8, #0
    b800:	01000023 	tsteq	r0, r3, lsr #32
    b804:	000796f6 	strdeq	r9, [r7], -r6
    b808:	250e1600 	strcs	r1, [lr, #-1536]	; 0x600
    b80c:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    b810:	0000003a 	andeq	r0, r0, sl, lsr r0
    b814:	00009aa7 	andeq	r9, r0, r7, lsr #21
    b818:	00252a16 	eoreq	r2, r5, r6, lsl sl
    b81c:	3af80100 	bcc	ffe0bc24 <BootRAM+0xed7c3c5>
    b820:	d0000000 	andle	r0, r0, r0
    b824:	2100009a 	swpcs	r0, sl, [r0]	; <UNPREDICTABLE>
    b828:	00504572 	subseq	r4, r0, r2, ror r5
    b82c:	003af901 	eorseq	pc, sl, r1, lsl #18
    b830:	9aa70000 	bls	fe9cb838 <BootRAM+0xd93bfd9>
    b834:	38150000 	ldmdacc	r5, {}	; <UNPREDICTABLE>
    b838:	12080067 	andne	r0, r8, #103	; 0x67
    b83c:	54000000 	strpl	r0, [r0], #-0
    b840:	1a000007 	bne	b864 <__Stack_Size+0xb064>
    b844:	0000075e 	andeq	r0, r0, lr, asr r7
    b848:	4c012f01 	stcmi	15, cr2, [r1], {1}
    b84c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    b850:	0000009a 	muleq	r0, sl, r0
    b854:	0067121e 	rsbeq	r1, r7, lr, lsl r2
    b858:	000d6408 	andeq	r6, sp, r8, lsl #8
    b85c:	00076800 	andeq	r6, r7, r0, lsl #16
    b860:	50011d00 	andpl	r1, r1, r0, lsl #26
    b864:	00007402 	andeq	r7, r0, r2, lsl #8
    b868:	00671a1e 	rsbeq	r1, r7, lr, lsl sl
    b86c:	000d7608 	andeq	r7, sp, r8, lsl #12
    b870:	00078200 	andeq	r8, r7, r0, lsl #4
    b874:	51011d00 	tstpl	r1, r0, lsl #26
    b878:	1d300802 	ldcne	8, cr0, [r0, #-8]!
    b87c:	74025001 	strvc	r5, [r2], #-1
    b880:	32220000 	eorcc	r0, r2, #0
    b884:	8d080067 	stchi	0, cr0, [r8, #-412]	; 0xfffffe64
    b888:	2200000d 	andcs	r0, r0, #13
    b88c:	08006738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, sp, lr}
    b890:	00000da4 	andeq	r0, r0, r4, lsr #27
    b894:	040b0000 	streq	r0, [fp], #-0
    b898:	0000029a 	muleq	r0, sl, r2
    b89c:	00232823 	eoreq	r2, r3, r3, lsr #16
    b8a0:	01420100 	mrseq	r0, (UNDEF: 82)
    b8a4:	0000020d 	andeq	r0, r0, sp, lsl #4
    b8a8:	0800676c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, sp, lr}
    b8ac:	00000084 	andeq	r0, r0, r4, lsl #1
    b8b0:	082b9c01 	stmdaeq	fp!, {r0, sl, fp, ip, pc}
    b8b4:	2a1a0000 	bcs	68b8bc <__Stack_Size+0x68b0bc>
    b8b8:	01000025 	tsteq	r0, r5, lsr #32
    b8bc:	003a0144 	eorseq	r0, sl, r4, asr #2
    b8c0:	9b160000 	blls	58b8c8 <__Stack_Size+0x58b0c8>
    b8c4:	0e1a0000 	cdpeq	0, 1, cr0, cr10, cr0, {0}
    b8c8:	01000025 	tsteq	r0, r5, lsr #32
    b8cc:	003a0145 	eorseq	r0, sl, r5, asr #2
    b8d0:	9b3e0000 	blls	f8b8d8 <__Stack_Size+0xf8b0d8>
    b8d4:	72240000 	eorvc	r0, r4, #0
    b8d8:	01005045 	tsteq	r0, r5, asr #32
    b8dc:	003a0146 	eorseq	r0, sl, r6, asr #2
    b8e0:	9b3e0000 	blls	f8b8e8 <__Stack_Size+0xf8b0e8>
    b8e4:	d81a0000 	ldmdale	sl, {}	; <UNPREDICTABLE>
    b8e8:	01000014 	tsteq	r0, r4, lsl r0
    b8ec:	003a0147 	eorseq	r0, sl, r7, asr #2
    b8f0:	9b730000 	blls	1ccb8f8 <__Stack_Size+0x1ccb0f8>
    b8f4:	58250000 	stmdapl	r5!, {}	; <UNPREDICTABLE>
    b8f8:	1000000e 	andne	r0, r0, lr
    b8fc:	1a000008 	bne	b924 <__Stack_Size+0xb124>
    b900:	0000075e 	andeq	r0, r0, lr, asr r7
    b904:	4c016301 	stcmi	3, cr6, [r1], {1}
    b908:	91000000 	mrsls	r0, (UNDEF: 0)
    b90c:	0000009b 	muleq	r0, fp, r0
    b910:	0067c417 	rsbeq	ip, r7, r7, lsl r4
    b914:	00001008 	andeq	r1, r0, r8
    b918:	075e1a00 	ldrbeq	r1, [lr, -r0, lsl #20]
    b91c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    b920:	00004c01 	andeq	r4, r0, r1, lsl #24
    b924:	009bb900 	addseq	fp, fp, r0, lsl #18
    b928:	26000000 	strcs	r0, [r0], -r0
    b92c:	00002377 	andeq	r2, r0, r7, ror r3
    b930:	0d017801 	stceq	8, cr7, [r1, #-4]
    b934:	f0000002 			; <UNDEFINED> instruction: 0xf0000002
    b938:	24080067 	strcs	r0, [r8], #-103	; 0x67
    b93c:	01000000 	mrseq	r0, (UNDEF: 0)
    b940:	0264279c 	rsbeq	r2, r4, #156, 14	; 0x2700000
    b944:	92010000 	andls	r0, r1, #0
    b948:	0001d701 	andeq	sp, r1, r1, lsl #14
    b94c:	00681400 	rsbeq	r1, r8, r0, lsl #8
    b950:	00001c08 	andeq	r1, r0, r8, lsl #24
    b954:	8c9c0100 	ldfhis	f0, [ip], {0}
    b958:	28000008 	stmdacs	r0, {r3}
    b95c:	00000de8 	andeq	r0, r0, r8, ror #27
    b960:	4c019201 	sfmmi	f1, 1, [r1], {1}
    b964:	d2000000 	andle	r0, r0, #0
    b968:	2800009b 	stmdacs	r0, {r0, r1, r3, r4, r7}
    b96c:	00002391 	muleq	r0, r1, r3
    b970:	8c019201 	sfmhi	f1, 1, [r1], {1}
    b974:	f3000008 	vhadd.u8	d0, d0, d8
    b978:	1a00009b 	bne	bbec <__Stack_Size+0xb3ec>
    b97c:	00000871 	andeq	r0, r0, r1, ror r8
    b980:	3a019401 	bcc	7098c <__Stack_Size+0x7018c>
    b984:	1f000000 	svcne	0x00000000
    b988:	0000009c 	muleq	r0, ip, r0
    b98c:	01dd040b 	bicseq	r0, sp, fp, lsl #8
    b990:	fb270000 	blx	9cb99a <__Stack_Size+0x9cb19a>
    b994:	01000021 	tsteq	r0, r1, lsr #32
    b998:	005e03c9 	subseq	r0, lr, r9, asr #7
    b99c:	68300000 	ldmdavs	r0!, {}	; <UNPREDICTABLE>
    b9a0:	00400800 	subeq	r0, r0, r0, lsl #16
    b9a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    b9a8:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    b9ac:	00683e1f 	rsbeq	r3, r8, pc, lsl lr
    b9b0:	000d8d08 	andeq	r8, sp, r8, lsl #26
    b9b4:	50011d00 	andpl	r1, r1, r0, lsl #26
    b9b8:	00003001 	andeq	r3, r0, r1
    b9bc:	00226e29 	eoreq	r6, r2, r9, lsr #28
    b9c0:	021b0100 	andseq	r0, fp, #0, 2
    b9c4:	0008f601 	andeq	pc, r8, r1, lsl #12
    b9c8:	21f42a00 	mvnscs	r2, r0, lsl #20
    b9cc:	1d010000 	stcne	0, cr0, [r1, #-0]
    b9d0:	00020d02 	andeq	r0, r2, r2, lsl #26
    b9d4:	23102a00 	tstcs	r0, #0, 20
    b9d8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    b9dc:	00003a02 	andeq	r3, r0, r2, lsl #20
    b9e0:	06ef2a00 	strbteq	r2, [pc], r0, lsl #20
    b9e4:	1f010000 	svcne	0x00010000
    b9e8:	00003a02 	andeq	r3, r0, r2, lsl #20
    b9ec:	22692b00 	rsbcs	r2, r9, #0, 22
    b9f0:	8b010000 	blhi	4b9f8 <__Stack_Size+0x4b1f8>
    b9f4:	70290002 	eorvc	r0, r9, r2
    b9f8:	01000022 	tsteq	r0, r2, lsr #32
    b9fc:	78010297 	stmdavc	r1, {r0, r1, r2, r4, r7, r9}
    ba00:	2a000009 	bcs	ba2c <__Stack_Size+0xb22c>
    ba04:	0000060e 	andeq	r0, r0, lr, lsl #12
    ba08:	64029901 	strvs	r9, [r2], #-2305	; 0x901
    ba0c:	2a000002 	bcs	ba1c <__Stack_Size+0xb21c>
    ba10:	000021f4 	strdeq	r2, [r0], -r4
    ba14:	0d029a01 	vstreq	s18, [r2, #-4]
    ba18:	2a000002 	bcs	ba28 <__Stack_Size+0xb228>
    ba1c:	00002559 	andeq	r2, r0, r9, asr r5
    ba20:	3a029b01 	bcc	b262c <__Stack_Size+0xb1e2c>
    ba24:	2a000000 	bcs	ba2c <__Stack_Size+0xb22c>
    ba28:	0000250e 	andeq	r2, r0, lr, lsl #10
    ba2c:	3a029d01 	bcc	b2e38 <__Stack_Size+0xb2638>
    ba30:	2a000000 	bcs	ba38 <__Stack_Size+0xb238>
    ba34:	00002214 	andeq	r2, r0, r4, lsl r2
    ba38:	3a029d01 	bcc	b2e44 <__Stack_Size+0xb2644>
    ba3c:	2a000000 	bcs	ba44 <__Stack_Size+0xb244>
    ba40:	00000871 	andeq	r0, r0, r1, ror r8
    ba44:	3a029e01 	bcc	b3250 <__Stack_Size+0xb2a50>
    ba48:	2a000000 	bcs	ba50 <__Stack_Size+0xb250>
    ba4c:	000014d8 	ldrdeq	r1, [r0], -r8
    ba50:	3a029e01 	bcc	b325c <__Stack_Size+0xb2a5c>
    ba54:	2c000000 	stccs	0, cr0, [r0], {-0}
    ba58:	00000969 	andeq	r0, r0, r9, ror #18
    ba5c:	00227c2a 	eoreq	r7, r2, sl, lsr #24
    ba60:	02a90100 	adceq	r0, r9, #0, 2
    ba64:	0000005e 	andeq	r0, r0, lr, asr r0
    ba68:	db2a2d00 	blle	a96e70 <__Stack_Size+0xa96670>
    ba6c:	01000001 	tsteq	r0, r1
    ba70:	006f0325 	rsbeq	r0, pc, r5, lsr #6
    ba74:	00000000 	andeq	r0, r0, r0
    ba78:	00213223 	eoreq	r3, r1, r3, lsr #4
    ba7c:	034c0100 	movteq	r0, #49408	; 0xc100
    ba80:	0000005e 	andeq	r0, r0, lr, asr r0
    ba84:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    ba88:	000002dc 	ldrdeq	r0, [r0], -ip
    ba8c:	0ae69c01 	beq	ff9b2a98 <BootRAM+0xe923239>
    ba90:	042e0000 	strteq	r0, [lr], #-0
    ba94:	b0034f01 	andlt	r4, r3, r1, lsl #30
    ba98:	2f000009 	svccs	0x00000009
    ba9c:	51010062 	tstpl	r1, r2, rrx
    baa0:	0001d703 	andeq	sp, r1, r3, lsl #14
    baa4:	00772f00 	rsbseq	r2, r7, r0, lsl #30
    baa8:	e6035201 	str	r5, [r3], -r1, lsl #4
    baac:	0000000a 	andeq	r0, r0, sl
    bab0:	0024f51a 	eoreq	pc, r4, sl, lsl r5	; <UNPREDICTABLE>
    bab4:	03530100 	cmpeq	r3, #0, 2
    bab8:	00000992 	muleq	r0, r2, r9
    babc:	00009c50 	andeq	r9, r0, r0, asr ip
    bac0:	0008bc30 	andeq	fp, r8, r0, lsr ip
    bac4:	0068b600 	rsbeq	fp, r8, r0, lsl #12
    bac8:	0000c408 	andeq	ip, r0, r8, lsl #8
    bacc:	03670100 	cmneq	r7, #0, 2
    bad0:	00000a40 	andeq	r0, r0, r0, asr #20
    bad4:	0068b617 	rsbeq	fp, r8, r7, lsl r6
    bad8:	0000c408 	andeq	ip, r0, r8, lsl #8
    badc:	08c93100 	stmiaeq	r9, {r8, ip, sp}^
    bae0:	9c730000 	ldclls	0, cr0, [r3], #-0
    bae4:	d5310000 	ldrle	r0, [r1, #-0]!
    bae8:	1c000008 	stcne	0, cr0, [r0], {8}
    baec:	3100009d 	swpcc	r0, sp, [r0]	; <UNPREDICTABLE>
    baf0:	000008e1 	andeq	r0, r0, r1, ror #17
    baf4:	00009d2f 	andeq	r9, r0, pc, lsr #26
    baf8:	0008ed32 	andeq	lr, r8, r2, lsr sp
    bafc:	00697400 	rsbeq	r7, r9, r0, lsl #8
    bb00:	68c62208 	stmiavs	r6, {r3, r9, sp}^
    bb04:	06810800 	streq	r0, [r1], r0, lsl #16
    bb08:	001c0000 	andseq	r0, ip, r0
    bb0c:	1a080069 	bne	20bcb8 <__Stack_Size+0x20b4b8>
    bb10:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    bb14:	74025001 	strvc	r5, [r2], #-1
    bb18:	16220000 	strtne	r0, [r2], -r0
    bb1c:	2b080069 	blcs	20bcc8 <__Stack_Size+0x20b4c8>
    bb20:	22000008 	andcs	r0, r0, #8
    bb24:	08006932 	stmdaeq	r0, {r1, r4, r5, r8, fp, sp, lr}
    bb28:	000006be 			; <UNDEFINED> instruction: 0x000006be
    bb2c:	00694022 	rsbeq	r4, r9, r2, lsr #32
    bb30:	00069608 	andeq	r9, r6, r8, lsl #12
    bb34:	69522200 	ldmdbvs	r2, {r9, sp}^
    bb38:	079c0800 	ldreq	r0, [ip, r0, lsl #16]
    bb3c:	00000000 	andeq	r0, r0, r0
    bb40:	0008f633 	andeq	pc, r8, r3, lsr r6	; <UNPREDICTABLE>
    bb44:	00697a00 	rsbeq	r7, r9, r0, lsl #20
    bb48:	000e7808 	andeq	r7, lr, r8, lsl #16
    bb4c:	036c0100 	cmneq	ip, #0, 2
    bb50:	00000adc 	ldrdeq	r0, [r0], -ip
    bb54:	000e7834 	andeq	r7, lr, r4, lsr r8
    bb58:	09033100 	stmdbeq	r3, {r8, ip, sp}
    bb5c:	9d4e0000 	stclls	0, cr0, [lr, #-0]
    bb60:	0f310000 	svceq	0x00310000
    bb64:	e5000009 	str	r0, [r0, #-9]
    bb68:	3100009d 	swpcc	r0, sp, [r0]	; <UNPREDICTABLE>
    bb6c:	0000091b 	andeq	r0, r0, fp, lsl r9
    bb70:	00009e25 	andeq	r9, r0, r5, lsr #28
    bb74:	00092731 	andeq	r2, r9, r1, lsr r7
    bb78:	009e4e00 	addseq	r4, lr, r0, lsl #28
    bb7c:	09333100 	ldmdbeq	r3!, {r8, ip, sp}
    bb80:	9e610000 	cdpls	0, 6, cr0, cr1, cr0, {0}
    bb84:	3f310000 	svccc	0x00310000
    bb88:	7c000009 	stcvc	0, cr0, [r0], {9}
    bb8c:	3100009e 	swpcc	r0, lr, [r0]	; <UNPREDICTABLE>
    bb90:	0000094b 	andeq	r0, r0, fp, asr #18
    bb94:	00009e9c 	muleq	r0, ip, lr
    bb98:	00698415 	rsbeq	r8, r9, r5, lsl r4
    bb9c:	00002c08 	andeq	r2, r0, r8, lsl #24
    bba0:	000aaf00 	andeq	sl, sl, r0, lsl #30
    bba4:	095c3100 	ldmdbeq	ip, {r8, ip, sp}^
    bba8:	9eaf0000 	cdpls	0, 10, cr0, cr15, cr0, {0}
    bbac:	15000000 	strne	r0, [r0, #-0]
    bbb0:	08006ab8 	stmdaeq	r0, {r3, r4, r5, r7, r9, fp, sp, lr}
    bbb4:	00000060 	andeq	r0, r0, r0, rrx
    bbb8:	00000ace 	andeq	r0, r0, lr, asr #21
    bbbc:	00096a35 	andeq	r6, r9, r5, lsr sl
    bbc0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    bbc4:	006b1622 	rsbeq	r1, fp, r2, lsr #12
    bbc8:	0005b608 	andeq	fp, r5, r8, lsl #12
    bbcc:	7a360000 	bvc	d8bbd4 <__Stack_Size+0xd8b3d4>
    bbd0:	1d08006a 	stcne	0, cr0, [r8, #-424]	; 0xfffffe58
    bbd4:	74025001 	strvc	r5, [r2], #-1
    bbd8:	00000000 	andeq	r0, r0, r0
    bbdc:	006b2822 	rsbeq	r2, fp, r2, lsr #16
    bbe0:	00089208 	andeq	r9, r8, r8, lsl #4
    bbe4:	040b0000 	streq	r0, [fp], #-0
    bbe8:	0000004c 	andeq	r0, r0, ip, asr #32
    bbec:	00254129 	eoreq	r4, r5, r9, lsr #2
    bbf0:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    bbf4:	000b2c01 	andeq	r2, fp, r1, lsl #24
    bbf8:	24fa2a00 	ldrbtcs	r2, [sl], #2560	; 0xa00
    bbfc:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    bc00:	00067b01 	andeq	r7, r6, r1, lsl #22
    bc04:	22bc2a00 	adcscs	r2, ip, #0, 20
    bc08:	aa010000 	bge	4bc10 <__Stack_Size+0x4b410>
    bc0c:	00003a01 	andeq	r3, r0, r1, lsl #20
    bc10:	0d2a2d00 	stceq	13, cr2, [sl, #-0]
    bc14:	01000022 	tsteq	r0, r2, lsr #32
    bc18:	01d701b0 	ldrheq	r0, [r7, #16]
    bc1c:	e82a0000 	stmda	sl!, {}	; <UNPREDICTABLE>
    bc20:	0100000d 	tsteq	r0, sp
    bc24:	003a01b1 	ldrhteq	r0, [sl], -r1
    bc28:	00000000 	andeq	r0, r0, r0
    bc2c:	00217c23 	eoreq	r7, r1, r3, lsr #24
    bc30:	03a00100 	moveq	r0, #0, 2
    bc34:	0000005e 	andeq	r0, r0, lr, asr r0
    bc38:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
    bc3c:	000000c8 	andeq	r0, r0, r8, asr #1
    bc40:	0bfe9c01 	bleq	fffb2c4c <BootRAM+0xef233ed>
    bc44:	ef1a0000 	svc	0x001a0000
    bc48:	01000006 	tsteq	r0, r6
    bc4c:	003a03a2 	eorseq	r0, sl, r2, lsr #7
    bc50:	9ed90000 	cdpls	0, 13, cr0, cr9, cr0, {0}
    bc54:	ec300000 	ldc	0, cr0, [r0], #-0
    bc58:	5c00000a 	stcpl	0, cr0, [r0], {10}
    bc5c:	7e08006b 	cdpvc	0, 0, cr0, cr8, cr11, {3}
    bc60:	01000000 	mrseq	r0, (UNDEF: 0)
    bc64:	0bf403a6 	bleq	ffd0cb04 <BootRAM+0xec7d2a5>
    bc68:	5c170000 	ldcpl	0, cr0, [r7], {-0}
    bc6c:	7e08006b 	cdpvc	0, 0, cr0, cr8, cr11, {3}
    bc70:	31000000 	mrscc	r0, (UNDEF: 0)
    bc74:	00000af9 	strdeq	r0, [r0], -r9
    bc78:	00009f26 	andeq	r9, r0, r6, lsr #30
    bc7c:	000b0531 	andeq	r0, fp, r1, lsr r5
    bc80:	009f3b00 	addseq	r3, pc, r0, lsl #22
    bc84:	6b641500 	blvs	191108c <__Stack_Size+0x191088c>
    bc88:	002a0800 	eoreq	r0, sl, r0, lsl #16
    bc8c:	0bde0000 	bleq	ff78bc94 <BootRAM+0xe6fc435>
    bc90:	12310000 	eorsne	r0, r1, #0
    bc94:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
    bc98:	3100009f 	swpcc	r0, pc, [r0]	; <UNPREDICTABLE>
    bc9c:	00000b1e 	andeq	r0, r0, lr, lsl fp
    bca0:	00009f6c 	andeq	r9, r0, ip, ror #30
    bca4:	006b701c 	rsbeq	r7, fp, ip, lsl r0
    bca8:	000bb408 	andeq	fp, fp, r8, lsl #8
    bcac:	50011d00 	andpl	r1, r1, r0, lsl #26
    bcb0:	00007602 	andeq	r7, r0, r2, lsl #12
    bcb4:	006b841e 	rsbeq	r8, fp, lr, lsl r4
    bcb8:	000db608 	andeq	fp, sp, r8, lsl #12
    bcbc:	000bc700 	andeq	ip, fp, r0, lsl #14
    bcc0:	50011d00 	andpl	r1, r1, r0, lsl #26
    bcc4:	1f003001 	svcne	0x00003001
    bcc8:	08006b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, sp, lr}
    bccc:	00000dcc 	andeq	r0, r0, ip, asr #27
    bcd0:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    bcd4:	011d0076 	tsteq	sp, r6, ror r0
    bcd8:	00770250 	rsbseq	r0, r7, r0, asr r2
    bcdc:	a21f0000 	andsge	r0, pc, #0
    bce0:	4d08006b 	stcmi	0, cr0, [r8, #-428]	; 0xfffffe54
    bce4:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    bce8:	30015101 	andcc	r5, r1, r1, lsl #2
    bcec:	0150011d 	cmpeq	r0, sp, lsl r1
    bcf0:	00000030 	andeq	r0, r0, r0, lsr r0
    bcf4:	006bfa37 	rsbeq	pc, fp, r7, lsr sl	; <UNPREDICTABLE>
    bcf8:	00089208 	andeq	r9, r8, r8, lsl #4
    bcfc:	b2380000 	eorslt	r0, r8, #0
    bd00:	01000002 	tsteq	r0, r2
    bd04:	6c1403dd 	ldcvs	3, cr0, [r4], {221}	; 0xdd
    bd08:	00380800 	eorseq	r0, r8, r0, lsl #16
    bd0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    bd10:	00000c43 	andeq	r0, r0, r3, asr #24
    bd14:	6c615639 	stclvs	6, cr5, [r1], #-228	; 0xffffff1c
    bd18:	03dd0100 	bicseq	r0, sp, #0, 2
    bd1c:	0000005e 	andeq	r0, r0, lr, asr r0
    bd20:	00009f9f 	muleq	r0, pc, pc	; <UNPREDICTABLE>
    bd24:	01006924 	tsteq	r0, r4, lsr #18
    bd28:	003a03df 	ldrsbteq	r0, [sl], -pc
    bd2c:	9fc00000 	svcls	0x00c00000
    bd30:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    bd34:	01005045 	tsteq	r0, r5, asr #32
    bd38:	003a03e0 	eorseq	r0, sl, r0, ror #7
    bd3c:	9fdf0000 	svcls	0x00df0000
    bd40:	23000000 	movwcs	r0, #0
    bd44:	00002170 	andeq	r2, r0, r0, ror r1
    bd48:	5e037801 	cdppl	8, 0, cr7, cr3, cr1, {0}
    bd4c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    bd50:	5c08006c 	stcpl	0, cr0, [r8], {108}	; 0x6c
    bd54:	01000000 	mrseq	r0, (UNDEF: 0)
    bd58:	000c899c 	muleq	ip, ip, r9
    bd5c:	06ef1a00 	strbteq	r1, [pc], r0, lsl #20
    bd60:	7a010000 	bvc	4bd68 <__Stack_Size+0x4b568>
    bd64:	00003a03 	andeq	r3, r0, r3, lsl #20
    bd68:	009ff200 	addseq	pc, pc, r0, lsl #4
    bd6c:	6c602200 	sfmvs	f2, 2, [r0], #-0
    bd70:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    bd74:	7c220000 	stcvc	0, cr0, [r2], #-0
    bd78:	fe08006c 	cdp2	0, 0, cr0, cr8, cr12, {3}
    bd7c:	3700000b 	strcc	r0, [r0, -fp]
    bd80:	08006c9a 	stmdaeq	r0, {r1, r3, r4, r7, sl, fp, sp, lr}
    bd84:	00000892 	muleq	r0, r2, r8
    bd88:	22d63a00 	sbcscs	r3, r6, #0, 20
    bd8c:	f1010000 	setend	le
    bd90:	00000003 	andeq	r0, r0, r3
    bd94:	00000200 	andeq	r0, r0, r0, lsl #4
    bd98:	3b9c0100 	blcc	fe70c1a0 <BootRAM+0xd67c941>
    bd9c:	000002eb 	andeq	r0, r0, fp, ror #5
    bda0:	046bec04 	strbteq	lr, [fp], #-3076	; 0xc04
    bda4:	1a3b0000 	bne	ecbdac <__Stack_Size+0xecb5ac>
    bda8:	04000002 	streq	r0, [r0], #-2
    bdac:	00029aee 	andeq	r9, r2, lr, ror #21
    bdb0:	21413b00 	cmpcs	r1, r0, lsl #22
    bdb4:	f2040000 	vhadd.s8	d0, d4, d0
    bdb8:	0000004c 	andeq	r0, r0, ip, asr #32
    bdbc:	00214c3b 	eoreq	r4, r1, fp, lsr ip
    bdc0:	4cf30400 	cfldrdmi	mvd0, [r3]
    bdc4:	3b000000 	blcc	bdcc <__Stack_Size+0xb5cc>
    bdc8:	000001e8 	andeq	r0, r0, r8, ror #3
    bdcc:	0cd22205 	lfmeq	f2, 2, [r2], {5}
    bdd0:	040b0000 	streq	r0, [fp], #-0
    bdd4:	00000381 	andeq	r0, r0, r1, lsl #7
    bdd8:	00013e3b 	andeq	r3, r1, fp, lsr lr
    bddc:	e3250500 	teq	r5, #0, 10
    bde0:	0b00000c 	bleq	be18 <__Stack_Size+0xb618>
    bde4:	00046b04 	andeq	r6, r4, r4, lsl #22
    bde8:	21ae3b00 			; <UNDEFINED> instruction: 0x21ae3b00
    bdec:	2a050000 	bcs	14bdf4 <__Stack_Size+0x14b5f4>
    bdf0:	00000cf4 	strdeq	r0, [r0], -r4
    bdf4:	04ef040b 	strbteq	r0, [pc], #1035	; bdfc <__Stack_Size+0xb5fc>
    bdf8:	1f3c0000 	svcne	0x003c0000
    bdfc:	01000025 	tsteq	r0, r5, lsr #32
    be00:	0002e524 	andeq	lr, r2, r4, lsr #10
    be04:	ae030500 	cfsh32ge	mvfx0, mvfx3, #0
    be08:	3c200005 	stccc	0, cr0, [r0], #-20	; 0xffffffec
    be0c:	0000235b 	andeq	r2, r0, fp, asr r3
    be10:	00942501 	addseq	r2, r4, r1, lsl #10
    be14:	03050000 	movweq	r0, #20480	; 0x5000
    be18:	20000dcc 	andcs	r0, r0, ip, asr #27
    be1c:	0020d33d 	eoreq	sp, r0, sp, lsr r3
    be20:	02530700 	subseq	r0, r3, #0, 14
    be24:	0000004c 	andeq	r0, r0, ip, asr #32
    be28:	00000d32 	andeq	r0, r0, r2, lsr sp
    be2c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    be30:	a83e0000 	ldmdage	lr!, {}	; <UNPREDICTABLE>
    be34:	06000022 	streq	r0, [r0], -r2, lsr #32
    be38:	000d4d19 	andeq	r4, sp, r9, lsl sp
    be3c:	01d70d00 	bicseq	r0, r7, r0, lsl #26
    be40:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    be44:	0d000000 	stceq	0, cr0, [r0, #-0]
    be48:	0000004c 	andeq	r0, r0, ip, asr #32
    be4c:	1fae3f00 	svcne	0x00ae3f00
    be50:	56070000 	strpl	r0, [r7], -r0
    be54:	000d6402 	andeq	r6, sp, r2, lsl #8
    be58:	005e0d00 	subseq	r0, lr, r0, lsl #26
    be5c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    be60:	00000000 	andeq	r0, r0, r0
    be64:	0020df3f 	eoreq	sp, r0, pc, lsr pc
    be68:	024e0700 	subeq	r0, lr, #0, 14
    be6c:	00000d76 	andeq	r0, r0, r6, ror sp
    be70:	00005e0d 	andeq	r5, r0, sp, lsl #28
    be74:	ec3f0000 	ldc	0, cr0, [pc], #-0	; be7c <__Stack_Size+0xb67c>
    be78:	07000020 	streq	r0, [r0, -r0, lsr #32]
    be7c:	0d8d023a 	sfmeq	f0, 4, [sp, #232]	; 0xe8
    be80:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    be84:	0d000000 	stceq	0, cr0, [r0, #-0]
    be88:	0000004c 	andeq	r0, r0, ip, asr #32
    be8c:	099c3f00 	ldmibeq	ip, {r8, r9, sl, fp, ip, sp}
    be90:	57070000 	strpl	r0, [r7, -r0]
    be94:	000da402 	andeq	sl, sp, r2, lsl #8
    be98:	005e0d00 	subseq	r0, lr, r0, lsl #26
    be9c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    bea0:	00000000 	andeq	r0, r0, r0
    bea4:	001e2f3f 	andseq	r2, lr, pc, lsr pc
    bea8:	024d0700 	subeq	r0, sp, #0, 14
    beac:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    beb0:	00005e0d 	andeq	r5, r0, sp, lsl #28
    beb4:	bf3d0000 	svclt	0x003d0000
    beb8:	0700001e 	smladeq	r0, lr, r0, r0
    bebc:	004c0254 	subeq	r0, ip, r4, asr r2
    bec0:	0dcc0000 	stcleq	0, cr0, [ip]
    bec4:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    bec8:	00000000 	andeq	r0, r0, r0
    becc:	00245540 	eoreq	r5, r4, r0, asr #10
    bed0:	0d1a0600 	ldceq	6, cr0, [sl, #-0]
    bed4:	000001d7 	ldrdeq	r0, [r0], -r7
    bed8:	00004c0d 	andeq	r4, r0, sp, lsl #24
    bedc:	004c0d00 	subeq	r0, ip, r0, lsl #26
    bee0:	00000000 	andeq	r0, r0, r0
    bee4:	00000170 	andeq	r0, r0, r0, ror r1
    bee8:	2bfb0004 	blcs	ffecbf00 <BootRAM+0xee3c6a1>
    beec:	01040000 	mrseq	r0, (UNDEF: 4)
    bef0:	00000639 	andeq	r0, r0, r9, lsr r6
    bef4:	00258f01 	eoreq	r8, r5, r1, lsl #30
    bef8:	00089300 	andeq	r9, r8, r0, lsl #6
    befc:	000f1800 	andeq	r1, pc, r0, lsl #16
    bf00:	00000000 	andeq	r0, r0, r0
    bf04:	003f5700 	eorseq	r5, pc, r0, lsl #14
    bf08:	05040200 	streq	r0, [r4, #-512]	; 0x200
    bf0c:	000004da 	ldrdeq	r0, [r0], -sl
    bf10:	fc050202 	stc2	2, cr0, [r5], {2}
    bf14:	02000006 	andeq	r0, r0, #6
    bf18:	081a0601 	ldmdaeq	sl, {r0, r9, sl}
    bf1c:	75030000 	strvc	r0, [r3, #-0]
    bf20:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    bf24:	00004524 	andeq	r4, r0, r4, lsr #10
    bf28:	07040200 	streq	r0, [r4, -r0, lsl #4]
    bf2c:	00000252 	andeq	r0, r0, r2, asr r2
    bf30:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    bf34:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    bf38:	02000000 	andeq	r0, r0, #0
    bf3c:	09490702 	stmdbeq	r9, {r1, r8, r9, sl}^
    bf40:	75030000 	strvc	r0, [r3, #-0]
    bf44:	26020038 			; <UNDEFINED> instruction: 0x26020038
    bf48:	00000068 	andeq	r0, r0, r8, rrx
    bf4c:	18080102 	stmdane	r8, {r1, r8}
    bf50:	04000008 	streq	r0, [r0], #-8
    bf54:	00005e04 	andeq	r5, r0, r4, lsl #28
    bf58:	22a80500 	adccs	r0, r8, #0, 10
    bf5c:	23010000 	movwcs	r0, #4096	; 0x1000
    bf60:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
    bf64:	00000030 	andeq	r0, r0, r0, lsr r0
    bf68:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    bf6c:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    bf70:	01000025 	tsteq	r0, r5, lsr #32
    bf74:	00006f23 	andeq	r6, r0, r3, lsr #30
    bf78:	00a03800 	adceq	r3, r0, r0, lsl #16
    bf7c:	25b20600 	ldrcs	r0, [r2, #1536]!	; 0x600
    bf80:	23010000 	movwcs	r0, #4096	; 0x1000
    bf84:	0000004c 	andeq	r0, r0, ip, asr #32
    bf88:	0000a07d 	andeq	sl, r0, sp, ror r0
    bf8c:	0025a106 	eoreq	sl, r5, r6, lsl #2
    bf90:	4c230100 	stfmis	f0, [r3], #-0
    bf94:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    bf98:	070000a0 	streq	r0, [r0, -r0, lsr #1]
    bf9c:	2501006e 	strcs	r0, [r1, #-110]	; 0x6e
    bfa0:	0000003a 	andeq	r0, r0, sl, lsr r0
    bfa4:	69085201 	stmdbvs	r8, {r0, r9, ip, lr}
    bfa8:	3a260100 	bcc	98c3b0 <__Stack_Size+0x98bbb0>
    bfac:	bf000000 	svclt	0x00000000
    bfb0:	090000a0 	stmdbeq	r0, {r5, r7}
    bfb4:	00001b42 	andeq	r1, r0, r2, asr #22
    bfb8:	003a2601 	eorseq	r2, sl, r1, lsl #12
    bfbc:	a11e0000 	tstge	lr, r0
    bfc0:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    bfc4:	0100001b 	tsteq	r0, fp, lsl r0
    bfc8:	00003a26 	andeq	r3, r0, r6, lsr #20
    bfcc:	00a15500 	adceq	r5, r1, r0, lsl #10
    bfd0:	25be0900 	ldrcs	r0, [lr, #2304]!	; 0x900
    bfd4:	27010000 	strcs	r0, [r1, -r0]
    bfd8:	000000fd 	strdeq	r0, [r0], -sp
    bfdc:	0000a179 	andeq	sl, r0, r9, ror r1
    bfe0:	4c040400 	cfstrsmi	mvf0, [r4], {-0}
    bfe4:	05000000 	streq	r0, [r0, #-0]
    bfe8:	00002455 	andeq	r2, r0, r5, asr r4
    bfec:	6cd83c01 	ldclvs	12, cr3, [r8], {1}
    bff0:	00240800 	eoreq	r0, r4, r0, lsl #16
    bff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    bff8:	0000016d 	andeq	r0, r0, sp, ror #2
    bffc:	0025a906 	eoreq	sl, r5, r6, lsl #18
    c000:	6f3c0100 	svcvs	0x003c0100
    c004:	b4000000 	strlt	r0, [r0], #-0
    c008:	060000a1 	streq	r0, [r0], -r1, lsr #1
    c00c:	000025b2 			; <UNDEFINED> instruction: 0x000025b2
    c010:	004c3c01 	subeq	r3, ip, r1, lsl #24
    c014:	a1ef0000 	mvnge	r0, r0
    c018:	a1060000 	mrsge	r0, (UNDEF: 6)
    c01c:	01000025 	tsteq	r0, r5, lsr #32
    c020:	00004c3c 	andeq	r4, r0, ip, lsr ip
    c024:	00a21000 	adceq	r1, r2, r0
    c028:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    c02c:	003a3e01 	eorseq	r3, sl, r1, lsl #28
    c030:	52010000 	andpl	r0, r1, #0
    c034:	01006908 	tsteq	r0, r8, lsl #18
    c038:	00003a3f 	andeq	r3, r0, pc, lsr sl
    c03c:	00a23100 	adceq	r3, r2, r0, lsl #2
    c040:	25be0900 	ldrcs	r0, [lr, #2304]!	; 0x900
    c044:	40010000 	andmi	r0, r1, r0
    c048:	0000016d 	andeq	r0, r0, sp, ror #2
    c04c:	0000a290 	muleq	r0, r0, r2
    c050:	3a040400 	bcc	10d058 <__Stack_Size+0x10c858>
    c054:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380460>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82470>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	0b002403 	bleq	9058 <__Stack_Size+0x8858>
      48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
      4c:	04000008 	streq	r0, [r0], #-8

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0b0b000f 	bleq	2c0094 <__Stack_Size+0x2bf894>
      54:	00001349 	andeq	r1, r0, r9, asr #6
      58:	27001505 	strcs	r1, [r0, -r5, lsl #10]
      5c:	06000019 			; <UNDEFINED> instruction: 0x06000019
      60:	08030016 	stmdaeq	r3, {r1, r2, r4}
      64:	0b3b0b3a 	bleq	ec2d54 <__Stack_Size+0xec2554>
      68:	00001349 	andeq	r1, r0, r9, asr #6
      6c:	03001607 	movweq	r1, #1543	; 0x607
      70:	3b0b3a0e 	blcc	2ce8b0 <__Stack_Size+0x2ce0b0>
      74:	0013490b 	andseq	r4, r3, fp, lsl #18
      78:	00350800 	eorseq	r0, r5, r0, lsl #16
      7c:	00001349 	andeq	r1, r0, r9, asr #6
      80:	0b010409 	bleq	410ac <__Stack_Size+0x408ac>
      84:	3b0b3a0b 	blcc	2ce8b8 <__Stack_Size+0x2ce0b8>
      88:	0013010b 	andseq	r0, r3, fp, lsl #2
      8c:	00280a00 	eoreq	r0, r8, r0, lsl #20
      90:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
      94:	130b0000 	movwne	r0, #45056	; 0xb000
      98:	3a0b0b01 	bcc	2c2ca4 <__Stack_Size+0x2c24a4>
      9c:	010b3b0b 	tsteq	fp, fp, lsl #22
      a0:	0c000013 	stceq	0, cr0, [r0], {19}
      a4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	0b3b0b3a 	bleq	ec2d98 <__Stack_Size+0xec2598>
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	0b381349 	bleq	e04dd8 <__Stack_Size+0xe045d8>
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
      b4:	3a080300 	bcc	200cbc <__Stack_Size+0x2004bc>
			*plainchar    = (fragment & 0x003) << 6;
      b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      bc:	000b3813 	andeq	r3, fp, r3, lsl r8
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	01040e00 	tsteq	r4, r0, lsl #28
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	0b0b0e03 	bleq	2c38d8 <__Stack_Size+0x2c30d8>
      c8:	0b3b0b3a 	bleq	ec2db8 <__Stack_Size+0xec25b8>
				{
					state_in->step = step_d;
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
					state_in->plainchar = *plainchar;
      d0:	0301130f 	movweq	r1, #4879	; 0x130f
					return plainchar - plaintext_out;
      d4:	3a0b0b0e 	bcc	2c2d14 <__Stack_Size+0x2c2514>
      d8:	010b3b0b 	tsteq	fp, fp, lsl #22
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	10000013 	andne	r0, r0, r3, lsl r0
      e0:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	13011349 	movwne	r1, #4937	; 0x1349
      e8:	05110000 	ldreq	r0, [r1, #-0]
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	00134900 	andseq	r4, r3, r0, lsl #18
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	01131200 	tsteq	r3, r0, lsl #4
      f4:	0b0b0803 	bleq	2c2108 <__Stack_Size+0x2c1908>
		}
      f8:	0b3b0b3a 	bleq	ec2de8 <__Stack_Size+0xec25e8>
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	00001301 	andeq	r1, r0, r1, lsl #6
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	0b011713 	bleq	45d54 <__Stack_Size+0x45554>
     104:	3b0b3a0b 	blcc	2ce938 <__Stack_Size+0x2ce138>

	f25519_sub(a, x1sq, z1sq);
     108:	0013010b 	andseq	r0, r3, fp, lsl #2
     10c:	000d1400 	andeq	r1, sp, r0, lsl #8
	f25519_mul__distinct(x3, a, a);
     110:	0b3a0803 	bleq	e82124 <__Stack_Size+0xe81924>
     114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}

	f25519_mul_c(a, x1z1, 486662);
     11c:	03193f01 	tsteq	r9, #1, 30
     120:	3b0b3a0e 	blcc	2ce960 <__Stack_Size+0x2ce160>
	f25519_add(a, x1sq, a);
     124:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     128:	010b2013 	tsteq	fp, r3, lsl r0
     12c:	16000013 			; <UNDEFINED> instruction: 0x16000013
	f25519_add(a, z1sq, a);
     130:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	00001349 	andeq	r1, r0, r9, asr #6
     13c:	3f002e17 	svccc	0x00002e17
     140:	3a0e0319 	bcc	380dac <__Stack_Size+0x3805ac>
	f25519_mul_c(z3, x1sq, 4);
     144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     148:	000b2019 	andeq	r2, fp, r9, lsl r0
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	002e1800 	eoreq	r1, lr, r0, lsl #16
     150:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     154:	0b3b0b3a 	bleq	ec2e44 <__Stack_Size+0xec2644>
	f25519_sub(b, x3, z3); /* D */
     158:	01111927 	tsteq	r1, r7, lsr #18
     15c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
	f25519_mul__distinct(da, a, b);
     160:	00194297 	mulseq	r9, r7, r2
     164:	002e1900 	eoreq	r1, lr, r0, lsl #18
     168:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}

	f25519_sub(b, x2, z2);
     16c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     170:	01111927 	tsteq	r1, r7, lsr #18
	f25519_add(a, x3, z3); /* C */
     174:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     178:	00194297 	mulseq	r9, r7, r2
     17c:	012e1a00 	teqeq	lr, r0, lsl #20
	f25519_mul__distinct(cb, a, b);
     180:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     184:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a

	f25519_add(a, da, cb);
     188:	13491927 	movtne	r1, #39207	; 0x9927
     18c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     190:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
	f25519_mul__distinct(b, a, a);
     194:	00130119 	andseq	r0, r3, r9, lsl r1
     198:	00051b00 	andeq	r1, r5, r0, lsl #22
	f25519_mul__distinct(x5, z1, b);
     19c:	0b3a0e03 	bleq	e839b0 <__Stack_Size+0xe831b0>
     1a0:	1349053b 	movtne	r0, #38203	; 0x953b
     1a4:	00001702 	andeq	r1, r0, r2, lsl #14

	f25519_sub(a, da, cb);
     1a8:	0300051c 	movweq	r0, #1308	; 0x51c
     1ac:	3b0b3a0e 	blcc	2ce9ec <__Stack_Size+0x2ce1ec>
	f25519_mul__distinct(b, a, a);
     1b0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1b4:	1d000018 	stcne	0, cr0, [r0, #-96]	; 0xffffffa0
     1b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	0b3a0e03 	bleq	e839d0 <__Stack_Size+0xe831d0>
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     1c4:	06120111 			; <UNDEFINED> instruction: 0x06120111

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1cc:	00130119 	andseq	r0, r3, r9, lsl r1
     1d0:	010b1e00 	tsteq	fp, r0, lsl #28
     1d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
		f25519_select(zm1, zm1, zm, bit);
     1d8:	00001301 	andeq	r1, r0, r1, lsl #6
     1dc:	0300341f 	movweq	r3, #1055	; 0x41f
     1e0:	3b0b3a0e 	blcc	2cea20 <__Stack_Size+0x2ce220>
		f25519_select(xm, xm, xms, bit);
     1e4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     1e8:	20000017 	andcs	r0, r0, r7, lsl r0
     1ec:	00018289 	andeq	r8, r1, r9, lsl #5
		f25519_select(zm, zm, zms, bit);
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
     1f8:	11010182 	smlabbne	r1, r2, r1, r0
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01133101 	tsteq	r3, r1, lsl #2
     200:	22000013 	andcs	r0, r0, #19
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0001828a 	andeq	r8, r1, sl, lsl #5
     208:	42911802 	addsmi	r1, r1, #131072	; 0x20000
	f25519_mul__distinct(result, zm1, xm);
     20c:	23000018 	movwcs	r0, #24
     210:	01018289 	smlabbeq	r1, r9, r2, r8
	f25519_normalize(result);
     214:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     218:	00133119 	andseq	r3, r3, r9, lsl r1
}
     21c:	82892400 	addhi	r2, r9, #0, 8
     220:	01110101 	tsteq	r1, r1, lsl #2
     224:	05250000 	streq	r0, [r5, #-0]!
     228:	3a080300 	bcc	200e30 <__Stack_Size+0x200630>
     22c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     230:	00170213 	andseq	r0, r7, r3, lsl r2
     234:	82892600 	addhi	r2, r9, #0, 12
     238:	01110001 	tsteq	r1, r1
     23c:	31194295 			; <UNDEFINED> instruction: 0x31194295
     240:	27000013 	smladcs	r0, r3, r0, r0
     244:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     248:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     24c:	00001349 	andeq	r1, r0, r9, asr #6
     250:	31012e28 	tstcc	r1, r8, lsr #28
     254:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     258:	97184006 	ldrls	r4, [r8, -r6]
     25c:	13011942 	movwne	r1, #6466	; 0x1942
     260:	05290000 	streq	r0, [r9, #-0]!
     264:	02133100 	andseq	r3, r3, #0, 2
     268:	2a000017 	bcs	2cc <_Minimum_Stack_Size+0x1cc>
     26c:	0111010b 	tsteq	r1, fp, lsl #2
     270:	00000612 	andeq	r0, r0, r2, lsl r6
     274:	3f012e2b 	svccc	0x00012e2b
     278:	3a0e0319 	bcc	380ee4 <__Stack_Size+0x3806e4>
     27c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     280:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     284:	97184006 	ldrls	r4, [r8, -r6]
     288:	13011942 	movwne	r1, #6466	; 0x1942
     28c:	342c0000 	strtcc	r0, [ip], #-0
     290:	3a0e0300 	bcc	380e98 <__Stack_Size+0x380698>
     294:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     298:	00180213 	andseq	r0, r8, r3, lsl r2
     29c:	011d2d00 	tsteq	sp, r0, lsl #26
     2a0:	01111331 	tsteq	r1, r1, lsr r3
     2a4:	0b580612 	bleq	1601af4 <__Stack_Size+0x16012f4>
     2a8:	13010b59 	movwne	r0, #7001	; 0x1b59
     2ac:	342e0000 	strtcc	r0, [lr], #-0
     2b0:	3a0e0300 	bcc	380eb8 <__Stack_Size+0x3806b8>
     2b4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2b8:	00170213 	andseq	r0, r7, r3, lsl r2
     2bc:	00052f00 	andeq	r2, r5, r0, lsl #30
     2c0:	0b3a0e03 	bleq	e83ad4 <__Stack_Size+0xe832d4>
     2c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2c8:	00001702 	andeq	r1, r0, r2, lsl #14
     2cc:	3f012e30 	svccc	0x00012e30
     2d0:	3a0e0319 	bcc	380f3c <__Stack_Size+0x38073c>
     2d4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     2d8:	11134919 	tstne	r3, r9, lsl r9
     2dc:	40061201 	andmi	r1, r6, r1, lsl #4
     2e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     2e4:	00001301 	andeq	r1, r0, r1, lsl #6
     2e8:	01828931 	orreq	r8, r2, r1, lsr r9
     2ec:	31011101 	tstcc	r1, r1, lsl #2
     2f0:	32000013 	andcc	r0, r0, #19
     2f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     2fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     300:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     304:	03193f01 	tsteq	r9, #1, 30
     308:	3b0b3a0e 	blcc	2ceb48 <__Stack_Size+0x2ce348>
     30c:	11192705 	tstne	r9, r5, lsl #14
     310:	40061201 	andmi	r1, r6, r1, lsl #4
     314:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     318:	00001301 	andeq	r1, r0, r1, lsl #6
     31c:	3f002e34 	svccc	0x00002e34
     320:	3a0e0319 	bcc	380f8c <__Stack_Size+0x38078c>
     324:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     328:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     32c:	97184006 	ldrls	r4, [r8, -r6]
     330:	00001942 	andeq	r1, r0, r2, asr #18
     334:	03003435 	movweq	r3, #1077	; 0x435
     338:	3b0b3a0e 	blcc	2ceb78 <__Stack_Size+0x2ce378>
     33c:	1c13490b 	ldcne	9, cr4, [r3], {11}
     340:	36000006 	strcc	r0, [r0], -r6
     344:	13490026 	movtne	r0, #36902	; 0x9026
     348:	34370000 	ldrtcc	r0, [r7], #-0
     34c:	3a0e0300 	bcc	380f54 <__Stack_Size+0x380754>
     350:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     354:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     358:	38000018 	stmdacc	r0, {r3, r4}
     35c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     360:	0b3b0b3a 	bleq	ec3050 <__Stack_Size+0xec2850>
     364:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     368:	0000193c 	andeq	r1, r0, ip, lsr r9
     36c:	49010139 	stmdbmi	r1, {r0, r3, r4, r5, r8}
     370:	00130113 	andseq	r0, r3, r3, lsl r1
     374:	00213a00 	eoreq	r3, r1, r0, lsl #20
     378:	0b2f1349 	bleq	bc50a4 <__Stack_Size+0xbc48a4>
     37c:	213b0000 	teqcs	fp, r0
     380:	3c000000 	stccc	0, cr0, [r0], {-0}
     384:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     388:	0b3a0e03 	bleq	e83b9c <__Stack_Size+0xe8339c>
     38c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     390:	0000193c 	andeq	r1, r0, ip, lsr r9
     394:	3f012e3d 	svccc	0x00012e3d
     398:	3a0e0319 	bcc	381004 <__Stack_Size+0x380804>
     39c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     3a0:	01193c19 	tsteq	r9, r9, lsl ip
     3a4:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
     3a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     3ac:	0b3a0e03 	bleq	e83bc0 <__Stack_Size+0xe833c0>
     3b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     3b4:	1301193c 	movwne	r1, #6460	; 0x193c
     3b8:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
     3bc:	03193f00 	tsteq	r9, #0, 30
     3c0:	3b0b3a0e 	blcc	2cec00 <__Stack_Size+0x2ce400>
     3c4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3c8:	00193c13 	andseq	r3, r9, r3, lsl ip
     3cc:	012e4000 	teqeq	lr, r0
     3d0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3d4:	0b3b0b3a 	bleq	ec30c4 <__Stack_Size+0xec28c4>
     3d8:	13491927 	movtne	r1, #39207	; 0x9927
     3dc:	1301193c 	movwne	r1, #6460	; 0x193c
     3e0:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
     3e4:	03193f01 	tsteq	r9, #1, 30
     3e8:	3b0b3a0e 	blcc	2cec28 <__Stack_Size+0x2ce428>
     3ec:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     3f0:	01193c13 	tsteq	r9, r3, lsl ip
     3f4:	42000013 	andmi	r0, r0, #19
     3f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     3fc:	0b3a0e03 	bleq	e83c10 <__Stack_Size+0xe83410>
     400:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     404:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     408:	01000000 	mrseq	r0, (UNDEF: 0)
     40c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     410:	0e030b13 	vmoveq.32	d3[0], r0
     414:	17100e1b 			; <UNDEFINED> instruction: 0x17100e1b
     418:	24020000 	strcs	r0, [r2], #-0
     41c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     420:	0008030b 	andeq	r0, r8, fp, lsl #6
     424:	00240300 	eoreq	r0, r4, r0, lsl #6
     428:	0b3e0b0b 	bleq	f8305c <__Stack_Size+0xf8285c>
     42c:	00000e03 	andeq	r0, r0, r3, lsl #28
     430:	03001604 	movweq	r1, #1540	; 0x604
     434:	3b0b3a08 	blcc	2cec5c <__Stack_Size+0x2ce45c>
     438:	0013490b 	andseq	r4, r3, fp, lsl #18
     43c:	01130500 	tsteq	r3, r0, lsl #10
     440:	0b0b0e03 	bleq	2c3c54 <__Stack_Size+0x2c3454>
     444:	0b3b0b3a 	bleq	ec3134 <__Stack_Size+0xec2934>
     448:	00001301 	andeq	r1, r0, r1, lsl #6
     44c:	03000d06 	movweq	r0, #3334	; 0xd06
     450:	3b0b3a0e 	blcc	2cec90 <__Stack_Size+0x2ce490>
     454:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     458:	0700000b 	streq	r0, [r0, -fp]
     45c:	0b0b000f 	bleq	2c04a0 <__Stack_Size+0x2bfca0>
     460:	00001349 	andeq	r1, r0, r9, asr #6
     464:	03001608 	movweq	r1, #1544	; 0x608
     468:	3b0b3a0e 	blcc	2ceca8 <__Stack_Size+0x2ce4a8>
     46c:	0013490b 	andseq	r4, r3, fp, lsl #18
     470:	00340900 	eorseq	r0, r4, r0, lsl #18
     474:	0b3a0e03 	bleq	e83c88 <__Stack_Size+0xe83488>
     478:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     47c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     480:	010a0000 	mrseq	r0, (UNDEF: 10)
     484:	01134901 	tsteq	r3, r1, lsl #18
     488:	0b000013 	bleq	4dc <_Minimum_Stack_Size+0x3dc>
     48c:	13490021 	movtne	r0, #36897	; 0x9021
     490:	00000b2f 	andeq	r0, r0, pc, lsr #22
     494:	01110100 	tsteq	r1, r0, lsl #2
     498:	0b130e25 	bleq	4c3d34 <__Stack_Size+0x4c3534>
     49c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     4a0:	01111755 	tsteq	r1, r5, asr r7
     4a4:	00001710 	andeq	r1, r0, r0, lsl r7
     4a8:	03001602 	movweq	r1, #1538	; 0x602
     4ac:	3b0b3a0e 	blcc	2cecec <__Stack_Size+0x2ce4ec>
     4b0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4b4:	00240300 	eoreq	r0, r4, r0, lsl #6
     4b8:	0b3e0b0b 	bleq	f830ec <__Stack_Size+0xf828ec>
     4bc:	00000e03 	andeq	r0, r0, r3, lsl #28
     4c0:	0b000f04 	bleq	40d8 <__Stack_Size+0x38d8>
     4c4:	0500000b 	streq	r0, [r0, #-11]
     4c8:	0b0b0024 	bleq	2c0560 <__Stack_Size+0x2bfd60>
     4cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     4d0:	0f060000 	svceq	0x00060000
     4d4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     4d8:	07000013 	smladeq	r0, r3, r0, r0
     4dc:	13490026 	movtne	r0, #36902	; 0x9026
     4e0:	16080000 	strne	r0, [r8], -r0
     4e4:	3a080300 	bcc	2010ec <__Stack_Size+0x2008ec>
     4e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4ec:	09000013 	stmdbeq	r0, {r0, r1, r4}
     4f0:	13490035 	movtne	r0, #36917	; 0x9035
     4f4:	040a0000 	streq	r0, [sl], #-0
     4f8:	3a0b0b01 	bcc	2c3104 <__Stack_Size+0x2c2904>
     4fc:	010b3b0b 	tsteq	fp, fp, lsl #22
     500:	0b000013 	bleq	554 <_Minimum_Stack_Size+0x454>
     504:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     508:	00000d1c 	andeq	r0, r0, ip, lsl sp
     50c:	0301130c 	movweq	r1, #4876	; 0x130c
     510:	3a0b0b0e 	bcc	2c3150 <__Stack_Size+0x2c2950>
     514:	01053b0b 	tsteq	r5, fp, lsl #22
     518:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     51c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     520:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     524:	0b381349 	bleq	e05250 <__Stack_Size+0xe04a50>
     528:	130e0000 	movwne	r0, #57344	; 0xe000
     52c:	0b0e0301 	bleq	381138 <__Stack_Size+0x380938>
     530:	3b0b3a0b 	blcc	2ced64 <__Stack_Size+0x2ce564>
     534:	0013010b 	andseq	r0, r3, fp, lsl #2
     538:	000d0f00 	andeq	r0, sp, r0, lsl #30
     53c:	0b3a0e03 	bleq	e83d50 <__Stack_Size+0xe83550>
     540:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     544:	00000b38 	andeq	r0, r0, r8, lsr fp
     548:	49010110 	stmdbmi	r1, {r4, r8}
     54c:	00130113 	andseq	r0, r3, r3, lsl r1
     550:	00211100 	eoreq	r1, r1, r0, lsl #2
     554:	00001349 	andeq	r1, r0, r9, asr #6
     558:	0b011312 	bleq	451a8 <__Stack_Size+0x449a8>
     55c:	3b0b3a0b 	blcc	2ced90 <__Stack_Size+0x2ce590>
     560:	0013010b 	andseq	r0, r3, fp, lsl #2
     564:	00211300 	eoreq	r1, r1, r0, lsl #6
     568:	0b2f1349 	bleq	bc5294 <__Stack_Size+0xbc4a94>
     56c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     570:	03193f01 	tsteq	r9, #1, 30
     574:	3b0b3a0e 	blcc	2cedb4 <__Stack_Size+0x2ce5b4>
     578:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     57c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     580:	97184006 	ldrls	r4, [r8, -r6]
     584:	13011942 	movwne	r1, #6466	; 0x1942
     588:	05150000 	ldreq	r0, [r5, #-0]
     58c:	3a0e0300 	bcc	381194 <__Stack_Size+0x380994>
     590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     594:	00170213 	andseq	r0, r7, r3, lsl r2
     598:	00341600 	eorseq	r1, r4, r0, lsl #12
     59c:	0b3a0803 	bleq	e825b0 <__Stack_Size+0xe81db0>
     5a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     5a4:	00001802 	andeq	r1, r0, r2, lsl #16
     5a8:	01828917 	orreq	r8, r2, r7, lsl r9
     5ac:	31011101 	tstcc	r1, r1, lsl #2
     5b0:	00130113 	andseq	r0, r3, r3, lsl r1
     5b4:	828a1800 	addhi	r1, sl, #0, 16
     5b8:	18020001 	stmdane	r2, {r0}
     5bc:	00184291 	mulseq	r8, r1, r2
     5c0:	82891900 	addhi	r1, r9, #0, 18
     5c4:	01110101 	tsteq	r1, r1, lsl #2
     5c8:	00001331 	andeq	r1, r0, r1, lsr r3
     5cc:	0300341a 	movweq	r3, #1050	; 0x41a
     5d0:	3b0b3a08 	blcc	2cedf8 <__Stack_Size+0x2ce5f8>
     5d4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     5d8:	1b000017 	blne	63c <_Minimum_Stack_Size+0x53c>
     5dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     5e0:	0b3a0e03 	bleq	e83df4 <__Stack_Size+0xe835f4>
     5e4:	01110b3b 	tsteq	r1, fp, lsr fp
     5e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     5ec:	01194297 			; <UNDEFINED> instruction: 0x01194297
     5f0:	1c000013 	stcne	0, cr0, [r0], {19}
     5f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     5f8:	0b3b0b3a 	bleq	ec32e8 <__Stack_Size+0xec2ae8>
     5fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     600:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     604:	03193f01 	tsteq	r9, #1, 30
     608:	3b0b3a0e 	blcc	2cee48 <__Stack_Size+0x2ce648>
     60c:	1113490b 	tstne	r3, fp, lsl #18
     610:	40061201 	andmi	r1, r6, r1, lsl #4
     614:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     618:	00001301 	andeq	r1, r0, r1, lsl #6
     61c:	0300341e 	movweq	r3, #1054	; 0x41e
     620:	3b0b3a0e 	blcc	2cee60 <__Stack_Size+0x2ce660>
     624:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     628:	1f000017 	svcne	0x00000017
     62c:	00018289 	andeq	r8, r1, r9, lsl #5
     630:	13310111 	teqne	r1, #1073741828	; 0x40000004
     634:	34200000 	strtcc	r0, [r0], #-0
     638:	3a0e0300 	bcc	381240 <__Stack_Size+0x380a40>
     63c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     640:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     644:	21000018 	tstcs	r0, r8, lsl r0
     648:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     64c:	0b3a0e03 	bleq	e83e60 <__Stack_Size+0xe83660>
     650:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     654:	1301193c 	movwne	r1, #6460	; 0x193c
     658:	05220000 	streq	r0, [r2, #-0]!
     65c:	00134900 	andseq	r4, r3, r0, lsl #18
     660:	012e2300 	teqeq	lr, r0, lsl #6
     664:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     668:	0b3b0b3a 	bleq	ec3358 <__Stack_Size+0xec2b58>
     66c:	13491927 	movtne	r1, #39207	; 0x9927
     670:	1301193c 	movwne	r1, #6460	; 0x193c
     674:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
     678:	03193f01 	tsteq	r9, #1, 30
     67c:	3b0b3a0e 	blcc	2ceebc <__Stack_Size+0x2ce6bc>
     680:	3c192705 	ldccc	7, cr2, [r9], {5}
     684:	00130119 	andseq	r0, r3, r9, lsl r1
     688:	00182500 	andseq	r2, r8, r0, lsl #10
     68c:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     690:	03193f01 	tsteq	r9, #1, 30
     694:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
     698:	3c193413 	cfldrscc	mvf3, [r9], {19}
     69c:	00130119 	andseq	r0, r3, r9, lsl r1
     6a0:	002e2700 	eoreq	r2, lr, r0, lsl #14
     6a4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     6ac:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     6b0:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
     6b4:	03193f00 	tsteq	r9, #0, 30
     6b8:	3b0b3a0e 	blcc	2ceef8 <__Stack_Size+0x2ce6f8>
     6bc:	3c19270b 	ldccc	7, cr2, [r9], {11}
     6c0:	29000019 	stmdbcs	r0, {r0, r3, r4}
     6c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6c8:	0b3a0e03 	bleq	e83edc <__Stack_Size+0xe836dc>
     6cc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     6d0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     6d4:	00001301 	andeq	r1, r0, r1, lsl #6
     6d8:	3f012e2a 	svccc	0x00012e2a
     6dc:	3a0e0319 	bcc	381348 <__Stack_Size+0x380b48>
     6e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6e4:	01193c13 	tsteq	r9, r3, lsl ip
     6e8:	2b000013 	blcs	73c <_Minimum_Stack_Size+0x63c>
     6ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6f0:	0b3a0e03 	bleq	e83f04 <__Stack_Size+0xe83704>
     6f4:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6f8:	00001301 	andeq	r1, r0, r1, lsl #6
     6fc:	3f012e2c 	svccc	0x00012e2c
     700:	3a0e0319 	bcc	38136c <__Stack_Size+0x380b6c>
     704:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     708:	00193c19 	andseq	r3, r9, r9, lsl ip
     70c:	11010000 	mrsne	r0, (UNDEF: 1)
     710:	130e2501 	movwne	r2, #58625	; 0xe501
     714:	1b0e030b 	blne	381348 <__Stack_Size+0x380b48>
     718:	1117550e 	tstne	r7, lr, lsl #10
     71c:	00171001 	andseq	r1, r7, r1
     720:	00160200 	andseq	r0, r6, r0, lsl #4
     724:	0b3a0e03 	bleq	e83f38 <__Stack_Size+0xe83738>
     728:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     72c:	24030000 	strcs	r0, [r3], #-0
     730:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     734:	000e030b 	andeq	r0, lr, fp, lsl #6
     738:	01130400 	tsteq	r3, r0, lsl #8
     73c:	0b0b0e03 	bleq	2c3f50 <__Stack_Size+0x2c3750>
     740:	0b3b0b3a 	bleq	ec3430 <__Stack_Size+0xec2c30>
     744:	00001301 	andeq	r1, r0, r1, lsl #6
     748:	03000d05 	movweq	r0, #3333	; 0xd05
     74c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     750:	0019340b 	andseq	r3, r9, fp, lsl #8
     754:	000f0600 	andeq	r0, pc, r0, lsl #12
     758:	00000b0b 	andeq	r0, r0, fp, lsl #22
     75c:	0b002407 	bleq	9780 <__Stack_Size+0x8f80>
     760:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     764:	08000008 	stmdaeq	r0, {r3}
     768:	0b0b000f 	bleq	2c07ac <__Stack_Size+0x2bffac>
     76c:	00001349 	andeq	r1, r0, r9, asr #6
     770:	27001509 	strcs	r1, [r0, -r9, lsl #10]
     774:	0a000019 	beq	7e0 <_Minimum_Stack_Size+0x6e0>
     778:	13490026 	movtne	r0, #36902	; 0x9026
     77c:	160b0000 	strne	r0, [fp], -r0
     780:	3a080300 	bcc	201388 <__Stack_Size+0x200b88>
     784:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     788:	0c000013 	stceq	0, cr0, [r0], {19}
     78c:	13490035 	movtne	r0, #36917	; 0x9035
     790:	040d0000 	streq	r0, [sp], #-0
     794:	3a0b0b01 	bcc	2c33a0 <__Stack_Size+0x2c2ba0>
     798:	010b3b0b 	tsteq	fp, fp, lsl #22
     79c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     7a0:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     7a4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     7a8:	0b01130f 	bleq	453ec <__Stack_Size+0x44bec>
     7ac:	3b0b3a0b 	blcc	2cefe0 <__Stack_Size+0x2ce7e0>
     7b0:	0013010b 	andseq	r0, r3, fp, lsl #2
     7b4:	000d1000 	andeq	r1, sp, r0
     7b8:	0b3a0803 	bleq	e827cc <__Stack_Size+0xe81fcc>
     7bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     7c0:	00000b38 	andeq	r0, r0, r8, lsr fp
     7c4:	03000d11 	movweq	r0, #3345	; 0xd11
     7c8:	3b0b3a0e 	blcc	2cf008 <__Stack_Size+0x2ce808>
     7cc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7d0:	1200000b 	andne	r0, r0, #11
     7d4:	050b0113 	streq	r0, [fp, #-275]	; 0x113
     7d8:	0b3b0b3a 	bleq	ec34c8 <__Stack_Size+0xec2cc8>
     7dc:	00001301 	andeq	r1, r0, r1, lsl #6
     7e0:	03000d13 	movweq	r0, #3347	; 0xd13
     7e4:	3b0b3a0e 	blcc	2cf024 <__Stack_Size+0x2ce824>
     7e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     7ec:	14000005 	strne	r0, [r0], #-5
     7f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     7f4:	0b3b0b3a 	bleq	ec34e4 <__Stack_Size+0xec2ce4>
     7f8:	05381349 	ldreq	r1, [r8, #-841]!	; 0x349
     7fc:	01150000 	tsteq	r5, r0
     800:	01134901 	tsteq	r3, r1, lsl #18
     804:	16000013 			; <UNDEFINED> instruction: 0x16000013
     808:	13490021 	movtne	r0, #36897	; 0x9021
     80c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     810:	03000d17 	movweq	r0, #3351	; 0xd17
     814:	3b0b3a08 	blcc	2cf03c <__Stack_Size+0x2ce83c>
     818:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
     81c:	1800000b 	stmdane	r0, {r0, r1, r3}
     820:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     824:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     828:	0b381349 	bleq	e05554 <__Stack_Size+0xe04d54>
     82c:	13190000 	tstne	r9, #0
     830:	0b0e0301 	bleq	38143c <__Stack_Size+0x380c3c>
     834:	3b0b3a0b 	blcc	2cf068 <__Stack_Size+0x2ce868>
     838:	00130105 	andseq	r0, r3, r5, lsl #2
     83c:	012e1a00 	teqeq	lr, r0, lsl #20
     840:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     844:	0b3b0b3a 	bleq	ec3534 <__Stack_Size+0xec2d34>
     848:	01111927 	tsteq	r1, r7, lsr #18
     84c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     850:	01194297 			; <UNDEFINED> instruction: 0x01194297
     854:	1b000013 	blne	8a8 <__Stack_Size+0xa8>
     858:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     85c:	0b3b0b3a 	bleq	ec354c <__Stack_Size+0xec2d4c>
     860:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     864:	051c0000 	ldreq	r0, [ip, #-0]
     868:	3a080300 	bcc	201470 <__Stack_Size+0x200c70>
     86c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     870:	00170213 	andseq	r0, r7, r3, lsl r2
     874:	012e1d00 	teqeq	lr, r0, lsl #26
     878:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     87c:	0b3b0b3a 	bleq	ec356c <__Stack_Size+0xec2d6c>
     880:	13491927 	movtne	r1, #39207	; 0x9927
     884:	06120111 			; <UNDEFINED> instruction: 0x06120111
     888:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     88c:	00130119 	andseq	r0, r3, r9, lsl r1
     890:	00051e00 	andeq	r1, r5, r0, lsl #28
     894:	0b3a0e03 	bleq	e840a8 <__Stack_Size+0xe838a8>
     898:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     89c:	00001702 	andeq	r1, r0, r2, lsl #14
     8a0:	0300341f 	movweq	r3, #1055	; 0x41f
     8a4:	3b0b3a08 	blcc	2cf0cc <__Stack_Size+0x2ce8cc>
     8a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8ac:	20000017 	andcs	r0, r0, r7, lsl r0
     8b0:	01018289 	smlabbeq	r1, r9, r2, r8
     8b4:	13310111 	teqne	r1, #1073741828	; 0x40000004
     8b8:	00001301 	andeq	r1, r0, r1, lsl #6
     8bc:	01828a21 	orreq	r8, r2, r1, lsr #20
     8c0:	91180200 	tstls	r8, r0, lsl #4
     8c4:	00001842 	andeq	r1, r0, r2, asr #16
     8c8:	01828922 	orreq	r8, r2, r2, lsr #18
     8cc:	31011101 	tstcc	r1, r1, lsl #2
     8d0:	23000013 	movwcs	r0, #19
     8d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8d8:	0b3a0e03 	bleq	e840ec <__Stack_Size+0xe838ec>
     8dc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     8e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     8e4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     8e8:	00130119 	andseq	r0, r3, r9, lsl r1
     8ec:	00052400 	andeq	r2, r5, r0, lsl #8
     8f0:	0b3a0e03 	bleq	e84104 <__Stack_Size+0xe83904>
     8f4:	1349053b 	movtne	r0, #38203	; 0x953b
     8f8:	00001802 	andeq	r1, r0, r2, lsl #16
     8fc:	03000525 	movweq	r0, #1317	; 0x525
     900:	3b0b3a08 	blcc	2cf128 <__Stack_Size+0x2ce928>
     904:	02134905 	andseq	r4, r3, #81920	; 0x14000
     908:	26000018 			; <UNDEFINED> instruction: 0x26000018
     90c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     910:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     914:	17021349 	strne	r1, [r2, -r9, asr #6]
     918:	05270000 	streq	r0, [r7, #-0]!
     91c:	3a080300 	bcc	201524 <__Stack_Size+0x200d24>
     920:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	00170213 	andseq	r0, r7, r3, lsl r2
     928:	00342800 	eorseq	r2, r4, r0, lsl #16
     92c:	0b3a0e03 	bleq	e84140 <__Stack_Size+0xe83940>
     930:	1349053b 	movtne	r0, #38203	; 0x953b
     934:	00001802 	andeq	r1, r0, r2, lsl #16
     938:	00001829 	andeq	r1, r0, r9, lsr #16
     93c:	00342a00 	eorseq	r2, r4, r0, lsl #20
     940:	0b3a0803 	bleq	e82954 <__Stack_Size+0xe82154>
     944:	1349053b 	movtne	r0, #38203	; 0x953b
     948:	00001702 	andeq	r1, r0, r2, lsl #14
     94c:	0300342b 	movweq	r3, #1067	; 0x42b
     950:	3b0b3a08 	blcc	2cf178 <__Stack_Size+0x2ce978>
     954:	02134905 	andseq	r4, r3, #81920	; 0x14000
     958:	2c000018 	stccs	0, cr0, [r0], {24}
     95c:	01018289 	smlabbeq	r1, r9, r2, r8
     960:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     964:	00133119 	andseq	r3, r3, r9, lsl r1
     968:	012e2d00 	teqeq	lr, r0, lsl #26
     96c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     970:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     974:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     978:	00001301 	andeq	r1, r0, r1, lsl #6
     97c:	3f002e2e 	svccc	0x00002e2e
     980:	3a0e0319 	bcc	3815ec <__Stack_Size+0x380dec>
     984:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     988:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     98c:	97184006 	ldrls	r4, [r8, -r6]
     990:	00001942 	andeq	r1, r0, r2, asr #18
     994:	0300342f 	movweq	r3, #1071	; 0x42f
     998:	3b0b3a0e 	blcc	2cf1d8 <__Stack_Size+0x2ce9d8>
     99c:	1c134905 	ldcne	9, cr4, [r3], {5}
     9a0:	3000000b 	andcc	r0, r0, fp
     9a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     9a8:	0b3a0e03 	bleq	e841bc <__Stack_Size+0xe839bc>
     9ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     9b0:	0b201349 	bleq	8056dc <__Stack_Size+0x804edc>
     9b4:	00001301 	andeq	r1, r0, r1, lsl #6
     9b8:	03000531 	movweq	r0, #1329	; 0x531
     9bc:	3b0b3a08 	blcc	2cf1e4 <__Stack_Size+0x2ce9e4>
     9c0:	00134905 	andseq	r4, r3, r5, lsl #18
     9c4:	00343200 	eorseq	r3, r4, r0, lsl #4
     9c8:	0b3a0e03 	bleq	e841dc <__Stack_Size+0xe839dc>
     9cc:	1349053b 	movtne	r0, #38203	; 0x953b
     9d0:	0b330000 	bleq	cc09d8 <__Stack_Size+0xcc01d8>
     9d4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     9d8:	34000006 	strcc	r0, [r0], #-6
     9dc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     9e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     9e4:	17021349 	strne	r1, [r2, -r9, asr #6]
     9e8:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
     9ec:	03193f01 	tsteq	r9, #1, 30
     9f0:	3b0b3a0e 	blcc	2cf230 <__Stack_Size+0x2cea30>
     9f4:	11192705 	tstne	r9, r5, lsl #14
     9f8:	40061201 	andmi	r1, r6, r1, lsl #4
     9fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     a00:	00001301 	andeq	r1, r0, r1, lsl #6
     a04:	03001636 	movweq	r1, #1590	; 0x636
     a08:	3b0b3a0e 	blcc	2cf248 <__Stack_Size+0x2cea48>
     a0c:	00134905 	andseq	r4, r3, r5, lsl #18
     a10:	012e3700 	teqeq	lr, r0, lsl #14
     a14:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a1c:	01111349 	tsteq	r1, r9, asr #6
     a20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a24:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a28:	38000013 	stmdacc	r0, {r0, r1, r4}
     a2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a34:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     a38:	89390000 	ldmdbhi	r9!, {}	; <UNPREDICTABLE>
     a3c:	11000182 	smlabbne	r0, r2, r1, r0
     a40:	00133101 	andseq	r3, r3, r1, lsl #2
     a44:	012e3a00 	teqeq	lr, r0, lsl #20
     a48:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     a4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     a50:	13491927 	movtne	r1, #39207	; 0x9927
     a54:	06120111 			; <UNDEFINED> instruction: 0x06120111
     a58:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     a5c:	00130119 	andseq	r0, r3, r9, lsl r1
     a60:	012e3b00 	teqeq	lr, r0, lsl #22
     a64:	01111331 	tsteq	r1, r1, lsr r3
     a68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a6c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     a70:	3c000013 	stccc	0, cr0, [r0], {19}
     a74:	13310005 	teqne	r1, #5
     a78:	00001702 	andeq	r1, r0, r2, lsl #14
     a7c:	3100343d 	tstcc	r0, sp, lsr r4
     a80:	00170213 	andseq	r0, r7, r3, lsl r2
     a84:	00343e00 	eorseq	r3, r4, r0, lsl #28
     a88:	0b3a0e03 	bleq	e8429c <__Stack_Size+0xe83a9c>
     a8c:	1349053b 	movtne	r0, #38203	; 0x953b
     a90:	0000061c 	andeq	r0, r0, ip, lsl r6
     a94:	0300343f 	movweq	r3, #1087	; 0x43f
     a98:	3b0b3a0e 	blcc	2cf2d8 <__Stack_Size+0x2cead8>
     a9c:	3f13490b 	svccc	0x0013490b
     aa0:	00180219 	andseq	r0, r8, r9, lsl r2
     aa4:	012e4000 	teqeq	lr, r0
     aa8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     aac:	0b3b0b3a 	bleq	ec379c <__Stack_Size+0xec2f9c>
     ab0:	13491927 	movtne	r1, #39207	; 0x9927
     ab4:	1301193c 	movwne	r1, #6460	; 0x193c
     ab8:	05410000 	strbeq	r0, [r1, #-0]
     abc:	00134900 	andseq	r4, r3, r0, lsl #18
     ac0:	012e4200 	teqeq	lr, r0, lsl #4
     ac4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ac8:	13491927 	movtne	r1, #39207	; 0x9927
     acc:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
     ad0:	00001301 	andeq	r1, r0, r1, lsl #6
     ad4:	3f012e43 	svccc	0x00012e43
     ad8:	3a0e0319 	bcc	381744 <__Stack_Size+0x380f44>
     adc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     ae0:	01193c19 	tsteq	r9, r9, lsl ip
     ae4:	44000013 	strmi	r0, [r0], #-19
     ae8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     aec:	0b3a0e03 	bleq	e84300 <__Stack_Size+0xe83b00>
     af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     af4:	0000193c 	andeq	r1, r0, ip, lsr r9
     af8:	01110100 	tsteq	r1, r0, lsl #2
     afc:	0b130e25 	bleq	4c4398 <__Stack_Size+0x4c3b98>
     b00:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b04:	01111755 	tsteq	r1, r5, asr r7
     b08:	00001710 	andeq	r1, r0, r0, lsl r7
     b0c:	0b002402 	bleq	9b1c <__Stack_Size+0x931c>
     b10:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b14:	0300000e 	movweq	r0, #14
     b18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b1c:	0b3b0b3a 	bleq	ec380c <__Stack_Size+0xec300c>
     b20:	00001349 	andeq	r1, r0, r9, asr #6
     b24:	0b002404 	bleq	9b3c <__Stack_Size+0x933c>
     b28:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     b2c:	05000008 	streq	r0, [r0, #-8]
     b30:	08030016 	stmdaeq	r3, {r1, r2, r4}
     b34:	0b3b0b3a 	bleq	ec3824 <__Stack_Size+0xec3024>
     b38:	00001349 	andeq	r1, r0, r9, asr #6
     b3c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
     b40:	07000013 	smladeq	r0, r3, r0, r0
     b44:	0b0b0104 	bleq	2c0f5c <__Stack_Size+0x2c075c>
     b48:	0b3b0b3a 	bleq	ec3838 <__Stack_Size+0xec3038>
     b4c:	00001301 	andeq	r1, r0, r1, lsl #6
     b50:	03002808 	movweq	r2, #2056	; 0x808
     b54:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     b58:	000f0900 	andeq	r0, pc, r0, lsl #18
     b5c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     b60:	0b000f0a 	bleq	4790 <__Stack_Size+0x3f90>
     b64:	0013490b 	andseq	r4, r3, fp, lsl #18
     b68:	00260b00 	eoreq	r0, r6, r0, lsl #22
     b6c:	00001349 	andeq	r1, r0, r9, asr #6
     b70:	0301130c 	movweq	r1, #4876	; 0x130c
     b74:	3a0b0b0e 	bcc	2c37b4 <__Stack_Size+0x2c2fb4>
     b78:	010b3b0b 	tsteq	fp, fp, lsl #22
     b7c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     b80:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     b84:	0b3b0b3a 	bleq	ec3874 <__Stack_Size+0xec3074>
     b88:	0b381349 	bleq	e058b4 <__Stack_Size+0xe050b4>
     b8c:	150e0000 	strne	r0, [lr, #-0]
     b90:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     b94:	00130113 	andseq	r0, r3, r3, lsl r1
     b98:	00050f00 	andeq	r0, r5, r0, lsl #30
     b9c:	00001349 	andeq	r1, r0, r9, asr #6
     ba0:	03011310 	movweq	r1, #4880	; 0x1310
     ba4:	3a0b0b08 	bcc	2c37cc <__Stack_Size+0x2c2fcc>
     ba8:	010b3b0b 	tsteq	fp, fp, lsl #22
     bac:	11000013 	tstne	r0, r3, lsl r0
     bb0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     bb4:	0b3b0b3a 	bleq	ec38a4 <__Stack_Size+0xec30a4>
     bb8:	0b381349 	bleq	e058e4 <__Stack_Size+0xe050e4>
     bbc:	17120000 	ldrne	r0, [r2, -r0]
     bc0:	3a0b0b01 	bcc	2c37cc <__Stack_Size+0x2c2fcc>
     bc4:	010b3b0b 	tsteq	fp, fp, lsl #22
     bc8:	13000013 	movwne	r0, #19
     bcc:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     bd0:	0b3b0b3a 	bleq	ec38c0 <__Stack_Size+0xec30c0>
     bd4:	00001349 	andeq	r1, r0, r9, asr #6
     bd8:	03010414 	movweq	r0, #5140	; 0x1414
     bdc:	3a0b0b0e 	bcc	2c381c <__Stack_Size+0x2c301c>
     be0:	010b3b0b 	tsteq	fp, fp, lsl #22
     be4:	15000013 	strne	r0, [r0, #-19]
     be8:	08030028 	stmdaeq	r3, {r3, r5}
     bec:	00000d1c 	andeq	r0, r0, ip, lsl sp
     bf0:	0b011316 	bleq	45850 <__Stack_Size+0x45050>
     bf4:	3b0b3a0b 	blcc	2cf428 <__Stack_Size+0x2cec28>
     bf8:	0013010b 	andseq	r0, r3, fp, lsl #2
     bfc:	01011700 	tsteq	r1, r0, lsl #14
     c00:	13011349 	movwne	r1, #4937	; 0x1349
     c04:	21180000 	tstcs	r8, r0
     c08:	2f134900 	svccs	0x00134900
     c0c:	1900000b 	stmdbne	r0, {r0, r1, r3}
     c10:	13490021 	movtne	r0, #36897	; 0x9021
     c14:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     c18:	03193f01 	tsteq	r9, #1, 30
     c1c:	3b0b3a0e 	blcc	2cf45c <__Stack_Size+0x2cec5c>
     c20:	1119270b 	tstne	r9, fp, lsl #14
     c24:	40061201 	andmi	r1, r6, r1, lsl #4
     c28:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c2c:	00001301 	andeq	r1, r0, r1, lsl #6
     c30:	0182891b 	orreq	r8, r2, fp, lsl r9
     c34:	31011101 	tstcc	r1, r1, lsl #2
     c38:	00130113 	andseq	r0, r3, r3, lsl r1
     c3c:	828a1c00 	addhi	r1, sl, #0, 24
     c40:	18020001 	stmdane	r2, {r0}
     c44:	00184291 	mulseq	r8, r1, r2
     c48:	82891d00 	addhi	r1, r9, #0, 26
     c4c:	01110101 	tsteq	r1, r1, lsl #2
     c50:	31194295 			; <UNDEFINED> instruction: 0x31194295
     c54:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     c58:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c5c:	0b3a0e03 	bleq	e84470 <__Stack_Size+0xe83c70>
     c60:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     c64:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c68:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c6c:	00130119 	andseq	r0, r3, r9, lsl r1
     c70:	00341f00 	eorseq	r1, r4, r0, lsl #30
     c74:	0b3a0e03 	bleq	e84488 <__Stack_Size+0xe83c88>
     c78:	1349053b 	movtne	r0, #38203	; 0x953b
     c7c:	00001702 	andeq	r1, r0, r2, lsl #14
     c80:	01828920 	orreq	r8, r2, r0, lsr #18
     c84:	31011100 	mrscc	r1, (UNDEF: 17)
     c88:	21000013 	tstcs	r0, r3, lsl r0
     c8c:	00018289 	andeq	r8, r1, r9, lsl #5
     c90:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
     c94:	00133119 	andseq	r3, r3, r9, lsl r1
     c98:	002e2200 	eoreq	r2, lr, r0, lsl #4
     c9c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ca0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ca4:	01111927 	tsteq	r1, r7, lsr #18
     ca8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cac:	00194297 	mulseq	r9, r7, r2
     cb0:	012e2300 	teqeq	lr, r0, lsl #6
     cb4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cbc:	13491927 	movtne	r1, #39207	; 0x9927
     cc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cc4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     cc8:	00130119 	andseq	r0, r3, r9, lsl r1
     ccc:	00052400 	andeq	r2, r5, r0, lsl #8
     cd0:	0b3a0e03 	bleq	e844e4 <__Stack_Size+0xe83ce4>
     cd4:	1349053b 	movtne	r0, #38203	; 0x953b
     cd8:	00001702 	andeq	r1, r0, r2, lsl #14
     cdc:	03003425 	movweq	r3, #1061	; 0x425
     ce0:	3b0b3a08 	blcc	2cf508 <__Stack_Size+0x2ced08>
     ce4:	02134905 	andseq	r4, r3, #81920	; 0x14000
     ce8:	26000017 			; <UNDEFINED> instruction: 0x26000017
     cec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cf0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cf4:	00001349 	andeq	r1, r0, r9, asr #6
     cf8:	01828927 	orreq	r8, r2, r7, lsr #18
     cfc:	31011101 	tstcc	r1, r1, lsl #2
     d00:	28000013 	stmdacs	r0, {r0, r1, r4}
     d04:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d08:	0b3a0e03 	bleq	e8451c <__Stack_Size+0xe83d1c>
     d0c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     d10:	01111349 	tsteq	r1, r9, asr #6
     d14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d1c:	29000013 	stmdbcs	r0, {r0, r1, r4}
     d20:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d24:	0b3b0b3a 	bleq	ec3a14 <__Stack_Size+0xec3214>
     d28:	17021349 	strne	r1, [r2, -r9, asr #6]
     d2c:	0b2a0000 	bleq	a80d34 <__Stack_Size+0xa80534>
     d30:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     d34:	00130106 	andseq	r0, r3, r6, lsl #2
     d38:	00342b00 	eorseq	r2, r4, r0, lsl #22
     d3c:	0b3a0e03 	bleq	e84550 <__Stack_Size+0xe83d50>
     d40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     d44:	00001802 	andeq	r1, r0, r2, lsl #16
     d48:	0300342c 	movweq	r3, #1068	; 0x42c
     d4c:	3b0b3a08 	blcc	2cf574 <__Stack_Size+0x2ced74>
     d50:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d54:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
     d58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     d5c:	0b3a0e03 	bleq	e84570 <__Stack_Size+0xe83d70>
     d60:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     d64:	01111349 	tsteq	r1, r9, asr #6
     d68:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d6c:	00194297 	mulseq	r9, r7, r2
     d70:	00052e00 	andeq	r2, r5, r0, lsl #28
     d74:	0b3a0e03 	bleq	e84588 <__Stack_Size+0xe83d88>
     d78:	1349053b 	movtne	r0, #38203	; 0x953b
     d7c:	00001802 	andeq	r1, r0, r2, lsl #16
     d80:	3f002e2f 	svccc	0x00002e2f
     d84:	3a0e0319 	bcc	3819f0 <__Stack_Size+0x3811f0>
     d88:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d8c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     d90:	97184006 	ldrls	r4, [r8, -r6]
     d94:	00001942 	andeq	r1, r0, r2, asr #18
     d98:	3f002e30 	svccc	0x00002e30
     d9c:	3a0e0319 	bcc	381a08 <__Stack_Size+0x381208>
     da0:	11053b0b 	tstne	r5, fp, lsl #22
     da4:	40061201 	andmi	r1, r6, r1, lsl #4
     da8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dac:	21310000 	teqcs	r1, r0
     db0:	2f134900 	svccs	0x00134900
     db4:	32000005 	andcc	r0, r0, #5
     db8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     dbc:	0b3b0b3a 	bleq	ec3aac <__Stack_Size+0xec32ac>
     dc0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     dc4:	0000193c 	andeq	r1, r0, ip, lsr r9
     dc8:	03003433 	movweq	r3, #1075	; 0x433
     dcc:	3b0b3a0e 	blcc	2cf60c <__Stack_Size+0x2cee0c>
     dd0:	3f13490b 	svccc	0x0013490b
     dd4:	00180219 	andseq	r0, r8, r9, lsl r2
     dd8:	00343400 	eorseq	r3, r4, r0, lsl #8
     ddc:	0b3a0803 	bleq	e82df0 <__Stack_Size+0xe825f0>
     de0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     de4:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     de8:	2e350000 	cdpcs	0, 3, cr0, cr5, cr0, {0}
     dec:	03193f01 	tsteq	r9, #1, 30
     df0:	3b0b3a0e 	blcc	2cf630 <__Stack_Size+0x2cee30>
     df4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     df8:	01193c13 	tsteq	r9, r3, lsl ip
     dfc:	36000013 			; <UNDEFINED> instruction: 0x36000013
     e00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e04:	0b3a0e03 	bleq	e84618 <__Stack_Size+0xe83e18>
     e08:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e0c:	1301193c 	movwne	r1, #6460	; 0x193c
     e10:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
     e14:	03193f00 	tsteq	r9, #0, 30
     e18:	3b0b3a0e 	blcc	2cf658 <__Stack_Size+0x2cee58>
     e1c:	3c192705 	ldccc	7, cr2, [r9], {5}
     e20:	38000019 	stmdacc	r0, {r0, r3, r4}
     e24:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     e28:	0b3a0e03 	bleq	e8463c <__Stack_Size+0xe83e3c>
     e2c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     e30:	0000193c 	andeq	r1, r0, ip, lsr r9
     e34:	3f012e39 	svccc	0x00012e39
     e38:	3a0e0319 	bcc	381aa4 <__Stack_Size+0x3812a4>
     e3c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     e40:	3c134919 	ldccc	9, cr4, [r3], {25}
     e44:	00130119 	andseq	r0, r3, r9, lsl r1
     e48:	012e3a00 	teqeq	lr, r0, lsl #20
     e4c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e50:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e54:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     e58:	00001301 	andeq	r1, r0, r1, lsl #6
     e5c:	0000183b 	andeq	r1, r0, fp, lsr r8
     e60:	002e3c00 	eoreq	r3, lr, r0, lsl #24
     e64:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e68:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     e6c:	13491927 	movtne	r1, #39207	; 0x9927
     e70:	0000193c 	andeq	r1, r0, ip, lsr r9
     e74:	01110100 	tsteq	r1, r0, lsl #2
     e78:	0b130e25 	bleq	4c4714 <__Stack_Size+0x4c3f14>
     e7c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e80:	01111755 	tsteq	r1, r5, asr r7
     e84:	00001710 	andeq	r1, r0, r0, lsl r7
     e88:	0b002402 	bleq	9e98 <__Stack_Size+0x9698>
     e8c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e90:	0300000e 	movweq	r0, #14
     e94:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e98:	0b3b0b3a 	bleq	ec3b88 <__Stack_Size+0xec3388>
     e9c:	00001349 	andeq	r1, r0, r9, asr #6
     ea0:	0b002404 	bleq	9eb8 <__Stack_Size+0x96b8>
     ea4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ea8:	05000008 	streq	r0, [r0, #-8]
     eac:	0e03012e 	adfeqsp	f0, f3, #0.5
     eb0:	0b3b0b3a 	bleq	ec3ba0 <__Stack_Size+0xec33a0>
     eb4:	0b201927 	bleq	807358 <__Stack_Size+0x806b58>
     eb8:	00001301 	andeq	r1, r0, r1, lsl #6
     ebc:	03000506 	movweq	r0, #1286	; 0x506
     ec0:	3b0b3a08 	blcc	2cf6e8 <__Stack_Size+0x2ceee8>
     ec4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ec8:	000f0700 	andeq	r0, pc, r0, lsl #14
     ecc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ed0:	26080000 	strcs	r0, [r8], -r0
     ed4:	00134900 	andseq	r4, r3, r0, lsl #18
     ed8:	00340900 	eorseq	r0, r4, r0, lsl #18
     edc:	0b3a0803 	bleq	e82ef0 <__Stack_Size+0xe826f0>
     ee0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ee4:	010a0000 	mrseq	r0, (UNDEF: 10)
     ee8:	01134901 	tsteq	r3, r1, lsl #18
     eec:	0b000013 	bleq	f40 <__Stack_Size+0x740>
     ef0:	13490021 	movtne	r0, #36897	; 0x9021
     ef4:	00000b2f 	andeq	r0, r0, pc, lsr #22
     ef8:	0300340c 	movweq	r3, #1036	; 0x40c
     efc:	3b0b3a0e 	blcc	2cf73c <__Stack_Size+0x2cef3c>
     f00:	0013490b 	andseq	r4, r3, fp, lsl #18
     f04:	012e0d00 	teqeq	lr, r0, lsl #26
     f08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f0c:	0b3b0b3a 	bleq	ec3bfc <__Stack_Size+0xec33fc>
     f10:	01111927 	tsteq	r1, r7, lsr #18
     f14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     f1c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     f20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     f24:	0b3b0b3a 	bleq	ec3c14 <__Stack_Size+0xec3414>
     f28:	17021349 	strne	r1, [r2, -r9, asr #6]
     f2c:	050f0000 	streq	r0, [pc, #-0]	; f34 <__Stack_Size+0x734>
     f30:	3a080300 	bcc	201b38 <__Stack_Size+0x201338>
     f34:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	00170213 	andseq	r0, r7, r3, lsl r2
     f3c:	00341000 	eorseq	r1, r4, r0
     f40:	0b3a0803 	bleq	e82f54 <__Stack_Size+0xe82754>
     f44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f48:	00001802 	andeq	r1, r0, r2, lsl #16
     f4c:	03003411 	movweq	r3, #1041	; 0x411
     f50:	3b0b3a08 	blcc	2cf778 <__Stack_Size+0x2cef78>
     f54:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f58:	12000017 	andne	r0, r0, #23
     f5c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     f60:	17550152 			; <UNDEFINED> instruction: 0x17550152
     f64:	0b590b58 	bleq	1643ccc <__Stack_Size+0x16434cc>
     f68:	00001301 	andeq	r1, r0, r1, lsl #6
     f6c:	31000513 	tstcc	r0, r3, lsl r5
     f70:	00170213 	andseq	r0, r7, r3, lsl r2
     f74:	010b1400 	tsteq	fp, r0, lsl #8
     f78:	13011755 	movwne	r1, #5973	; 0x1755
     f7c:	05150000 	ldreq	r0, [r5, #-0]
     f80:	00133100 	andseq	r3, r3, r0, lsl #2
     f84:	010b1600 	tsteq	fp, r0, lsl #12
     f88:	00001755 	andeq	r1, r0, r5, asr r7
     f8c:	31003417 	tstcc	r0, r7, lsl r4
     f90:	00180213 	andseq	r0, r8, r3, lsl r2
     f94:	82891800 	addhi	r1, r9, #0, 16
     f98:	01110101 	tsteq	r1, r1, lsl #2
     f9c:	13011331 	movwne	r1, #4913	; 0x1331
     fa0:	8a190000 	bhi	640fa8 <__Stack_Size+0x6407a8>
     fa4:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     fa8:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     fac:	891a0000 	ldmdbhi	sl, {}	; <UNPREDICTABLE>
     fb0:	11010182 	smlabbne	r1, r2, r1, r0
     fb4:	00133101 	andseq	r3, r3, r1, lsl #2
     fb8:	011d1b00 	tsteq	sp, r0, lsl #22
     fbc:	01111331 	tsteq	r1, r1, lsr r3
     fc0:	0b580612 	bleq	1602810 <__Stack_Size+0x1602010>
     fc4:	13010b59 	movwne	r0, #7001	; 0x1b59
     fc8:	0b1c0000 	bleq	700fd0 <__Stack_Size+0x7007d0>
     fcc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     fd0:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
     fd4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec34c8>
     fdc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     fe0:	0000193c 	andeq	r1, r0, ip, lsr r9
     fe4:	0300341e 	movweq	r3, #1054	; 0x41e
     fe8:	3b0b3a0e 	blcc	2cf828 <__Stack_Size+0x2cf028>
     fec:	3f13490b 	svccc	0x0013490b
     ff0:	00180219 	andseq	r0, r8, r9, lsl r2
     ff4:	012e1f00 	teqeq	lr, r0, lsl #30
     ff8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     ffc:	0b3b0b3a 	bleq	ec3cec <__Stack_Size+0xec34ec>
    1000:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1004:	00001301 	andeq	r1, r0, r1, lsl #6
    1008:	49000520 	stmdbmi	r0, {r5, r8, sl}
    100c:	21000013 	tstcs	r0, r3, lsl r0
    1010:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1014:	0b3a0e03 	bleq	e84828 <__Stack_Size+0xe84028>
    1018:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    101c:	0000193c 	andeq	r1, r0, ip, lsr r9
    1020:	01110100 	tsteq	r1, r0, lsl #2
    1024:	0b130e25 	bleq	4c48c0 <__Stack_Size+0x4c40c0>
    1028:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    102c:	01111755 	tsteq	r1, r5, asr r7
    1030:	00001710 	andeq	r1, r0, r0, lsl r7
    1034:	0b002402 	bleq	a044 <__Stack_Size+0x9844>
    1038:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    103c:	0300000e 	movweq	r0, #14
    1040:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1044:	0b3b0b3a 	bleq	ec3d34 <__Stack_Size+0xec3534>
    1048:	00001349 	andeq	r1, r0, r9, asr #6
    104c:	0b002404 	bleq	a064 <__Stack_Size+0x9864>
    1050:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1054:	05000008 	streq	r0, [r0, #-8]
    1058:	0b0b000f 	bleq	2c109c <__Stack_Size+0x2c089c>
    105c:	13060000 	movwne	r0, #24576	; 0x6000
    1060:	0b0e0301 	bleq	381c6c <__Stack_Size+0x38146c>
    1064:	3b0b3a0b 	blcc	2cf898 <__Stack_Size+0x2cf098>
    1068:	0013010b 	andseq	r0, r3, fp, lsl #2
    106c:	000d0700 	andeq	r0, sp, r0, lsl #14
    1070:	0b3a0803 	bleq	e83084 <__Stack_Size+0xe82884>
    1074:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1078:	00000b38 	andeq	r0, r0, r8, lsr fp
    107c:	49010108 	stmdbmi	r1, {r3, r8}
    1080:	00130113 	andseq	r0, r3, r3, lsl r1
    1084:	00210900 	eoreq	r0, r1, r0, lsl #18
    1088:	0b2f1349 	bleq	bc5db4 <__Stack_Size+0xbc55b4>
    108c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
    1090:	3a0e0301 	bcc	381c9c <__Stack_Size+0x38149c>
    1094:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1098:	010b2019 	tsteq	fp, r9, lsl r0
    109c:	0b000013 	bleq	10f0 <__Stack_Size+0x8f0>
    10a0:	08030005 	stmdaeq	r3, {r0, r2}
    10a4:	0b3b0b3a 	bleq	ec3d94 <__Stack_Size+0xec3594>
    10a8:	00001349 	andeq	r1, r0, r9, asr #6
    10ac:	0b000f0c 	bleq	4ce4 <__Stack_Size+0x44e4>
    10b0:	0013490b 	andseq	r4, r3, fp, lsl #18
    10b4:	00260d00 	eoreq	r0, r6, r0, lsl #26
    10b8:	00001349 	andeq	r1, r0, r9, asr #6
    10bc:	3f012e0e 	svccc	0x00012e0e
    10c0:	3a0e0319 	bcc	381d2c <__Stack_Size+0x38152c>
    10c4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    10c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    10cc:	97184006 	ldrls	r4, [r8, -r6]
    10d0:	13011942 	movwne	r1, #6466	; 0x1942
    10d4:	050f0000 	streq	r0, [pc, #-0]	; 10dc <__Stack_Size+0x8dc>
    10d8:	3a080300 	bcc	201ce0 <__Stack_Size+0x2014e0>
    10dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10e0:	00170213 	andseq	r0, r7, r3, lsl r2
    10e4:	011d1000 	tsteq	sp, r0
    10e8:	01111331 	tsteq	r1, r1, lsr r3
    10ec:	0b580612 	bleq	160293c <__Stack_Size+0x160213c>
    10f0:	13010b59 	movwne	r0, #7001	; 0x1b59
    10f4:	05110000 	ldreq	r0, [r1, #-0]
    10f8:	02133100 	andseq	r3, r3, #0, 2
    10fc:	12000017 	andne	r0, r0, #23
    1100:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1104:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1108:	0b590b58 	bleq	1643e70 <__Stack_Size+0x1643670>
    110c:	00001301 	andeq	r1, r0, r1, lsl #6
    1110:	31000513 	tstcc	r0, r3, lsl r5
    1114:	14000013 	strne	r0, [r0], #-19
    1118:	01018289 	smlabbeq	r1, r9, r2, r8
    111c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1120:	00001301 	andeq	r1, r0, r1, lsl #6
    1124:	01828a15 	orreq	r8, r2, r5, lsl sl
    1128:	91180200 	tstls	r8, r0, lsl #4
    112c:	00001842 	andeq	r1, r0, r2, asr #16
    1130:	01828916 	orreq	r8, r2, r6, lsl r9
    1134:	95011101 	strls	r1, [r1, #-257]	; 0x101
    1138:	13311942 	teqne	r1, #1081344	; 0x108000
    113c:	34170000 	ldrcc	r0, [r7], #-0
    1140:	3a080300 	bcc	201d48 <__Stack_Size+0x201548>
    1144:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1148:	00180213 	andseq	r0, r8, r3, lsl r2
    114c:	82891800 	addhi	r1, r9, #0, 16
    1150:	01110101 	tsteq	r1, r1, lsl #2
    1154:	00001331 	andeq	r1, r0, r1, lsr r3
    1158:	03003419 	movweq	r3, #1049	; 0x419
    115c:	3b0b3a0e 	blcc	2cf99c <__Stack_Size+0x2cf19c>
    1160:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1164:	1a000017 	bne	11c8 <__Stack_Size+0x9c8>
    1168:	13310005 	teqne	r1, #5
    116c:	00001802 	andeq	r1, r0, r2, lsl #16
    1170:	3f012e1b 	svccc	0x00012e1b
    1174:	3a0e0319 	bcc	381de0 <__Stack_Size+0x3815e0>
    1178:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    117c:	11134919 	tstne	r3, r9, lsl r9
    1180:	40061201 	andmi	r1, r6, r1, lsl #4
    1184:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1188:	00001301 	andeq	r1, r0, r1, lsl #6
    118c:	0300051c 	movweq	r0, #1308	; 0x51c
    1190:	3b0b3a0e 	blcc	2cf9d0 <__Stack_Size+0x2cf1d0>
    1194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1198:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    119c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    11a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11a4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    11a8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    11ac:	03193f01 	tsteq	r9, #1, 30
    11b0:	3b0b3a0e 	blcc	2cf9f0 <__Stack_Size+0x2cf1f0>
    11b4:	11192705 	tstne	r9, r5, lsl #14
    11b8:	40061201 	andmi	r1, r6, r1, lsl #4
    11bc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11c0:	00001301 	andeq	r1, r0, r1, lsl #6
    11c4:	0300051f 	movweq	r0, #1311	; 0x51f
    11c8:	3b0b3a0e 	blcc	2cfa08 <__Stack_Size+0x2cf208>
    11cc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11d0:	20000017 	andcs	r0, r0, r7, lsl r0
    11d4:	08030005 	stmdaeq	r3, {r0, r2}
    11d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11dc:	17021349 	strne	r1, [r2, -r9, asr #6]
    11e0:	34210000 	strtcc	r0, [r1], #-0
    11e4:	3a080300 	bcc	201dec <__Stack_Size+0x2015ec>
    11e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ec:	00170213 	andseq	r0, r7, r3, lsl r2
    11f0:	011d2200 	tsteq	sp, r0, lsl #4
    11f4:	01111331 	tsteq	r1, r1, lsr r3
    11f8:	0b580612 	bleq	1602a48 <__Stack_Size+0x1602248>
    11fc:	13010559 	movwne	r0, #5465	; 0x1559
    1200:	0b230000 	bleq	8c1208 <__Stack_Size+0x8c0a08>
    1204:	01175501 	tsteq	r7, r1, lsl #10
    1208:	24000013 	strcs	r0, [r0], #-19
    120c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1210:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1214:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    1218:	34250000 	strtcc	r0, [r5], #-0
    121c:	3a0e0300 	bcc	381e24 <__Stack_Size+0x381624>
    1220:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1224:	00180213 	andseq	r0, r8, r3, lsl r2
    1228:	00342600 	eorseq	r2, r4, r0, lsl #12
    122c:	0b3a0e03 	bleq	e84a40 <__Stack_Size+0xe84240>
    1230:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1234:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1238:	34270000 	strtcc	r0, [r7], #-0
    123c:	3a0e0300 	bcc	381e44 <__Stack_Size+0x381644>
    1240:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1244:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1248:	28000018 	stmdacs	r0, {r3, r4}
    124c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1250:	0b3a0e03 	bleq	e84a64 <__Stack_Size+0xe84264>
    1254:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1258:	1301193c 	movwne	r1, #6460	; 0x193c
    125c:	05290000 	streq	r0, [r9, #-0]!
    1260:	00134900 	andseq	r4, r3, r0, lsl #18
    1264:	012e2a00 	teqeq	lr, r0, lsl #20
    1268:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    126c:	0b3b0b3a 	bleq	ec3f5c <__Stack_Size+0xec375c>
    1270:	13491927 	movtne	r1, #39207	; 0x9927
    1274:	1301193c 	movwne	r1, #6460	; 0x193c
    1278:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    127c:	03193f01 	tsteq	r9, #1, 30
    1280:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1284:	3c193413 	cfldrscc	mvf3, [r9], {19}
    1288:	00130119 	andseq	r0, r3, r9, lsl r1
    128c:	00262c00 	eoreq	r2, r6, r0, lsl #24
    1290:	01000000 	mrseq	r0, (UNDEF: 0)
    1294:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1298:	0e030b13 	vmoveq.32	d3[0], r0
    129c:	17550e1b 	smmlane	r5, fp, lr, r0
    12a0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    12a4:	24020000 	strcs	r0, [r2], #-0
    12a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12ac:	000e030b 	andeq	r0, lr, fp, lsl #6
    12b0:	00160300 	andseq	r0, r6, r0, lsl #6
    12b4:	0b3a0e03 	bleq	e84ac8 <__Stack_Size+0xe842c8>
    12b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    12bc:	24040000 	strcs	r0, [r4], #-0
    12c0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12c4:	0008030b 	andeq	r0, r8, fp, lsl #6
    12c8:	000f0500 	andeq	r0, pc, r0, lsl #10
    12cc:	00000b0b 	andeq	r0, r0, fp, lsl #22
    12d0:	03011306 	movweq	r1, #4870	; 0x1306
    12d4:	3a0b0b0e 	bcc	2c3f14 <__Stack_Size+0x2c3714>
    12d8:	010b3b0b 	tsteq	fp, fp, lsl #22
    12dc:	07000013 	smladeq	r0, r3, r0, r0
    12e0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    12e4:	0b3b0b3a 	bleq	ec3fd4 <__Stack_Size+0xec37d4>
    12e8:	0b381349 	bleq	e06014 <__Stack_Size+0xe05814>
    12ec:	01080000 	mrseq	r0, (UNDEF: 8)
    12f0:	01134901 	tsteq	r3, r1, lsl #18
    12f4:	09000013 	stmdbeq	r0, {r0, r1, r4}
    12f8:	13490021 	movtne	r0, #36897	; 0x9021
    12fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1300:	03012e0a 	movweq	r2, #7690	; 0x1e0a
    1304:	3b0b3a0e 	blcc	2cfb44 <__Stack_Size+0x2cf344>
    1308:	2019270b 	andscs	r2, r9, fp, lsl #14
    130c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1310:	00050b00 	andeq	r0, r5, r0, lsl #22
    1314:	0b3a0803 	bleq	e83328 <__Stack_Size+0xe82b28>
    1318:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    131c:	0f0c0000 	svceq	0x000c0000
    1320:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1324:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1328:	0e03012e 	adfeqsp	f0, f3, #0.5
    132c:	0b3b0b3a 	bleq	ec401c <__Stack_Size+0xec381c>
    1330:	01111927 	tsteq	r1, r7, lsr #18
    1334:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1338:	01194297 			; <UNDEFINED> instruction: 0x01194297
    133c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1340:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1344:	0b3b0b3a 	bleq	ec4034 <__Stack_Size+0xec3834>
    1348:	17021349 	strne	r1, [r2, -r9, asr #6]
    134c:	340f0000 	strcc	r0, [pc], #-0	; 1354 <__Stack_Size+0xb54>
    1350:	3a080300 	bcc	201f58 <__Stack_Size+0x201758>
    1354:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1358:	00180213 	andseq	r0, r8, r3, lsl r2
    135c:	011d1000 	tsteq	sp, r0
    1360:	01521331 	cmpeq	r2, r1, lsr r3
    1364:	0b581755 	bleq	16070c0 <__Stack_Size+0x16068c0>
    1368:	13010b59 	movwne	r0, #7001	; 0x1b59
    136c:	05110000 	ldreq	r0, [r1, #-0]
    1370:	02133100 	andseq	r3, r3, #0, 2
    1374:	12000017 	andne	r0, r0, #23
    1378:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    137c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1380:	0b590b58 	bleq	16440e8 <__Stack_Size+0x16438e8>
    1384:	00001301 	andeq	r1, r0, r1, lsl #6
    1388:	01828913 	orreq	r8, r2, r3, lsl r9
    138c:	31011101 	tstcc	r1, r1, lsl #2
    1390:	00130113 	andseq	r0, r3, r3, lsl r1
    1394:	828a1400 	addhi	r1, sl, #0, 8
    1398:	18020001 	stmdane	r2, {r0}
    139c:	00184291 	mulseq	r8, r1, r2
    13a0:	82891500 	addhi	r1, r9, #0, 10
    13a4:	01110101 	tsteq	r1, r1, lsl #2
    13a8:	00001331 	andeq	r1, r0, r1, lsr r3
    13ac:	49002616 	stmdbmi	r0, {r1, r2, r4, r9, sl, sp}
    13b0:	17000013 	smladne	r0, r3, r0, r0
    13b4:	08030005 	stmdaeq	r3, {r0, r2}
    13b8:	0b3b0b3a 	bleq	ec40a8 <__Stack_Size+0xec38a8>
    13bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    13c0:	0b180000 	bleq	6013c8 <__Stack_Size+0x600bc8>
    13c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    13c8:	00130106 	andseq	r0, r3, r6, lsl #2
    13cc:	00341900 	eorseq	r1, r4, r0, lsl #18
    13d0:	0b3a0803 	bleq	e833e4 <__Stack_Size+0xe82be4>
    13d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13d8:	00001702 	andeq	r1, r0, r2, lsl #14
    13dc:	03012e1a 	movweq	r2, #7706	; 0x1e1a
    13e0:	3b0b3a08 	blcc	2cfc08 <__Stack_Size+0x2cf408>
    13e4:	2019270b 	andscs	r2, r9, fp, lsl #14
    13e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    13ec:	00051b00 	andeq	r1, r5, r0, lsl #22
    13f0:	0b3a0e03 	bleq	e84c04 <__Stack_Size+0xe84404>
    13f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13f8:	341c0000 	ldrcc	r0, [ip], #-0
    13fc:	3a080300 	bcc	202004 <__Stack_Size+0x201804>
    1400:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1404:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1408:	0111010b 	tsteq	r1, fp, lsl #2
    140c:	00000612 	andeq	r0, r0, r2, lsl r6
    1410:	3100341e 	tstcc	r0, lr, lsl r4
    1414:	00180213 	andseq	r0, r8, r3, lsl r2
    1418:	012e1f00 	teqeq	lr, r0, lsl #30
    141c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1420:	0b3b0b3a 	bleq	ec4110 <__Stack_Size+0xec3910>
    1424:	01111927 	tsteq	r1, r7, lsr #18
    1428:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    142c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1430:	20000013 	andcs	r0, r0, r3, lsl r0
    1434:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1438:	0b3b0b3a 	bleq	ec4128 <__Stack_Size+0xec3928>
    143c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1440:	34210000 	strtcc	r0, [r1], #-0
    1444:	3a0e0300 	bcc	38204c <__Stack_Size+0x38184c>
    1448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    144c:	22000013 	andcs	r0, r0, #19
    1450:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1454:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1458:	3a080301 	bcc	202064 <__Stack_Size+0x201864>
    145c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1460:	20134919 	andscs	r4, r3, r9, lsl r9
    1464:	0013010b 	andseq	r0, r3, fp, lsl #2
    1468:	012e2400 	teqeq	lr, r0, lsl #8
    146c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1470:	0b3b0b3a 	bleq	ec4160 <__Stack_Size+0xec3960>
    1474:	13491927 	movtne	r1, #39207	; 0x9927
    1478:	06120111 			; <UNDEFINED> instruction: 0x06120111
    147c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    1480:	00130119 	andseq	r0, r3, r9, lsl r1
    1484:	00052500 	andeq	r2, r5, r0, lsl #10
    1488:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    148c:	34260000 	strtcc	r0, [r6], #-0
    1490:	02133100 	andseq	r3, r3, #0, 2
    1494:	27000017 	smladcs	r0, r7, r0, r0
    1498:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    149c:	0b3b0b3a 	bleq	ec418c <__Stack_Size+0xec398c>
    14a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    14a4:	0000193c 	andeq	r1, r0, ip, lsr r9
    14a8:	3f012e28 	svccc	0x00012e28
    14ac:	3a0e0319 	bcc	382118 <__Stack_Size+0x381918>
    14b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    14b4:	01193c19 	tsteq	r9, r9, lsl ip
    14b8:	29000013 	stmdbcs	r0, {r0, r1, r4}
    14bc:	13490005 	movtne	r0, #36869	; 0x9005
    14c0:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    14c4:	03193f01 	tsteq	r9, #1, 30
    14c8:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    14cc:	3c193413 	cfldrscc	mvf3, [r9], {19}
    14d0:	00130119 	andseq	r0, r3, r9, lsl r1
    14d4:	00262b00 	eoreq	r2, r6, r0, lsl #22
    14d8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    14dc:	03193f01 	tsteq	r9, #1, 30
    14e0:	3b0b3a0e 	blcc	2cfd20 <__Stack_Size+0x2cf520>
    14e4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    14e8:	01193c13 	tsteq	r9, r3, lsl ip
    14ec:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    14f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    14f4:	0b3a0e03 	bleq	e84d08 <__Stack_Size+0xe84508>
    14f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    14fc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    1500:	01000000 	mrseq	r0, (UNDEF: 0)
    1504:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1508:	0e030b13 	vmoveq.32	d3[0], r0
    150c:	17550e1b 	smmlane	r5, fp, lr, r0
    1510:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1514:	24020000 	strcs	r0, [r2], #-0
    1518:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    151c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1520:	00160300 	andseq	r0, r6, r0, lsl #6
    1524:	0b3a0e03 	bleq	e84d38 <__Stack_Size+0xe84538>
    1528:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    152c:	24040000 	strcs	r0, [r4], #-0
    1530:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1534:	0008030b 	andeq	r0, r8, fp, lsl #6
    1538:	000f0500 	andeq	r0, pc, r0, lsl #10
    153c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1540:	3f012e06 	svccc	0x00012e06
    1544:	3a0e0319 	bcc	3821b0 <__Stack_Size+0x3819b0>
    1548:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    154c:	010b2019 	tsteq	fp, r9, lsl r0
    1550:	07000013 	smladeq	r0, r3, r0, r0
    1554:	08030005 	stmdaeq	r3, {r0, r2}
    1558:	0b3b0b3a 	bleq	ec4248 <__Stack_Size+0xec3a48>
    155c:	00001349 	andeq	r1, r0, r9, asr #6
    1560:	03000508 	movweq	r0, #1288	; 0x508
    1564:	3b0b3a0e 	blcc	2cfda4 <__Stack_Size+0x2cf5a4>
    1568:	0013490b 	andseq	r4, r3, fp, lsl #18
    156c:	00340900 	eorseq	r0, r4, r0, lsl #18
    1570:	0b3a0e03 	bleq	e84d84 <__Stack_Size+0xe84584>
    1574:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1578:	340a0000 	strcc	r0, [sl], #-0
    157c:	3a080300 	bcc	202184 <__Stack_Size+0x201984>
    1580:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1584:	0b000013 	bleq	15d8 <__Stack_Size+0xdd8>
    1588:	0b0b000f 	bleq	2c15cc <__Stack_Size+0x2c0dcc>
    158c:	00001349 	andeq	r1, r0, r9, asr #6
    1590:	4900260c 	stmdbmi	r0, {r2, r3, r9, sl, sp}
    1594:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1598:	0e03012e 	adfeqsp	f0, f3, #0.5
    159c:	0b3b0b3a 	bleq	ec428c <__Stack_Size+0xec3a8c>
    15a0:	0b201927 	bleq	807a44 <__Stack_Size+0x807244>
    15a4:	00001301 	andeq	r1, r0, r1, lsl #6
    15a8:	31012e0e 	tstcc	r1, lr, lsl #28
    15ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    15b0:	97184006 	ldrls	r4, [r8, -r6]
    15b4:	13011942 	movwne	r1, #6466	; 0x1942
    15b8:	050f0000 	streq	r0, [pc, #-0]	; 15c0 <__Stack_Size+0xdc0>
    15bc:	02133100 	andseq	r3, r3, #0, 2
    15c0:	10000017 	andne	r0, r0, r7, lsl r0
    15c4:	13310034 	teqne	r1, #52	; 0x34
    15c8:	00001702 	andeq	r1, r0, r2, lsl #14
    15cc:	01828911 	orreq	r8, r2, r1, lsl r9
    15d0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    15d4:	13311942 	teqne	r1, #1081344	; 0x108000
    15d8:	8a120000 	bhi	4815e0 <__Stack_Size+0x480de0>
    15dc:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    15e0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    15e4:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    15e8:	03193f01 	tsteq	r9, #1, 30
    15ec:	3b0b3a0e 	blcc	2cfe2c <__Stack_Size+0x2cf62c>
    15f0:	1119270b 	tstne	r9, fp, lsl #14
    15f4:	40061201 	andmi	r1, r6, r1, lsl #4
    15f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    15fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1600:	03000514 	movweq	r0, #1300	; 0x514
    1604:	3b0b3a08 	blcc	2cfe2c <__Stack_Size+0x2cf62c>
    1608:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    160c:	15000018 	strne	r0, [r0, #-24]
    1610:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1614:	0b3b0b3a 	bleq	ec4304 <__Stack_Size+0xec3b04>
    1618:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    161c:	34160000 	ldrcc	r0, [r6], #-0
    1620:	3a080300 	bcc	202228 <__Stack_Size+0x201a28>
    1624:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1628:	00170213 	andseq	r0, r7, r3, lsl r2
    162c:	011d1700 	tsteq	sp, r0, lsl #14
    1630:	01521331 	cmpeq	r2, r1, lsr r3
    1634:	0b581755 	bleq	1607390 <__Stack_Size+0x1606b90>
    1638:	00000b59 	andeq	r0, r0, r9, asr fp
    163c:	31000518 	tstcc	r0, r8, lsl r5
    1640:	00180213 	andseq	r0, r8, r3, lsl r2
    1644:	010b1900 	tsteq	fp, r0, lsl #18
    1648:	00001755 	andeq	r1, r0, r5, asr r7
    164c:	3100341a 	tstcc	r0, sl, lsl r4
    1650:	00180213 	andseq	r0, r8, r3, lsl r2
    1654:	01011b00 	tsteq	r1, r0, lsl #22
    1658:	13011349 	movwne	r1, #4937	; 0x1349
    165c:	211c0000 	tstcs	ip, r0
    1660:	2f134900 	svccs	0x00134900
    1664:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    1668:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    166c:	0b3a0e03 	bleq	e84e80 <__Stack_Size+0xe84680>
    1670:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1674:	01111349 	tsteq	r1, r9, asr #6
    1678:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    167c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1680:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1684:	08030005 	stmdaeq	r3, {r0, r2}
    1688:	0b3b0b3a 	bleq	ec4378 <__Stack_Size+0xec3b78>
    168c:	17021349 	strne	r1, [r2, -r9, asr #6]
    1690:	0b1f0000 	bleq	7c1698 <__Stack_Size+0x7c0e98>
    1694:	20000001 	andcs	r0, r0, r1
    1698:	0111010b 	tsteq	r1, fp, lsl #2
    169c:	00000612 	andeq	r0, r0, r2, lsl r6
    16a0:	03003421 	movweq	r3, #1057	; 0x421
    16a4:	3b0b3a08 	blcc	2cfecc <__Stack_Size+0x2cf6cc>
    16a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    16ac:	22000018 	andcs	r0, r0, #24
    16b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    16b4:	17550152 			; <UNDEFINED> instruction: 0x17550152
    16b8:	0b590b58 	bleq	1644420 <__Stack_Size+0x1643c20>
    16bc:	00001301 	andeq	r1, r0, r1, lsl #6
    16c0:	31011d23 	tstcc	r1, r3, lsr #26
    16c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    16c8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    16cc:	2400000b 	strcs	r0, [r0], #-11
    16d0:	13310005 	teqne	r1, #5
    16d4:	1d250000 	stcne	0, cr0, [r5, #-0]
    16d8:	11133101 	tstne	r3, r1, lsl #2
    16dc:	58061201 	stmdapl	r6, {r0, r9, ip}
    16e0:	010b590b 	tsteq	fp, fp, lsl #18
    16e4:	26000013 			; <UNDEFINED> instruction: 0x26000013
    16e8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    16ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    16f0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    16f4:	00001301 	andeq	r1, r0, r1, lsl #6
    16f8:	31011d27 	tstcc	r1, r7, lsr #26
    16fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1700:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    1704:	28000005 	stmdacs	r0, {r0, r2}
    1708:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    170c:	0b3a0e03 	bleq	e84f20 <__Stack_Size+0xe84720>
    1710:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    1714:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1718:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    171c:	00130119 	andseq	r0, r3, r9, lsl r1
    1720:	00052900 	andeq	r2, r5, r0, lsl #18
    1724:	0b3a0803 	bleq	e83738 <__Stack_Size+0xe82f38>
    1728:	1349053b 	movtne	r0, #38203	; 0x953b
    172c:	00001702 	andeq	r1, r0, r2, lsl #14
    1730:	0300342a 	movweq	r3, #1066	; 0x42a
    1734:	3b0b3a08 	blcc	2cff5c <__Stack_Size+0x2cf75c>
    1738:	02134905 	andseq	r4, r3, #81920	; 0x14000
    173c:	2b000018 	blcs	17a4 <__Stack_Size+0xfa4>
    1740:	01018289 	smlabbeq	r1, r9, r2, r8
    1744:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1748:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    174c:	3a0e0301 	bcc	382358 <__Stack_Size+0x381b58>
    1750:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1754:	010b2019 	tsteq	fp, r9, lsl r0
    1758:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    175c:	08030005 	stmdaeq	r3, {r0, r2}
    1760:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1764:	00001349 	andeq	r1, r0, r9, asr #6
    1768:	0300342e 	movweq	r3, #1070	; 0x42e
    176c:	3b0b3a08 	blcc	2cff94 <__Stack_Size+0x2cf794>
    1770:	00134905 	andseq	r4, r3, r5, lsl #18
    1774:	011d2f00 	tsteq	sp, r0, lsl #30
    1778:	01521331 	cmpeq	r2, r1, lsr r3
    177c:	0b581755 	bleq	16074d8 <__Stack_Size+0x1606cd8>
    1780:	13010559 	movwne	r0, #5465	; 0x1559
    1784:	05300000 	ldreq	r0, [r0, #-0]!
    1788:	1c133100 	ldfnes	f3, [r3], {-0}
    178c:	3100000b 	tstcc	r0, fp
    1790:	13310034 	teqne	r1, #52	; 0x34
    1794:	34320000 	ldrtcc	r0, [r2], #-0
    1798:	3a0e0300 	bcc	3823a0 <__Stack_Size+0x381ba0>
    179c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17a0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    17a4:	33000018 	movwcc	r0, #24
    17a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    17ac:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    17b0:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    17b4:	0000193c 	andeq	r1, r0, ip, lsr r9
    17b8:	49000534 	stmdbmi	r0, {r2, r4, r5, r8, sl}
    17bc:	00000013 	andeq	r0, r0, r3, lsl r0
    17c0:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    17c4:	030b130e 	movweq	r1, #45838	; 0xb30e
    17c8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    17cc:	10011117 	andne	r1, r1, r7, lsl r1
    17d0:	02000017 	andeq	r0, r0, #23
    17d4:	0b0b0024 	bleq	2c186c <__Stack_Size+0x2c106c>
    17d8:	0e030b3e 	vmoveq.16	d3[0], r0
    17dc:	16030000 	strne	r0, [r3], -r0
    17e0:	3a0e0300 	bcc	3823e8 <__Stack_Size+0x381be8>
    17e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    17e8:	04000013 	streq	r0, [r0], #-19
    17ec:	0b0b0024 	bleq	2c1884 <__Stack_Size+0x2c1084>
    17f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    17f4:	0f050000 	svceq	0x00050000
    17f8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    17fc:	012e0600 	teqeq	lr, r0, lsl #12
    1800:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1804:	0b3b0b3a 	bleq	ec44f4 <__Stack_Size+0xec3cf4>
    1808:	0b201927 	bleq	807cac <__Stack_Size+0x8074ac>
    180c:	00001301 	andeq	r1, r0, r1, lsl #6
    1810:	03000507 	movweq	r0, #1287	; 0x507
    1814:	3b0b3a08 	blcc	2d003c <__Stack_Size+0x2cf83c>
    1818:	0013490b 	andseq	r4, r3, fp, lsl #18
    181c:	00050800 	andeq	r0, r5, r0, lsl #16
    1820:	0b3a0e03 	bleq	e85034 <__Stack_Size+0xe84834>
    1824:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1828:	34090000 	strcc	r0, [r9], #-0
    182c:	3a0e0300 	bcc	382434 <__Stack_Size+0x381c34>
    1830:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1834:	0a000013 	beq	1888 <__Stack_Size+0x1088>
    1838:	08030034 	stmdaeq	r3, {r2, r4, r5}
    183c:	0b3b0b3a 	bleq	ec452c <__Stack_Size+0xec3d2c>
    1840:	00001349 	andeq	r1, r0, r9, asr #6
    1844:	0b000f0b 	bleq	5478 <__Stack_Size+0x4c78>
    1848:	0013490b 	andseq	r4, r3, fp, lsl #18
    184c:	00260c00 	eoreq	r0, r6, r0, lsl #24
    1850:	00001349 	andeq	r1, r0, r9, asr #6
    1854:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1858:	3b0b3a0e 	blcc	2d0098 <__Stack_Size+0x2cf898>
    185c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1860:	010b2013 	tsteq	fp, r3, lsl r0
    1864:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1868:	0e03012e 	adfeqsp	f0, f3, #0.5
    186c:	0b3b0b3a 	bleq	ec455c <__Stack_Size+0xec3d5c>
    1870:	0b201927 	bleq	807d14 <__Stack_Size+0x807514>
    1874:	00001301 	andeq	r1, r0, r1, lsl #6
    1878:	31012e0f 	tstcc	r1, pc, lsl #28
    187c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1880:	97184006 	ldrls	r4, [r8, -r6]
    1884:	13011942 	movwne	r1, #6466	; 0x1942
    1888:	05100000 	ldreq	r0, [r0, #-0]
    188c:	02133100 	andseq	r3, r3, #0, 2
    1890:	11000017 	tstne	r0, r7, lsl r0
    1894:	13310034 	teqne	r1, #52	; 0x34
    1898:	00001702 	andeq	r1, r0, r2, lsl #14
    189c:	01828912 	orreq	r8, r2, r2, lsl r9
    18a0:	95011101 	strls	r1, [r1, #-257]	; 0x101
    18a4:	13311942 	teqne	r1, #1081344	; 0x108000
    18a8:	8a130000 	bhi	4c18b0 <__Stack_Size+0x4c10b0>
    18ac:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    18b0:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    18b4:	01140000 	tsteq	r4, r0
    18b8:	01134901 	tsteq	r3, r1, lsl #18
    18bc:	15000013 	strne	r0, [r0, #-19]
    18c0:	13490021 	movtne	r0, #36897	; 0x9021
    18c4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    18c8:	3f012e16 	svccc	0x00012e16
    18cc:	3a0e0319 	bcc	382538 <__Stack_Size+0x381d38>
    18d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    18d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    18d8:	97184006 	ldrls	r4, [r8, -r6]
    18dc:	13011942 	movwne	r1, #6466	; 0x1942
    18e0:	05170000 	ldreq	r0, [r7, #-0]
    18e4:	3a080300 	bcc	2024ec <__Stack_Size+0x201cec>
    18e8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18ec:	00170213 	andseq	r0, r7, r3, lsl r2
    18f0:	00051800 	andeq	r1, r5, r0, lsl #16
    18f4:	0b3a0e03 	bleq	e85108 <__Stack_Size+0xe84908>
    18f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    18fc:	00001702 	andeq	r1, r0, r2, lsl #14
    1900:	03003419 	movweq	r3, #1049	; 0x419
    1904:	3b0b3a0e 	blcc	2d0144 <__Stack_Size+0x2cf944>
    1908:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    190c:	1a000017 	bne	1970 <__Stack_Size+0x1170>
    1910:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1914:	0b3b0b3a 	bleq	ec4604 <__Stack_Size+0xec3e04>
    1918:	17021349 	strne	r1, [r2, -r9, asr #6]
    191c:	1d1b0000 	ldcne	0, cr0, [fp, #-0]
    1920:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1924:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1928:	010b590b 	tsteq	fp, fp, lsl #18
    192c:	1c000013 	stcne	0, cr0, [r0], {19}
    1930:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1934:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    1938:	11133101 	tstne	r3, r1, lsl #2
    193c:	58061201 	stmdapl	r6, {r0, r9, ip}
    1940:	010b590b 	tsteq	fp, fp, lsl #18
    1944:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    1948:	13310005 	teqne	r1, #5
    194c:	0b1f0000 	bleq	7c1954 <__Stack_Size+0x7c1154>
    1950:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1954:	20000006 	andcs	r0, r0, r6
    1958:	0111010b 	tsteq	r1, fp, lsl #2
    195c:	13010612 	movwne	r0, #5650	; 0x1612
    1960:	1d210000 	stcne	0, cr0, [r1, #-0]
    1964:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1968:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    196c:	000b590b 	andeq	r5, fp, fp, lsl #18
    1970:	00342200 	eorseq	r2, r4, r0, lsl #4
    1974:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1978:	1d230000 	stcne	0, cr0, [r3, #-0]
    197c:	11133101 	tstne	r3, r1, lsl #2
    1980:	58061201 	stmdapl	r6, {r0, r9, ip}
    1984:	000b590b 	andeq	r5, fp, fp, lsl #18
    1988:	82892400 	addhi	r2, r9, #0, 8
    198c:	01110101 	tsteq	r1, r1, lsl #2
    1990:	00001331 	andeq	r1, r0, r1, lsr r3
    1994:	03003425 	movweq	r3, #1061	; 0x425
    1998:	3b0b3a08 	blcc	2d01c0 <__Stack_Size+0x2cf9c0>
    199c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19a0:	26000018 			; <UNDEFINED> instruction: 0x26000018
    19a4:	13310005 	teqne	r1, #5
    19a8:	00001802 	andeq	r1, r0, r2, lsl #16
    19ac:	3f012e27 	svccc	0x00012e27
    19b0:	3a0e0319 	bcc	38261c <__Stack_Size+0x381e1c>
    19b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    19b8:	11134919 	tstne	r3, r9, lsl r9
    19bc:	40061201 	andmi	r1, r6, r1, lsl #4
    19c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    19c4:	00001301 	andeq	r1, r0, r1, lsl #6
    19c8:	03000528 	movweq	r0, #1320	; 0x528
    19cc:	3b0b3a08 	blcc	2d01f4 <__Stack_Size+0x2cf9f4>
    19d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    19d4:	29000018 	stmdbcs	r0, {r3, r4}
    19d8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    19dc:	0b3b0b3a 	bleq	ec46cc <__Stack_Size+0xec3ecc>
    19e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    19e4:	0b2a0000 	bleq	a819ec <__Stack_Size+0xa811ec>
    19e8:	01175501 	tsteq	r7, r1, lsl #10
    19ec:	2b000013 	blcs	1a40 <__Stack_Size+0x1240>
    19f0:	01018289 	smlabbeq	r1, r9, r2, r8
    19f4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    19f8:	00001301 	andeq	r1, r0, r1, lsl #6
    19fc:	0300342c 	movweq	r3, #1068	; 0x42c
    1a00:	3b0b3a0e 	blcc	2d0240 <__Stack_Size+0x2cfa40>
    1a04:	3f13490b 	svccc	0x0013490b
    1a08:	00180219 	andseq	r0, r8, r9, lsl r2
    1a0c:	012e2d00 	teqeq	lr, r0, lsl #26
    1a10:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1a14:	13491927 	movtne	r1, #39207	; 0x9927
    1a18:	193c1934 	ldmdbne	ip!, {r2, r4, r5, r8, fp, ip}
    1a1c:	052e0000 	streq	r0, [lr, #-0]!
    1a20:	00134900 	andseq	r4, r3, r0, lsl #18
    1a24:	11010000 	mrsne	r0, (UNDEF: 1)
    1a28:	130e2501 	movwne	r2, #58625	; 0xe501
    1a2c:	1b0e030b 	blne	382660 <__Stack_Size+0x381e60>
    1a30:	1117550e 	tstne	r7, lr, lsl #10
    1a34:	00171001 	andseq	r1, r7, r1
    1a38:	00240200 	eoreq	r0, r4, r0, lsl #4
    1a3c:	0b3e0b0b 	bleq	f84670 <__Stack_Size+0xf83e70>
    1a40:	00000e03 	andeq	r0, r0, r3, lsl #28
    1a44:	03001603 	movweq	r1, #1539	; 0x603
    1a48:	3b0b3a0e 	blcc	2d0288 <__Stack_Size+0x2cfa88>
    1a4c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1a50:	00240400 	eoreq	r0, r4, r0, lsl #8
    1a54:	0b3e0b0b 	bleq	f84688 <__Stack_Size+0xf83e88>
    1a58:	00000803 	andeq	r0, r0, r3, lsl #16
    1a5c:	3f012e05 	svccc	0x00012e05
    1a60:	3a0e0319 	bcc	3826cc <__Stack_Size+0x381ecc>
    1a64:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1a68:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1a6c:	97184006 	ldrls	r4, [r8, -r6]
    1a70:	13011942 	movwne	r1, #6466	; 0x1942
    1a74:	05060000 	streq	r0, [r6, #-0]
    1a78:	3a0e0300 	bcc	382680 <__Stack_Size+0x381e80>
    1a7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a80:	00170213 	andseq	r0, r7, r3, lsl r2
    1a84:	00050700 	andeq	r0, r5, r0, lsl #14
    1a88:	0b3a0803 	bleq	e83a9c <__Stack_Size+0xe8329c>
    1a8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1a90:	00001702 	andeq	r1, r0, r2, lsl #14
    1a94:	03003408 	movweq	r3, #1032	; 0x408
    1a98:	3b0b3a0e 	blcc	2d02d8 <__Stack_Size+0x2cfad8>
    1a9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1aa0:	09000018 	stmdbeq	r0, {r3, r4}
    1aa4:	01018289 	smlabbeq	r1, r9, r2, r8
    1aa8:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1aac:	00001301 	andeq	r1, r0, r1, lsl #6
    1ab0:	01828a0a 	orreq	r8, r2, sl, lsl #20
    1ab4:	91180200 	tstls	r8, r0, lsl #4
    1ab8:	00001842 	andeq	r1, r0, r2, asr #16
    1abc:	0182890b 	orreq	r8, r2, fp, lsl #18
    1ac0:	31011101 	tstcc	r1, r1, lsl #2
    1ac4:	0c000013 	stceq	0, cr0, [r0], {19}
    1ac8:	0b0b000f 	bleq	2c1b0c <__Stack_Size+0x2c130c>
    1acc:	00001349 	andeq	r1, r0, r9, asr #6
    1ad0:	4900260d 	stmdbmi	r0, {r0, r2, r3, r9, sl, sp}
    1ad4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1ad8:	13490101 	movtne	r0, #37121	; 0x9101
    1adc:	00001301 	andeq	r1, r0, r1, lsl #6
    1ae0:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
    1ae4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1ae8:	012e1000 	teqeq	lr, r0
    1aec:	0b3a0e03 	bleq	e85300 <__Stack_Size+0xe84b00>
    1af0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1af4:	13010b20 	movwne	r0, #6944	; 0x1b20
    1af8:	05110000 	ldreq	r0, [r1, #-0]
    1afc:	3a080300 	bcc	202704 <__Stack_Size+0x201f04>
    1b00:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b04:	12000013 	andne	r0, r0, #19
    1b08:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1b0c:	0b3b0b3a 	bleq	ec47fc <__Stack_Size+0xec3ffc>
    1b10:	00001349 	andeq	r1, r0, r9, asr #6
    1b14:	03012e13 	movweq	r2, #7699	; 0x1e13
    1b18:	3b0b3a0e 	blcc	2d0358 <__Stack_Size+0x2cfb58>
    1b1c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1b20:	010b2013 	tsteq	fp, r3, lsl r0
    1b24:	14000013 	strne	r0, [r0], #-19
    1b28:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1b2c:	0b3b0b3a 	bleq	ec481c <__Stack_Size+0xec401c>
    1b30:	00001349 	andeq	r1, r0, r9, asr #6
    1b34:	03003415 	movweq	r3, #1045	; 0x415
    1b38:	3b0b3a08 	blcc	2d0360 <__Stack_Size+0x2cfb60>
    1b3c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    1b40:	1600000a 	strne	r0, [r0], -sl
    1b44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1b48:	0b3a0e03 	bleq	e8535c <__Stack_Size+0xe84b5c>
    1b4c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1b50:	01111349 	tsteq	r1, r9, asr #6
    1b54:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1b58:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1b5c:	17000013 	smladne	r0, r3, r0, r0
    1b60:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1b64:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1b68:	0b590b58 	bleq	16448d0 <__Stack_Size+0x16440d0>
    1b6c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b70:	31000518 	tstcc	r0, r8, lsl r5
    1b74:	00170213 	andseq	r0, r7, r3, lsl r2
    1b78:	010b1900 	tsteq	fp, r0, lsl #18
    1b7c:	00001755 	andeq	r1, r0, r5, asr r7
    1b80:	3100341a 	tstcc	r0, sl, lsl r4
    1b84:	00180213 	andseq	r0, r8, r3, lsl r2
    1b88:	011d1b00 	tsteq	sp, r0, lsl #22
    1b8c:	01111331 	tsteq	r1, r1, lsr r3
    1b90:	0b580612 	bleq	16033e0 <__Stack_Size+0x1602be0>
    1b94:	13010b59 	movwne	r0, #7001	; 0x1b59
    1b98:	0b1c0000 	bleq	701ba0 <__Stack_Size+0x7013a0>
    1b9c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    1ba0:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    1ba4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ba8:	0b3b0b3a 	bleq	ec4898 <__Stack_Size+0xec4098>
    1bac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    1bb0:	0000193c 	andeq	r1, r0, ip, lsr r9
    1bb4:	3f012e1e 	svccc	0x00012e1e
    1bb8:	3a0e0319 	bcc	382824 <__Stack_Size+0x382024>
    1bbc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1bc0:	01193c19 	tsteq	r9, r9, lsl ip
    1bc4:	1f000013 	svcne	0x00000013
    1bc8:	13490005 	movtne	r0, #36869	; 0x9005
    1bcc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1bd0:	03193f01 	tsteq	r9, #1, 30
    1bd4:	3b0b3a0e 	blcc	2d0414 <__Stack_Size+0x2cfc14>
    1bd8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1bdc:	00193c13 	andseq	r3, r9, r3, lsl ip
    1be0:	11010000 	mrsne	r0, (UNDEF: 1)
    1be4:	130e2501 	movwne	r2, #58625	; 0xe501
    1be8:	1b0e030b 	blne	38281c <__Stack_Size+0x38201c>
    1bec:	1117550e 	tstne	r7, lr, lsl #10
    1bf0:	00171001 	andseq	r1, r7, r1
    1bf4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1bf8:	0b3e0b0b 	bleq	f8482c <__Stack_Size+0xf8402c>
    1bfc:	00000803 	andeq	r0, r0, r3, lsl #16
    1c00:	0b002403 	bleq	ac14 <__Stack_Size+0xa414>
    1c04:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c08:	0400000e 	streq	r0, [r0], #-14
    1c0c:	0b0b000f 	bleq	2c1c50 <__Stack_Size+0x2c1450>
    1c10:	0f050000 	svceq	0x00050000
    1c14:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1c18:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1c1c:	0b0b0113 	bleq	2c2070 <__Stack_Size+0x2c1870>
    1c20:	0b3b0b3a 	bleq	ec4910 <__Stack_Size+0xec4110>
    1c24:	00001301 	andeq	r1, r0, r1, lsl #6
    1c28:	03000d07 	movweq	r0, #3335	; 0xd07
    1c2c:	3b0b3a0e 	blcc	2d046c <__Stack_Size+0x2cfc6c>
    1c30:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1c34:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1c38:	13490101 	movtne	r0, #37121	; 0x9101
    1c3c:	00001301 	andeq	r1, r0, r1, lsl #6
    1c40:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
    1c44:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1c48:	00160a00 	andseq	r0, r6, r0, lsl #20
    1c4c:	0b3a0e03 	bleq	e85460 <__Stack_Size+0xe84c60>
    1c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c54:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
    1c58:	03193f01 	tsteq	r9, #1, 30
    1c5c:	3b0b3a0e 	blcc	2d049c <__Stack_Size+0x2cfc9c>
    1c60:	2019270b 	andscs	r2, r9, fp, lsl #14
    1c64:	0013010b 	andseq	r0, r3, fp, lsl #2
    1c68:	00050c00 	andeq	r0, r5, r0, lsl #24
    1c6c:	0b3a0803 	bleq	e83c80 <__Stack_Size+0xe83480>
    1c70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1c74:	050d0000 	streq	r0, [sp, #-0]
    1c78:	3a0e0300 	bcc	382880 <__Stack_Size+0x382080>
    1c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c80:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1c84:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c88:	0b3b0b3a 	bleq	ec4978 <__Stack_Size+0xec4178>
    1c8c:	00001349 	andeq	r1, r0, r9, asr #6
    1c90:	3f012e0f 	svccc	0x00012e0f
    1c94:	3a0e0319 	bcc	382900 <__Stack_Size+0x382100>
    1c98:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1c9c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    1ca0:	97184006 	ldrls	r4, [r8, -r6]
    1ca4:	13011942 	movwne	r1, #6466	; 0x1942
    1ca8:	05100000 	ldreq	r0, [r0, #-0]
    1cac:	3a080300 	bcc	2028b4 <__Stack_Size+0x2020b4>
    1cb0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cb4:	00180213 	andseq	r0, r8, r3, lsl r2
    1cb8:	00051100 	andeq	r1, r5, r0, lsl #2
    1cbc:	0b3a0803 	bleq	e83cd0 <__Stack_Size+0xe834d0>
    1cc0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1cc4:	00001702 	andeq	r1, r0, r2, lsl #14
    1cc8:	03000512 	movweq	r0, #1298	; 0x512
    1ccc:	3b0b3a0e 	blcc	2d050c <__Stack_Size+0x2cfd0c>
    1cd0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1cd4:	13000017 	movwne	r0, #23
    1cd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1cdc:	0b3b0b3a 	bleq	ec49cc <__Stack_Size+0xec41cc>
    1ce0:	17021349 	strne	r1, [r2, -r9, asr #6]
    1ce4:	34140000 	ldrcc	r0, [r4], #-0
    1ce8:	3a080300 	bcc	2028f0 <__Stack_Size+0x2020f0>
    1cec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf0:	00170213 	andseq	r0, r7, r3, lsl r2
    1cf4:	012e1500 	teqeq	lr, r0, lsl #10
    1cf8:	01111331 	tsteq	r1, r1, lsr r3
    1cfc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1d00:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1d04:	16000013 			; <UNDEFINED> instruction: 0x16000013
    1d08:	13310005 	teqne	r1, #5
    1d0c:	00001702 	andeq	r1, r0, r2, lsl #14
    1d10:	31003417 	tstcc	r0, r7, lsl r4
    1d14:	18000013 	stmdane	r0, {r0, r1, r4}
    1d18:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1d1c:	34190000 	ldrcc	r0, [r9], #-0
    1d20:	02133100 	andseq	r3, r3, #0, 2
    1d24:	1a000017 	bne	1d88 <__Stack_Size+0x1588>
    1d28:	01018289 	smlabbeq	r1, r9, r2, r8
    1d2c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1d30:	00001301 	andeq	r1, r0, r1, lsl #6
    1d34:	01828a1b 	orreq	r8, r2, fp, lsl sl
    1d38:	91180200 	tstls	r8, r0, lsl #4
    1d3c:	00001842 	andeq	r1, r0, r2, asr #16
    1d40:	0182891c 	orreq	r8, r2, ip, lsl r9
    1d44:	95011100 	strls	r1, [r1, #-256]	; 0x100
    1d48:	13311942 	teqne	r1, #1081344	; 0x108000
    1d4c:	891d0000 	ldmdbhi	sp, {}	; <UNPREDICTABLE>
    1d50:	11010182 	smlabbne	r1, r2, r1, r0
    1d54:	00133101 	andseq	r3, r3, r1, lsl #2
    1d58:	00341e00 	eorseq	r1, r4, r0, lsl #28
    1d5c:	0b3a0e03 	bleq	e85570 <__Stack_Size+0xe84d70>
    1d60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d64:	00001802 	andeq	r1, r0, r2, lsl #16
    1d68:	31011d1f 	tstcc	r1, pc, lsl sp
    1d6c:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    1d70:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    1d74:	00130105 	andseq	r0, r3, r5, lsl #2
    1d78:	00052000 	andeq	r2, r5, r0
    1d7c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1d80:	1d210000 	stcne	0, cr0, [r1, #-0]
    1d84:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1d88:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    1d8c:	0005590b 	andeq	r5, r5, fp, lsl #18
    1d90:	00342200 	eorseq	r2, r4, r0, lsl #4
    1d94:	0b3a0803 	bleq	e83da8 <__Stack_Size+0xe835a8>
    1d98:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1d9c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    1da0:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1da4:	03193f01 	tsteq	r9, #1, 30
    1da8:	4919270e 	ldmdbmi	r9, {r1, r2, r3, r8, r9, sl, sp}
    1dac:	3c193413 	cfldrscc	mvf3, [r9], {19}
    1db0:	00130119 	andseq	r0, r3, r9, lsl r1
    1db4:	00052400 	andeq	r2, r5, r0, lsl #8
    1db8:	00001349 	andeq	r1, r0, r9, asr #6
    1dbc:	00002625 	andeq	r2, r0, r5, lsr #12
    1dc0:	11010000 	mrsne	r0, (UNDEF: 1)
    1dc4:	130e2501 	movwne	r2, #58625	; 0xe501
    1dc8:	1b0e030b 	blne	3829fc <__Stack_Size+0x3821fc>
    1dcc:	1117550e 	tstne	r7, lr, lsl #10
    1dd0:	00171001 	andseq	r1, r7, r1
    1dd4:	00240200 	eoreq	r0, r4, r0, lsl #4
    1dd8:	0b3e0b0b 	bleq	f84a0c <__Stack_Size+0xf8420c>
    1ddc:	00000e03 	andeq	r0, r0, r3, lsl #28
    1de0:	03001603 	movweq	r1, #1539	; 0x603
    1de4:	3b0b3a0e 	blcc	2d0624 <__Stack_Size+0x2cfe24>
    1de8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1dec:	00240400 	eoreq	r0, r4, r0, lsl #8
    1df0:	0b3e0b0b 	bleq	f84a24 <__Stack_Size+0xf84224>
    1df4:	00000803 	andeq	r0, r0, r3, lsl #16
    1df8:	0b000f05 	bleq	5a14 <__Stack_Size+0x5214>
    1dfc:	0600000b 	streq	r0, [r0], -fp
    1e00:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1e04:	0b3a0b0b 	bleq	e84a38 <__Stack_Size+0xe84238>
    1e08:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1e0c:	0d070000 	stceq	0, cr0, [r7, #-0]
    1e10:	3a080300 	bcc	202a18 <__Stack_Size+0x202218>
    1e14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e18:	000b3813 	andeq	r3, fp, r3, lsl r8
    1e1c:	01010800 	tsteq	r1, r0, lsl #16
    1e20:	13011349 	movwne	r1, #4937	; 0x1349
    1e24:	21090000 	mrscs	r0, (UNDEF: 9)
    1e28:	2f134900 	svccs	0x00134900
    1e2c:	0a00000b 	beq	1e60 <__Stack_Size+0x1660>
    1e30:	0e03012e 	adfeqsp	f0, f3, #0.5
    1e34:	0b3b0b3a 	bleq	ec4b24 <__Stack_Size+0xec4324>
    1e38:	13491927 	movtne	r1, #39207	; 0x9927
    1e3c:	13010b20 	movwne	r0, #6944	; 0x1b20
    1e40:	050b0000 	streq	r0, [fp, #-0]
    1e44:	3a080300 	bcc	202a4c <__Stack_Size+0x20224c>
    1e48:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e4c:	0c000013 	stceq	0, cr0, [r0], {19}
    1e50:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1e54:	0b3b0b3a 	bleq	ec4b44 <__Stack_Size+0xec4344>
    1e58:	00001349 	andeq	r1, r0, r9, asr #6
    1e5c:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    1e60:	3b0b3a0e 	blcc	2d06a0 <__Stack_Size+0x2cfea0>
    1e64:	2019270b 	andscs	r2, r9, fp, lsl #14
    1e68:	0013010b 	andseq	r0, r3, fp, lsl #2
    1e6c:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1e70:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1e74:	340f0000 	strcc	r0, [pc], #-0	; 1e7c <__Stack_Size+0x167c>
    1e78:	3a080300 	bcc	202a80 <__Stack_Size+0x202280>
    1e7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e80:	10000013 	andne	r0, r0, r3, lsl r0
    1e84:	13490026 	movtne	r0, #36902	; 0x9026
    1e88:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    1e8c:	03193f01 	tsteq	r9, #1, 30
    1e90:	3b0b3a0e 	blcc	2d06d0 <__Stack_Size+0x2cfed0>
    1e94:	1119270b 	tstne	r9, fp, lsl #14
    1e98:	40061201 	andmi	r1, r6, r1, lsl #4
    1e9c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1ea0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ea4:	03000512 	movweq	r0, #1298	; 0x512
    1ea8:	3b0b3a08 	blcc	2d06d0 <__Stack_Size+0x2cfed0>
    1eac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1eb0:	13000017 	movwne	r0, #23
    1eb4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1eb8:	0b3b0b3a 	bleq	ec4ba8 <__Stack_Size+0xec43a8>
    1ebc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1ec0:	34140000 	ldrcc	r0, [r4], #-0
    1ec4:	3a080300 	bcc	202acc <__Stack_Size+0x2022cc>
    1ec8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ecc:	00170213 	andseq	r0, r7, r3, lsl r2
    1ed0:	011d1500 	tsteq	sp, r0, lsl #10
    1ed4:	01521331 	cmpeq	r2, r1, lsr r3
    1ed8:	0b581755 	bleq	1607c34 <__Stack_Size+0x1607434>
    1edc:	13010b59 	movwne	r0, #7001	; 0x1b59
    1ee0:	05160000 	ldreq	r0, [r6, #-0]
    1ee4:	02133100 	andseq	r3, r3, #0, 2
    1ee8:	17000017 	smladne	r0, r7, r0, r0
    1eec:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    1ef0:	34180000 	ldrcc	r0, [r8], #-0
    1ef4:	02133100 	andseq	r3, r3, #0, 2
    1ef8:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1efc:	0111010b 	tsteq	r1, fp, lsl #2
    1f00:	00000612 	andeq	r0, r0, r2, lsl r6
    1f04:	0300341a 	movweq	r3, #1050	; 0x41a
    1f08:	3b0b3a0e 	blcc	2d0748 <__Stack_Size+0x2cff48>
    1f0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f10:	1b000017 	blne	1f74 <__Stack_Size+0x1774>
    1f14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1f18:	17550152 			; <UNDEFINED> instruction: 0x17550152
    1f1c:	0b590b58 	bleq	1644c84 <__Stack_Size+0x1644484>
    1f20:	051c0000 	ldreq	r0, [ip, #-0]
    1f24:	3a0e0300 	bcc	382b2c <__Stack_Size+0x38232c>
    1f28:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f2c:	00170213 	andseq	r0, r7, r3, lsl r2
    1f30:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1f34:	0b3a0e03 	bleq	e85748 <__Stack_Size+0xe84f48>
    1f38:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1f3c:	00001802 	andeq	r1, r0, r2, lsl #16
    1f40:	0182891e 	orreq	r8, r2, lr, lsl r9
    1f44:	31011101 	tstcc	r1, r1, lsl #2
    1f48:	00130113 	andseq	r0, r3, r3, lsl r1
    1f4c:	828a1f00 	addhi	r1, sl, #0, 30
    1f50:	18020001 	stmdane	r2, {r0}
    1f54:	00184291 	mulseq	r8, r1, r2
    1f58:	82892000 	addhi	r2, r9, #0
    1f5c:	01110101 	tsteq	r1, r1, lsl #2
    1f60:	00001331 	andeq	r1, r0, r1, lsr r3
    1f64:	11010b21 	tstne	r1, r1, lsr #22
    1f68:	01061201 	tsteq	r6, r1, lsl #4
    1f6c:	22000013 	andcs	r0, r0, #19
    1f70:	13310005 	teqne	r1, #5
    1f74:	34230000 	strtcc	r0, [r3], #-0
    1f78:	3a0e0300 	bcc	382b80 <__Stack_Size+0x382380>
    1f7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f80:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
    1f84:	24000018 	strcs	r0, [r0], #-24
    1f88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    1f8c:	19270e03 	stmdbne	r7!, {r0, r1, r9, sl, fp}
    1f90:	19341349 	ldmdbne	r4!, {r0, r3, r6, r8, r9, ip}
    1f94:	1301193c 	movwne	r1, #6460	; 0x193c
    1f98:	05250000 	streq	r0, [r5, #-0]!
    1f9c:	00134900 	andseq	r4, r3, r0, lsl #18
    1fa0:	00262600 	eoreq	r2, r6, r0, lsl #12
    1fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fa8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1fac:	0e030b13 	vmoveq.32	d3[0], r0
    1fb0:	17550e1b 	smmlane	r5, fp, lr, r0
    1fb4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    1fb8:	04020000 	streq	r0, [r2], #-0
    1fbc:	3a0b0b01 	bcc	2c4bc8 <__Stack_Size+0x2c43c8>
    1fc0:	010b3b0b 	tsteq	fp, fp, lsl #22
    1fc4:	03000013 	movweq	r0, #19
    1fc8:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    1fcc:	00000d1c 	andeq	r0, r0, ip, lsl sp
    1fd0:	03001604 	movweq	r1, #1540	; 0x604
    1fd4:	3b0b3a0e 	blcc	2d0814 <__Stack_Size+0x2d0014>
    1fd8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fdc:	01130500 	tsteq	r3, r0, lsl #10
    1fe0:	0b3a0b0b 	bleq	e84c14 <__Stack_Size+0xe84414>
    1fe4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1fe8:	0d060000 	stceq	0, cr0, [r6, #-0]
    1fec:	3a0e0300 	bcc	382bf4 <__Stack_Size+0x3823f4>
    1ff0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ff4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1ff8:	00240700 	eoreq	r0, r4, r0, lsl #14
    1ffc:	0b3e0b0b 	bleq	f84c30 <__Stack_Size+0xf84430>
    2000:	00000e03 	andeq	r0, r0, r3, lsl #28
    2004:	3f012e08 	svccc	0x00012e08
    2008:	3a0e0319 	bcc	382c74 <__Stack_Size+0x382474>
    200c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2010:	11134919 	tstne	r3, r9, lsl r9
    2014:	40061201 	andmi	r1, r6, r1, lsl #4
    2018:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    201c:	00001301 	andeq	r1, r0, r1, lsl #6
    2020:	03000509 	movweq	r0, #1289	; 0x509
    2024:	3b0b3a0e 	blcc	2d0864 <__Stack_Size+0x2d0064>
    2028:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    202c:	0a000017 	beq	2090 <__Stack_Size+0x1890>
    2030:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2034:	0b3b0b3a 	bleq	ec4d24 <__Stack_Size+0xec4524>
    2038:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    203c:	340b0000 	strcc	r0, [fp], #-0
    2040:	3a0e0300 	bcc	382c48 <__Stack_Size+0x382448>
    2044:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2048:	000b1c13 	andeq	r1, fp, r3, lsl ip
    204c:	00240c00 	eoreq	r0, r4, r0, lsl #24
    2050:	0b3e0b0b 	bleq	f84c84 <__Stack_Size+0xf84484>
    2054:	00000803 	andeq	r0, r0, r3, lsl #16
    2058:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
    205c:	00130113 	andseq	r0, r3, r3, lsl r1
    2060:	00210e00 	eoreq	r0, r1, r0, lsl #28
    2064:	0b2f1349 	bleq	bc6d90 <__Stack_Size+0xbc6590>
    2068:	260f0000 	strcs	r0, [pc], -r0
    206c:	00134900 	andseq	r4, r3, r0, lsl #18
    2070:	012e1000 	teqeq	lr, r0
    2074:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2078:	0b3b0b3a 	bleq	ec4d68 <__Stack_Size+0xec4568>
    207c:	01111927 	tsteq	r1, r7, lsr #18
    2080:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2084:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2088:	11000013 	tstne	r0, r3, lsl r0
    208c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2090:	0b3b0b3a 	bleq	ec4d80 <__Stack_Size+0xec4580>
    2094:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2098:	0f120000 	svceq	0x00120000
    209c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    20a0:	13000013 	movwne	r0, #19
    20a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    20a8:	0b3b0b3a 	bleq	ec4d98 <__Stack_Size+0xec4598>
    20ac:	17021349 	strne	r1, [r2, -r9, asr #6]
    20b0:	34140000 	ldrcc	r0, [r4], #-0
    20b4:	3a0e0300 	bcc	382cbc <__Stack_Size+0x3824bc>
    20b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20bc:	15000013 	strne	r0, [r0, #-19]
    20c0:	00018289 	andeq	r8, r1, r9, lsl #5
    20c4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    20c8:	01000000 	mrseq	r0, (UNDEF: 0)
    20cc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    20d0:	0e030b13 	vmoveq.32	d3[0], r0
    20d4:	17550e1b 	smmlane	r5, fp, lr, r0
    20d8:	17100111 			; <UNDEFINED> instruction: 0x17100111
    20dc:	04020000 	streq	r0, [r2], #-0
    20e0:	3a0b0b01 	bcc	2c4cec <__Stack_Size+0x2c44ec>
    20e4:	010b3b0b 	tsteq	fp, fp, lsl #22
    20e8:	03000013 	movweq	r0, #19
    20ec:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    20f0:	00000d1c 	andeq	r0, r0, ip, lsl sp
    20f4:	03001604 	movweq	r1, #1540	; 0x604
    20f8:	3b0b3a0e 	blcc	2d0938 <__Stack_Size+0x2d0138>
    20fc:	0013490b 	andseq	r4, r3, fp, lsl #18
    2100:	01130500 	tsteq	r3, r0, lsl #10
    2104:	0b3a0b0b 	bleq	e84d38 <__Stack_Size+0xe84538>
    2108:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    210c:	0d060000 	stceq	0, cr0, [r6, #-0]
    2110:	3a0e0300 	bcc	382d18 <__Stack_Size+0x382518>
    2114:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2118:	000b3813 	andeq	r3, fp, r3, lsl r8
    211c:	00240700 	eoreq	r0, r4, r0, lsl #14
    2120:	0b3e0b0b 	bleq	f84d54 <__Stack_Size+0xf84554>
    2124:	00000e03 	andeq	r0, r0, r3, lsl #28
    2128:	0b002408 	bleq	b150 <__Stack_Size+0xa950>
    212c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2130:	09000008 	stmdbeq	r0, {r3}
    2134:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2138:	0b3a0e03 	bleq	e8594c <__Stack_Size+0xe8514c>
    213c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2140:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2144:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2148:	00130119 	andseq	r0, r3, r9, lsl r1
    214c:	00050a00 	andeq	r0, r5, r0, lsl #20
    2150:	0b3a0e03 	bleq	e85964 <__Stack_Size+0xe85164>
    2154:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2158:	00001802 	andeq	r1, r0, r2, lsl #16
    215c:	0b000f0b 	bleq	5d90 <__Stack_Size+0x5590>
    2160:	0013490b 	andseq	r4, r3, fp, lsl #18
    2164:	012e0c00 	teqeq	lr, r0, lsl #24
    2168:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    216c:	0b3b0b3a 	bleq	ec4e5c <__Stack_Size+0xec465c>
    2170:	13491927 	movtne	r1, #39207	; 0x9927
    2174:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2178:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    217c:	00130119 	andseq	r0, r3, r9, lsl r1
    2180:	00050d00 	andeq	r0, r5, r0, lsl #26
    2184:	0b3a0e03 	bleq	e85998 <__Stack_Size+0xe85198>
    2188:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    218c:	00001702 	andeq	r1, r0, r2, lsl #14
    2190:	0300340e 	movweq	r3, #1038	; 0x40e
    2194:	3b0b3a0e 	blcc	2d09d4 <__Stack_Size+0x2d01d4>
    2198:	0013490b 	andseq	r4, r3, fp, lsl #18
    219c:	00260f00 	eoreq	r0, r6, r0, lsl #30
    21a0:	00001349 	andeq	r1, r0, r9, asr #6
    21a4:	03003410 	movweq	r3, #1040	; 0x410
    21a8:	3b0b3a0e 	blcc	2d09e8 <__Stack_Size+0x2d01e8>
    21ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    21b0:	11000017 	tstne	r0, r7, lsl r0
    21b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21b8:	0b3b0b3a 	bleq	ec4ea8 <__Stack_Size+0xec46a8>
    21bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    21c0:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    21c4:	11010182 	smlabbne	r1, r2, r1, r0
    21c8:	01133101 	tsteq	r3, r1, lsl #2
    21cc:	13000013 	movwne	r0, #19
    21d0:	0001828a 	andeq	r8, r1, sl, lsl #5
    21d4:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    21d8:	14000018 	strne	r0, [r0], #-24
    21dc:	01018289 	smlabbeq	r1, r9, r2, r8
    21e0:	13310111 	teqne	r1, #1073741828	; 0x40000004
    21e4:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    21e8:	11000182 	smlabbne	r0, r2, r1, r0
    21ec:	00133101 	andseq	r3, r3, r1, lsl #2
    21f0:	00341600 	eorseq	r1, r4, r0, lsl #12
    21f4:	0b3a0e03 	bleq	e85a08 <__Stack_Size+0xe85208>
    21f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    21fc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2200:	01000000 	mrseq	r0, (UNDEF: 0)
    2204:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2208:	0e030b13 	vmoveq.32	d3[0], r0
    220c:	17550e1b 	smmlane	r5, fp, lr, r0
    2210:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2214:	16020000 	strne	r0, [r2], -r0
    2218:	3a0e0300 	bcc	382e20 <__Stack_Size+0x382620>
    221c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2220:	03000013 	movweq	r0, #19
    2224:	0b0b0024 	bleq	2c22bc <__Stack_Size+0x2c1abc>
    2228:	0e030b3e 	vmoveq.16	d3[0], r0
    222c:	0f040000 	svceq	0x00040000
    2230:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2234:	00240500 	eoreq	r0, r4, r0, lsl #10
    2238:	0b3e0b0b 	bleq	f84e6c <__Stack_Size+0xf8466c>
    223c:	00000803 	andeq	r0, r0, r3, lsl #16
    2240:	0b000f06 	bleq	5e60 <__Stack_Size+0x5660>
    2244:	0013490b 	andseq	r4, r3, fp, lsl #18
    2248:	00260700 	eoreq	r0, r6, r0, lsl #14
    224c:	00001349 	andeq	r1, r0, r9, asr #6
    2250:	03001608 	movweq	r1, #1544	; 0x608
    2254:	3b0b3a08 	blcc	2d0a7c <__Stack_Size+0x2d027c>
    2258:	0013490b 	andseq	r4, r3, fp, lsl #18
    225c:	00350900 	eorseq	r0, r5, r0, lsl #18
    2260:	00001349 	andeq	r1, r0, r9, asr #6
    2264:	0b01040a 	bleq	43294 <__Stack_Size+0x42a94>
    2268:	3b0b3a0b 	blcc	2d0a9c <__Stack_Size+0x2d029c>
    226c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2270:	00280b00 	eoreq	r0, r8, r0, lsl #22
    2274:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2278:	130c0000 	movwne	r0, #49152	; 0xc000
    227c:	0b0e0301 	bleq	382e88 <__Stack_Size+0x382688>
    2280:	3b0b3a0b 	blcc	2d0ab4 <__Stack_Size+0x2d02b4>
    2284:	00130105 	andseq	r0, r3, r5, lsl #2
    2288:	000d0d00 	andeq	r0, sp, r0, lsl #26
    228c:	0b3a0e03 	bleq	e85aa0 <__Stack_Size+0xe852a0>
    2290:	1349053b 	movtne	r0, #38203	; 0x953b
    2294:	00000b38 	andeq	r0, r0, r8, lsr fp
    2298:	0b01130e 	bleq	46ed8 <__Stack_Size+0x466d8>
    229c:	3b0b3a0b 	blcc	2d0ad0 <__Stack_Size+0x2d02d0>
    22a0:	0013010b 	andseq	r0, r3, fp, lsl #2
    22a4:	000d0f00 	andeq	r0, sp, r0, lsl #30
    22a8:	0b3a0e03 	bleq	e85abc <__Stack_Size+0xe852bc>
    22ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    22b0:	00000b38 	andeq	r0, r0, r8, lsr fp
    22b4:	49010110 	stmdbmi	r1, {r4, r8}
    22b8:	00130113 	andseq	r0, r3, r3, lsl r1
    22bc:	00211100 	eoreq	r1, r1, r0, lsl #2
    22c0:	0b2f1349 	bleq	bc6fec <__Stack_Size+0xbc67ec>
    22c4:	13120000 	tstne	r2, #0
    22c8:	0b0e0301 	bleq	382ed4 <__Stack_Size+0x3826d4>
    22cc:	3b0b3a0b 	blcc	2d0b00 <__Stack_Size+0x2d0300>
    22d0:	0013010b 	andseq	r0, r3, fp, lsl #2
    22d4:	00211300 	eoreq	r1, r1, r0, lsl #6
    22d8:	00001349 	andeq	r1, r0, r9, asr #6
    22dc:	3f012e14 	svccc	0x00012e14
    22e0:	3a0e0319 	bcc	382f4c <__Stack_Size+0x38274c>
    22e4:	110b3b0b 	tstne	fp, fp, lsl #22
    22e8:	40061201 	andmi	r1, r6, r1, lsl #4
    22ec:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    22f0:	00001301 	andeq	r1, r0, r1, lsl #6
    22f4:	01828915 	orreq	r8, r2, r5, lsl r9
    22f8:	31011101 	tstcc	r1, r1, lsl #2
    22fc:	00130113 	andseq	r0, r3, r3, lsl r1
    2300:	828a1600 	addhi	r1, sl, #0, 12
    2304:	18020001 	stmdane	r2, {r0}
    2308:	00184291 	mulseq	r8, r1, r2
    230c:	82891700 	addhi	r1, r9, #0, 14
    2310:	01110101 	tsteq	r1, r1, lsl #2
    2314:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2318:	18000013 	stmdane	r0, {r0, r1, r4}
    231c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2320:	0b3a0e03 	bleq	e85b34 <__Stack_Size+0xe85334>
    2324:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2328:	01111349 	tsteq	r1, r9, asr #6
    232c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2330:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2334:	19000013 	stmdbne	r0, {r0, r1, r4}
    2338:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    233c:	0b3b0b3a 	bleq	ec502c <__Stack_Size+0xec482c>
    2340:	17021349 	strne	r1, [r2, -r9, asr #6]
    2344:	341a0000 	ldrcc	r0, [sl], #-0
    2348:	3a080300 	bcc	202f50 <__Stack_Size+0x202750>
    234c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2350:	00170213 	andseq	r0, r7, r3, lsl r2
    2354:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2358:	0b3a0e03 	bleq	e85b6c <__Stack_Size+0xe8536c>
    235c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2360:	00001802 	andeq	r1, r0, r2, lsl #16
    2364:	0300341c 	movweq	r3, #1052	; 0x41c
    2368:	3b0b3a0e 	blcc	2d0ba8 <__Stack_Size+0x2d03a8>
    236c:	1c13490b 	ldcne	9, cr4, [r3], {11}
    2370:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2374:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2378:	0b3b0b3a 	bleq	ec5068 <__Stack_Size+0xec4868>
    237c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2380:	341e0000 	ldrcc	r0, [lr], #-0
    2384:	3a080300 	bcc	202f8c <__Stack_Size+0x20278c>
    2388:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    238c:	00180213 	andseq	r0, r8, r3, lsl r2
    2390:	00341f00 	eorseq	r1, r4, r0, lsl #30
    2394:	13491934 	movtne	r1, #39220	; 0x9934
    2398:	00001702 	andeq	r1, r0, r2, lsl #14
    239c:	03003420 	movweq	r3, #1056	; 0x420
    23a0:	3b0b3a0e 	blcc	2d0be0 <__Stack_Size+0x2d03e0>
    23a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    23a8:	012e2100 	teqeq	lr, r0, lsl #2
    23ac:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    23b0:	0b3b0b3a 	bleq	ec50a0 <__Stack_Size+0xec48a0>
    23b4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    23b8:	00001301 	andeq	r1, r0, r1, lsl #6
    23bc:	00001822 	andeq	r1, r0, r2, lsr #16
    23c0:	010b2300 	mrseq	r2, (UNDEF: 59)
    23c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    23c8:	00001301 	andeq	r1, r0, r1, lsl #6
    23cc:	01828924 	orreq	r8, r2, r4, lsr #18
    23d0:	31011101 	tstcc	r1, r1, lsl #2
    23d4:	25000013 	strcs	r0, [r0, #-19]
    23d8:	00018289 	andeq	r8, r1, r9, lsl #5
    23dc:	13310111 	teqne	r1, #1073741828	; 0x40000004
    23e0:	21260000 	teqcs	r6, r0
    23e4:	2f134900 	svccs	0x00134900
    23e8:	27000018 	smladcs	r0, r8, r0, r0
    23ec:	13490021 	movtne	r0, #36897	; 0x9021
    23f0:	0000132f 	andeq	r1, r0, pc, lsr #6
    23f4:	03003428 	movweq	r3, #1064	; 0x428
    23f8:	3b0b3a0e 	blcc	2d0c38 <__Stack_Size+0x2d0438>
    23fc:	3f13490b 	svccc	0x0013490b
    2400:	00180219 	andseq	r0, r8, r9, lsl r2
    2404:	012e2900 	teqeq	lr, r0, lsl #18
    2408:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    240c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2410:	13491927 	movtne	r1, #39207	; 0x9927
    2414:	1301193c 	movwne	r1, #6460	; 0x193c
    2418:	052a0000 	streq	r0, [sl, #-0]!
    241c:	00134900 	andseq	r4, r3, r0, lsl #18
    2420:	012e2b00 	teqeq	lr, r0, lsl #22
    2424:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2428:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    242c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2430:	00001301 	andeq	r1, r0, r1, lsl #6
    2434:	3f012e2c 	svccc	0x00012e2c
    2438:	3a0e0319 	bcc	3830a4 <__Stack_Size+0x3828a4>
    243c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2440:	3c134919 	ldccc	9, cr4, [r3], {25}
    2444:	00130119 	andseq	r0, r3, r9, lsl r1
    2448:	012e2d00 	teqeq	lr, r0, lsl #26
    244c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2450:	0b3b0b3a 	bleq	ec5140 <__Stack_Size+0xec4940>
    2454:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2458:	00001301 	andeq	r1, r0, r1, lsl #6
    245c:	3f012e2e 	svccc	0x00012e2e
    2460:	270e0319 	smladcs	lr, r9, r3, r0
    2464:	34134919 	ldrcc	r4, [r3], #-2329	; 0x919
    2468:	01193c19 	tsteq	r9, r9, lsl ip
    246c:	2f000013 	svccs	0x00000013
    2470:	00000026 	andeq	r0, r0, r6, lsr #32
    2474:	3f012e30 	svccc	0x00012e30
    2478:	3a0e0319 	bcc	3830e4 <__Stack_Size+0x3828e4>
    247c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2480:	3c134919 	ldccc	9, cr4, [r3], {25}
    2484:	00000019 	andeq	r0, r0, r9, lsl r0
    2488:	25011101 	strcs	r1, [r1, #-257]	; 0x101
    248c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2490:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
    2494:	10011117 	andne	r1, r1, r7, lsl r1
    2498:	02000017 	andeq	r0, r0, #23
    249c:	0b0b0024 	bleq	2c2534 <__Stack_Size+0x2c1d34>
    24a0:	0e030b3e 	vmoveq.16	d3[0], r0
    24a4:	16030000 	strne	r0, [r3], -r0
    24a8:	3a080300 	bcc	2030b0 <__Stack_Size+0x2028b0>
    24ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24b0:	04000013 	streq	r0, [r0], #-19
    24b4:	0e030104 	adfeqs	f0, f3, f4
    24b8:	0b3a0b0b 	bleq	e850ec <__Stack_Size+0xe848ec>
    24bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    24c0:	28050000 	stmdacs	r5, {}	; <UNPREDICTABLE>
    24c4:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    24c8:	0600000d 	streq	r0, [r0], -sp
    24cc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24d0:	0b3b0b3a 	bleq	ec51c0 <__Stack_Size+0xec49c0>
    24d4:	00001349 	andeq	r1, r0, r9, asr #6
    24d8:	3f012e07 	svccc	0x00012e07
    24dc:	3a0e0319 	bcc	383148 <__Stack_Size+0x382948>
    24e0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    24e4:	20134919 	andscs	r4, r3, r9, lsl r9
    24e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    24ec:	00050800 	andeq	r0, r5, r0, lsl #16
    24f0:	0b3a0e03 	bleq	e85d04 <__Stack_Size+0xe85504>
    24f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    24f8:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    24fc:	03193f01 	tsteq	r9, #1, 30
    2500:	3b0b3a0e 	blcc	2d0d40 <__Stack_Size+0x2d0540>
    2504:	1119270b 	tstne	r9, fp, lsl #14
    2508:	40061201 	andmi	r1, r6, r1, lsl #4
    250c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2510:	00001301 	andeq	r1, r0, r1, lsl #6
    2514:	0300050a 	movweq	r0, #1290	; 0x50a
    2518:	3b0b3a0e 	blcc	2d0d58 <__Stack_Size+0x2d0558>
    251c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2520:	0b000018 	bleq	2588 <__Stack_Size+0x1d88>
    2524:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2528:	0b3a0e03 	bleq	e85d3c <__Stack_Size+0xe8553c>
    252c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2530:	01111349 	tsteq	r1, r9, asr #6
    2534:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2538:	00194297 	mulseq	r9, r7, r2
    253c:	00050c00 	andeq	r0, r5, r0, lsl #24
    2540:	0b3a0e03 	bleq	e85d54 <__Stack_Size+0xe85554>
    2544:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2548:	00001702 	andeq	r1, r0, r2, lsl #14
    254c:	31012e0d 	tstcc	r1, sp, lsl #28
    2550:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2554:	97184006 	ldrls	r4, [r8, -r6]
    2558:	13011942 	movwne	r1, #6466	; 0x1942
    255c:	050e0000 	streq	r0, [lr, #-0]
    2560:	02133100 	andseq	r3, r3, #0, 2
    2564:	0f000017 	svceq	0x00000017
    2568:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    256c:	0b3a0e03 	bleq	e85d80 <__Stack_Size+0xe85580>
    2570:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2574:	01111349 	tsteq	r1, r9, asr #6
    2578:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    257c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2580:	10000013 	andne	r0, r0, r3, lsl r0
    2584:	0111010b 	tsteq	r1, fp, lsl #2
    2588:	00000612 	andeq	r0, r0, r2, lsl r6
    258c:	03003411 	movweq	r3, #1041	; 0x411
    2590:	3b0b3a0e 	blcc	2d0dd0 <__Stack_Size+0x2d05d0>
    2594:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2598:	12000018 	andne	r0, r0, #24
    259c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    25a0:	0b3b0b3a 	bleq	ec5290 <__Stack_Size+0xec4a90>
    25a4:	00001349 	andeq	r1, r0, r9, asr #6
    25a8:	31011d13 	tstcc	r1, r3, lsl sp
    25ac:	55015213 	strpl	r5, [r1, #-531]	; 0x213
    25b0:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    25b4:	1400000b 	strne	r0, [r0], #-11
    25b8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25bc:	0b3a0e03 	bleq	e85dd0 <__Stack_Size+0xe855d0>
    25c0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    25c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    25cc:	00130119 	andseq	r0, r3, r9, lsl r1
    25d0:	00051500 	andeq	r1, r5, r0, lsl #10
    25d4:	0b3a0e03 	bleq	e85de8 <__Stack_Size+0xe855e8>
    25d8:	1349053b 	movtne	r0, #38203	; 0x953b
    25dc:	00001702 	andeq	r1, r0, r2, lsl #14
    25e0:	03003416 	movweq	r3, #1046	; 0x416
    25e4:	3b0b3a0e 	blcc	2d0e24 <__Stack_Size+0x2d0624>
    25e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    25ec:	17000017 	smladne	r0, r7, r0, r0
    25f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25f4:	0b3a0e03 	bleq	e85e08 <__Stack_Size+0xe85608>
    25f8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25fc:	01111349 	tsteq	r1, r9, asr #6
    2600:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2604:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2608:	18000013 	stmdane	r0, {r0, r1, r4}
    260c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2610:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2614:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2618:	0f190000 	svceq	0x00190000
    261c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2620:	1a000013 	bne	2674 <__Stack_Size+0x1e74>
    2624:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2628:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    262c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2630:	0b1b0000 	bleq	6c2638 <__Stack_Size+0x6c1e38>
    2634:	00175501 	andseq	r5, r7, r1, lsl #10
    2638:	010b1c00 	tsteq	fp, r0, lsl #24
    263c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2640:	00001301 	andeq	r1, r0, r1, lsl #6
    2644:	0300051d 	movweq	r0, #1309	; 0x51d
    2648:	3b0b3a08 	blcc	2d0e70 <__Stack_Size+0x2d0670>
    264c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2650:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2654:	08030005 	stmdaeq	r3, {r0, r2}
    2658:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    265c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2660:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    2664:	03193f01 	tsteq	r9, #1, 30
    2668:	3b0b3a0e 	blcc	2d0ea8 <__Stack_Size+0x2d06a8>
    266c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2670:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2674:	97184006 	ldrls	r4, [r8, -r6]
    2678:	00001942 	andeq	r1, r0, r2, asr #18
    267c:	01110100 	tsteq	r1, r0, lsl #2
    2680:	0b130e25 	bleq	4c5f1c <__Stack_Size+0x4c571c>
    2684:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2688:	01111755 	tsteq	r1, r5, asr r7
    268c:	00001710 	andeq	r1, r0, r0, lsl r7
    2690:	0b002402 	bleq	b6a0 <__Stack_Size+0xaea0>
    2694:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2698:	0300000e 	movweq	r0, #14
    269c:	08030016 	stmdaeq	r3, {r1, r2, r4}
    26a0:	0b3b0b3a 	bleq	ec5390 <__Stack_Size+0xec4b90>
    26a4:	00001349 	andeq	r1, r0, r9, asr #6
    26a8:	27001504 	strcs	r1, [r0, -r4, lsl #10]
    26ac:	05000019 	streq	r0, [r0, #-25]
    26b0:	0b0b000f 	bleq	2c26f4 <__Stack_Size+0x2c1ef4>
    26b4:	00001349 	andeq	r1, r0, r9, asr #6
    26b8:	3f012e06 	svccc	0x00012e06
    26bc:	3a0e0319 	bcc	383328 <__Stack_Size+0x382b28>
    26c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    26c8:	96184006 	ldrls	r4, [r8], -r6
    26cc:	13011942 	movwne	r1, #6466	; 0x1942
    26d0:	34070000 	strcc	r0, [r7], #-0
    26d4:	3a0e0300 	bcc	3832dc <__Stack_Size+0x382adc>
    26d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    26dc:	00170213 	andseq	r0, r7, r3, lsl r2
    26e0:	010b0800 	tsteq	fp, r0, lsl #16
    26e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e8:	00001301 	andeq	r1, r0, r1, lsl #6
    26ec:	01828909 	orreq	r8, r2, r9, lsl #18
    26f0:	31011100 	mrscc	r1, (UNDEF: 17)
    26f4:	0a000013 	beq	2748 <__Stack_Size+0x1f48>
    26f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2700:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2704:	0000193c 	andeq	r1, r0, ip, lsr r9
    2708:	4900350b 	stmdbmi	r0, {r0, r1, r3, r8, sl, ip, sp}
    270c:	0c000013 	stceq	0, cr0, [r0], {19}
    2710:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2714:	0b3b0b3a 	bleq	ec5404 <__Stack_Size+0xec4c04>
    2718:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    271c:	00001802 	andeq	r1, r0, r2, lsl #16
    2720:	0300340d 	movweq	r3, #1037	; 0x40d
    2724:	3b0b3a0e 	blcc	2d0f64 <__Stack_Size+0x2d0764>
    2728:	3f13490b 	svccc	0x0013490b
    272c:	00193c19 	andseq	r3, r9, r9, lsl ip
    2730:	01010e00 	tsteq	r1, r0, lsl #28
    2734:	13011349 	movwne	r1, #4937	; 0x1349
    2738:	210f0000 	mrscs	r0, CPSR
    273c:	2f134900 	svccs	0x00134900
    2740:	1000000b 	andne	r0, r0, fp
    2744:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2748:	0b3a0e03 	bleq	e85f5c <__Stack_Size+0xe8575c>
    274c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2750:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2754:	01000000 	mrseq	r0, (UNDEF: 0)
    2758:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    275c:	0e030b13 	vmoveq.32	d3[0], r0
    2760:	17550e1b 	smmlane	r5, fp, lr, r0
    2764:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2768:	24020000 	strcs	r0, [r2], #-0
    276c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2770:	000e030b 	andeq	r0, lr, fp, lsl #6
    2774:	00160300 	andseq	r0, r6, r0, lsl #6
    2778:	0b3a0803 	bleq	e8478c <__Stack_Size+0xe83f8c>
    277c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2780:	0f040000 	svceq	0x00040000
    2784:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2788:	05000013 	streq	r0, [r0, #-19]
    278c:	0e030104 	adfeqs	f0, f3, f4
    2790:	0b3a0b0b 	bleq	e853c4 <__Stack_Size+0xe84bc4>
    2794:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2798:	28060000 	stmdacs	r6, {}	; <UNPREDICTABLE>
    279c:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    27a0:	0700000d 	streq	r0, [r0, -sp]
    27a4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    27a8:	0b3b0b3a 	bleq	ec5498 <__Stack_Size+0xec4c98>
    27ac:	00001349 	andeq	r1, r0, r9, asr #6
    27b0:	03011308 	movweq	r1, #4872	; 0x1308
    27b4:	3a0b0b0e 	bcc	2c53f4 <__Stack_Size+0x2c4bf4>
    27b8:	010b3b0b 	tsteq	fp, fp, lsl #22
    27bc:	09000013 	stmdbeq	r0, {r0, r1, r4}
    27c0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    27c4:	0b3b0b3a 	bleq	ec54b4 <__Stack_Size+0xec4cb4>
    27c8:	0b381349 	bleq	e074f4 <__Stack_Size+0xe06cf4>
    27cc:	150a0000 	strne	r0, [sl, #-0]
    27d0:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    27d4:	00130113 	andseq	r0, r3, r3, lsl r1
    27d8:	00050b00 	andeq	r0, r5, r0, lsl #22
    27dc:	00001349 	andeq	r1, r0, r9, asr #6
    27e0:	0301130c 	movweq	r1, #4876	; 0x130c
    27e4:	3a0b0b08 	bcc	2c540c <__Stack_Size+0x2c4c0c>
    27e8:	010b3b0b 	tsteq	fp, fp, lsl #22
    27ec:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    27f0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    27f4:	0b3b0b3a 	bleq	ec54e4 <__Stack_Size+0xec4ce4>
    27f8:	0b381349 	bleq	e07524 <__Stack_Size+0xe06d24>
    27fc:	170e0000 	strne	r0, [lr, -r0]
    2800:	3a0b0b01 	bcc	2c540c <__Stack_Size+0x2c4c0c>
    2804:	010b3b0b 	tsteq	fp, fp, lsl #22
    2808:	0f000013 	svceq	0x00000013
    280c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2810:	0b3b0b3a 	bleq	ec5500 <__Stack_Size+0xec4d00>
    2814:	00001349 	andeq	r1, r0, r9, asr #6
    2818:	27001510 	smladcs	r0, r0, r5, r1
    281c:	11000019 	tstne	r0, r9, lsl r0
    2820:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2824:	0b3a0e03 	bleq	e86038 <__Stack_Size+0xe85838>
    2828:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    282c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2830:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
    2834:	12000019 	andne	r0, r0, #25
    2838:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    283c:	0b3b0b3a 	bleq	ec552c <__Stack_Size+0xec4d2c>
    2840:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    2844:	0000193c 	andeq	r1, r0, ip, lsr r9
    2848:	03003413 	movweq	r3, #1043	; 0x413
    284c:	3b0b3a0e 	blcc	2d108c <__Stack_Size+0x2d088c>
    2850:	3f13490b 	svccc	0x0013490b
    2854:	00180219 	andseq	r0, r8, r9, lsl r2
    2858:	11010000 	mrsne	r0, (UNDEF: 1)
    285c:	130e2501 	movwne	r2, #58625	; 0xe501
    2860:	1b0e030b 	blne	383494 <__Stack_Size+0x382c94>
    2864:	1117550e 	tstne	r7, lr, lsl #10
    2868:	00171001 	andseq	r1, r7, r1
    286c:	00240200 	eoreq	r0, r4, r0, lsl #4
    2870:	0b3e0b0b 	bleq	f854a4 <__Stack_Size+0xf84ca4>
    2874:	00000e03 	andeq	r0, r0, r3, lsl #28
    2878:	03001603 	movweq	r1, #1539	; 0x603
    287c:	3b0b3a08 	blcc	2d10a4 <__Stack_Size+0x2d08a4>
    2880:	0013490b 	andseq	r4, r3, fp, lsl #18
    2884:	00160400 	andseq	r0, r6, r0, lsl #8
    2888:	0b3a0e03 	bleq	e8609c <__Stack_Size+0xe8589c>
    288c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2890:	35050000 	strcc	r0, [r5, #-0]
    2894:	00134900 	andseq	r4, r3, r0, lsl #18
    2898:	01040600 	tsteq	r4, r0, lsl #12
    289c:	0b3a0b0b 	bleq	e854d0 <__Stack_Size+0xe84cd0>
    28a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28a4:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
    28a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    28ac:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    28b0:	0e030104 	adfeqs	f0, f3, f4
    28b4:	0b3a0b0b 	bleq	e854e8 <__Stack_Size+0xe84ce8>
    28b8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    28bc:	13090000 	movwne	r0, #36864	; 0x9000
    28c0:	0b0e0301 	bleq	3834cc <__Stack_Size+0x382ccc>
    28c4:	3b0b3a0b 	blcc	2d10f8 <__Stack_Size+0x2d08f8>
    28c8:	0013010b 	andseq	r0, r3, fp, lsl #2
    28cc:	000d0a00 	andeq	r0, sp, r0, lsl #20
    28d0:	0b3a0e03 	bleq	e860e4 <__Stack_Size+0xe858e4>
    28d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    28d8:	00000b38 	andeq	r0, r0, r8, lsr fp
    28dc:	0b000f0b 	bleq	6510 <__Stack_Size+0x5d10>
    28e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    28e4:	01150c00 	tsteq	r5, r0, lsl #24
    28e8:	13491927 	movtne	r1, #39207	; 0x9927
    28ec:	00001301 	andeq	r1, r0, r1, lsl #6
    28f0:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
    28f4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    28f8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
    28fc:	0b3a0b0b 	bleq	e85530 <__Stack_Size+0xe84d30>
    2900:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2904:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 290c <__Stack_Size+0x210c>
    2908:	3a080300 	bcc	203510 <__Stack_Size+0x202d10>
    290c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2910:	000b3813 	andeq	r3, fp, r3, lsl r8
    2914:	01171000 	tsteq	r7, r0
    2918:	0b3a0b0b 	bleq	e8554c <__Stack_Size+0xe84d4c>
    291c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2920:	0d110000 	ldceq	0, cr0, [r1, #-0]
    2924:	3a080300 	bcc	20352c <__Stack_Size+0x202d2c>
    2928:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    292c:	12000013 	andne	r0, r0, #19
    2930:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2934:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2938:	03193f01 	tsteq	r9, #1, 30
    293c:	3b0b3a0e 	blcc	2d117c <__Stack_Size+0x2d097c>
    2940:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2944:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2948:	96184006 	ldrls	r4, [r8], -r6
    294c:	13011942 	movwne	r1, #6466	; 0x1942
    2950:	05140000 	ldreq	r0, [r4, #-0]
    2954:	3a0e0300 	bcc	38355c <__Stack_Size+0x382d5c>
    2958:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    295c:	00170213 	andseq	r0, r7, r3, lsl r2
    2960:	010b1500 	tsteq	fp, r0, lsl #10
    2964:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2968:	00001301 	andeq	r1, r0, r1, lsl #6
    296c:	03003416 	movweq	r3, #1046	; 0x416
    2970:	3b0b3a0e 	blcc	2d11b0 <__Stack_Size+0x2d09b0>
    2974:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2978:	17000017 	smladne	r0, r7, r0, r0
    297c:	0111010b 	tsteq	r1, fp, lsl #2
    2980:	00000612 	andeq	r0, r0, r2, lsl r6
    2984:	03003418 	movweq	r3, #1048	; 0x418
    2988:	3b0b3a0e 	blcc	2d11c8 <__Stack_Size+0x2d09c8>
    298c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2990:	012e1900 	teqeq	lr, r0, lsl #18
    2994:	0b3a0e03 	bleq	e861a8 <__Stack_Size+0xe859a8>
    2998:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    299c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    29a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    29a4:	00130119 	andseq	r0, r3, r9, lsl r1
    29a8:	00341a00 	eorseq	r1, r4, r0, lsl #20
    29ac:	0b3a0e03 	bleq	e861c0 <__Stack_Size+0xe859c0>
    29b0:	1349053b 	movtne	r0, #38203	; 0x953b
    29b4:	00001702 	andeq	r1, r0, r2, lsl #14
    29b8:	03000a1b 	movweq	r0, #2587	; 0xa1b
    29bc:	3b0b3a0e 	blcc	2d11fc <__Stack_Size+0x2d09fc>
    29c0:	00011105 	andeq	r1, r1, r5, lsl #2
    29c4:	82891c00 	addhi	r1, r9, #0, 24
    29c8:	01110101 	tsteq	r1, r1, lsl #2
    29cc:	00001301 	andeq	r1, r0, r1, lsl #6
    29d0:	01828a1d 	orreq	r8, r2, sp, lsl sl
    29d4:	91180200 	tstls	r8, r0, lsl #4
    29d8:	00001842 	andeq	r1, r0, r2, asr #16
    29dc:	0182891e 	orreq	r8, r2, lr, lsl r9
    29e0:	31011101 	tstcc	r1, r1, lsl #2
    29e4:	00130113 	andseq	r0, r3, r3, lsl r1
    29e8:	82891f00 	addhi	r1, r9, #0, 30
    29ec:	01110101 	tsteq	r1, r1, lsl #2
    29f0:	00001331 	andeq	r1, r0, r1, lsr r3
    29f4:	3f002e20 	svccc	0x00002e20
    29f8:	3a0e0319 	bcc	383664 <__Stack_Size+0x382e64>
    29fc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2a00:	11134919 	tstne	r3, r9, lsl r9
    2a04:	40061201 	andmi	r1, r6, r1, lsl #4
    2a08:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a0c:	34210000 	strtcc	r0, [r1], #-0
    2a10:	3a080300 	bcc	203618 <__Stack_Size+0x202e18>
    2a14:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a18:	00170213 	andseq	r0, r7, r3, lsl r2
    2a1c:	82892200 	addhi	r2, r9, #0, 4
    2a20:	01110001 	tsteq	r1, r1
    2a24:	00001331 	andeq	r1, r0, r1, lsr r3
    2a28:	3f012e23 	svccc	0x00012e23
    2a2c:	3a0e0319 	bcc	383698 <__Stack_Size+0x382e98>
    2a30:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a34:	11134919 	tstne	r3, r9, lsl r9
    2a38:	40061201 	andmi	r1, r6, r1, lsl #4
    2a3c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a40:	00001301 	andeq	r1, r0, r1, lsl #6
    2a44:	03003424 	movweq	r3, #1060	; 0x424
    2a48:	3b0b3a08 	blcc	2d1270 <__Stack_Size+0x2d0a70>
    2a4c:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2a50:	25000017 	strcs	r0, [r0, #-23]
    2a54:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2a58:	00001301 	andeq	r1, r0, r1, lsl #6
    2a5c:	3f002e26 	svccc	0x00002e26
    2a60:	3a0e0319 	bcc	3836cc <__Stack_Size+0x382ecc>
    2a64:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a68:	11134919 	tstne	r3, r9, lsl r9
    2a6c:	40061201 	andmi	r1, r6, r1, lsl #4
    2a70:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    2a74:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    2a78:	03193f01 	tsteq	r9, #1, 30
    2a7c:	3b0b3a0e 	blcc	2d12bc <__Stack_Size+0x2d0abc>
    2a80:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2a84:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2a88:	97184006 	ldrls	r4, [r8, -r6]
    2a8c:	13011942 	movwne	r1, #6466	; 0x1942
    2a90:	05280000 	streq	r0, [r8, #-0]!
    2a94:	3a0e0300 	bcc	38369c <__Stack_Size+0x382e9c>
    2a98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a9c:	00170213 	andseq	r0, r7, r3, lsl r2
    2aa0:	012e2900 	teqeq	lr, r0, lsl #18
    2aa4:	0b3a0e03 	bleq	e862b8 <__Stack_Size+0xe85ab8>
    2aa8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2aac:	13010b20 	movwne	r0, #6944	; 0x1b20
    2ab0:	342a0000 	strtcc	r0, [sl], #-0
    2ab4:	3a0e0300 	bcc	3836bc <__Stack_Size+0x382ebc>
    2ab8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2abc:	2b000013 	blcs	2b10 <__Stack_Size+0x2310>
    2ac0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2ac4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2ac8:	0b2c0000 	bleq	b02ad0 <__Stack_Size+0xb022d0>
    2acc:	00130101 	andseq	r0, r3, r1, lsl #2
    2ad0:	010b2d00 	tsteq	fp, r0, lsl #26
    2ad4:	172e0000 	strne	r0, [lr, -r0]!
    2ad8:	3a0b0b01 	bcc	2c56e4 <__Stack_Size+0x2c4ee4>
    2adc:	01053b0b 	tsteq	r5, fp, lsl #22
    2ae0:	2f000013 	svccs	0x00000013
    2ae4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
    2ae8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    2aec:	00001349 	andeq	r1, r0, r9, asr #6
    2af0:	31011d30 	tstcc	r1, r0, lsr sp
    2af4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2af8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2afc:	00130105 	andseq	r0, r3, r5, lsl #2
    2b00:	00343100 	eorseq	r3, r4, r0, lsl #2
    2b04:	17021331 	smladxne	r2, r1, r3, r1
    2b08:	0a320000 	beq	c82b10 <__Stack_Size+0xc82310>
    2b0c:	11133100 	tstne	r3, r0, lsl #2
    2b10:	33000001 	movwcc	r0, #1
    2b14:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2b18:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2b1c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xb58
    2b20:	00001301 	andeq	r1, r0, r1, lsl #6
    2b24:	55010b34 	strpl	r0, [r1, #-2868]	; 0xb34
    2b28:	35000017 	strcc	r0, [r0, #-23]
    2b2c:	13310034 	teqne	r1, #52	; 0x34
    2b30:	00001802 	andeq	r1, r0, r2, lsl #16
    2b34:	01828936 	orreq	r8, r2, r6, lsr r9
    2b38:	00011101 	andeq	r1, r1, r1, lsl #2
    2b3c:	82893700 	addhi	r3, r9, #0, 14
    2b40:	01110001 	tsteq	r1, r1
    2b44:	31194295 			; <UNDEFINED> instruction: 0x31194295
    2b48:	38000013 	stmdacc	r0, {r0, r1, r4}
    2b4c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2b50:	0b3a0e03 	bleq	e86364 <__Stack_Size+0xe85b64>
    2b54:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2b58:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b5c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2b60:	00130119 	andseq	r0, r3, r9, lsl r1
    2b64:	00053900 	andeq	r3, r5, r0, lsl #18
    2b68:	0b3a0803 	bleq	e84b7c <__Stack_Size+0xe8437c>
    2b6c:	1349053b 	movtne	r0, #38203	; 0x953b
    2b70:	00001702 	andeq	r1, r0, r2, lsl #14
    2b74:	3f002e3a 	svccc	0x00002e3a
    2b78:	3a0e0319 	bcc	3837e4 <__Stack_Size+0x382fe4>
    2b7c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2b80:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2b84:	97184006 	ldrls	r4, [r8, -r6]
    2b88:	00001942 	andeq	r1, r0, r2, asr #18
    2b8c:	0300343b 	movweq	r3, #1083	; 0x43b
    2b90:	3b0b3a0e 	blcc	2d13d0 <__Stack_Size+0x2d0bd0>
    2b94:	3f13490b 	svccc	0x0013490b
    2b98:	00193c19 	andseq	r3, r9, r9, lsl ip
    2b9c:	00343c00 	eorseq	r3, r4, r0, lsl #24
    2ba0:	0b3a0e03 	bleq	e863b4 <__Stack_Size+0xe85bb4>
    2ba4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ba8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
    2bac:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    2bb0:	03193f01 	tsteq	r9, #1, 30
    2bb4:	3b0b3a0e 	blcc	2d13f4 <__Stack_Size+0x2d0bf4>
    2bb8:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2bbc:	01193c13 	tsteq	r9, r3, lsl ip
    2bc0:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
    2bc4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2bc8:	0b3a0e03 	bleq	e863dc <__Stack_Size+0xe85bdc>
    2bcc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2bd0:	1301193c 	movwne	r1, #6460	; 0x193c
    2bd4:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    2bd8:	03193f01 	tsteq	r9, #1, 30
    2bdc:	3b0b3a0e 	blcc	2d141c <__Stack_Size+0x2d0c1c>
    2be0:	3c192705 	ldccc	7, cr2, [r9], {5}
    2be4:	00130119 	andseq	r0, r3, r9, lsl r1
    2be8:	012e4000 	teqeq	lr, r0
    2bec:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    2bf0:	0b3b0b3a 	bleq	ec58e0 <__Stack_Size+0xec50e0>
    2bf4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2bf8:	01000000 	mrseq	r0, (UNDEF: 0)
    2bfc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2c00:	0e030b13 	vmoveq.32	d3[0], r0
    2c04:	17550e1b 	smmlane	r5, fp, lr, r0
    2c08:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2c0c:	24020000 	strcs	r0, [r2], #-0
    2c10:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2c14:	000e030b 	andeq	r0, lr, fp, lsl #6
    2c18:	00160300 	andseq	r0, r6, r0, lsl #6
    2c1c:	0b3a0803 	bleq	e84c30 <__Stack_Size+0xe84430>
    2c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c24:	0f040000 	svceq	0x00040000
    2c28:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2c2c:	05000013 	streq	r0, [r0, #-19]
    2c30:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2c34:	0b3a0e03 	bleq	e86448 <__Stack_Size+0xe85c48>
    2c38:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2c3c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c40:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2c44:	00130119 	andseq	r0, r3, r9, lsl r1
    2c48:	00050600 	andeq	r0, r5, r0, lsl #12
    2c4c:	0b3a0e03 	bleq	e86460 <__Stack_Size+0xe85c60>
    2c50:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c54:	00001702 	andeq	r1, r0, r2, lsl #14
    2c58:	03003407 	movweq	r3, #1031	; 0x407
    2c5c:	3b0b3a08 	blcc	2d1484 <__Stack_Size+0x2d0c84>
    2c60:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2c64:	08000018 	stmdaeq	r0, {r3, r4}
    2c68:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2c6c:	0b3b0b3a 	bleq	ec595c <__Stack_Size+0xec515c>
    2c70:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c74:	34090000 	strcc	r0, [r9], #-0
    2c78:	3a0e0300 	bcc	383880 <__Stack_Size+0x383080>
    2c7c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c80:	00170213 	andseq	r0, r7, r3, lsl r2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b4c0205 	bleq	1300858 <__Stack_Size+0x1300058>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	00010053 	andeq	r0, r1, r3, asr r0
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	00000002 	andeq	r0, r0, r2
			*plainchar    = (fragment & 0x003) << 6;
      b8:	01370300 	teqeq	r7, r0, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
				{
					state_in->step = step_d;
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
					state_in->plainchar = *plainchar;
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
					return plainchar - plaintext_out;
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb5a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb568>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb56c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb570>
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb574>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc7d78>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc7d7c>
		}
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb580>
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc7d84>
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc7d88>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb58c>

	f25519_sub(a, x1sq, z1sq);
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb590>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb594>
	f25519_mul__distinct(x3, a, a);
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc7d98>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	a7010100 	strge	r0, [r1, -r0, lsl #2]

	f25519_mul_c(a, x1z1, 486662);
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
	f25519_add(a, x1sq, a);
     124:	fb010200 	blx	4092e <__Stack_Size+0x4012e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
	f25519_add(a, z1sq, a);
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
	f25519_mul_c(z3, x1sq, 4);
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
	f25519_sub(b, x3, z3); /* D */
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
	f25519_mul__distinct(da, a, b);
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0

	f25519_sub(b, x2, z2);
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
	f25519_add(a, x3, z3); /* C */
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
	f25519_mul__distinct(cb, a, b);
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0

	f25519_add(a, da, cb);
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
	f25519_mul__distinct(b, a, a);
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000

	f25519_sub(a, da, cb);
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
	f25519_mul__distinct(b, a, a);
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	66640000 	strbtvs	r0, [r4], -r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
		f25519_select(zm1, zm1, zm, bit);
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
		f25519_select(xm, xm, xms, bit);
     1e4:	0b980205 	bleq	fe600a00 <BootRAM+0xd5711a1>
     1e8:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     1ec:	01020101 	tsteq	r2, r1, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	0b9a0205 	bleq	fe680a10 <BootRAM+0xd5f11b1>
     1f8:	d7030800 	strle	r0, [r3, -r0, lsl #16]
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	0b9c0205 	bleq	fe700a20 <BootRAM+0xd6711c1>
     208:	dc030800 	stcle	8, cr0, [r3], {-0}
	f25519_mul__distinct(result, zm1, xm);
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
	f25519_normalize(result);
     214:	0b9e0205 	bleq	fe780a30 <BootRAM+0xd6f11d1>
     218:	93030800 	movwls	r0, #14336	; 0x3800
}
     21c:	24150103 	ldrcs	r0, [r5], #-259	; 0x103
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
     22c:	0103bf03 	tsteq	r3, r3, lsl #30
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
     23c:	0103c403 	tsteq	r3, r3, lsl #8
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	0bc40205 	bleq	ff100a64 <BootRAM+0xe071205>
     24c:	cb030800 	blgt	c2254 <__Stack_Size+0xc1a54>
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	0bc60205 	bleq	ff180a74 <BootRAM+0xe0f1215>
     25c:	d0030800 	andle	r0, r3, r0, lsl #16
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	0bc80205 	bleq	ff200a84 <BootRAM+0xe171225>
     26c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	0bca0205 	bleq	ff280a94 <BootRAM+0xe1f1235>
     27c:	da030800 	ble	c2284 <__Stack_Size+0xc1a84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	0bcc0205 	bleq	ff300aa4 <BootRAM+0xe271245>
     28c:	df030800 	svcle	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	0bce0205 	bleq	ff380ab4 <BootRAM+0xe2f1255>
     29c:	e4030800 	str	r0, [r3], #-2048	; 0x800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	0bd00205 	bleq	ff400ac4 <BootRAM+0xe371265>
     2ac:	e9030800 	stmdb	r3, {fp}
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     2bc:	0308000b 	movweq	r0, #32779	; 0x800b
     2c0:	210102bd 			; <UNDEFINED> instruction: 0x210102bd
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc7f4c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	0c840205 	sfmeq	f0, 4, [r4], {5}
     2e8:	e0030800 	and	r0, r3, r0, lsl #16
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x93fefc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9cf8c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x87fd0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	0ce40205 	sfmeq	f0, 2, [r4], #20
     310:	9d030800 	stcls	8, cr0, [r3, #-0]
     314:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     318:	01010006 	tsteq	r1, r6
     31c:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
     320:	0308000c 	movweq	r0, #32780	; 0x800c
     324:	130103a2 	movwne	r0, #5026	; 0x13a2
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     334:	0103a703 	tsteq	r3, r3, lsl #14
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4ef8c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
     348:	0103b103 	tsteq	r3, r3, lsl #2
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	000d2802 	andeq	r2, sp, r2, lsl #16
     358:	03880308 	orreq	r0, r8, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	0d500205 	lfmeq	f0, 2, [r0, #-20]	; 0xffffffec
     36c:	ec030800 	stc	8, cr0, [r3], {-0}
     370:	18030100 	stmdane	r3, {r8}
     374:	2f1f3d20 	svccs	0x001f3d20
     378:	0402008a 	streq	r0, [r2], #-138	; 0x8a
     37c:	062e0602 	strteq	r0, [lr], -r2, lsl #12
     380:	211f3d6d 	tstcs	pc, sp, ror #26
     384:	302f2d21 	eorcc	r2, pc, r1, lsr #26
     388:	2016032f 	andscs	r0, r6, pc, lsr #6
     38c:	022e6d03 	eoreq	r6, lr, #3, 26	; 0xc0
     390:	0101000c 	tsteq	r1, ip
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	140101ad 	strne	r0, [r1], #-429	; 0x1ad
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
     3ac:	0101b303 	tsteq	r1, r3, lsl #6
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	d4020500 	strle	r0, [r2], #-1280	; 0x500
     3bc:	0308000d 	movweq	r0, #32781	; 0x800d
     3c0:	160101be 			; <UNDEFINED> instruction: 0x160101be
     3c4:	31222c22 	teqcc	r2, r2, lsr #24
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     3d4:	0101cb03 	tsteq	r1, r3, lsl #22
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
     3fc:	0101fc03 	tsteq	r1, r3, lsl #24
     400:	24221e14 	strtcs	r1, [r2], #-3604	; 0xe14
     404:	1f4b3e1c 	svcne	0x004b3e1c
     408:	21211c24 	teqcs	r1, r4, lsr #24
     40c:	4f273d22 	svcmi	0x00273d22
     410:	01000b02 	tsteq	r0, r2, lsl #22
     414:	02050001 	andeq	r0, r5, #1
     418:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
     41c:	01029303 	tsteq	r2, r3, lsl #6
     420:	21212d13 	teqcs	r1, r3, lsl sp
     424:	2e0c033d 	mcrcs	3, 0, r0, cr12, cr13, {1}
     428:	4d1d235d 	ldcmi	3, cr2, [sp, #-372]	; 0xfffffe8c
     42c:	01000a02 	tsteq	r0, r2, lsl #20
     430:	02050001 	andeq	r0, r5, #1
     434:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
     438:	0101a003 	tsteq	r1, r3
     43c:	00020213 	andeq	r0, r2, r3, lsl r2
     440:	05000101 	streq	r0, [r0, #-257]	; 0x101
     444:	000ef802 	andeq	pc, lr, r2, lsl #16
     448:	03f00308 	mvnseq	r0, #8, 6	; 0x20000000
     44c:	3d3d2301 	ldccc	3, cr2, [sp, #-4]!
     450:	2f3d1f30 	svccs	0x003d1f30
     454:	01000302 	tsteq	r0, r2, lsl #6
     458:	02050001 	andeq	r0, r5, #1
     45c:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
     460:	0102ad03 	tsteq	r2, r3, lsl #26
     464:	304b3021 	subcc	r3, fp, r1, lsr #32
     468:	3d211f21 	stccc	15, cr1, [r1, #-132]!	; 0xffffff7c
     46c:	0d022f31 	stceq	15, cr2, [r2, #-196]	; 0xffffff3c
     470:	00010100 	andeq	r0, r1, r0, lsl #2
     474:	0f5c0205 	svceq	0x005c0205
     478:	fb030800 	blx	c2482 <__Stack_Size+0xc1c82>
     47c:	40220103 	eormi	r0, r2, r3, lsl #2
     480:	2f2f3d1d 	svccs	0x002f3d1d
     484:	0003022f 	andeq	r0, r3, pc, lsr #4
     488:	05000101 	streq	r0, [r0, #-257]	; 0x101
     48c:	000f8002 	andeq	r8, pc, r2
     490:	04850308 	streq	r0, [r5], #776	; 0x308
     494:	1b412101 	blne	10488a0 <__Stack_Size+0x10480a0>
     498:	59335b33 	ldmdbpl	r3!, {r0, r1, r4, r5, r8, r9, fp, ip, lr}
     49c:	3c0d033d 	stccc	3, cr0, [sp], {61}	; 0x3d
     4a0:	3d4b504b 	stclcc	0, cr5, [fp, #-300]	; 0xfffffed4
     4a4:	42345c42 	eorsmi	r5, r4, #16896	; 0x4200
     4a8:	4b5e3d59 	blmi	178fa14 <__Stack_Size+0x178f214>
     4ac:	022a243f 	eoreq	r2, sl, #1056964608	; 0x3f000000
     4b0:	0101000e 	tsteq	r1, lr
     4b4:	00020500 	andeq	r0, r2, r0, lsl #10
     4b8:	03000000 	movweq	r0, #0
     4bc:	130104d5 	movwne	r0, #5333	; 0x14d5
     4c0:	0004022f 	andeq	r0, r4, pc, lsr #4
     4c4:	006e0101 	rsbeq	r0, lr, r1, lsl #2
     4c8:	00020000 	andeq	r0, r2, r0
     4cc:	00000068 	andeq	r0, r0, r8, rrx
     4d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     4d4:	0101000d 	tsteq	r1, sp
     4d8:	00000101 	andeq	r0, r0, r1, lsl #2
     4dc:	00000100 	andeq	r0, r0, r0, lsl #2
     4e0:	732f2e01 	teqvc	pc, #1, 28
     4e4:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     4e8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4ec:	752f2e00 	strvc	r2, [pc, #-3584]!	; fffff6f4 <BootRAM+0xef6fe95>
     4f0:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     4f4:	00006269 	andeq	r6, r0, r9, ror #4
     4f8:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     4fc:	30316632 	eorscc	r6, r1, r2, lsr r6
     500:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     504:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     508:	00000100 	andeq	r0, r0, r0, lsl #2
     50c:	5f627375 	svcpl	0x00627375
     510:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     514:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     518:	73750000 	cmnvc	r5, #0
     51c:	00682e62 	rsbeq	r2, r8, r2, ror #28
     520:	75000000 	strvc	r0, [r0, #-0]
     524:	645f6273 	ldrbvs	r6, [pc], #-627	; 52c <_Minimum_Stack_Size+0x42c>
     528:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     52c:	6f747069 	svcvs	0x00747069
     530:	00632e72 	rsbeq	r2, r3, r2, ror lr
     534:	00000000 	andeq	r0, r0, r0
     538:	000002a9 	andeq	r0, r0, r9, lsr #5
     53c:	01f10002 	mvnseq	r0, r2
     540:	01020000 	mrseq	r0, (UNDEF: 2)
     544:	000d0efb 	strdeq	r0, [sp], -fp
     548:	01010101 	tsteq	r1, r1, lsl #2
     54c:	01000000 	mrseq	r0, (UNDEF: 0)
     550:	63010000 	movwvs	r0, #4096	; 0x1000
     554:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     558:	6172676f 	cmnvs	r2, pc, ror #14
     55c:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     560:	2073656c 	rsbscs	r6, r3, ip, ror #10
     564:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     568:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     56c:	6f742075 	svcvs	0x00742075
     570:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     574:	206d7261 	rsbcs	r7, sp, r1, ror #4
     578:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     57c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     580:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     584:	31303220 	teqcc	r0, r0, lsr #4
     588:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     58c:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     590:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
     594:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     598:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     59c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     5a0:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
     5a4:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
     5a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     5ac:	00656475 	rsbeq	r6, r5, r5, ror r4
     5b0:	705c3a63 	subsvc	r3, ip, r3, ror #20
     5b4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     5b8:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     5bc:	73656c69 	cmnvc	r5, #26880	; 0x6900
     5c0:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     5c4:	675c2936 	smmlarvs	ip, r6, r9, r2
     5c8:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     5cc:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     5d0:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     5d4:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     5d8:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     5dc:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     5e0:	30322038 	eorscc	r2, r2, r8, lsr r0
     5e4:	33713431 	cmncc	r1, #822083584	; 0x31000000
     5e8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     5ec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     5f0:	61652d65 	cmnvs	r5, r5, ror #26
     5f4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     5f8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     5fc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
     600:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
     604:	6300656e 	movwvs	r6, #1390	; 0x56e
     608:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     60c:	6172676f 	cmnvs	r2, pc, ror #14
     610:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     614:	2073656c 	rsbscs	r6, r3, ip, ror #10
     618:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     61c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     620:	6f742075 	svcvs	0x00742075
     624:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     628:	206d7261 	rsbcs	r7, sp, r1, ror #4
     62c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     630:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     634:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     638:	31303220 	teqcc	r0, r0, lsr #4
     63c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     640:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     644:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     648:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     64c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
     650:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
     654:	2f2e0065 	svccs	0x002e0065
     658:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     65c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     660:	2f2e0062 	svccs	0x002e0062
     664:	31353532 	teqcc	r5, r2, lsr r5
     668:	2f2e0039 	svccs	0x002e0039
     66c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     670:	00003436 	andeq	r3, r0, r6, lsr r4
     674:	6e69616d 	powvsez	f6, f1, #5.0
     678:	0000632e 	andeq	r6, r0, lr, lsr #6
     67c:	74730000 	ldrbtvc	r0, [r3], #-0
     680:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     684:	0100682e 	tsteq	r0, lr, lsr #16
     688:	645f0000 	ldrbvs	r0, [pc], #-0	; 690 <_Minimum_Stack_Size+0x590>
     68c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     690:	745f746c 	ldrbvc	r7, [pc], #-1132	; 698 <_Minimum_Stack_Size+0x598>
     694:	73657079 	cmnvc	r5, #121	; 0x79
     698:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     69c:	74730000 	ldrbtvc	r0, [r3], #-0
     6a0:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     6a4:	0300682e 	movweq	r6, #2094	; 0x82e
     6a8:	74730000 	ldrbtvc	r0, [r3], #-0
     6ac:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     6b0:	5f783031 	svcpl	0x00783031
     6b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     6b8:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     6bc:	61680000 	cmnvs	r8, r0
     6c0:	61776472 	cmnvs	r7, r2, ror r4
     6c4:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     6c8:	00000000 	andeq	r0, r0, r0
     6cc:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     6d0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     6d4:	73000000 	movwvc	r0, #0
     6d8:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     6dc:	00682e36 	rsbeq	r2, r8, r6, lsr lr
     6e0:	63000005 	movwvs	r0, #5
     6e4:	6f636e65 	svcvs	0x00636e65
     6e8:	682e6564 	stmdavs	lr!, {r2, r5, r6, r8, sl, sp, lr}
     6ec:	00000600 	andeq	r0, r0, r0, lsl #12
     6f0:	63656463 	cmnvs	r5, #1660944384	; 0x63000000
     6f4:	2e65646f 	cdpcs	4, 6, cr6, cr5, cr15, {3}
     6f8:	00060068 	andeq	r0, r6, r8, rrx
     6fc:	62737500 	rsbsvs	r7, r3, #0, 10
     700:	0000682e 	andeq	r6, r0, lr, lsr #16
     704:	74730000 	ldrbtvc	r0, [r3], #-0
     708:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     70c:	0300682e 	movweq	r6, #2094	; 0x82e
     710:	74730000 	ldrbtvc	r0, [r3], #-0
     714:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
     718:	00030068 	andeq	r0, r3, r8, rrx
     71c:	73646500 	cmnvc	r4, #0, 10
     720:	2e6e6769 	cdpcs	7, 6, cr6, cr14, cr9, {3}
     724:	00050068 	andeq	r0, r5, r8, rrx
     728:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     72c:	0000682e 	andeq	r6, r0, lr, lsr #16
     730:	00000000 	andeq	r0, r0, r0
     734:	00000205 	andeq	r0, r0, r5, lsl #4
     738:	32030000 	andcc	r0, r3, #0
     73c:	1c242001 	stcne	0, cr2, [r4], #-4
     740:	31912f24 	orrscc	r2, r1, r4, lsr #30
     744:	01000202 	tsteq	r0, r2, lsl #4
     748:	02050001 	andeq	r0, r5, #1
     74c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
     750:	20013e03 	andcs	r3, r1, r3, lsl #28
     754:	1f673d40 	svcne	0x00673d40
     758:	211f3d21 	tstcs	pc, r1, lsr #26
     75c:	00020223 	andeq	r0, r2, r3, lsr #4
     760:	05000101 	streq	r0, [r0, #-257]	; 0x101
     764:	00106402 	andseq	r6, r0, r2, lsl #8
     768:	00ce0308 	sbceq	r0, lr, r8, lsl #6
     76c:	3c0a0301 	stccc	3, cr0, [sl], {1}
     770:	5b3ebd3d 	blpl	fafc6c <__Stack_Size+0xfaf46c>
     774:	4b594c1e 	blmi	16537f4 <__Stack_Size+0x1652ff4>
     778:	5a765a5a 	bpl	1d970e8 <__Stack_Size+0x1d968e8>
     77c:	3d4b3d4b 	stclcc	13, cr3, [fp, #-300]	; 0xfffffed4
     780:	01001002 	tsteq	r0, r2
     784:	02050001 	andeq	r0, r5, #1
     788:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
     78c:	0100f503 	tsteq	r0, r3, lsl #10
     790:	2f2f2f32 	svccs	0x002f2f32
     794:	3d302f2f 	ldccc	15, cr2, [r0, #-188]!	; 0xffffff44
     798:	2f673e5e 	svccs	0x00673e5e
     79c:	78032f1f 	stmdavc	r3, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
     7a0:	04020066 	streq	r0, [r2], #-102	; 0x66
     7a4:	580b0301 	stmdapl	fp, {r0, r8, r9}
     7a8:	01040200 	mrseq	r0, R12_usr
     7ac:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     7b0:	2f232101 	svccs	0x00232101
     7b4:	01040200 	mrseq	r0, R12_usr
     7b8:	04020033 	streq	r0, [r2], #-51	; 0x33
     7bc:	02003301 	andeq	r3, r0, #67108864	; 0x4000000
     7c0:	273d0104 	ldrcs	r0, [sp, -r4, lsl #2]!
     7c4:	00912391 	umullseq	r2, r1, r1, r3
     7c8:	4c010402 	cfstrsmi	mvf0, [r1], {2}
     7cc:	01040200 	mrseq	r0, R12_usr
     7d0:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     7d4:	02004301 	andeq	r4, r0, #67108864	; 0x4000000
     7d8:	003d0104 	eorseq	r0, sp, r4, lsl #2
     7dc:	40010402 	andmi	r0, r1, r2, lsl #8
     7e0:	01001d02 	tsteq	r0, r2, lsl #26
     7e4:	00053d01 	andeq	r3, r5, r1, lsl #26
     7e8:	b7000200 	strlt	r0, [r0, -r0, lsl #4]
     7ec:	02000001 	andeq	r0, r0, #1
     7f0:	0d0efb01 	vstreq	d15, [lr, #-4]
     7f4:	01010100 	mrseq	r0, (UNDEF: 17)
     7f8:	00000001 	andeq	r0, r0, r1
     7fc:	01000001 	tsteq	r0, r1
     800:	705c3a63 	subsvc	r3, ip, r3, ror #20
     804:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     808:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     80c:	73656c69 	cmnvc	r5, #26880	; 0x6900
     810:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     814:	675c2936 	smmlarvs	ip, r6, r9, r2
     818:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     81c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     820:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     824:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     828:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     82c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     830:	30322038 	eorscc	r2, r2, r8, lsr r0
     834:	33713431 	cmncc	r1, #822083584	; 0x31000000
     838:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
     83c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
     840:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     844:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     848:	61652d65 	cmnvs	r5, r5, ror #26
     84c:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
     850:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     854:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
     858:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
     85c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
     860:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     864:	206d6172 	rsbcs	r6, sp, r2, ror r1
     868:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     86c:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     870:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     874:	20756e67 	rsbscs	r6, r5, r7, ror #28
     878:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6b0 <_Minimum_Stack_Size+0x5b0>
     87c:	72612073 	rsbvc	r2, r1, #115	; 0x73
     880:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     884:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     888:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     88c:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     890:	71343130 	teqvc	r4, r0, lsr r1
     894:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
     898:	6f6e2d6d 	svcvs	0x006e2d6d
     89c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     8a0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     8a4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     8a8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     8ac:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     8b0:	00656e69 	rsbeq	r6, r5, r9, ror #28
     8b4:	705c3a63 	subsvc	r3, ip, r3, ror #20
     8b8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     8bc:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     8c0:	73656c69 	cmnvc	r5, #26880	; 0x6900
     8c4:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     8c8:	675c2936 	smmlarvs	ip, r6, r9, r2
     8cc:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     8d0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     8d4:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     8d8:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     8dc:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     8e0:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     8e4:	30322038 	eorscc	r2, r2, r8, lsr r0
     8e8:	33713431 	cmncc	r1, #822083584	; 0x31000000
     8ec:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     8f0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     8f4:	61652d65 	cmnvs	r5, r5, ror #26
     8f8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     8fc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     900:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     904:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     908:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     90c:	00006269 	andeq	r6, r0, r9, ror #4
     910:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     914:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     918:	0000632e 	andeq	r6, r0, lr, lsr #6
     91c:	74730000 	ldrbtvc	r0, [r3], #-0
     920:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     924:	0100682e 	tsteq	r0, lr, lsr #16
     928:	74730000 	ldrbtvc	r0, [r3], #-0
     92c:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
     930:	0100682e 	tsteq	r0, lr, lsr #16
     934:	645f0000 	ldrbvs	r0, [pc], #-0	; 93c <__Stack_Size+0x13c>
     938:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
     93c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 944 <__Stack_Size+0x144>
     940:	73657079 	cmnvc	r5, #121	; 0x79
     944:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     948:	74730000 	ldrbtvc	r0, [r3], #-0
     94c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
     950:	0300682e 	movweq	r6, #2094	; 0x82e
     954:	74730000 	ldrbtvc	r0, [r3], #-0
     958:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     95c:	5f783031 	svcpl	0x00783031
     960:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     964:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
     968:	61680000 	cmnvs	r8, r0
     96c:	61776472 	cmnvs	r7, r2, ror r4
     970:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     974:	00000000 	andeq	r0, r0, r0
     978:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
     97c:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
     980:	00003e6e 	andeq	r3, r0, lr, ror #28
     984:	73750000 	cmnvc	r5, #0
     988:	00682e62 	rsbeq	r2, r8, r2, ror #28
     98c:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
     990:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     994:	0000682e 	andeq	r6, r0, lr, lsr #16
     998:	74730000 	ldrbtvc	r0, [r3], #-0
     99c:	2e6f6964 	cdpcs	9, 6, cr6, cr15, cr4, {3}
     9a0:	00030068 	andeq	r0, r3, r8, rrx
     9a4:	05000000 	streq	r0, [r0, #-0]
     9a8:	00121802 	andseq	r1, r2, r2, lsl #16
     9ac:	013a0308 	teqeq	sl, r8, lsl #6
     9b0:	024b3b14 	subeq	r3, fp, #20, 22	; 0x5000
     9b4:	01010004 	tsteq	r1, r4
     9b8:	2e020500 	cfsh32cs	mvfx0, mvfx2, #0
     9bc:	03080012 	movweq	r0, #32786	; 0x8012
     9c0:	5d14013f 	ldfpls	f0, [r4, #-252]	; 0xffffff04
     9c4:	01000402 	tsteq	r0, r2, lsl #8
     9c8:	02050001 	andeq	r0, r5, #1
     9cc:	08001240 	stmdaeq	r0, {r6, r9, ip}
     9d0:	0100c903 	tsteq	r0, r3, lsl #18
     9d4:	3d493d2e 	stclcc	13, cr3, [r9, #-184]	; 0xffffff48
     9d8:	01040200 	mrseq	r0, R12_usr
     9dc:	00200631 	eoreq	r0, r0, r1, lsr r6
     9e0:	06010402 	streq	r0, [r1], -r2, lsl #8
     9e4:	04020022 	streq	r0, [r2], #-34	; 0x22
     9e8:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
     9ec:	331e0204 	tstcc	lr, #4, 4	; 0x40000000
     9f0:	0402005a 	streq	r0, [r2], #-90	; 0x5a
     9f4:	00200601 	eoreq	r0, r0, r1, lsl #12
     9f8:	06020402 	streq	r0, [r2], -r2, lsl #8
     9fc:	04020022 	streq	r0, [r2], #-34	; 0x22
     a00:	02321e02 	eorseq	r1, r2, #2, 28
     a04:	0101000a 	tsteq	r1, sl
     a08:	90020500 	andls	r0, r2, r0, lsl #10
     a0c:	03080012 	movweq	r0, #32786	; 0x8012
     a10:	000102a0 	andeq	r0, r1, r0, lsr #5
     a14:	13010402 	movwne	r0, #5122	; 0x1402
     a18:	0002023d 	andeq	r0, r2, sp, lsr r2
     a1c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a20:	00129a02 	andseq	r9, r2, r2, lsl #20
     a24:	02a60308 	adceq	r0, r6, #8, 6	; 0x20000000
     a28:	02002001 	andeq	r2, r0, #1
     a2c:	3e2f0104 	sufcce	f0, f7, f4
     a30:	0001024d 	andeq	r0, r1, sp, asr #4
     a34:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a38:	0012b002 	andseq	fp, r2, r2
     a3c:	02af0308 	adceq	r0, pc, #8, 6	; 0x20000000
     a40:	68223c01 	stmdavs	r2!, {r0, sl, fp, ip, sp}
     a44:	0006024d 	andeq	r0, r6, sp, asr #4
     a48:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a4c:	0012d802 	andseq	sp, r2, r2, lsl #16
     a50:	02b90308 	adcseq	r0, r9, #8, 6	; 0x20000000
     a54:	213e2e01 	teqcs	lr, r1, lsl #28
     a58:	00050230 	andeq	r0, r5, r0, lsr r2
     a5c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a60:	0012f402 	andseq	pc, r2, r2, lsl #8
     a64:	02c10308 	sbceq	r0, r1, #8, 6	; 0x20000000
     a68:	5a312e01 	bpl	c4c274 <__Stack_Size+0xc4ba74>
     a6c:	01040200 	mrseq	r0, R12_usr
     a70:	4c062006 	stcmi	0, cr2, [r6], {6}
     a74:	01040200 	mrseq	r0, R12_usr
     a78:	02002006 	andeq	r2, r0, #6
     a7c:	22060104 	andcs	r0, r6, #4, 2
     a80:	01040200 	mrseq	r0, R12_usr
     a84:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     a88:	02006801 	andeq	r6, r0, #65536	; 0x10000
     a8c:	003e0104 	eorseq	r0, lr, r4, lsl #2
     a90:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
     a94:	01040200 	mrseq	r0, R12_usr
     a98:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     a9c:	20740301 	rsbscs	r0, r4, r1, lsl #6
     aa0:	01040200 	mrseq	r0, R12_usr
     aa4:	a2200c03 	eorge	r0, r0, #768	; 0x300
     aa8:	4b200b03 	blmi	8036bc <__Stack_Size+0x802ebc>
     aac:	002e7603 	eoreq	r7, lr, r3, lsl #12
     ab0:	30010402 	andcc	r0, r1, r2, lsl #8
     ab4:	01040200 	mrseq	r0, R12_usr
     ab8:	0402004c 	streq	r0, [r2], #-76	; 0x4c
     abc:	0f023001 	svceq	0x00023001
     ac0:	00010100 	andeq	r0, r1, r0, lsl #2
     ac4:	13900205 	orrsne	r0, r0, #1342177280	; 0x50000000
     ac8:	e5030800 	str	r0, [r3, #-2048]	; 0x800
     acc:	22200102 	eorcs	r0, r0, #-2147483648	; 0x80000000
     ad0:	01040200 	mrseq	r0, R12_usr
     ad4:	04020021 	streq	r0, [r2], #-33	; 0x21
     ad8:	02002d01 	andeq	r2, r0, #1, 26	; 0x40
     adc:	00210104 	eoreq	r0, r1, r4, lsl #2
     ae0:	2d010402 	cfstrscs	mvf0, [r1, #-8]
     ae4:	01040200 	mrseq	r0, R12_usr
     ae8:	04020030 	streq	r0, [r2], #-48	; 0x30
     aec:	02002f01 	andeq	r2, r0, #1, 30
     af0:	022d0104 	eoreq	r0, sp, #4, 2
     af4:	01010006 	tsteq	r1, r6
     af8:	b8020500 	stmdalt	r2, {r8, sl}
     afc:	03080013 	movweq	r0, #32787	; 0x8013
     b00:	270102ed 	strcs	r0, [r1, -sp, ror #5]
     b04:	26207903 	strtcs	r7, [r0], -r3, lsl #18
     b08:	3e4b4e59 	mcrcc	14, 2, r4, cr11, cr9, {2}
     b0c:	2f1f211f 	svccs	0x001f211f
     b10:	3b214b31 	blcc	8537dc <__Stack_Size+0x852fdc>
     b14:	0343312f 	movteq	r3, #12591	; 0x312f
     b18:	2f3d2e7a 	svccs	0x003d2e7a
     b1c:	221e312f 	andscs	r3, lr, #-1073741813	; 0xc000000b
     b20:	4b31301e 	blmi	c4cba0 <__Stack_Size+0xc4c3a0>
     b24:	01000502 	tsteq	r0, r2, lsl #10
     b28:	02050001 	andeq	r0, r5, #1
     b2c:	08001440 	stmdaeq	r0, {r6, sl, ip}
     b30:	01039003 	tsteq	r3, r3
     b34:	4b1f2113 	blmi	7c8f88 <__Stack_Size+0x7c8788>
     b38:	4c4b674b 	mcrrmi	7, 4, r6, fp, cr11
     b3c:	01000c02 	tsteq	r0, r2, lsl #24
     b40:	02050001 	andeq	r0, r5, #1
     b44:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
     b48:	01039a03 	tsteq	r3, r3, lsl #20
     b4c:	04020015 	streq	r0, [r2], #-21
     b50:	424d5901 	submi	r5, sp, #16384	; 0x4000
     b54:	04020085 	streq	r0, [r2], #-133	; 0x85
     b58:	0b035101 	bleq	d4f64 <__Stack_Size+0xd4764>
     b5c:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     b60:	4b3e4b01 	blmi	f9376c <__Stack_Size+0xf92f6c>
     b64:	01000902 	tsteq	r0, r2, lsl #18
     b68:	02050001 	andeq	r0, r5, #1
     b6c:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     b70:	0103c403 	tsteq	r3, r3, lsl #8
     b74:	000a0213 	andeq	r0, sl, r3, lsl r2
     b78:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b7c:	0014fc02 	andseq	pc, r4, r2, lsl #24
     b80:	03c80308 	biceq	r0, r8, #8, 6	; 0x20000000
     b84:	214b1401 	cmpcs	fp, r1, lsl #8
     b88:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     b8c:	023d2401 	eorseq	r2, sp, #16777216	; 0x1000000
     b90:	01010003 	tsteq	r1, r3
     b94:	18020500 	stmdane	r2, {r8, sl}
     b98:	03080015 	movweq	r0, #32789	; 0x8015
     b9c:	170103d6 			; <UNDEFINED> instruction: 0x170103d6
     ba0:	023d3d3d 	eorseq	r3, sp, #3904	; 0xf40
     ba4:	0101000d 	tsteq	r1, sp
     ba8:	44020500 	strmi	r0, [r2], #-1280	; 0x500
     bac:	03080015 	movweq	r0, #32789	; 0x8015
     bb0:	030103e2 	movweq	r0, #5090	; 0x13e2
     bb4:	77030109 	strvc	r0, [r3, -r9, lsl #2]
     bb8:	23242520 	teqcs	r4, #32, 10	; 0x8000000
     bbc:	0502311f 	streq	r3, [r2, #-287]	; 0x11f
     bc0:	00010100 	andeq	r0, r1, r0, lsl #2
     bc4:	00000205 	andeq	r0, r0, r5, lsl #4
     bc8:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
     bcc:	5b140104 	blpl	500fe4 <__Stack_Size+0x5007e4>
     bd0:	09023169 	stmdbeq	r2, {r0, r3, r5, r6, r8, ip, sp}
     bd4:	00010100 	andeq	r0, r1, r0, lsl #2
     bd8:	00000205 	andeq	r0, r0, r5, lsl #4
     bdc:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
     be0:	22240104 	eorcs	r0, r4, #4, 2
     be4:	368b5a2c 	strcc	r5, [fp], ip, lsr #20
     be8:	4d3e2631 	ldcmi	6, cr2, [lr, #-196]!	; 0xffffff3c
     bec:	01000602 	tsteq	r0, r2, lsl #12
     bf0:	02050001 	andeq	r0, r5, #1
     bf4:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
     bf8:	0104b103 	tsteq	r4, r3, lsl #2
     bfc:	03010c03 	movweq	r0, #7171	; 0x1c03
     c00:	0c032074 	stceq	0, cr2, [r3], {116}	; 0x74
     c04:	3d1c2420 	cfldrscc	mvf2, [ip, #-128]	; 0xffffff80
     c08:	23312c31 	teqcs	r1, #12544	; 0x3100
     c0c:	243b311d 	ldrtcs	r3, [fp], #-285	; 0x11d
     c10:	3073231d 	rsbscc	r2, r3, sp, lsl r3
     c14:	3122212f 	teqcc	r2, pc, lsr #2
     c18:	49211f21 	stmdbmi	r1!, {r0, r5, r8, r9, sl, fp, ip}
     c1c:	01000902 	tsteq	r0, r2, lsl #18
     c20:	02050001 	andeq	r0, r5, #1
     c24:	080015c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip}
     c28:	0104d403 	tsteq	r4, r3, lsl #8
     c2c:	2f2f5914 	svccs	0x002f5914
     c30:	00070230 	andeq	r0, r7, r0, lsr r2
     c34:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c38:	0015ec02 	andseq	lr, r5, r2, lsl #24
     c3c:	03f40308 	mvnseq	r0, #8, 6	; 0x20000000
     c40:	2f272001 	svccs	0x00272001
     c44:	21303231 	teqcs	r0, r1, lsr r2
     c48:	0002022d 	andeq	r0, r2, sp, lsr #4
     c4c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c50:	00160c02 	andseq	r0, r6, r2, lsl #24
     c54:	04de0308 	ldrbeq	r0, [lr], #776	; 0x308
     c58:	02001601 	andeq	r1, r0, #1048576	; 0x100000
     c5c:	02400104 	subeq	r0, r0, #4, 2
     c60:	01010007 	tsteq	r1, r7
     c64:	20020500 	andcs	r0, r2, r0, lsl #10
     c68:	03080016 	movweq	r0, #32790	; 0x8016
     c6c:	130104ea 	movwne	r0, #5354	; 0x14ea
     c70:	0022211f 	eoreq	r2, r2, pc, lsl r1
     c74:	30010402 	andcc	r0, r1, r2, lsl #8
     c78:	02002167 	andeq	r2, r0, #-1073741799	; 0xc0000019
     c7c:	4f2f0104 	svcmi	0x002f0104
     c80:	00070223 	andeq	r0, r7, r3, lsr #4
     c84:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c88:	00000002 	andeq	r0, r0, r2
     c8c:	04fb0300 	ldrbteq	r0, [fp], #768	; 0x300
     c90:	02002e01 	andeq	r2, r0, #1, 28
     c94:	4b2f0104 	blmi	bc10ac <__Stack_Size+0xbc08ac>
     c98:	040221b1 	streq	r2, [r2], #-433	; 0x1b1
     c9c:	00010100 	andeq	r0, r1, r0, lsl #2
     ca0:	16540205 	ldrbne	r0, [r4], -r5, lsl #4
     ca4:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
     ca8:	2f220105 	svccs	0x00220105
     cac:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     cb0:	01040200 	mrseq	r0, R12_usr
     cb4:	02004b24 	andeq	r4, r0, #36, 22	; 0x9000
     cb8:	3d3d0104 	ldfccs	f0, [sp, #-16]!
     cbc:	01040200 	mrseq	r0, R12_usr
     cc0:	232f3e3d 	teqcs	pc, #976	; 0x3d0
     cc4:	00090225 	andeq	r0, r9, r5, lsr #4
     cc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ccc:	0016a002 	andseq	sl, r6, r2
     cd0:	05a00308 	streq	r0, [r0, #776]!	; 0x308
     cd4:	06021601 	streq	r1, [r2], -r1, lsl #12
     cd8:	00010100 	andeq	r0, r1, r0, lsl #2
     cdc:	16ac0205 	strtne	r0, [ip], r5, lsl #4
     ce0:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     ce4:	3d140105 	ldfccs	f0, [r4, #-20]	; 0xffffffec
     ce8:	01000902 	tsteq	r0, r2, lsl #18
     cec:	02050001 	andeq	r0, r5, #1
     cf0:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
     cf4:	0105b003 	tsteq	r5, r3
     cf8:	4c302214 	lfmmi	f2, 4, [r0], #-80	; 0xffffffb0
     cfc:	01000202 	tsteq	r0, r2, lsl #4
     d00:	02050001 	andeq	r0, r5, #1
     d04:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
     d08:	0105bc03 	tsteq	r5, r3, lsl #24
     d0c:	04024b14 	streq	r4, [r2], #-2836	; 0xb14
     d10:	00010100 	andeq	r0, r1, r0, lsl #2
     d14:	16e80205 	strbtne	r0, [r8], r5, lsl #4
     d18:	c2030800 	andgt	r0, r3, #0, 16
     d1c:	30150105 	andscc	r0, r5, r5, lsl #2
     d20:	00090226 	andeq	r0, r9, r6, lsr #4
     d24:	03b20101 			; <UNDEFINED> instruction: 0x03b20101
     d28:	00020000 	andeq	r0, r2, r0
     d2c:	000001dc 	ldrdeq	r0, [r0], -ip
     d30:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     d34:	0101000d 	tsteq	r1, sp
     d38:	00000101 	andeq	r0, r0, r1, lsl #2
     d3c:	00000100 	andeq	r0, r0, r0, lsl #2
     d40:	5c3a6301 	ldcpl	3, cr6, [sl], #-4
     d44:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
     d48:	206d6172 	rsbcs	r6, sp, r2, ror r1
     d4c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
     d50:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
     d54:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
     d58:	20756e67 	rsbscs	r6, r5, r7, ror #28
     d5c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; b94 <__Stack_Size+0x394>
     d60:	72612073 	rsbvc	r2, r1, #115	; 0x73
     d64:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
     d68:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
     d6c:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
     d70:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
     d74:	71343130 	teqvc	r4, r0, lsr r1
     d78:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
     d7c:	6f6e2d6d 	svcvs	0x006e2d6d
     d80:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
     d84:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
     d88:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d8c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
     d90:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     d94:	00656e69 	rsbeq	r6, r5, r9, ror #28
     d98:	705c3a63 	subsvc	r3, ip, r3, ror #20
     d9c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
     da0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
     da4:	73656c69 	cmnvc	r5, #26880	; 0x6900
     da8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
     dac:	675c2936 	smmlarvs	ip, r6, r9, r2
     db0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
     db4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
     db8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
     dbc:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
     dc0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     dc4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
     dc8:	30322038 	eorscc	r2, r2, r8, lsr r0
     dcc:	33713431 	cmncc	r1, #822083584	; 0x31000000
     dd0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
     dd4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     dd8:	61652d65 	cmnvs	r5, r5, ror #26
     ddc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
     de0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
     de4:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
     de8:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     dec:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     df0:	63006269 	movwvs	r6, #617	; 0x269
     df4:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
     df8:	6172676f 	cmnvs	r2, pc, ror #14
     dfc:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
     e00:	2073656c 	rsbscs	r6, r3, ip, ror #10
     e04:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
     e08:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
     e0c:	6f742075 	svcvs	0x00742075
     e10:	20736c6f 	rsbscs	r6, r3, pc, ror #24
     e14:	206d7261 	rsbcs	r7, sp, r1, ror #4
     e18:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     e1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     e20:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
     e24:	31303220 	teqcc	r0, r0, lsr #4
     e28:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
     e2c:	5c62696c 	stclpl	9, cr6, [r2], #-432	; 0xfffffe50
     e30:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
     e34:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
     e38:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
     e3c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
     e40:	2e345c69 	cdpcs	12, 3, cr5, cr4, cr9, {3}
     e44:	5c342e38 	ldcpl	14, cr2, [r4], #-224	; 0xffffff20
     e48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     e4c:	00656475 	rsbeq	r6, r5, r5, ror r4
     e50:	73752f2e 	cmnvc	r5, #46, 30	; 0xb8
     e54:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     e58:	2f2e0062 	svccs	0x002e0062
     e5c:	31353532 	teqcc	r5, r2, lsr r5
     e60:	64000039 	strvs	r0, [r0], #-57	; 0x39
     e64:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     e68:	00000000 	andeq	r0, r0, r0
     e6c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
     e70:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
     e74:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     e78:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
     e7c:	00000100 	andeq	r0, r0, r0, lsl #2
     e80:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
     e84:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     e88:	00000200 	andeq	r0, r0, r0, lsl #4
     e8c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     e90:	30316632 	eorscc	r6, r1, r2, lsr r6
     e94:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     e98:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     e9c:	00000300 	andeq	r0, r0, r0, lsl #6
     ea0:	64647473 	strbtvs	r7, [r4], #-1139	; 0x473
     ea4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     ea8:	00000400 	andeq	r0, r0, r0, lsl #8
     eac:	5f627375 	svcpl	0x00627375
     eb0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     eb4:	0500682e 	streq	r6, [r0, #-2094]	; 0x82e
     eb8:	66640000 	strbtvs	r0, [r4], -r0
     ebc:	00682e75 	rsbeq	r2, r8, r5, ror lr
     ec0:	73000000 	movwvc	r0, #0
     ec4:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     ec8:	00682e36 	rsbeq	r2, r8, r6, lsr lr
     ecc:	69000006 	stmdbvs	r0, {r1, r2}
     ed0:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     ed4:	0000682e 	andeq	r6, r0, lr, lsr #16
     ed8:	73750000 	cmnvc	r5, #0
     edc:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     ee0:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
     ee4:	00000500 	andeq	r0, r0, r0, lsl #10
     ee8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     eec:	00000068 	andeq	r0, r0, r8, rrx
     ef0:	72616800 	rsbvc	r6, r1, #0, 16
     ef4:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     ef8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     efc:	73000000 	movwvc	r0, #0
     f00:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     f04:	00682e67 	rsbeq	r2, r8, r7, ror #28
     f08:	00000002 	andeq	r0, r0, r2
     f0c:	00020500 	andeq	r0, r2, r0, lsl #10
     f10:	03080017 	movweq	r0, #32791	; 0x8017
     f14:	1f13013c 	svcne	0x0013013c
     f18:	212f1c25 	teqcs	pc, r5, lsr #24
     f1c:	21212121 	teqcs	r1, r1, lsr #2
     f20:	26211e22 	strtcs	r1, [r1], -r2, lsr #28
     f24:	21207a03 	teqcs	r0, r3, lsl #20
     f28:	1f214b2f 	svcne	0x00214b2f
     f2c:	1f212f21 	svcne	0x00212f21
     f30:	2d5b3d21 	ldclcs	13, cr3, [fp, #-132]	; 0xffffff7c
     f34:	01001c02 	tsteq	r0, r2, lsl #24
     f38:	02050001 	andeq	r0, r5, #1
     f3c:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
     f40:	0102ea03 	tsteq	r2, r3, lsl #20
     f44:	211f2121 	tstcs	pc, r1, lsr #2
     f48:	221e231f 	andscs	r2, lr, #2080374784	; 0x7c000000
     f4c:	03222f21 	teqeq	r2, #33, 30	; 0x84
     f50:	74032e0d 	strvc	r2, [r3], #-3597	; 0xe0d
     f54:	2f422f2e 	svccs	0x00422f2e
     f58:	08022c24 	stmdaeq	r2, {r2, r5, sl, fp, sp}
     f5c:	00010100 	andeq	r0, r1, r0, lsl #2
     f60:	00000205 	andeq	r0, r0, r5, lsl #4
     f64:	81030000 	mrshi	r0, (UNDEF: 3)
     f68:	01020103 	tsteq	r2, r3, lsl #2
     f6c:	00010100 	andeq	r0, r1, r0, lsl #2
     f70:	17cc0205 	strbne	r0, [ip, r5, lsl #4]
     f74:	84030800 	strhi	r0, [r3], #-2048	; 0x800
     f78:	21130103 	tstcs	r3, r3, lsl #2
     f7c:	0222224b 	eoreq	r2, r2, #-1342177276	; 0xb0000004
     f80:	01010005 	tsteq	r1, r5
     f84:	e4020500 	str	r0, [r2], #-1280	; 0x500
     f88:	03080017 	movweq	r0, #32791	; 0x8017
     f8c:	1301038d 	movwne	r0, #5005	; 0x138d
     f90:	22224b21 	eorcs	r4, r2, #33792	; 0x8400
     f94:	01000502 	tsteq	r0, r2, lsl #10
     f98:	02050001 	andeq	r0, r5, #1
     f9c:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
     fa0:	01039703 	tsteq	r3, r3, lsl #14
     fa4:	4b211f22 	blmi	848c34 <__Stack_Size+0x848434>
     fa8:	023e222f 	eorseq	r2, lr, #-268435454	; 0xf0000002
     fac:	01010007 	tsteq	r1, r7
     fb0:	24020500 	strcs	r0, [r2], #-1280	; 0x500
     fb4:	03080018 	movweq	r0, #32792	; 0x8018
     fb8:	210103a1 	smlatbcs	r1, r1, r3, r0
     fbc:	84226721 	strthi	r6, [r2], #-1825	; 0x721
     fc0:	01000902 	tsteq	r0, r2, lsl #18
     fc4:	02050001 	andeq	r0, r5, #1
     fc8:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
     fcc:	0103aa03 	tsteq	r3, r3, lsl #20
     fd0:	4b201303 	blmi	805be4 <__Stack_Size+0x8053e4>
     fd4:	02003e69 	andeq	r3, r0, #1680	; 0x690
     fd8:	20060104 	andcs	r0, r6, r4, lsl #2
     fdc:	02040200 	andeq	r0, r4, #0, 4
     fe0:	02005d06 	andeq	r5, r0, #384	; 0x180
     fe4:	36530204 	ldrbcc	r0, [r3], -r4, lsl #4
     fe8:	000b0267 	andeq	r0, fp, r7, ror #4
     fec:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ff0:	0018b002 	andseq	fp, r8, r2
     ff4:	00d00308 	sbcseq	r0, r0, r8, lsl #6
     ff8:	1e223101 	sufnes	f3, f2, f1
     ffc:	251f2130 	ldrcs	r2, [pc, #-304]	; ed4 <__Stack_Size+0x6d4>
    1000:	2222241c 	eorcs	r2, r2, #28, 8	; 0x1c000000
    1004:	1f304b59 	svcne	0x00304b59
    1008:	03211f21 	teqeq	r1, #33, 30	; 0x84
    100c:	033d3c18 	teqeq	sp, #24, 24	; 0x1800
    1010:	033d4a71 	teqeq	sp, #462848	; 0x71000
    1014:	302f3c11 	eorcc	r3, pc, r1, lsl ip	; <UNPREDICTABLE>
    1018:	3c090324 	stccc	3, cr0, [r9], {36}	; 0x24
    101c:	4d3d322f 	lfmmi	f3, 4, [sp, #-188]!	; 0xffffff44
    1020:	580d0368 	stmdapl	sp, {r3, r5, r6, r8, r9}
    1024:	4b2f2529 	blmi	bca4d0 <__Stack_Size+0xbc9cd0>
    1028:	31312f26 	teqcc	r1, r6, lsr #30
    102c:	03303530 	teqeq	r0, #48, 10	; 0xc000000
    1030:	3f2f581d 	svccc	0x002f581d
    1034:	1f4d3034 	svcne	0x004d3034
    1038:	30402121 	subcc	r2, r0, r1, lsr #2
    103c:	22312f59 	eorscs	r2, r1, #356	; 0x164
    1040:	2f3d222c 	svccs	0x003d222c
    1044:	34692f1f 	strbtcc	r2, [r9], #-3871	; 0xf1f
    1048:	30303e42 	eorscc	r3, r0, r2, asr #28
    104c:	2f593043 	svccs	0x00593043
    1050:	3434422f 	ldrtcc	r4, [r4], #-559	; 0x22f
    1054:	3d305930 	ldccc	9, cr5, [r0, #-192]!	; 0xffffff40
    1058:	211f3d1f 	tstcs	pc, pc, lsl sp	; <UNPREDICTABLE>
    105c:	4b774fc9 	blmi	1dd4f88 <__Stack_Size+0x1dd4788>
    1060:	2f302f42 	svccs	0x00302f42
    1064:	332f302f 	teqcc	pc, #47	; 0x2f
    1068:	302f5a30 	eorcc	r5, pc, r0, lsr sl	; <UNPREDICTABLE>
    106c:	2f352f30 	svccs	0x00352f30
    1070:	25022131 	strcs	r2, [r2, #-305]	; 0x131
    1074:	00010100 	andeq	r0, r1, r0, lsl #2
    1078:	00000205 	andeq	r0, r0, r5, lsl #4
    107c:	d0030000 	andle	r0, r3, r0
    1080:	2f130103 	svccs	0x00130103
    1084:	01000402 	tsteq	r0, r2, lsl #8
    1088:	02050001 	andeq	r0, r5, #1
    108c:	00000000 	andeq	r0, r0, r0
    1090:	0103d503 	tsteq	r3, r3, lsl #10
    1094:	00060213 	andeq	r0, r6, r3, lsl r2
    1098:	05000101 	streq	r0, [r0, #-257]	; 0x101
    109c:	001b1002 	andseq	r1, fp, r2
    10a0:	03da0308 	bicseq	r0, sl, #8, 6	; 0x20000000
    10a4:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    10a8:	01010004 	tsteq	r1, r4
    10ac:	00020500 	andeq	r0, r2, r0, lsl #10
    10b0:	03000000 	movweq	r0, #0
    10b4:	130103df 	movwne	r0, #5087	; 0x13df
    10b8:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    10bc:	662e0601 	strtvs	r0, [lr], -r1, lsl #12
    10c0:	03022106 	movweq	r2, #8454	; 0x2106
    10c4:	00010100 	andeq	r0, r1, r0, lsl #2
    10c8:	1b1c0205 	blne	7018e4 <__Stack_Size+0x7010e4>
    10cc:	e4030800 	str	r0, [r3], #-2048	; 0x800
    10d0:	02000103 	andeq	r0, r0, #-1073741824	; 0xc0000000
    10d4:	02160104 	andseq	r0, r6, #4, 2
    10d8:	01010001 	tsteq	r1, r1
    10dc:	0000024f 	andeq	r0, r0, pc, asr #4
    10e0:	00f70002 	rscseq	r0, r7, r2
    10e4:	01020000 	mrseq	r0, (UNDEF: 2)
    10e8:	000d0efb 	strdeq	r0, [sp], -fp
    10ec:	01010101 	tsteq	r1, r1, lsl #2
    10f0:	01000000 	mrseq	r0, (UNDEF: 0)
    10f4:	32010000 	andcc	r0, r1, #0
    10f8:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    10fc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1100:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1104:	206d6172 	rsbcs	r6, sp, r2, ror r1
    1108:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    110c:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    1110:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1114:	20756e67 	rsbscs	r6, r5, r7, ror #28
    1118:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; f50 <__Stack_Size+0x750>
    111c:	72612073 	rsbvc	r2, r1, #115	; 0x73
    1120:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    1124:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1128:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    112c:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    1130:	71343130 	teqvc	r4, r0, lsr r1
    1134:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    1138:	6f6e2d6d 	svcvs	0x006e2d6d
    113c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    1140:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1144:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1148:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    114c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1150:	00656e69 	rsbeq	r6, r5, r9, ror #28
    1154:	705c3a63 	subsvc	r3, ip, r3, ror #20
    1158:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    115c:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    1160:	73656c69 	cmnvc	r5, #26880	; 0x6900
    1164:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    1168:	675c2936 	smmlarvs	ip, r6, r9, r2
    116c:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    1170:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1174:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    1178:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    117c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    1180:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    1184:	30322038 	eorscc	r2, r2, r8, lsr r0
    1188:	33713431 	cmncc	r1, #822083584	; 0x31000000
    118c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    1190:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1194:	61652d65 	cmnvs	r5, r5, ror #26
    1198:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    119c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    11a0:	00006564 	andeq	r6, r0, r4, ror #10
    11a4:	35353263 	ldrcc	r3, [r5, #-611]!	; 0x263
    11a8:	632e3931 	teqvs	lr, #802816	; 0xc4000
    11ac:	00000100 	andeq	r0, r0, r0, lsl #2
    11b0:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    11b4:	682e3931 	stmdavs	lr!, {r0, r4, r5, r8, fp, ip, sp}
    11b8:	00000100 	andeq	r0, r0, r0, lsl #2
    11bc:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    11c0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0x561
    11c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    11c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    11cc:	00000200 	andeq	r0, r0, r0, lsl #4
    11d0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    11d4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    11d8:	00000300 	andeq	r0, r0, r0, lsl #6
    11dc:	02050000 	andeq	r0, r5, #0
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	0100d303 	tsteq	r0, r3, lsl #6
    11e8:	50030204 	andpl	r0, r3, r4, lsl #4
    11ec:	0301044a 	movweq	r0, #5194	; 0x144a
    11f0:	02042030 	andeq	r2, r4, #48	; 0x30
    11f4:	042e5003 	strteq	r5, [lr], #-3
    11f8:	3c330301 	ldccc	3, cr0, [r3], #-4
    11fc:	4d030204 	sfmmi	f0, 4, [r3, #-16]
    1200:	0301043c 	movweq	r0, #5180	; 0x143c
    1204:	1d232033 	stcne	0, cr2, [r3, #-204]!	; 0xffffff34
    1208:	3f7e7569 	svccc	0x007e7569
    120c:	4a030204 	bmi	c1a24 <__Stack_Size+0xc1224>
    1210:	0301042e 	movweq	r0, #5166	; 0x142e
    1214:	0204663e 	andeq	r6, r4, #65011712	; 0x3e00000
    1218:	04204203 	strteq	r4, [r0], #-515	; 0x203
    121c:	04020001 	streq	r0, [r2], #-1
    1220:	2e3f0302 	cdpcs	3, 3, cr0, cr15, cr2, {0}
    1224:	02040200 	andeq	r0, r4, #0, 4
    1228:	002e5f03 	eoreq	r5, lr, r3, lsl #30
    122c:	03020402 	movweq	r0, #9218	; 0x2402
    1230:	02002021 	andeq	r2, r0, #33	; 0x21
    1234:	5f030204 	svcpl	0x00030204
    1238:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    123c:	2e210302 	cdpcs	3, 2, cr0, cr1, cr2, {0}
    1240:	02040200 	andeq	r0, r4, #0, 4
    1244:	00205f03 	eoreq	r5, r0, r3, lsl #30
    1248:	2f020402 	svccs	0x00020402
    124c:	02040200 	andeq	r0, r4, #0, 4
    1250:	04020059 	streq	r0, [r2], #-89	; 0x59
    1254:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    1258:	00590204 	subseq	r0, r9, r4, lsl #4
    125c:	59020402 	stmdbpl	r2, {r1, sl}
    1260:	02040200 	andeq	r0, r4, #0, 4
    1264:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    1268:	02005902 	andeq	r5, r0, #32768	; 0x8000
    126c:	00590204 	subseq	r0, r9, r4, lsl #4
    1270:	5a020402 	bpl	82280 <__Stack_Size+0x81a80>
    1274:	02040200 	andeq	r0, r4, #0, 4
    1278:	04020059 	streq	r0, [r2], #-89	; 0x59
    127c:	02005902 	andeq	r5, r0, #32768	; 0x8000
    1280:	4b030204 	blmi	c1a98 <__Stack_Size+0xc1298>
    1284:	04020058 	streq	r0, [r2], #-88	; 0x58
    1288:	02005902 	andeq	r5, r0, #32768	; 0x8000
    128c:	00590204 	subseq	r0, r9, r4, lsl #4
    1290:	5a020402 	bpl	822a0 <__Stack_Size+0x81aa0>
    1294:	02040200 	andeq	r0, r4, #0, 4
    1298:	04020059 	streq	r0, [r2], #-89	; 0x59
    129c:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    12a0:	00590204 	subseq	r0, r9, r4, lsl #4
    12a4:	59020402 	stmdbpl	r2, {r1, sl}
    12a8:	02040200 	andeq	r0, r4, #0, 4
    12ac:	04020059 	streq	r0, [r2], #-89	; 0x59
    12b0:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12b4:	1c030204 	sfmne	f0, 4, [r3], {4}
    12b8:	04020058 	streq	r0, [r2], #-88	; 0x58
    12bc:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12c0:	00590204 	subseq	r0, r9, r4, lsl #4
    12c4:	5a020402 	bpl	822d4 <__Stack_Size+0x81ad4>
    12c8:	02040200 	andeq	r0, r4, #0, 4
    12cc:	04020059 	streq	r0, [r2], #-89	; 0x59
    12d0:	02005902 	andeq	r5, r0, #32768	; 0x8000
    12d4:	005a0204 	subseq	r0, sl, r4, lsl #4
    12d8:	59020402 	stmdbpl	r2, {r1, sl}
    12dc:	02040200 	andeq	r0, r4, #0, 4
    12e0:	04020059 	streq	r0, [r2], #-89	; 0x59
    12e4:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    12e8:	00590204 	subseq	r0, r9, r4, lsl #4
    12ec:	03020402 	movweq	r0, #9218	; 0x2402
    12f0:	02005814 	andeq	r5, r0, #20, 16	; 0x140000
    12f4:	6d030204 	sfmvs	f0, 4, [r3, #-16]
    12f8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    12fc:	58220302 	stmdapl	r2!, {r1, r8, r9}
    1300:	02040200 	andeq	r0, r4, #0, 4
    1304:	04020075 	streq	r0, [r2], #-117	; 0x75
    1308:	02006702 	andeq	r6, r0, #524288	; 0x80000
    130c:	00670204 	rsbeq	r0, r7, r4, lsl #4
    1310:	03020402 	movweq	r0, #9218	; 0x2402
    1314:	02002e6d 	andeq	r2, r0, #1744	; 0x6d0
    1318:	13030204 	movwne	r0, #12804	; 0x3204
    131c:	04020020 	streq	r0, [r2], #-32
    1320:	4a6d0302 	bmi	1b41f30 <__Stack_Size+0x1b41730>
    1324:	4b3c1703 	blmi	f06f38 <__Stack_Size+0xf06738>
    1328:	07023d59 	smlsdeq	r2, r9, sp, r3
    132c:	9e010100 	adflss	f0, f1, f0
    1330:	02000002 	andeq	r0, r0, #2
    1334:	00010500 	andeq	r0, r1, r0, lsl #10
    1338:	fb010200 	blx	41b42 <__Stack_Size+0x41342>
    133c:	01000d0e 	tsteq	r0, lr, lsl #26
    1340:	00010101 	andeq	r0, r1, r1, lsl #2
    1344:	00010000 	andeq	r0, r1, r0
    1348:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    134c:	00393135 	eorseq	r3, r9, r5, lsr r1
    1350:	705c3a63 	subsvc	r3, ip, r3, ror #20
    1354:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    1358:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    135c:	73656c69 	cmnvc	r5, #26880	; 0x6900
    1360:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    1364:	675c2936 	smmlarvs	ip, r6, r9, r2
    1368:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    136c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    1370:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    1374:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    1378:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    137c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    1380:	30322038 	eorscc	r2, r2, r8, lsr r0
    1384:	33713431 	cmncc	r1, #822083584	; 0x31000000
    1388:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    138c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1390:	61652d65 	cmnvs	r5, r5, ror #26
    1394:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    1398:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    139c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    13a0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    13a4:	6300656e 	movwvs	r6, #1390	; 0x56e
    13a8:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    13ac:	6172676f 	cmnvs	r2, pc, ror #14
    13b0:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    13b4:	2073656c 	rsbscs	r6, r3, ip, ror #10
    13b8:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    13bc:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    13c0:	6f742075 	svcvs	0x00742075
    13c4:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    13c8:	206d7261 	rsbcs	r7, sp, r1, ror #4
    13cc:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    13d0:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    13d4:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    13d8:	31303220 	teqcc	r0, r0, lsr #4
    13dc:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    13e0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    13e4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    13e8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    13ec:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    13f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    13f4:	65000065 	strvs	r0, [r0, #-101]	; 0x65
    13f8:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    13fc:	632e3931 	teqvs	lr, #802816	; 0xc4000
    1400:	00000100 	andeq	r0, r0, r0, lsl #2
    1404:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1408:	682e3931 	stmdavs	lr!, {r0, r4, r5, r8, fp, ip, sp}
    140c:	00000100 	andeq	r0, r0, r0, lsl #2
    1410:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1414:	2e393135 	mrccs	1, 1, r3, cr9, cr5, {1}
    1418:	00010068 	andeq	r0, r1, r8, rrx
    141c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xf00
    1420:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    1424:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1428:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    142c:	00020068 	andeq	r0, r2, r8, rrx
    1430:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    1434:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1438:	00030068 	andeq	r0, r3, r8, rrx
    143c:	05000000 	streq	r0, [r0, #-0]
    1440:	001b2002 	andseq	r2, fp, r2
    1444:	01330308 	teqeq	r3, r8, lsl #6
    1448:	03020420 	movweq	r0, #9248	; 0x2420
    144c:	01042070 	tsteq	r4, r0, ror r0
    1450:	74081003 	strvc	r1, [r8], #-3
    1454:	70030204 	andvc	r0, r3, r4, lsl #4
    1458:	03010420 	movweq	r0, #5152	; 0x1420
    145c:	0204ac10 	andeq	sl, r4, #16, 24	; 0x1000
    1460:	04207003 	strteq	r7, [r0], #-3
    1464:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    1468:	6d030204 	sfmvs	f0, 4, [r3, #-16]
    146c:	03010420 	movweq	r0, #5152	; 0x1420
    1470:	4b3d3c13 	blmi	f504c4 <__Stack_Size+0xf4fcc4>
    1474:	0002022d 	andeq	r0, r2, sp, lsr #4
    1478:	05000101 	streq	r0, [r0, #-257]	; 0x101
    147c:	001b9002 	andseq	r9, fp, r2
    1480:	013c0308 	teqeq	ip, r8, lsl #6
    1484:	59593f2e 	ldmdbpl	r9, {r1, r2, r3, r5, r8, r9, sl, fp, ip, sp}^
    1488:	023d3d68 	eorseq	r3, sp, #104, 26	; 0x1a00
    148c:	01010002 	tsteq	r1, r2
    1490:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    1494:	0308001b 	movweq	r0, #32795	; 0x801b
    1498:	040100de 	streq	r0, [r1], #-222	; 0xde
    149c:	58450302 	stmdapl	r5, {r1, r8, r9}^
    14a0:	c0030104 	andgt	r0, r3, r4, lsl #2
    14a4:	0204ac00 	andeq	sl, r4, #0, 24
    14a8:	043c4003 	ldrteq	r4, [ip], #-3
    14ac:	00c40301 	sbceq	r0, r4, r1, lsl #6
    14b0:	2b311df2 	blcs	c48c80 <__Stack_Size+0xc48480>
    14b4:	2f241c24 	svccs	0x00241c24
    14b8:	01000202 	tsteq	r0, r2, lsl #4
    14bc:	02050001 	andeq	r0, r5, #1
    14c0:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
    14c4:	0100ec03 	tsteq	r0, r3, lsl #24
    14c8:	b7030204 	strlt	r0, [r3, -r4, lsl #4]
    14cc:	01042e7f 	tsteq	r4, pc, ror lr
    14d0:	5800c903 	stmdapl	r0, {r0, r1, r8, fp, lr, pc}
    14d4:	03020421 	movweq	r0, #9249	; 0x2421
    14d8:	042e7fb6 	strteq	r7, [lr], #-4022	; 0xfb6
    14dc:	00c90301 	sbceq	r0, r9, r1, lsl #6
    14e0:	0204289e 	andeq	r2, r4, #10354688	; 0x9e0000
    14e4:	2e7faf03 	cdpcs	15, 7, cr10, cr15, cr3, {0}
    14e8:	c9030104 	stmdbgt	r3, {r2, r8}
    14ec:	03282e00 	teqeq	r8, #0, 28
    14f0:	02042078 	andeq	r2, r4, #120	; 0x78
    14f4:	207fb703 	rsbscs	fp, pc, r3, lsl #14
    14f8:	d4030104 	strle	r0, [r3], #-260	; 0x104
    14fc:	1c243c00 	stcne	12, cr3, [r4], #-0
    1500:	4d595931 	ldclmi	9, cr5, [r9, #-196]	; 0xffffff3c
    1504:	4d4b5b5b 	vstrmi	d21, [fp, #-364]	; 0xfffffe94
    1508:	3e3d59af 	cdpcc	9, 3, cr5, cr13, cr15, {5}
    150c:	0007024b 	andeq	r0, r7, fp, asr #4
    1510:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1514:	001cf402 	andseq	pc, ip, r2, lsl #8
    1518:	019d0308 	orrseq	r0, sp, r8, lsl #6
    151c:	1f034a01 	svcne	0x00034a01
    1520:	2e610320 	cdpcs	3, 6, cr0, cr1, cr0, {1}
    1524:	3d201f03 	stccc	15, cr1, [r0, #-12]!
    1528:	5b592f2d 	blpl	164d1e4 <__Stack_Size+0x164c9e4>
    152c:	755b5959 	ldrbvc	r5, [fp, #-2393]	; 0x959
    1530:	5b5b755b 	blpl	16deaa4 <__Stack_Size+0x16de2a4>
    1534:	5b5b5b5b 	blpl	16d82a8 <__Stack_Size+0x16d7aa8>
    1538:	02676969 	rsbeq	r6, r7, #1720320	; 0x1a4000
    153c:	01010005 	tsteq	r1, r5
    1540:	d4020500 	strle	r0, [r2], #-1280	; 0x500
    1544:	0308001d 	movweq	r0, #32797	; 0x801d
    1548:	2e0101e7 	adfcsdz	f0, f1, f7
    154c:	2b201e03 	blcs	808d60 <__Stack_Size+0x808560>
    1550:	032e6503 	teqeq	lr, #12582912	; 0xc00000
    1554:	5b31201b 	blpl	c495c8 <__Stack_Size+0xc48dc8>
    1558:	59595c67 	ldmdbpl	r9, {r0, r1, r2, r5, r6, sl, fp, ip, lr}^
    155c:	5b5b5b59 	blpl	16d82c8 <__Stack_Size+0x16d7ac8>
    1560:	695b5b4b 	ldmdbvs	fp, {r0, r1, r3, r6, r8, r9, fp, ip, lr}^
    1564:	02026769 	andeq	r6, r2, #27525120	; 0x1a40000
    1568:	00010100 	andeq	r0, r1, r0, lsl #2
    156c:	1e880205 	cdpne	2, 8, cr0, cr8, cr5, {0}
    1570:	ab030800 	blge	c3578 <__Stack_Size+0xc2d78>
    1574:	043c0102 	ldrteq	r0, [ip], #-258	; 0x102
    1578:	7e9d0303 	cdpvc	3, 9, cr0, cr13, cr3, {0}
    157c:	0301043c 	movweq	r0, #5180	; 0x143c
    1580:	005801e9 	subseq	r0, r8, r9, ror #3
    1584:	21020402 	tstcs	r2, r2, lsl #8
    1588:	02040200 	andeq	r0, r4, #0, 4
    158c:	0402005b 	streq	r0, [r2], #-91	; 0x5b
    1590:	02004702 	andeq	r4, r0, #524288	; 0x80000
    1594:	00320204 	eorseq	r0, r2, r4, lsl #4
    1598:	5a020402 	bpl	825a8 <__Stack_Size+0x81da8>
    159c:	02040200 	andeq	r0, r4, #0, 4
    15a0:	04020067 	streq	r0, [r2], #-103	; 0x67
    15a4:	02006702 	andeq	r6, r0, #524288	; 0x80000
    15a8:	00670204 	rsbeq	r0, r7, r4, lsl #4
    15ac:	03020402 	movweq	r0, #9218	; 0x2402
    15b0:	02002e76 	andeq	r2, r0, #1888	; 0x760
    15b4:	0a030204 	beq	c1dcc <__Stack_Size+0xc15cc>
    15b8:	04020020 	streq	r0, [r2], #-32
    15bc:	4a760302 	bmi	1d821cc <__Stack_Size+0x1d819cc>
    15c0:	97030304 	strls	r0, [r3, -r4, lsl #6]
    15c4:	01042e7e 	tsteq	r4, lr, ror lr
    15c8:	5801f703 	stmdapl	r1, {r0, r1, r8, r9, sl, ip, sp, lr, pc}
    15cc:	01000602 	tsteq	r0, r2, lsl #12
    15d0:	00029e01 	andeq	r9, r2, r1, lsl #28
    15d4:	85000200 	strhi	r0, [r0, #-512]	; 0x200
    15d8:	02000001 	andeq	r0, r0, #1
    15dc:	0d0efb01 	vstreq	d15, [lr, #-4]
    15e0:	01010100 	mrseq	r0, (UNDEF: 17)
    15e4:	00000001 	andeq	r0, r0, r1
    15e8:	01000001 	tsteq	r0, r1
    15ec:	31353532 	teqcc	r5, r2, lsr r5
    15f0:	3a630039 	bcc	18c16dc <__Stack_Size+0x18c0edc>
    15f4:	6f72705c 	svcvs	0x0072705c
    15f8:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    15fc:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1600:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1604:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1608:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    160c:	6f6f7420 	svcvs	0x006f7420
    1610:	6120736c 	teqvs	r0, ip, ror #6
    1614:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1618:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    161c:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1620:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1624:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1628:	615c3371 	cmpvs	ip, r1, ror r3
    162c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1630:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1634:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1638:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    163c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1640:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1644:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1648:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    164c:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1650:	206d6172 	rsbcs	r6, sp, r2, ror r1
    1654:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    1658:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    165c:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    1660:	20756e67 	rsbscs	r6, r5, r7, ror #28
    1664:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 149c <__Stack_Size+0xc9c>
    1668:	72612073 	rsbvc	r2, r1, #115	; 0x73
    166c:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    1670:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1674:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    1678:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    167c:	71343130 	teqvc	r4, r0, lsr r1
    1680:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    1684:	6f6e2d6d 	svcvs	0x006e2d6d
    1688:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    168c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    1690:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1694:	00656475 	rsbeq	r6, r5, r5, ror r4
    1698:	705c3a63 	subsvc	r3, ip, r3, ror #20
    169c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    16a0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    16a4:	73656c69 	cmnvc	r5, #26880	; 0x6900
    16a8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    16ac:	675c2936 	smmlarvs	ip, r6, r9, r2
    16b0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    16b4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    16b8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    16bc:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    16c0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    16c4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    16c8:	30322038 	eorscc	r2, r2, r8, lsr r0
    16cc:	33713431 	cmncc	r1, #822083584	; 0x31000000
    16d0:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    16d4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    16d8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    16dc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    16e0:	61652d65 	cmnvs	r5, r5, ror #26
    16e4:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
    16e8:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    16ec:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    16f0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    16f4:	64650000 	strbtvs	r0, [r5], #-0
    16f8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    16fc:	0100632e 	tsteq	r0, lr, lsr #6
    1700:	68730000 	ldmdavs	r3!, {}^	; <UNPREDICTABLE>
    1704:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1708:	0100682e 	tsteq	r0, lr, lsr #16
    170c:	64650000 	strbtvs	r0, [r5], #-0
    1710:	31353532 	teqcc	r5, r2, lsr r5
    1714:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    1718:	5f000001 	svcpl	0x00000001
    171c:	61666564 	cmnvs	r6, r4, ror #10
    1720:	5f746c75 	svcpl	0x00746c75
    1724:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1728:	00682e73 	rsbeq	r2, r8, r3, ror lr
    172c:	73000002 	movwvc	r0, #2
    1730:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1734:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1738:	73000003 	movwvc	r0, #3
    173c:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    1740:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1744:	66000004 	strvs	r0, [r0], -r4
    1748:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    174c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    1750:	66000001 	strvs	r0, [r0], -r1
    1754:	31353532 	teqcc	r5, r2, lsr r5
    1758:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    175c:	00000001 	andeq	r0, r0, r1
    1760:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    1764:	0308001f 	movweq	r0, #32799	; 0x801f
    1768:	02040115 	andeq	r0, r4, #1073741829	; 0x40000005
    176c:	03010428 	movweq	r0, #5160	; 0x1428
    1770:	02042078 	andeq	r2, r4, #120	; 0x78
    1774:	03010428 	movweq	r0, #5160	; 0x1428
    1778:	02042078 	andeq	r2, r4, #120	; 0x78
    177c:	9a010436 	bls	4285c <__Stack_Size+0x4205c>
    1780:	03030459 	movweq	r0, #13401	; 0x3459
    1784:	3d4b6625 	stclcc	6, cr6, [fp, #-148]	; 0xffffff6c
    1788:	5b030104 	blpl	c1ba0 <__Stack_Size+0xc13a0>
    178c:	0005023c 	andeq	r0, r5, ip, lsr r2
    1790:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1794:	001f6002 	andseq	r6, pc, r2
    1798:	00c40308 	sbceq	r0, r4, r8, lsl #6
    179c:	03020401 	movweq	r0, #9217	; 0x2401
    17a0:	01042e59 	tsteq	r4, r9, asr lr
    17a4:	04202703 	strteq	r2, [r0], #-1795	; 0x703
    17a8:	20590302 	subscs	r0, r9, r2, lsl #6
    17ac:	27030104 	strcs	r0, [r3, -r4, lsl #2]
    17b0:	03020420 	movweq	r0, #9248	; 0x2420
    17b4:	01044a59 	tsteq	r4, r9, asr sl
    17b8:	04822703 	streq	r2, [r2], #1795	; 0x703
    17bc:	20590302 	subscs	r0, r9, r2, lsl #6
    17c0:	2c030104 	stfcss	f0, [r3], {4}
    17c4:	213b3d2e 	teqcs	fp, lr, lsr #26
    17c8:	003e403d 	eorseq	r4, lr, sp, lsr r0
    17cc:	4d010402 	cfstrsmi	mvf0, [r1, #-8]
    17d0:	01040200 	mrseq	r0, R12_usr
    17d4:	77684d2d 	strbvc	r4, [r8, -sp, lsr #26]!
    17d8:	07026767 	streq	r6, [r2, -r7, ror #14]
    17dc:	00010100 	andeq	r0, r1, r0, lsl #2
    17e0:	1ffc0205 	svcne	0x00fc0205
    17e4:	32030800 	andcc	r0, r3, #0, 16
    17e8:	03312e01 	teqeq	r1, #1, 28
    17ec:	03594a78 	cmpeq	r9, #120, 20	; 0x78000
    17f0:	04025809 	streq	r5, [r2], #-2057	; 0x809
    17f4:	00010100 	andeq	r0, r1, r0, lsl #2
    17f8:	20280205 	eorcs	r0, r8, r5, lsl #4
    17fc:	3a030800 	bcc	c3804 <__Stack_Size+0xc3004>
    1800:	3d232e01 	stccc	14, cr2, [r3, #-4]!
    1804:	0002024b 	andeq	r0, r2, fp, asr #4
    1808:	05000101 	streq	r0, [r0, #-257]	; 0x101
    180c:	00204002 	eoreq	r4, r0, r2
    1810:	00f50308 	rscseq	r0, r5, r8, lsl #6
    1814:	03353c01 	teqeq	r5, #256	; 0x100
    1818:	11032e68 	tstne	r3, r8, ror #28
    181c:	6803352e 	stmdavs	r3, {r1, r2, r3, r5, r8, sl, ip, sp}
    1820:	1a03672e 	bne	db4e0 <__Stack_Size+0xdace0>
    1824:	4a6e0374 	bmi	1b825fc <__Stack_Size+0x1b81dfc>
    1828:	1403c9bb 	strne	ip, [r3], #-2491	; 0x9bb
    182c:	59676874 	stmdbpl	r7!, {r2, r4, r5, r6, fp, sp, lr}^
    1830:	000602ad 	andeq	r0, r6, sp, lsr #5
    1834:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1838:	00210002 	eoreq	r0, r1, r2
    183c:	018b0308 	orreq	r0, fp, r8, lsl #6
    1840:	62033c01 	andvs	r3, r3, #256	; 0x100
    1844:	03c9c93c 	biceq	ip, r9, #60, 18	; 0xf0000
    1848:	8b037428 	blhi	de8f0 <__Stack_Size+0xde0f0>
    184c:	1e5a4a7f 	mrcne	10, 2, r4, cr10, cr15, {3}
    1850:	00f70322 	rscseq	r0, r7, r2, lsr #6
    1854:	7f87034a 	svcvc	0x0087034a
    1858:	221e5a58 	andscs	r5, lr, #88, 20	; 0x58000
    185c:	4a00f903 	bmi	3fc70 <__Stack_Size+0x3f470>
    1860:	587f9003 	ldmdapl	pc!, {r0, r1, ip, pc}^	; <UNPREDICTABLE>
    1864:	00f30359 	rscseq	r0, r3, r9, asr r3
    1868:	4a790358 	bmi	1e425d0 <__Stack_Size+0x1e41dd0>
    186c:	04023422 	streq	r3, [r2], #-1058	; 0x422
    1870:	02010100 	andeq	r0, r1, #0, 2
    1874:	02000007 	andeq	r0, r0, #7
    1878:	0000f700 	andeq	pc, r0, r0, lsl #14
    187c:	fb010200 	blx	42086 <__Stack_Size+0x41886>
    1880:	01000d0e 	tsteq	r0, lr, lsl #26
    1884:	00010101 	andeq	r0, r1, r1, lsl #2
    1888:	00010000 	andeq	r0, r1, r0
    188c:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    1890:	00393135 	eorseq	r3, r9, r5, lsr r1
    1894:	705c3a63 	subsvc	r3, ip, r3, ror #20
    1898:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    189c:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    18a0:	73656c69 	cmnvc	r5, #26880	; 0x6900
    18a4:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    18a8:	675c2936 	smmlarvs	ip, r6, r9, r2
    18ac:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    18b0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    18b4:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    18b8:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    18bc:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    18c0:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    18c4:	30322038 	eorscc	r2, r2, r8, lsr r0
    18c8:	33713431 	cmncc	r1, #822083584	; 0x31000000
    18cc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    18d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    18d4:	61652d65 	cmnvs	r5, r5, ror #26
    18d8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    18dc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    18e0:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    18e4:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    18e8:	6300656e 	movwvs	r6, #1390	; 0x56e
    18ec:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    18f0:	6172676f 	cmnvs	r2, pc, ror #14
    18f4:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    18f8:	2073656c 	rsbscs	r6, r3, ip, ror #10
    18fc:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    1900:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    1904:	6f742075 	svcvs	0x00742075
    1908:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    190c:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1910:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    1914:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    1918:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    191c:	31303220 	teqcc	r0, r0, lsr #4
    1920:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    1924:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1928:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    192c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1930:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    1934:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    1938:	66000065 	strvs	r0, [r0], -r5, rrx
    193c:	31353532 	teqcc	r5, r2, lsr r5
    1940:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    1944:	66000001 	strvs	r0, [r0], -r1
    1948:	31353532 	teqcc	r5, r2, lsr r5
    194c:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    1950:	5f000001 	svcpl	0x00000001
    1954:	61666564 	cmnvs	r6, r4, ror #10
    1958:	5f746c75 	svcpl	0x00746c75
    195c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1960:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1964:	73000002 	movwvc	r0, #2
    1968:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    196c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1970:	00000003 	andeq	r0, r0, r3
    1974:	c0020500 	andgt	r0, r2, r0, lsl #10
    1978:	03080021 	movweq	r0, #32801	; 0x8021
    197c:	3b25010c 	blcc	941db4 <__Stack_Size+0x9415b4>
    1980:	0004027a 	andeq	r0, r4, sl, ror r2
    1984:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1988:	0021e002 	eoreq	lr, r1, r2
    198c:	01190308 	tsteq	r9, r8, lsl #6
    1990:	207a0326 	rsbscs	r0, sl, r6, lsr #6
    1994:	232d2f26 	teqcs	sp, #38, 30	; 0x98
    1998:	02001f1e 	andeq	r1, r0, #30, 30	; 0x78
    199c:	00320204 	eorseq	r0, r2, r4, lsl #4
    19a0:	2f020402 	svccs	0x00020402
    19a4:	02040200 	andeq	r0, r4, #0, 4
    19a8:	0402001e 	streq	r0, [r2], #-30
    19ac:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    19b0:	062b0204 	strteq	r0, [fp], -r4, lsl #4
    19b4:	04020020 	streq	r0, [r2], #-32
    19b8:	0d030602 	stceq	6, cr0, [r3, #-8]
    19bc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    19c0:	02002f02 	andeq	r2, r0, #2, 30
    19c4:	002c0204 	eoreq	r0, ip, r4, lsl #4
    19c8:	31020402 	tstcc	r2, r2, lsl #8
    19cc:	02040200 	andeq	r0, r4, #0, 4
    19d0:	1d03262b 	stcne	6, cr2, [r3, #-172]	; 0xffffff54
    19d4:	20630320 	rsbcs	r0, r3, r0, lsr #6
    19d8:	033c1a03 	teqeq	ip, #12288	; 0x3000
    19dc:	19032e67 	stmdbne	r3, {r0, r1, r2, r5, r6, r9, sl, fp, sp}
    19e0:	0373242e 	cmneq	r3, #771751936	; 0x2e000000
    19e4:	04023c68 	streq	r3, [r2], #-3176	; 0xc68
    19e8:	00010100 	andeq	r0, r1, r0, lsl #2
    19ec:	22500205 	subscs	r0, r0, #1342177280	; 0x50000000
    19f0:	3c030800 	stccc	8, cr0, [r3], {-0}
    19f4:	31025d01 	tstcc	r2, r1, lsl #26
    19f8:	302f2f14 	eorcc	r2, pc, r4, lsl pc	; <UNPREDICTABLE>
    19fc:	4a78032f 	bmi	1e026c0 <__Stack_Size+0x1e01ec0>
    1a00:	212d241d 	teqcs	sp, sp, lsl r4
    1a04:	022d211f 	eoreq	r2, sp, #-1073741817	; 0xc0000007
    1a08:	01010002 	tsteq	r1, r2
    1a0c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1a10:	03080022 	movweq	r0, #32802	; 0x8022
    1a14:	080100cd 	stmdaeq	r1, {r0, r2, r3, r6, r7}
    1a18:	3202be13 	andcc	fp, r2, #304	; 0x130
    1a1c:	1e4b1f13 	mcrne	15, 2, r1, cr11, cr3, {0}
    1a20:	023e6521 	eorseq	r6, lr, #138412032	; 0x8400000
    1a24:	01010002 	tsteq	r1, r2
    1a28:	b0020500 	andlt	r0, r2, r0, lsl #10
    1a2c:	03080023 	movweq	r0, #32803	; 0x8023
    1a30:	170100d6 			; <UNDEFINED> instruction: 0x170100d6
    1a34:	0200211b 	andeq	r2, r0, #-1073741818	; 0xc0000006
    1a38:	00260204 	eoreq	r0, r6, r4, lsl #4
    1a3c:	59020402 	stmdbpl	r2, {r1, sl}
    1a40:	02040200 	andeq	r0, r4, #0, 4
    1a44:	212d441d 	teqcs	sp, sp, lsl r4
    1a48:	212d2f2d 	teqcs	sp, sp, lsr #30
    1a4c:	04020022 	streq	r0, [r2], #-34	; 0x22
    1a50:	02002102 	andeq	r2, r0, #-2147483648	; 0x80000000
    1a54:	003d0204 	eorseq	r0, sp, r4, lsl #4
    1a58:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
    1a5c:	02040200 	andeq	r0, r4, #0, 4
    1a60:	04020031 	streq	r0, [r2], #-49	; 0x31
    1a64:	02252b02 	eoreq	r2, r5, #2048	; 0x800
    1a68:	01010002 	tsteq	r1, r2
    1a6c:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
    1a70:	03080023 	movweq	r0, #32803	; 0x8023
    1a74:	260100ed 	strcs	r0, [r1], -sp, ror #1
    1a78:	0402001f 	streq	r0, [r2], #-31
    1a7c:	02002202 	andeq	r2, r0, #536870912	; 0x20000000
    1a80:	00670204 	rsbeq	r0, r7, r4, lsl #4
    1a84:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
    1a88:	02040200 	andeq	r0, r4, #0, 4
    1a8c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1a90:	32262b02 	eorcc	r2, r6, #2048	; 0x800
    1a94:	3d3b301c 	ldccc	0, cr3, [fp, #-112]!	; 0xffffff90
    1a98:	02040200 	andeq	r0, r4, #0, 4
    1a9c:	04020031 	streq	r0, [r2], #-49	; 0x31
    1aa0:	02002f02 	andeq	r2, r0, #2, 30
    1aa4:	001e0204 	andseq	r0, lr, r4, lsl #4
    1aa8:	31020402 	tstcc	r2, r2, lsl #8
    1aac:	02040200 	andeq	r0, r4, #0, 4
    1ab0:	0202252b 	andeq	r2, r2, #180355072	; 0xac00000
    1ab4:	00010100 	andeq	r0, r1, r0, lsl #2
    1ab8:	24440205 	strbcs	r0, [r4], #-517	; 0x205
    1abc:	85030800 	strhi	r0, [r3, #-2048]	; 0x800
    1ac0:	1f260101 	svcne	0x00260101
    1ac4:	02040200 	andeq	r0, r4, #0, 4
    1ac8:	04020022 	streq	r0, [r2], #-34	; 0x22
    1acc:	02004b02 	andeq	r4, r0, #2048	; 0x800
    1ad0:	001e0204 	andseq	r0, lr, r4, lsl #4
    1ad4:	31020402 	tstcc	r2, r2, lsl #8
    1ad8:	02040200 	andeq	r0, r4, #0, 4
    1adc:	1c24262b 	stcne	6, cr2, [r4], #-172	; 0xffffff54
    1ae0:	2d2f1f22 	stccs	15, cr1, [pc, #-136]!	; 1a60 <__Stack_Size+0x1260>
    1ae4:	04020021 	streq	r0, [r2], #-33	; 0x21
    1ae8:	02003102 	andeq	r3, r0, #-2147483648	; 0x80000000
    1aec:	002f0204 	eoreq	r0, pc, r4, lsl #4
    1af0:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
    1af4:	02040200 	andeq	r0, r4, #0, 4
    1af8:	04020031 	streq	r0, [r2], #-49	; 0x31
    1afc:	02252b02 	eoreq	r2, r5, #2048	; 0x800
    1b00:	01010003 	tsteq	r1, r3
    1b04:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    1b08:	03080024 	movweq	r0, #32804	; 0x8024
    1b0c:	3201019d 	andcc	r0, r1, #1073741863	; 0x40000027
    1b10:	200b032b 	andcs	r0, fp, fp, lsr #6
    1b14:	02003d29 	andeq	r3, r0, #2624	; 0xa40
    1b18:	00210204 	eoreq	r0, r1, r4, lsl #4
    1b1c:	3b020402 	blcc	82b2c <__Stack_Size+0x8232c>
    1b20:	02040200 	andeq	r0, r4, #0, 4
    1b24:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    1b28:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
    1b2c:	004d0104 	subeq	r0, sp, r4, lsl #2
    1b30:	76020402 	strvc	r0, [r2], -r2, lsl #8
    1b34:	02040200 	andeq	r0, r4, #0, 4
    1b38:	0402002d 	streq	r0, [r2], #-45	; 0x2d
    1b3c:	02004902 	andeq	r4, r0, #32768	; 0x8000
    1b40:	002f0204 	eoreq	r0, pc, r4, lsl #4
    1b44:	2d020402 	cfstrscs	mvf0, [r2, #-8]
    1b48:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1b4c:	21580e03 	cmpcs	r8, r3, lsl #28
    1b50:	232d2f3b 	teqcs	sp, #59, 30	; 0xec
    1b54:	02040200 	andeq	r0, r4, #0, 4
    1b58:	04020021 	streq	r0, [r2], #-33	; 0x21
    1b5c:	02002f02 	andeq	r2, r0, #2, 30
    1b60:	001e0204 	andseq	r0, lr, r4, lsl #4
    1b64:	31020402 	tstcc	r2, r2, lsl #8
    1b68:	02040200 	andeq	r0, r4, #0, 4
    1b6c:	0302252b 	movweq	r2, #9515	; 0x252b
    1b70:	00010100 	andeq	r0, r1, r0, lsl #2
    1b74:	00000205 	andeq	r0, r0, r5, lsl #4
    1b78:	ba030000 	blt	c1b80 <__Stack_Size+0xc1380>
    1b7c:	67030101 	strvs	r0, [r3, -r1, lsl #2]
    1b80:	2e19032e 	cdpcs	3, 1, cr0, cr9, cr14, {1}
    1b84:	032e6403 	teqeq	lr, #50331648	; 0x3000000
    1b88:	3d1b200b 	ldccc	0, cr2, [fp, #-44]	; 0xffffffd4
    1b8c:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1b90:	492d764d 	pushmi	{r0, r2, r3, r6, r9, sl, ip, sp, lr}
    1b94:	03242d2f 	teqeq	r4, #3008	; 0xbc0
    1b98:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1b9c:	2f3b2f58 	svccs	0x003b2f58
    1ba0:	2c2f4e2d 	stccs	14, cr4, [pc], #-180	; 1af4 <__Stack_Size+0x12f4>
    1ba4:	02042b23 	andeq	r2, r4, #35840	; 0x8c00
    1ba8:	207ef103 	rsbscs	pc, lr, r3, lsl #2
    1bac:	9c030104 	stflss	f0, [r3], {4}
    1bb0:	022e0801 	eoreq	r0, lr, #65536	; 0x10000
    1bb4:	01010004 	tsteq	r1, r4
    1bb8:	00020500 	andeq	r0, r2, r0, lsl #10
    1bbc:	03000000 	movweq	r0, #0
    1bc0:	160101c2 	strne	r0, [r1], -r2, asr #3
    1bc4:	0200211c 	andeq	r2, r0, #28, 2
    1bc8:	00250204 	eoreq	r0, r5, r4, lsl #4
    1bcc:	59020402 	stmdbpl	r2, {r1, sl}
    1bd0:	02040200 	andeq	r0, r4, #0, 4
    1bd4:	1f21421d 	svcne	0x0021421d
    1bd8:	30222c30 	eorcc	r2, r2, r0, lsr ip
    1bdc:	02040200 	andeq	r0, r4, #0, 4
    1be0:	04020021 	streq	r0, [r2], #-33	; 0x21
    1be4:	02002f02 	andeq	r2, r0, #2, 30
    1be8:	001e0204 	andseq	r0, lr, r4, lsl #4
    1bec:	31020402 	tstcc	r2, r2, lsl #8
    1bf0:	02040200 	andeq	r0, r4, #0, 4
    1bf4:	0202252b 	andeq	r2, r2, #180355072	; 0xac00000
    1bf8:	00010100 	andeq	r0, r1, r0, lsl #2
    1bfc:	25140205 	ldrcs	r0, [r4, #-517]	; 0x205
    1c00:	d8030800 	stmdale	r3, {fp}
    1c04:	49030101 	stmdbmi	r3, {r0, r8}
    1c08:	2037032e 	eorscs	r0, r7, lr, lsr #6
    1c0c:	03204603 	teqeq	r0, #3145728	; 0x300000
    1c10:	2f29200b 	svccs	0x0029200b
    1c14:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1c18:	492d684d 	pushmi	{r0, r2, r3, r6, fp, sp, lr}
    1c1c:	03242d2f 	teqeq	r4, #3008	; 0xbc0
    1c20:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1c24:	2f3b2f3c 	svccs	0x003b2f3c
    1c28:	2f233d2d 	svccs	0x00233d2d
    1c2c:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1c30:	2f297477 	svccs	0x00297477
    1c34:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1bb8 <__Stack_Size+0x13b8>
    1c38:	492d763f 	pushmi	{r0, r1, r2, r3, r4, r5, r9, sl, ip, sp, lr}
    1c3c:	03242d21 	teqeq	r4, #2112	; 0x840
    1c40:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1c44:	2f3b213c 	svccs	0x003b213c
    1c48:	2f21232d 	svccs	0x0021232d
    1c4c:	032b311e 	teqeq	fp, #-2147483641	; 0x80000007
    1c50:	09033c77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sl, fp, ip, sp}
    1c54:	3c72033c 	ldclcc	3, cr0, [r2], #-240	; 0xffffff10
    1c58:	2f49213d 	svccs	0x0049213d
    1c5c:	2d844d2d 	stccs	13, cr4, [r4, #180]	; 0xb4
    1c60:	242d2f49 	strtcs	r2, [sp], #-3913	; 0xf49
    1c64:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1c68:	3b2f580e 	blcc	bd7ca8 <__Stack_Size+0xbd74a8>
    1c6c:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1c70:	2b232c2f 	blcs	8ccd34 <__Stack_Size+0x8cc534>
    1c74:	3d4a7203 	sfmcc	f7, 2, [sl, #-12]
    1c78:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1bfc <__Stack_Size+0x13fc>
    1c7c:	492d923f 	pushmi	{r0, r1, r2, r3, r4, r5, r9, ip, pc}
    1c80:	03242d21 	teqeq	r4, #2112	; 0x840
    1c84:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1c88:	2f3b2158 	svccs	0x003b2158
    1c8c:	2f21232d 	svccs	0x0021232d
    1c90:	002b311e 	eoreq	r3, fp, lr, lsl r1
    1c94:	03020402 	movweq	r0, #9218	; 0x2402
    1c98:	4a06203f 	bmi	189d9c <__Stack_Size+0x18959c>
    1c9c:	7fb80306 	svcvc	0x00b80306
    1ca0:	213d2920 	teqcs	sp, r0, lsr #18
    1ca4:	4d2d2f3b 	stcmi	15, cr2, [sp, #-236]!	; 0xffffff14
    1ca8:	2f492d76 	svccs	0x00492d76
    1cac:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1cb0:	580e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}
    1cb4:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1cb8:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1c04 <__Stack_Size+0x1404>
    1cbc:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1cc0:	212f3774 	teqcs	pc, r4, ror r7	; <UNPREDICTABLE>
    1cc4:	3f2d2f49 	svccc	0x002d2f49
    1cc8:	21492d76 	hvccs	37590	; 0x92d6
    1ccc:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1cd0:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1cd4:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1cd8:	1e2f2123 	sufneep	f2, f7, f3
    1cdc:	77032b31 	smladxvc	r3, r1, fp, r2
    1ce0:	212f293c 	teqcs	pc, ip, lsr r9	; <UNPREDICTABLE>
    1ce4:	4d2d2f49 	stcmi	15, cr2, [sp, #-292]!	; 0xfffffedc
    1ce8:	2f492d68 	svccs	0x00492d68
    1cec:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1cf0:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1cf4:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1cf8:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1c44 <__Stack_Size+0x1444>
    1cfc:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1d00:	212f3774 	teqcs	pc, r4, ror r7	; <UNPREDICTABLE>
    1d04:	3f2d2f49 	svccc	0x002d2f49
    1d08:	21492d76 	hvccs	37590	; 0x92d6
    1d0c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1d10:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1d14:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1d18:	1e2f2123 	sufneep	f2, f7, f3
    1d1c:	77032b31 	smladxvc	r3, r1, fp, r2
    1d20:	212f293c 	teqcs	pc, ip, lsr r9	; <UNPREDICTABLE>
    1d24:	4d2d2f49 	stcmi	15, cr2, [sp, #-292]!	; 0xfffffedc
    1d28:	2f492d68 	svccs	0x00492d68
    1d2c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1d30:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1d34:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1d38:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1c84 <__Stack_Size+0x1484>
    1d3c:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1d40:	212f2974 	teqcs	pc, r4, ror r9	; <UNPREDICTABLE>
    1d44:	3f2d2f49 	svccc	0x002d2f49
    1d48:	21492d76 	hvccs	37590	; 0x92d6
    1d4c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1d50:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1d54:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1d58:	1e2f2123 	sufneep	f2, f7, f3
    1d5c:	77032b31 	smladxvc	r3, r1, fp, r2
    1d60:	212f293c 	teqcs	pc, ip, lsr r9	; <UNPREDICTABLE>
    1d64:	4d2d2f49 	stcmi	15, cr2, [sp, #-292]!	; 0xfffffedc
    1d68:	2f492d68 	svccs	0x00492d68
    1d6c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1d70:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    1d74:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1d78:	2c2f232f 	stccs	3, cr2, [pc], #-188	; 1cc4 <__Stack_Size+0x14c4>
    1d7c:	77032b23 	strvc	r2, [r3, -r3, lsr #22]
    1d80:	212f2974 	teqcs	pc, r4, ror r9	; <UNPREDICTABLE>
    1d84:	3f2d2f49 	svccc	0x002d2f49
    1d88:	21492d76 	hvccs	37590	; 0x92d6
    1d8c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1d90:	3c0e0320 	stccc	3, cr0, [lr], {32}
    1d94:	2d2f3b21 	fstmdbxcs	pc!, {d3-d18}	;@ Deprecated
    1d98:	1e2f2123 	sufneep	f2, f7, f3
    1d9c:	d5032b31 	strle	r2, [r3, #-2865]	; 0xb31
    1da0:	04022000 	streq	r2, [r2], #-0
    1da4:	00010100 	andeq	r0, r1, r0, lsl #2
    1da8:	00000205 	andeq	r0, r0, r5, lsl #4
    1dac:	8a030000 	bhi	c1db4 <__Stack_Size+0xc15b4>
    1db0:	232e0102 	teqcs	lr, #-2147483648	; 0x80000000
    1db4:	96030204 	strls	r0, [r3], -r4, lsl #4
    1db8:	01043c7e 	tsteq	r4, lr, ror ip
    1dbc:	ac01ec03 	stcge	12, cr14, [r1], {3}
    1dc0:	01000202 	tsteq	r0, r2, lsl #4
    1dc4:	02050001 	andeq	r0, r5, #1
    1dc8:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
    1dcc:	0102b003 	tsteq	r2, r3
    1dd0:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
    1dd4:	2000ea03 	andcs	lr, r0, r3, lsl #20
    1dd8:	7f930320 	svcvc	0x00930320
    1ddc:	1d4b412e 	stfnee	f4, [fp, #-184]	; 0xffffff48
    1de0:	301f2f42 	andscc	r2, pc, r2, asr #30
    1de4:	2f4d302c 	svccs	0x004d302c
    1de8:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1dec:	2f1b5859 	svccs	0x001b5859
    1df0:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1d74 <__Stack_Size+0x1574>
    1df4:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1df8:	03242d21 	teqeq	r4, #2112	; 0x840
    1dfc:	0e032e75 	mcreq	14, 0, r2, cr3, cr5, {3}
    1e00:	2f3b2f3c 	svccs	0x003b2f3c
    1e04:	2f233d2d 	svccs	0x00233d2d
    1e08:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1e0c:	2f1b5877 	svccs	0x001b5877
    1e10:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1d94 <__Stack_Size+0x1594>
    1e14:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1e18:	03242d21 	teqeq	r4, #2112	; 0x840
    1e1c:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1e20:	2f572f3c 	svccs	0x00572f3c
    1e24:	2f314b2d 	svccs	0x00314b2d
    1e28:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1e2c:	03435877 	movteq	r5, #14455	; 0x3877
    1e30:	213d3c74 	teqcs	sp, r4, ror ip
    1e34:	3f2d2f49 	svccc	0x002d2f49
    1e38:	21492d84 	smlalbbcs	r2, r9, r4, sp
    1e3c:	7503242d 	strvc	r2, [r3, #-1069]	; 0x42d
    1e40:	580e034a 	stmdapl	lr, {r1, r3, r6, r8, r9}
    1e44:	2d2f3b2f 	fstmdbxcs	pc!, {d3-d25}	;@ Deprecated
    1e48:	2c3d232f 	ldccs	3, cr2, [sp], #-188	; 0xffffff44
    1e4c:	72032b23 	andvc	r2, r3, #35840	; 0x8c00
    1e50:	65213d4a 	strvs	r3, [r1, #-3402]!	; 0xd4a
    1e54:	843f2d2f 	ldrthi	r2, [pc], #-3375	; 1e5c <__Stack_Size+0x165c>
    1e58:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1e5c:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1e60:	2f580e03 	svccs	0x00580e03
    1e64:	2f2d2f3b 	svccs	0x002d2f3b
    1e68:	2c303b23 	ldccs	11, cr3, [r0], #-140	; 0xffffff74
    1e6c:	f0032b23 			; <UNDEFINED> instruction: 0xf0032b23
    1e70:	87032000 	strhi	r2, [r3, -r0]
    1e74:	2f1b907f 	svccs	0x001b907f
    1e78:	2d2f4921 	stccs	9, cr4, [pc, #-132]!	; 1dfc <__Stack_Size+0x15fc>
    1e7c:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1e80:	03242d21 	teqeq	r4, #2112	; 0x840
    1e84:	0e034a75 	mcreq	10, 0, r4, cr3, cr5, {3}
    1e88:	2f3b2f3c 	svccs	0x003b2f3c
    1e8c:	2f232f2d 	svccs	0x00232f2d
    1e90:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1e94:	2f295877 	svccs	0x00295877
    1e98:	2d2f6521 	cfstr32cs	mvfx6, [pc, #-132]!	; 1e1c <__Stack_Size+0x161c>
    1e9c:	492d683f 	pushmi	{r0, r1, r2, r3, r4, r5, fp, sp, lr}
    1ea0:	03242d21 	teqeq	r4, #2112	; 0x840
    1ea4:	0e032075 	mcreq	0, 0, r2, cr3, cr5, {3}
    1ea8:	2f3b2f3c 	svccs	0x003b2f3c
    1eac:	2d232f2d 	stccs	15, cr2, [r3, #-180]!	; 0xffffff4c
    1eb0:	2b232c22 	blcs	8ccf40 <__Stack_Size+0x8cc740>
    1eb4:	1b587703 	blne	161fac8 <__Stack_Size+0x161f2c8>
    1eb8:	2f49212f 	svccs	0x0049212f
    1ebc:	2d683f2d 	stclcs	15, cr3, [r8, #-180]!	; 0xffffff4c
    1ec0:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1ec4:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    1ec8:	3b2f3c0e 	blcc	bd0f08 <__Stack_Size+0xbd0708>
    1ecc:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1ed0:	2b232c2f 	blcs	8ccf94 <__Stack_Size+0x8cc794>
    1ed4:	29587703 	ldmdbcs	r8, {r0, r1, r8, r9, sl, ip, sp, lr}^
    1ed8:	2f65212f 	svccs	0x0065212f
    1edc:	2d683f2d 	stclcs	15, cr3, [r8, #-180]!	; 0xffffff4c
    1ee0:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1ee4:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1ee8:	3b2f3c0e 	blcc	bd0f28 <__Stack_Size+0xbd0728>
    1eec:	232f2d4b 	teqcs	pc, #4800	; 0x12c0
    1ef0:	2b232c2f 	blcs	8ccfb4 <__Stack_Size+0x8cc7b4>
    1ef4:	1b587703 	blne	161fb08 <__Stack_Size+0x161f308>
    1ef8:	2f49212f 	svccs	0x0049212f
    1efc:	2d683f2d 	stclcs	15, cr3, [r8, #-180]!	; 0xffffff4c
    1f00:	242d2149 	strtcs	r2, [sp], #-329	; 0x149
    1f04:	03207503 	teqeq	r0, #12582912	; 0xc00000
    1f08:	3b2f3c0e 	blcc	bd0f48 <__Stack_Size+0xbd0748>
    1f0c:	232f2d2f 	teqcs	pc, #3008	; 0xbc0
    1f10:	2b232c2f 	blcs	8ccfd4 <__Stack_Size+0x8cc7d4>
    1f14:	2e7ede03 	cdpcs	14, 7, cr13, cr14, cr3, {0}
    1f18:	9e00e403 	cdpls	4, 0, cr14, cr0, cr3, {0}
    1f1c:	2b311e67 	blcs	c498c0 <__Stack_Size+0xc490c0>
    1f20:	301e4c26 	andscc	r4, lr, r6, lsr #24
    1f24:	2f314b3b 	svccs	0x00314b3b
    1f28:	032b232c 	teqeq	fp, #44, 6	; 0xb0000000
    1f2c:	54032e2c 	strpl	r2, [r3], #-3628	; 0xe2c
    1f30:	3c2c032e 	stccc	3, cr0, [ip], #-184	; 0xffffff48
    1f34:	65213d1b 	strvs	r3, [r1, #-3355]!	; 0xd1b
    1f38:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1f3c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1f40:	20750324 	rsbscs	r0, r5, r4, lsr #6
    1f44:	2f3c0e03 	svccs	0x003c0e03
    1f48:	2f2d2f3b 	svccs	0x002d2f3b
    1f4c:	232c2f23 	teqcs	ip, #35, 30	; 0x8c
    1f50:	5877032b 	ldmdapl	r7!, {r0, r1, r3, r5, r8, r9}^
    1f54:	3b212f29 	blcc	84dc00 <__Stack_Size+0x84d400>
    1f58:	683f2d2f 	ldmdavs	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    1f5c:	2d21492d 	stccs	9, cr4, [r1, #-180]!	; 0xffffff4c
    1f60:	2e750324 	cdpcs	3, 7, cr0, cr5, cr4, {1}
    1f64:	1f3c0f03 	svcne	0x003c0f03
    1f68:	2f4d4921 	svccs	0x004d4921
    1f6c:	2b311e2f 	blcs	c49830 <__Stack_Size+0xc49030>
    1f70:	20019103 	andcs	r9, r1, r3, lsl #2
    1f74:	01000402 	tsteq	r0, r2, lsl #8
    1f78:	0003fa01 	andeq	pc, r3, r1, lsl #20
    1f7c:	60000200 	andvs	r0, r0, r0, lsl #4
    1f80:	02000001 	andeq	r0, r0, #1
    1f84:	0d0efb01 	vstreq	d15, [lr, #-4]
    1f88:	01010100 	mrseq	r0, (UNDEF: 17)
    1f8c:	00000001 	andeq	r0, r0, r1
    1f90:	01000001 	tsteq	r0, r1
    1f94:	31353532 	teqcc	r5, r2, lsr r5
    1f98:	3a630039 	bcc	18c2084 <__Stack_Size+0x18c1884>
    1f9c:	6f72705c 	svcvs	0x0072705c
    1fa0:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    1fa4:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    1fa8:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    1fac:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    1fb0:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    1fb4:	6f6f7420 	svcvs	0x006f7420
    1fb8:	6120736c 	teqvs	r0, ip, ror #6
    1fbc:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    1fc0:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    1fc4:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    1fc8:	20382e34 	eorscs	r2, r8, r4, lsr lr
    1fcc:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    1fd0:	615c3371 	cmpvs	ip, r1, ror r3
    1fd4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1fd8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1fdc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1fe0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    1fe4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    1fe8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    1fec:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0x968
    1ff0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    1ff4:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    1ff8:	206d6172 	rsbcs	r6, sp, r2, ror r1
    1ffc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2000:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2004:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2008:	20756e67 	rsbscs	r6, r5, r7, ror #28
    200c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 1e44 <__Stack_Size+0x1644>
    2010:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2014:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2018:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    201c:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2020:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2024:	71343130 	teqvc	r4, r0, lsr r1
    2028:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    202c:	6f6e2d6d 	svcvs	0x006e2d6d
    2030:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2034:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2038:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    203c:	00656475 	rsbeq	r6, r5, r5, ror r4
    2040:	705c3a63 	subsvc	r3, ip, r3, ror #20
    2044:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    2048:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    204c:	73656c69 	cmnvc	r5, #26880	; 0x6900
    2050:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    2054:	675c2936 	smmlarvs	ip, r6, r9, r2
    2058:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    205c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    2060:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    2064:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    2068:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    206c:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    2070:	30322038 	eorscc	r2, r2, r8, lsr r0
    2074:	33713431 	cmncc	r1, #822083584	; 0x31000000
    2078:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    207c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    2080:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    2084:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2088:	61652d65 	cmnvs	r5, r5, ror #26
    208c:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
    2090:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    2094:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2098:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    209c:	70660000 	rsbvc	r0, r6, r0
    20a0:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    20a4:	0100632e 	tsteq	r0, lr, lsr #6
    20a8:	70660000 	rsbvc	r0, r6, r0
    20ac:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    20b0:	0100682e 	tsteq	r0, lr, lsr #16
    20b4:	645f0000 	ldrbvs	r0, [pc], #-0	; 20bc <__Stack_Size+0x18bc>
    20b8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0x665
    20bc:	745f746c 	ldrbvc	r7, [pc], #-1132	; 20c4 <__Stack_Size+0x18c4>
    20c0:	73657079 	cmnvc	r5, #121	; 0x79
    20c4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    20c8:	74730000 	ldrbtvc	r0, [r3], #-0
    20cc:	746e6964 	strbtvc	r6, [lr], #-2404	; 0x964
    20d0:	0300682e 	movweq	r6, #2094	; 0x82e
    20d4:	74730000 	ldrbtvc	r0, [r3], #-0
    20d8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    20dc:	0400682e 	streq	r6, [r0], #-2094	; 0x82e
    20e0:	00000000 	andeq	r0, r0, r0
    20e4:	00000205 	andeq	r0, r0, r5, lsl #4
    20e8:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    20ec:	3b250100 	blcc	9424f4 <__Stack_Size+0x941cf4>
    20f0:	0004027a 	andeq	r0, r4, sl, ror r2
    20f4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    20f8:	00313402 	eorseq	r3, r1, r2, lsl #8
    20fc:	00dd0308 	sbcseq	r0, sp, r8, lsl #6
    2100:	4f034a01 	svcmi	0x00034a01
    2104:	2240673c 	subcs	r6, r0, #60, 14	; 0xf00000
    2108:	2b032c22 	blcs	cd198 <__Stack_Size+0xcc998>
    210c:	2e79032e 	cdpcs	3, 7, cr0, cr9, cr14, {1}
    2110:	295a3352 	ldmdbcs	sl, {r1, r4, r6, r8, r9, ip, sp}^
    2114:	0200342d 	andeq	r3, r0, #754974720	; 0x2d000000
    2118:	22020204 	andcs	r0, r2, #4, 4	; 0x40000000
    211c:	069e0613 			; <UNDEFINED> instruction: 0x069e0613
    2120:	212d3d49 	teqcs	sp, r9, asr #26
    2124:	211f3d3b 	tstcs	pc, fp, lsr sp	; <UNPREDICTABLE>
    2128:	3c590368 	mrrccc	3, 6, r0, r9, cr8
    212c:	2b311e4b 	blcs	c49a60 <__Stack_Size+0xc49260>
    2130:	bd202a03 	vstmdblt	r0!, {s4-s6}
    2134:	02040200 	andeq	r0, r4, #0, 4
    2138:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    213c:	664f0302 	strbvs	r0, [pc], -r2, lsl #6
    2140:	02040200 	andeq	r0, r4, #0, 4
    2144:	00203103 	eoreq	r3, r0, r3, lsl #2
    2148:	03020402 	movweq	r0, #9218	; 0x2402
    214c:	3d212e52 	stccc	14, cr2, [r1, #-328]!	; 0xfffffeb8
    2150:	002b311e 	eoreq	r3, fp, lr, lsl r1
    2154:	03020402 	movweq	r0, #9218	; 0x2402
    2158:	02002031 	andeq	r2, r0, #49	; 0x31
    215c:	a8030204 	stmdage	r3, {r2, r9}
    2160:	0200207f 	andeq	r2, r0, #127	; 0x7f
    2164:	d8030204 	stmdale	r3, {r2, r9}
    2168:	02002000 	andeq	r2, r0, #0
    216c:	ab030204 	blge	c2984 <__Stack_Size+0xc2184>
    2170:	59212e7f 	stmdbpl	r1!, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    2174:	032b312c 	teqeq	fp, #44, 2
    2178:	312000f5 	strdcc	r0, [r0, -r5]!
    217c:	59037321 	stmdbpl	r3, {r0, r5, r8, r9, ip, sp, lr}
    2180:	bb03433c 	bllt	d2e78 <__Stack_Size+0xd2678>
    2184:	1e313c7f 	mrcne	12, 1, r3, cr1, cr15, {3}
    2188:	213c3503 	teqcs	ip, r3, lsl #10
    218c:	4a4d032d 	bmi	1342e48 <__Stack_Size+0x1342648>
    2190:	01000302 	tsteq	r0, r2, lsl #6
    2194:	02050001 	andeq	r0, r5, #1
    2198:	00000000 	andeq	r0, r0, r0
    219c:	0100f803 	tsteq	r0, r3, lsl #16
    21a0:	0204312e 	andeq	r3, r4, #-2147483637	; 0x8000000b
    21a4:	587fac03 	ldmdapl	pc!, {r0, r1, sl, fp, sp, pc}^	; <UNPREDICTABLE>
    21a8:	d6030104 	strle	r0, [r3], -r4, lsl #2
    21ac:	0202ac00 	andeq	sl, r2, #0, 24
    21b0:	00010100 	andeq	r0, r1, r0, lsl #2
    21b4:	00000205 	andeq	r0, r0, r5, lsl #4
    21b8:	80030000 	andhi	r0, r3, r0
    21bc:	025d0101 	subseq	r0, sp, #1073741824	; 0x40000000
    21c0:	2f2f1431 	svccs	0x002f1431
    21c4:	78032f30 	stmdavc	r3, {r4, r5, r8, r9, sl, fp, sp}
    21c8:	2d241d4a 	stccs	13, cr1, [r4, #-296]!	; 0xfffffed8
    21cc:	2d211f21 	stccs	15, cr1, [r1, #-132]!	; 0xffffff7c
    21d0:	01000202 	tsteq	r0, r2, lsl #4
    21d4:	02050001 	andeq	r0, r5, #1
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	01019103 	tsteq	r1, r3, lsl #2
    21e0:	02be1308 	adcseq	r1, lr, #8, 6	; 0x20000000
    21e4:	4b1f1332 	blmi	7c6eb4 <__Stack_Size+0x7c66b4>
    21e8:	3e65211e 	mcrcc	1, 3, r2, cr5, cr14, {0}
    21ec:	01000202 	tsteq	r0, r2, lsl #4
    21f0:	02050001 	andeq	r0, r5, #1
    21f4:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
    21f8:	01019a03 	tsteq	r1, r3, lsl #20
    21fc:	207ef303 	rsbscs	pc, lr, r3, lsl #6
    2200:	20018d03 	andcs	r8, r1, r3, lsl #26
    2204:	207ef603 	rsbscs	pc, lr, r3, lsl #12
    2208:	311e4b21 	tstcc	lr, r1, lsr #22
    220c:	3c0e032b 	stccc	3, cr0, [lr], {43}	; 0x2b
    2210:	2b312c59 	blcs	c4d37c <__Stack_Size+0xc4cb7c>
    2214:	2000f503 	andcs	pc, r0, r3, lsl #10
    2218:	44732131 	ldrbtmi	r2, [r3], #-305	; 0x131
    221c:	01000302 	tsteq	r0, r2, lsl #6
    2220:	02050001 	andeq	r0, r5, #1
    2224:	00000000 	andeq	r0, r0, r0
    2228:	0101a003 	tsteq	r1, r3
    222c:	207eed03 	rsbscs	lr, lr, r3, lsl #26
    2230:	20019303 	andcs	r9, r1, r3, lsl #6
    2234:	207ef003 	rsbscs	pc, lr, r3
    2238:	311e4b21 	tstcc	lr, r1, lsr #22
    223c:	3c0e032b 	stccc	3, cr0, [lr], {43}	; 0x2b
    2240:	2b312c59 	blcs	c4d3ac <__Stack_Size+0xc4cbac>
    2244:	2000f503 	andcs	pc, r0, r3, lsl #10
    2248:	03732131 	cmneq	r3, #1073741836	; 0x4000000c
    224c:	233c7f85 	teqcs	ip, #532	; 0x214
    2250:	312c5921 	teqcc	ip, r1, lsr #18
    2254:	00f5032b 	rscseq	r0, r5, fp, lsr #6
    2258:	73213120 	teqvc	r1, #32, 2
    225c:	023c0f03 	eorseq	r0, ip, #3, 30
    2260:	01010003 	tsteq	r1, r3
    2264:	2c020500 	cfstr32cs	mvfx0, [r2], {-0}
    2268:	03080033 	movweq	r0, #32819	; 0x8033
    226c:	4a0101a8 	bmi	42914 <__Stack_Size+0x42114>
    2270:	03312b23 	teqeq	r1, #35840	; 0x8c00
    2274:	672e7f81 	strvs	r7, [lr, -r1, lsl #31]!
    2278:	2c222240 	sfmcs	f2, 4, [r2], #-256	; 0xffffff00
    227c:	2000fa03 	andcs	pc, r0, r3, lsl #20
    2280:	02040200 	andeq	r0, r4, #0, 4
    2284:	0402004b 	streq	r0, [r2], #-75	; 0x4b
    2288:	7f900302 	svcvc	0x00900302
    228c:	04020082 	streq	r0, [r2], #-130	; 0x82
    2290:	00f00302 	rscseq	r0, r0, r2, lsl #6
    2294:	04020020 	streq	r0, [r2], #-32
    2298:	7f930302 	svcvc	0x00930302
    229c:	1e3d212e 	rsfneep	f2, f5, #0.5
    22a0:	5d032b31 	vstrpl	d2, [r3, #-196]	; 0xffffff3c
    22a4:	311e593c 	tstcc	lr, ip, lsr r9
    22a8:	00f5032b 	rscseq	r0, r5, fp, lsr #6
    22ac:	65213120 	strvs	r3, [r1, #-288]!	; 0x120
    22b0:	92030204 	andls	r0, r3, #4, 4	; 0x40000000
    22b4:	01043c7f 	tsteq	r4, pc, ror ip
    22b8:	049e6603 	ldreq	r6, [lr], #1539	; 0x603
    22bc:	2e1a0302 	cdpcs	3, 1, cr0, cr10, cr2, {0}
    22c0:	69030104 	stmdbvs	r3, {r2, r8}
    22c4:	2c672120 	stfcse	f2, [r7], #-128	; 0xffffff80
    22c8:	0e032b31 	vmoveq.16	d3[0], r2
    22cc:	311e673c 	tstcc	lr, ip, lsr r7
    22d0:	00f5032b 	rscseq	r0, r5, fp, lsr #6
    22d4:	81213120 	teqhi	r1, r0, lsr #2
    22d8:	81214d39 	teqhi	r1, r9, lsr sp
    22dc:	02040200 	andeq	r0, r4, #0, 4
    22e0:	033c1803 	teqeq	ip, #196608	; 0x30000
    22e4:	f7033c0c 			; <UNDEFINED> instruction: 0xf7033c0c
    22e8:	2c313c7e 	ldccs	12, cr3, [r1], #-504	; 0xfffffe08
    22ec:	01000302 	tsteq	r0, r2, lsl #6
    22f0:	02050001 	andeq	r0, r5, #1
    22f4:	00000000 	andeq	r0, r0, r0
    22f8:	0101bc03 	tsteq	r1, r3, lsl #24
    22fc:	eb030204 	bl	c2b14 <__Stack_Size+0xc2314>
    2300:	01043c7e 	tsteq	r4, lr, ror ip
    2304:	20019503 	andcs	r9, r1, r3, lsl #10
    2308:	03020420 	movweq	r0, #9248	; 0x2420
    230c:	042e7eeb 	strteq	r7, [lr], #-3819	; 0xeeb
    2310:	019c0301 	orrseq	r0, ip, r1, lsl #6
    2314:	03020490 	movweq	r0, #9360	; 0x2490
    2318:	04207ee4 	strteq	r7, [r0], #-3812	; 0xee4
    231c:	01970301 	orrseq	r0, r7, r1, lsl #6
    2320:	04020020 	streq	r0, [r2], #-32
    2324:	02002602 	andeq	r2, r0, #2097152	; 0x200000
    2328:	003d0204 	eorseq	r0, sp, r4, lsl #4
    232c:	2c020402 	cfstrscs	mvf0, [r2], {2}
    2330:	02040200 	andeq	r0, r4, #0, 4
    2334:	04020031 	streq	r0, [r2], #-49	; 0x31
    2338:	8a032b02 	bhi	ccf48 <__Stack_Size+0xcc748>
    233c:	03a3207f 			; <UNDEFINED> instruction: 0x03a3207f
    2340:	403d2e5a 	eorsmi	r2, sp, sl, asr lr
    2344:	032c2222 	teqeq	ip, #536870914	; 0x20000002
    2348:	04200199 	strteq	r0, [r0], #-409	; 0x199
    234c:	7edb0302 	cdpvc	3, 13, cr0, cr11, cr2, {0}
    2350:	0301043c 	movweq	r0, #5180	; 0x143c
    2354:	042001a5 	strteq	r0, [r0], #-421	; 0x1a5
    2358:	7edb0302 	cdpvc	3, 13, cr0, cr11, cr2, {0}
    235c:	0301042e 	movweq	r0, #5166	; 0x142e
    2360:	239e01a5 	orrscs	r0, lr, #1073741865	; 0x40000029
    2364:	7a03ad68 	bvc	ed90c <__Stack_Size+0xed10c>
    2368:	3c0a0366 	stccc	3, cr0, [sl], {102}	; 0x66
    236c:	3c7eda03 	ldclcc	10, cr13, [lr], #-12
    2370:	03022c31 	movweq	r2, #11313	; 0x2c31
    2374:	52010100 	andpl	r0, r1, #0, 2
    2378:	02000001 	andeq	r0, r0, #1
    237c:	0000fb00 	andeq	pc, r0, r0, lsl #22
    2380:	fb010200 	blx	42b8a <__Stack_Size+0x4238a>
    2384:	01000d0e 	tsteq	r0, lr, lsl #26
    2388:	00010101 	andeq	r0, r1, r1, lsl #2
    238c:	00010000 	andeq	r0, r1, r0
    2390:	35320100 	ldrcc	r0, [r2, #-256]!	; 0x100
    2394:	00393135 	eorseq	r3, r9, r5, lsr r1
    2398:	705c3a63 	subsvc	r3, ip, r3, ror #20
    239c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    23a0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    23a4:	73656c69 	cmnvc	r5, #26880	; 0x6900
    23a8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    23ac:	675c2936 	smmlarvs	ip, r6, r9, r2
    23b0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    23b4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    23b8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    23bc:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    23c0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    23c4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    23c8:	30322038 	eorscc	r2, r2, r8, lsr r0
    23cc:	33713431 	cmncc	r1, #822083584	; 0x31000000
    23d0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    23d4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    23d8:	61652d65 	cmnvs	r5, r5, ror #26
    23dc:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    23e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    23e4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    23e8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    23ec:	6300656e 	movwvs	r6, #1390	; 0x56e
    23f0:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    23f4:	6172676f 	cmnvs	r2, pc, ror #14
    23f8:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    23fc:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2400:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2404:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    2408:	6f742075 	svcvs	0x00742075
    240c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2410:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2414:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2418:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    241c:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2420:	31303220 	teqcc	r0, r0, lsr #4
    2424:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    2428:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    242c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2430:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2434:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    2438:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    243c:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    2440:	6870726f 	ldmdavs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    2444:	31353532 	teqcc	r5, r2, lsr r5
    2448:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    244c:	5f000001 	svcpl	0x00000001
    2450:	61666564 	cmnvs	r6, r4, ror #10
    2454:	5f746c75 	svcpl	0x00746c75
    2458:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    245c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2460:	73000002 	movwvc	r0, #2
    2464:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2468:	00682e74 	rsbeq	r2, r8, r4, ror lr
    246c:	66000003 	strvs	r0, [r0], -r3
    2470:	31353532 	teqcc	r5, r2, lsr r5
    2474:	00682e39 	rsbeq	r2, r8, r9, lsr lr
    2478:	00000001 	andeq	r0, r0, r1
    247c:	00020500 	andeq	r0, r2, r0, lsl #10
    2480:	03000000 	movweq	r0, #0
    2484:	1c24010a 	stfnes	f0, [r4], #-40	; 0xffffffd8
    2488:	241c2420 	ldrcs	r2, [ip], #-1056	; 0x420
    248c:	59594b4b 	ldmdbpl	r9, {r0, r1, r3, r6, r8, r9, fp, lr}^
    2490:	0005023d 	andeq	r0, r5, sp, lsr r2
    2494:	05000101 	streq	r0, [r0, #-257]	; 0x101
    2498:	00000002 	andeq	r0, r0, r2
    249c:	00cc0300 	sbceq	r0, ip, r0, lsl #6
    24a0:	2e4e0301 	cdpcs	3, 4, cr0, cr14, cr1, {0}
    24a4:	20203203 	eorcs	r3, r0, r3, lsl #4
    24a8:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    24ac:	4e033c32 	mcrmi	12, 0, r3, cr3, cr2, {1}
    24b0:	594b2f20 	stmdbpl	fp, {r5, r8, r9, sl, fp, sp}^
    24b4:	5b581103 	blpl	16068c8 <__Stack_Size+0x16060c8>
    24b8:	5b4d5959 	blpl	1358a24 <__Stack_Size+0x1358224>
    24bc:	af4d4b5b 	svcge	0x004d4b5b
    24c0:	033e3d59 	teqeq	lr, #5696	; 0x1640
    24c4:	3f3d580b 	svccc	0x003d580b
    24c8:	01000902 	tsteq	r0, r2, lsl #18
    24cc:	00080501 	andeq	r0, r8, r1, lsl #10
    24d0:	31000200 	mrscc	r0, R8_usr
    24d4:	02000000 	andeq	r0, r0, #0
    24d8:	0d0efb01 	vstreq	d15, [lr, #-4]
    24dc:	01010100 	mrseq	r0, (UNDEF: 17)
    24e0:	00000001 	andeq	r0, r0, r1
    24e4:	01000001 	tsteq	r0, r1
    24e8:	31353532 	teqcc	r5, r2, lsr r5
    24ec:	73000039 	movwvc	r0, #57	; 0x39
    24f0:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    24f4:	00632e36 	rsbeq	r2, r3, r6, lsr lr
    24f8:	73000001 	movwvc	r0, #1
    24fc:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    2500:	00682e36 	rsbeq	r2, r8, r6, lsr lr
    2504:	00000001 	andeq	r0, r0, r1
    2508:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    250c:	03080034 	movweq	r0, #32820	; 0x8034
    2510:	2d33012f 	ldfcss	f0, [r3, #-188]!	; 0xffffff44
    2514:	21212130 	teqcs	r1, r0, lsr r1
    2518:	76032121 	strvc	r2, [r3], -r1, lsr #2
    251c:	21302320 	teqcs	r0, r0, lsr #6
    2520:	331c2121 	tstcc	ip, #1073741832	; 0x40000008
    2524:	20760321 	rsbscs	r0, r6, r1, lsr #6
    2528:	200a0321 	andcs	r0, sl, r1, lsr #6
    252c:	01001302 	tsteq	r0, r2, lsl #6
    2530:	02050001 	andeq	r0, r5, #1
    2534:	080034c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, sp}
    2538:	3c013e03 	stccc	14, cr3, [r1], {3}
    253c:	1e203403 	cdpne	4, 2, cr3, cr0, cr3, {0}
    2540:	79032221 	stmdbvc	r3, {r0, r5, r9, sp}
    2544:	1f222420 	svcne	0x00222420
    2548:	2e780324 	cdpcs	3, 7, cr0, cr8, cr4, {1}
    254c:	20790326 	rsbscs	r0, r9, r6, lsr #6
    2550:	1f1c1f26 	svcne	0x001c1f26
    2554:	78032227 	stmdavc	r3, {r0, r1, r2, r5, r9, sp}
    2558:	0327213c 	teqeq	r7, #60, 2
    255c:	54037479 	strpl	r7, [r3], #-1145	; 0x479
    2560:	20330320 	eorscs	r0, r3, r0, lsr #6
    2564:	03664d03 	cmneq	r6, #3, 26	; 0xc0
    2568:	54032e2c 	strpl	r2, [r3], #-3628	; 0xe2c
    256c:	2e330320 	cdpcs	3, 3, cr0, cr3, cr0, {1}
    2570:	03664d03 	cmneq	r6, #3, 26	; 0xc0
    2574:	4d037433 	cfstrsmi	mvf7, [r3, #-204]	; 0xffffff34
    2578:	2e33034a 	cdpcs	3, 3, cr0, cr3, cr10, {2}
    257c:	034a4e03 	movteq	r4, #44547	; 0xae03
    2580:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2584:	2d031f2e 	stccs	15, cr1, [r3, #-184]	; 0xffffff48
    2588:	7a03262e 	bvc	cbe48 <__Stack_Size+0xcb648>
    258c:	4e032620 	cfmadd32mi	mvax1, mvfx2, mvfx3, mvfx0
    2590:	3c320320 	ldccc	3, cr0, [r2], #-128	; 0xffffff80
    2594:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2598:	03263c2c 	teqeq	r6, #44, 24	; 0x2c00
    259c:	3303204e 	movwcc	r2, #12366	; 0x304e
    25a0:	1f2f1f2e 	svcne	0x002f1f2e
    25a4:	03204e03 	teqeq	r0, #3, 28	; 0x30
    25a8:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    25ac:	2033033c 	eorscs	r0, r3, ip, lsr r3
    25b0:	9e084e03 	cdpls	14, 0, cr4, cr8, cr3, {0}
    25b4:	03203203 	teqeq	r0, #805306368	; 0x30000000
    25b8:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    25bc:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    25c0:	03203203 	teqeq	r0, #805306368	; 0x30000000
    25c4:	3203204e 	andcc	r2, r3, #78	; 0x4e
    25c8:	4d032f20 	stcmi	15, cr2, [r3, #-128]	; 0xffffff80
    25cc:	4a320320 	bmi	c83254 <__Stack_Size+0xc82a54>
    25d0:	2e4d0321 	cdpcs	3, 4, cr0, cr13, cr1, {1}
    25d4:	033c3303 	teqeq	ip, #201326592	; 0xc000000
    25d8:	032e084e 	teqeq	lr, #5111808	; 0x4e0000
    25dc:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    25e0:	20320366 	eorscs	r0, r2, r6, ror #6
    25e4:	03664e03 	cmneq	r6, #3, 28	; 0x30
    25e8:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    25ec:	3c32034a 	ldccc	3, cr0, [r2], #-296	; 0xfffffed8
    25f0:	03204e03 	teqeq	r0, #3, 28	; 0x30
    25f4:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    25f8:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    25fc:	033c4f03 	teqeq	ip, #3, 30
    2600:	4d032032 	stcmi	0, cr2, [r3, #-200]	; 0xffffff38
    2604:	20330320 	eorscs	r0, r3, r0, lsr #6
    2608:	03204e03 	teqeq	r0, #3, 28	; 0x30
    260c:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2610:	2032032e 	eorscs	r0, r2, lr, lsr #6
    2614:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2618:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    261c:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    2620:	03ba4e03 			; <UNDEFINED> instruction: 0x03ba4e03
    2624:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2628:	2e320390 	mrccs	3, 1, r0, cr2, cr0, {4}
    262c:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2630:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    2634:	2032032e 	eorscs	r0, r2, lr, lsr #6
    2638:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    263c:	4f032e32 	svcmi	0x00032e32
    2640:	20320320 	eorscs	r0, r2, r0, lsr #6
    2644:	2e4f032d 	cdpcs	3, 4, cr0, cr15, cr13, {1}
    2648:	2e33031f 	mrccs	3, 1, r0, cr3, cr15, {0}
    264c:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2650:	4f032031 	svcmi	0x00032031
    2654:	20320320 	eorscs	r0, r2, r0, lsr #6
    2658:	4e03212d 	adfmisp	f2, f3, #5.0
    265c:	203203e4 	eorscs	r0, r2, r4, ror #7
    2660:	03584e03 	cmpeq	r8, #3, 28	; 0x30
    2664:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2668:	2e32034a 	cdpcs	3, 3, cr0, cr2, cr10, {2}
    266c:	034a4e03 	movteq	r4, #44547	; 0xae03
    2670:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    2674:	20320320 	eorscs	r0, r2, r0, lsr #6
    2678:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    267c:	031f2e33 	tsteq	pc, #816	; 0x330
    2680:	032f2e4e 	teqeq	pc, #1248	; 0x4e0
    2684:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    2688:	20320320 	eorscs	r0, r2, r0, lsr #6
    268c:	4e032fab 	cdpmi	15, 0, cr2, cr3, cr11, {5}
    2690:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    2694:	03664e03 	cmneq	r6, #3, 28	; 0x30
    2698:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    269c:	66320320 	ldrtvs	r0, [r2], -r0, lsr #6
    26a0:	034a4e03 	movteq	r4, #44547	; 0xae03
    26a4:	3b754a32 	blcc	1d54f74 <__Stack_Size+0x1d54774>
    26a8:	2d211f3d 	stccs	15, cr1, [r1, #-244]!	; 0xffffff0c
    26ac:	03204f03 	teqeq	r0, #3, 30
    26b0:	032f2e31 	teqeq	pc, #784	; 0x310
    26b4:	3103744e 	tstcc	r3, lr, asr #8
    26b8:	4e03212e 	adfmisp	f2, f3, #0.5
    26bc:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    26c0:	03664e03 	cmneq	r6, #3, 28	; 0x30
    26c4:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    26c8:	58320320 	ldmdapl	r2!, {r5, r8, r9}
    26cc:	03664e03 	cmneq	r6, #3, 28	; 0x30
    26d0:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    26d4:	0832032e 	ldmdaeq	r2!, {r1, r2, r3, r5, r8, r9}
    26d8:	213b6720 	teqcs	fp, r0, lsr #14
    26dc:	032d211f 	teqeq	sp, #-1073741817	; 0xc0000007
    26e0:	32033c4f 	andcc	r3, r3, #20224	; 0x4f00
    26e4:	824e032e 	subhi	r0, lr, #-1207959552	; 0xb8000000
    26e8:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    26ec:	3203664e 	andcc	r6, r3, #81788928	; 0x4e00000
    26f0:	ba4e033c 	blt	13833e8 <__Stack_Size+0x1382be8>
    26f4:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    26f8:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    26fc:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2700:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2704:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2708:	4e034b2e 	vmlami.f64	d4, d3, d30
    270c:	2e32033c 	mrccs	3, 1, r0, cr2, cr12, {1}
    2710:	2f204d03 	svccs	0x00204d03
    2714:	2e33032d 	cdpcs	3, 3, cr0, cr3, cr13, {1}
    2718:	20084e03 	andcs	r4, r8, r3, lsl #28
    271c:	033c3203 	teqeq	ip, #805306368	; 0x30000000
    2720:	3203904e 	andcc	r9, r3, #78	; 0x4e
    2724:	4a4e033c 	bmi	138341c <__Stack_Size+0x1382c1c>
    2728:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    272c:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2730:	204e032e 	subcs	r0, lr, lr, lsr #6
    2734:	21203203 	teqcs	r0, r3, lsl #4
    2738:	2e4e031f 	mcrcs	3, 2, r0, cr14, cr15, {0}
    273c:	3d2e3203 	sfmcc	f3, 4, [lr, #-12]!
    2740:	4e03211f 	mcrmi	1, 0, r2, cr3, cr15, {0}
    2744:	33032d3c 	movwcc	r2, #15676	; 0x3d3c
    2748:	584e0320 	stmdapl	lr, {r5, r8, r9}^
    274c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2750:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2754:	824e0320 	subhi	r0, lr, #32, 6	; 0x80000000
    2758:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    275c:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    2760:	584e033c 	stmdapl	lr, {r2, r3, r4, r5, r8, r9}^
    2764:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2768:	3203204e 	andcc	r2, r3, #78	; 0x4e
    276c:	211f213c 	tstcs	pc, ip, lsr r1	; <UNPREDICTABLE>
    2770:	204e031f 	subcs	r0, lr, pc, lsl r3
    2774:	3b2e3303 	blcc	b8f388 <__Stack_Size+0xb8eb88>
    2778:	03211f2f 	teqeq	r1, #47, 30	; 0xbc
    277c:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    2780:	664e032e 	strbvs	r0, [lr], -lr, lsr #6
    2784:	034a3203 	movteq	r3, #41475	; 0xa203
    2788:	33034a4d 	movwcc	r4, #14925	; 0x3a4d
    278c:	744e032e 	strbvc	r0, [lr], #-814	; 0x32e
    2790:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2794:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    2798:	4a4e033c 	bmi	1383490 <__Stack_Size+0x1382c90>
    279c:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    27a0:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    27a4:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    27a8:	1f203303 	svcne	0x00203303
    27ac:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    27b0:	4d032e33 	stcmi	14, cr2, [r3, #-204]	; 0xffffff34
    27b4:	2e330358 	mrccs	3, 1, r0, cr3, cr8, {2}
    27b8:	03664e03 	cmneq	r6, #3, 28	; 0x30
    27bc:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    27c0:	3c320358 	ldccc	3, cr0, [r2], #-352	; 0xfffffea0
    27c4:	039e4e03 	orrseq	r4, lr, #3, 28	; 0x30
    27c8:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    27cc:	2032034a 	eorscs	r0, r2, sl, asr #6
    27d0:	034a4e03 	movteq	r4, #44547	; 0xae03
    27d4:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    27d8:	20320320 	eorscs	r0, r2, r0, lsr #6
    27dc:	4e031f21 	cdpmi	15, 0, cr1, cr3, cr1, {1}
    27e0:	2e320320 	cdpcs	3, 3, cr0, cr2, cr0, {1}
    27e4:	03211f2f 	teqeq	r1, #47, 30	; 0xbc
    27e8:	3203584e 	andcc	r5, r3, #5111808	; 0x4e0000
    27ec:	3c4d032e 	mcrrcc	3, 2, r0, sp, cr14
    27f0:	032e3303 	teqeq	lr, #201326592	; 0xc000000
    27f4:	32034a4e 	andcc	r4, r3, #319488	; 0x4e000
    27f8:	4a4e032e 	bmi	13834b8 <__Stack_Size+0x1382cb8>
    27fc:	03203203 	teqeq	r0, #805306368	; 0x30000000
    2800:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    2804:	584e034a 	stmdapl	lr, {r1, r3, r6, r8, r9}^
    2808:	034a3203 	movteq	r3, #41475	; 0xa203
    280c:	3203744e 	andcc	r7, r3, #1308622848	; 0x4e000000
    2810:	2e4e032e 	cdpcs	3, 4, cr0, cr14, cr14, {1}
    2814:	3d203203 	sfmcc	f3, 4, [r0, #-12]!
    2818:	03744e03 	cmneq	r4, #3, 28	; 0x30
    281c:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2820:	2e320358 	mrccs	3, 1, r0, cr2, cr8, {2}
    2824:	032e4e03 	teqeq	lr, #3, 28	; 0x30
    2828:	4e032032 	mcrmi	0, 0, r2, cr3, cr2, {1}
    282c:	2e32032e 	cdpcs	3, 3, cr0, cr2, cr14, {1}
    2830:	033c4e03 	teqeq	ip, #3, 28	; 0x30
    2834:	4e034a32 	mcrmi	10, 0, r4, cr3, cr2, {1}
    2838:	2032034a 	eorscs	r0, r2, sl, asr #6
    283c:	03744e03 	cmneq	r4, #3, 28	; 0x30
    2840:	4e032e32 	mcrmi	14, 0, r2, cr3, cr2, {1}
    2844:	2032032e 	eorscs	r0, r2, lr, lsr #6
    2848:	03211f3d 	teqeq	r1, #61, 30	; 0xf4
    284c:	3203e44e 	andcc	lr, r3, #1308622848	; 0x4e000000
    2850:	584e032e 	stmdapl	lr, {r1, r2, r3, r5, r8, r9}^
    2854:	032e3203 	teqeq	lr, #805306368	; 0x30000000
    2858:	32032e4e 	andcc	r2, r3, #1248	; 0x4e0
    285c:	2e4e0320 	cdpcs	3, 4, cr0, cr14, cr0, {1}
    2860:	034a3203 	movteq	r3, #41475	; 0xa203
    2864:	32033c4e 	andcc	r3, r3, #19968	; 0x4e00
    2868:	4d032f3c 	stcmi	15, cr2, [r3, #-240]	; 0xffffff10
    286c:	2e320320 	cdpcs	3, 3, cr0, cr2, cr0, {1}
    2870:	4d036708 	stcmi	7, cr6, [r3, #-32]	; 0xffffffe0
    2874:	2e320320 	cdpcs	3, 3, cr0, cr2, cr0, {1}
    2878:	2f3b213d 	svccs	0x003b213d
    287c:	751f2f1f 	ldrvc	r2, [pc, #-3871]	; 1965 <__Stack_Size+0x1165>
    2880:	592d4b2d 	pushpl	{r0, r2, r3, r5, r8, r9, fp, lr}
    2884:	672d2f1f 			; <UNDEFINED> instruction: 0x672d2f1f
    2888:	212d2165 	teqcs	sp, r5, ror #2
    288c:	2d59211f 	ldfcse	f2, [r9, #-124]	; 0xffffff84
    2890:	1f4b2d59 	svcne	0x004b2d59
    2894:	2d9f2d2f 	ldccs	13, cr2, [pc, #188]	; 2958 <__Stack_Size+0x2158>
    2898:	1f2f2d2f 	svcne	0x002f2d2f
    289c:	9d21492f 	stcls	9, cr4, [r1, #-188]!	; 0xffffff44
    28a0:	91213b21 	teqls	r1, r1, lsr #22
    28a4:	831f3d2d 	tsthi	pc, #2880	; 0xb40
    28a8:	831f2f1f 	tsthi	pc, #31, 30	; 0x7c
    28ac:	21ff212d 	mvnscs	r2, sp, lsr #2
    28b0:	2d59211f 	ldfcse	f2, [r9, #-124]	; 0xffffff84
    28b4:	1f2f2d4b 	svcne	0x002f2d4b
    28b8:	2d912d2f 	ldccs	13, cr2, [r1, #188]	; 0xbc
    28bc:	1f212d2f 	svcne	0x00212d2f
    28c0:	9d21492f 	stcls	9, cr4, [r1, #-188]!	; 0xffffff44
    28c4:	21218121 	teqcs	r1, r1, lsr #2
    28c8:	ad1f2f1f 	ldcge	15, cr2, [pc, #-124]	; 2854 <__Stack_Size+0x2054>
    28cc:	831f2f1f 	tsthi	pc, #31, 30	; 0x7c
    28d0:	4908211f 	stmdbmi	r8, {r0, r1, r2, r3, r4, r8, sp}
    28d4:	1f3d2d22 	svcne	0x003d2d22
    28d8:	1f21213b 	svcne	0x0021213b
    28dc:	1f2f1f2f 	svcne	0x002f1f2f
    28e0:	2d2f2dbb 	stccs	13, cr2, [pc, #-748]!	; 25fc <__Stack_Size+0x1dfc>
    28e4:	8f21492f 	svchi	0x0021492f
    28e8:	75211f21 	strvc	r1, [r1, #-3873]!	; 0xf21
    28ec:	4b2d592d 	blmi	b58da8 <__Stack_Size+0xb585a8>
    28f0:	752d2f1f 	strvc	r2, [sp, #-3871]!	; 0xf1f
    28f4:	212d2f2d 	teqcs	sp, sp, lsr #30
    28f8:	21492f1f 	cmpcs	r9, pc, lsl pc
    28fc:	1f2f2fe3 	svcne	0x002f2fe3
    2900:	2d3d2d59 	ldccs	13, cr2, [sp, #-356]!	; 0xfffffe9c
    2904:	2d4b2d3d 	stclcs	13, cr2, [fp, #-244]	; 0xffffff0c
    2908:	8f913b4b 	svchi	0x00913b4b
    290c:	831f212f 	tsthi	pc, #-1073741813	; 0xc000000b
    2910:	212d2f49 	teqcs	sp, r9, asr #30
    2914:	831f833b 	tsthi	pc, #-335544320	; 0xec000000
    2918:	e308671f 	movw	r6, #34591	; 0x871f
    291c:	4b2d2f2f 	blmi	b4e5e0 <__Stack_Size+0xb4dde0>
    2920:	3d2d212d 	stfccs	f2, [sp, #-180]!	; 0xffffff4c
    2924:	4b2d2f1f 	blmi	b4e5a8 <__Stack_Size+0xb4dda8>
    2928:	832d591f 	teqhi	sp, #507904	; 0x7c000
    292c:	3b212cd7 	blcc	84dc90 <__Stack_Size+0x84d490>
    2930:	213b2121 	teqcs	fp, r1, lsr #2
    2934:	912d2149 	teqls	sp, r9, asr #2
    2938:	671f831f 			; <UNDEFINED> instruction: 0x671f831f
    293c:	1f212fb9 	svcne	0x00212fb9
    2940:	3b3d2d3d 	blcc	f4de3c <__Stack_Size+0xf4d63c>
    2944:	1f752d2f 	svcne	0x00752d2f
    2948:	57671f91 			; <UNDEFINED> instruction: 0x57671f91
    294c:	832d212f 	teqhi	sp, #-1073741813	; 0xc000000b
    2950:	212d212d 	teqcs	sp, sp, lsr #2
    2954:	211f212d 	tstcs	pc, sp, lsr #2
    2958:	9f1f752d 	svcls	0x001f752d
    295c:	2fab671f 	svccs	0x00ab671f
    2960:	1f2f213b 	svcne	0x002f213b
    2964:	3b212d59 	blcc	84ded0 <__Stack_Size+0x84d6d0>
    2968:	2d2f2d21 	stccs	13, cr2, [pc, #-132]!	; 28ec <__Stack_Size+0x20ec>
    296c:	1f831f67 	svcne	0x00831f67
    2970:	213d9d67 	teqcs	sp, r7, ror #26
    2974:	212d671f 	teqcs	sp, pc, lsl r7
    2978:	913b212d 	teqls	fp, sp, lsr #2
    297c:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2980:	911f308f 	tstls	pc, pc, lsl #1
    2984:	212d2149 	teqcs	sp, r9, asr #2
    2988:	831f833b 	tsthi	pc, #-335544320	; 0xec000000
    298c:	2f8f672d 	svccs	0x008f672d
    2990:	2d3d1f21 	ldccs	15, cr1, [sp, #-132]!	; 0xffffff7c
    2994:	3b3d1f2f 	blcc	f4a658 <__Stack_Size+0xf49e58>
    2998:	1f752d4b 	svcne	0x00752d4b
    299c:	b94b1f75 	stmdblt	fp, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip}^
    29a0:	08591f30 	ldmdaeq	r9, {r4, r5, r8, r9, sl, fp, ip}^
    29a4:	212d2f3b 	teqcs	sp, fp, lsr pc
    29a8:	833b212d 	teqhi	fp, #1073741835	; 0x4000000b
    29ac:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    29b0:	211f1fbb 			; <UNDEFINED> instruction: 0x211f1fbb
    29b4:	2d21212d 	stfcss	f2, [r1, #-180]!	; 0xffffff4c
    29b8:	49212d4b 	stmdbmi	r1!, {r0, r1, r3, r6, r8, sl, fp, sp}
    29bc:	2d831f91 	stccs	15, cr1, [r3, #580]	; 0x244
    29c0:	2f2fab67 	svccs	0x002fab67
    29c4:	3d2d3d2d 	stccc	13, cr3, [sp, #-180]!	; 0xffffff4c
    29c8:	91492f2d 	cmpls	r9, sp, lsr #30
    29cc:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    29d0:	1f212f57 	svcne	0x00212f57
    29d4:	2d4b2d75 	stclcs	13, cr2, [fp, #-468]	; 0xfffffe2c
    29d8:	1f913b21 	svcne	0x00913b21
    29dc:	d5672d9f 	strble	r2, [r7, #-3487]!	; 0xd9f
    29e0:	592d2f2f 	pushpl	{r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    29e4:	213b212d 	teqcs	fp, sp, lsr #2
    29e8:	672d2f2d 	strvs	r2, [sp, -sp, lsr #30]!
    29ec:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    29f0:	2d212cbb 	stccs	12, cr2, [r1, #-748]!	; 0xfffffd14
    29f4:	752d2f21 	strvc	r2, [sp, #-3873]!	; 0xf21
    29f8:	2f1f3d2d 	svccs	0x001f3d2d
    29fc:	913b832d 	teqls	fp, sp, lsr #6
    2a00:	752d30f1 	strvc	r3, [sp, #-241]!	; 0xf1
    2a04:	211f212d 	tstcs	pc, sp, lsr #2
    2a08:	672d2f49 	strvs	r2, [sp, -r9, asr #30]!
    2a0c:	672d831f 			; <UNDEFINED> instruction: 0x672d831f
    2a10:	21492dbb 	strhcs	r2, [r9, #-219]	; 0xffffff25
    2a14:	2d21212d 	stfcss	f2, [r1, #-180]!	; 0xffffff4c
    2a18:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2a1c:	1f672d21 	svcne	0x00672d21
    2a20:	9d672d9f 	stclls	13, cr2, [r7, #-636]!	; 0xfffffd84
    2a24:	592d2f2f 	pushpl	{r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    2a28:	592d212d 	pushpl	{r0, r2, r3, r5, r8, sp}
    2a2c:	671f7549 	ldrvs	r7, [pc, -r9, asr #10]
    2a30:	2f2d592d 	svccs	0x002d592d
    2a34:	3d3b2f2d 	ldccc	15, cr2, [fp, #-180]!	; 0xffffff4c
    2a38:	91082d21 	tstls	r8, r1, lsr #26
    2a3c:	212d2149 	teqcs	sp, r9, asr #2
    2a40:	752d211f 	strvc	r2, [sp, #-287]!	; 0x11f
    2a44:	672d9f1f 			; <UNDEFINED> instruction: 0x672d9f1f
    2a48:	2f2d30ab 	svccs	0x002d30ab
    2a4c:	3d2d3d2d 	stccc	13, cr3, [sp, #-180]!	; 0xffffff4c
    2a50:	2f2d671f 	svccs	0x002d671f
    2a54:	671f752d 	ldrvs	r7, [pc, -sp, lsr #10]
    2a58:	2f9d4b2d 	svccs	0x009d4b2d
    2a5c:	49592d3d 	ldmdbmi	r9, {r0, r2, r3, r4, r5, r8, sl, fp, sp}^
    2a60:	3b212d21 	blcc	84deec <__Stack_Size+0x84d6ec>
    2a64:	2d831f83 	stccs	15, cr1, [r3, #524]	; 0x20c
    2a68:	212fab67 	teqcs	pc, r7, ror #22
    2a6c:	4b2d3d1f 	blmi	b51ef0 <__Stack_Size+0xb516f0>
    2a70:	753b212d 	ldrvc	r2, [fp, #-301]!	; 0x12d
    2a74:	672d9f1f 			; <UNDEFINED> instruction: 0x672d9f1f
    2a78:	2d2f2fab 	stccs	15, cr2, [pc, #-684]!	; 27d4 <__Stack_Size+0x1fd4>
    2a7c:	2d3d2d3d 	ldccs	13, cr2, [sp, #-244]!	; 0xffffff0c
    2a80:	2d4b2d2f 	stclcs	13, cr2, [fp, #-188]	; 0xffffff44
    2a84:	2d831f75 	stccs	15, cr1, [r3, #468]	; 0x1d4
    2a88:	212f654b 	teqcs	pc, fp, asr #10
    2a8c:	4b2d751f 	blmi	b5ff10 <__Stack_Size+0xb5f710>
    2a90:	913b212d 	teqls	fp, sp, lsr #2
    2a94:	672d9f1f 			; <UNDEFINED> instruction: 0x672d9f1f
    2a98:	2d2f2fab 	stccs	15, cr2, [pc, #-684]!	; 27f4 <__Stack_Size+0x1ff4>
    2a9c:	2d212d3d 	stccs	13, cr2, [r1, #-244]!	; 0xffffff0c
    2aa0:	492f2d2f 	stmdbmi	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, sp}	; <UNPREDICTABLE>
    2aa4:	2d831f91 	stccs	15, cr1, [r3, #580]	; 0x244
    2aa8:	2f2cad67 	svccs	0x002cad67
    2aac:	2d3d2d4b 	ldccs	13, cr2, [sp, #-300]!	; 0xfffffed4
    2ab0:	2d212d2f 	stccs	13, cr2, [r1, #-188]!	; 0xffffff44
    2ab4:	1f672d21 	svcne	0x00672d21
    2ab8:	9d672d9f 	stclls	13, cr2, [r7, #-636]!	; 0xfffffd84
    2abc:	212d212f 	teqcs	sp, pc, lsr #2
    2ac0:	2f1f212d 	svccs	0x001f212d
    2ac4:	751f2f49 	ldrvc	r2, [pc, #-3913]	; 1b83 <__Stack_Size+0x1383>
    2ac8:	2f2d2f1f 	svccs	0x002d2f1f
    2acc:	2f2dad1f 	svccs	0x002dad1f
    2ad0:	2157212d 	cmpcs	r7, sp, lsr #2
    2ad4:	2d212d4b 	stccs	13, cr2, [r1, #-300]!	; 0xfffffed4
    2ad8:	21215708 	teqcs	r1, r8, lsl #14
    2adc:	2f1f212d 	svccs	0x001f212d
    2ae0:	753b4b2d 	ldrvc	r4, [fp, #-2861]!	; 0xb2d
    2ae4:	2dadf31f 	stccs	3, cr15, [sp, #124]!	; 0x7c
    2ae8:	2f2d2d21 	svccs	0x002d2d21
    2aec:	3b2f2d4b 	blcc	bce020 <__Stack_Size+0xbcd820>
    2af0:	49673b3d 	stmdbmi	r7!, {r0, r2, r3, r4, r5, r8, r9, fp, ip, sp}^
    2af4:	2d2f2dad 	stccs	13, cr2, [pc, #-692]!	; 2848 <__Stack_Size+0x2048>
    2af8:	4b215721 	blmi	858784 <__Stack_Size+0x857f84>
    2afc:	2d2d212d 	stfcss	f2, [sp, #-180]!	; 0xffffff4c
    2b00:	212d2121 	teqcs	sp, r1, lsr #2
    2b04:	21492f1f 	cmpcs	r9, pc, lsl pc
    2b08:	211f751f 	tstcs	pc, pc, lsl r5	; <UNPREDICTABLE>
    2b0c:	9f1f2f2d 	svcls	0x001f2f2d
    2b10:	212d2f2d 	teqcs	sp, sp, lsr #30
    2b14:	2d4b2157 	stfcse	f2, [fp, #-348]	; 0xfffffea4
    2b18:	212d2d21 	teqcs	sp, r1, lsr #26
    2b1c:	3b2f2d59 	blcc	bce088 <__Stack_Size+0xbcd888>
    2b20:	49673b3d 	stmdbmi	r7!, {r0, r2, r3, r4, r5, r8, r9, fp, ip, sp}^
    2b24:	2d2f2dad 	stccs	13, cr2, [pc, #-692]!	; 2878 <__Stack_Size+0x2078>
    2b28:	49215721 	stmdbmi	r1!, {r0, r5, r8, r9, sl, ip, lr}
    2b2c:	2d211f22 	stccs	15, cr1, [r1, #-136]!	; 0xffffff78
    2b30:	3b211f4b 	blcc	84a864 <__Stack_Size+0x84a064>
    2b34:	1f4b2d4b 	svcne	0x004b2d4b
    2b38:	2d211f2f 	stccs	15, cr1, [r1, #-188]!	; 0xffffff44
    2b3c:	2dad1f2f 	stccs	15, cr1, [sp, #188]!	; 0xbc
    2b40:	57212d2f 	strpl	r2, [r1, -pc, lsr #26]!
    2b44:	212f2d21 	teqcs	pc, r1, lsr #26
    2b48:	2d2f212c 	stfcss	f2, [pc, #-176]!	; 2aa0 <__Stack_Size+0x22a0>
    2b4c:	2d3d2d21 	ldccs	13, cr2, [sp, #-132]!	; 0xffffff7c
    2b50:	1f4b2d21 	svcne	0x004b2d21
    2b54:	3d1f2108 	ldfccs	f2, [pc, #-32]	; 2b3c <__Stack_Size+0x233c>
    2b58:	211f2149 	tstcs	pc, r9, asr #2
    2b5c:	2d753d3b 	ldclcs	13, cr3, [r5, #-236]!	; 0xffffff14
    2b60:	73673b83 	cmnvc	r7, #134144	; 0x20c00
    2b64:	3b672d91 	blcc	19ce1b0 <__Stack_Size+0x19cd9b0>
    2b68:	212d2d22 	teqcs	sp, r2, lsr #26
    2b6c:	2d2f2d91 	stccs	13, cr2, [pc, #-580]!	; 2930 <__Stack_Size+0x2130>
    2b70:	2d752d91 	ldclcs	13, cr2, [r5, #-580]!	; 0xfffffdbc
    2b74:	2d832d67 	stccs	13, cr2, [r3, #412]	; 0x19c
    2b78:	2d3d492f 	ldccs	9, cr4, [sp, #-188]!	; 0xffffff44
    2b7c:	1f215721 	svcne	0x00215721
    2b80:	211e212f 	tstcs	lr, pc, lsr #2
    2b84:	2d4b2d2f 	stclcs	13, cr2, [fp, #-188]	; 0xffffff44
    2b88:	75082d21 	strvc	r2, [r8, #-3361]	; 0xd21
    2b8c:	c93b2f2d 	ldmdbgt	fp!, {r0, r2, r3, r5, r8, r9, sl, fp, sp}
    2b90:	2f3bad3b 	svccs	0x003bad3b
    2b94:	22492f2d 	subcs	r2, r9, #45, 30	; 0xb4
    2b98:	1f2f2d1f 	svcne	0x002f2d1f
    2b9c:	2dbb2d3e 	ldccs	13, cr2, [fp, #248]!	; 0xf8
    2ba0:	1f672d2f 	svcne	0x00672d2f
    2ba4:	1fd72d2f 	svcne	0x00d72d2f
    2ba8:	1f3d2d2f 	svcne	0x003d2d2f
    2bac:	3b214921 	blcc	855038 <__Stack_Size+0x854838>
    2bb0:	3d2d2f2f 	stccc	15, cr2, [sp, #-188]!	; 0xffffff44
    2bb4:	221e4b2d 	andscs	r4, lr, #46080	; 0xb400
    2bb8:	bb211f2d 	bllt	84a874 <__Stack_Size+0x84a074>
    2bbc:	2f2d3d1f 	svccs	0x002d3d1f
    2bc0:	4b3b6757 	blmi	edc924 <__Stack_Size+0xedc124>
    2bc4:	211f2f3b 	tstcs	pc, fp, lsr pc	; <UNPREDICTABLE>
    2bc8:	211f301f 	tstcs	pc, pc, lsl r0	; <UNPREDICTABLE>
    2bcc:	4b1fd72d 	blmi	7f8888 <__Stack_Size+0x7f8088>
    2bd0:	2f2d4b2d 	svccs	0x002d4b2d
    2bd4:	593b2f1f 	ldmdbpl	fp!, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
    2bd8:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    2bdc:	2f2d212d 	svccs	0x002d212d
    2be0:	2d9f1fc9 	ldccs	15, cr1, [pc, #804]	; 2f0c <__Stack_Size+0x270c>
    2be4:	499f1f67 	ldmibmi	pc, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip}	; <UNPREDICTABLE>
    2be8:	3b2fe32f 	blcc	bfb8ac <__Stack_Size+0xbfb0ac>
    2bec:	03212d21 	teqeq	r1, #2112	; 0x840
    2bf0:	03c80809 	biceq	r0, r8, #589824	; 0x90000
    2bf4:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    2bf8:	331b1c2e 	tstcc	fp, #11776	; 0x2e00
    2bfc:	20780323 	rsbscs	r0, r8, r3, lsr #6
    2c00:	241c1c36 	ldrcs	r1, [ip], #-3126	; 0xc36
    2c04:	242f1f1f 	strtcs	r1, [pc], #-3871	; 2c0c <__Stack_Size+0x240c>
    2c08:	1c1f251b 	cfldr32ne	mvfx2, [pc], {27}
    2c0c:	322b2f31 	eorcc	r2, fp, #49, 30	; 0xc4
    2c10:	2f2f322b 	svccs	0x002f322b
    2c14:	01000f02 	tsteq	r0, r2, lsl #30
    2c18:	02050001 	andeq	r0, r5, #1
    2c1c:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
    2c20:	0101c103 	tsteq	r1, r3, lsl #2
    2c24:	22311d31 	eorscs	r1, r1, #3136	; 0xc40
    2c28:	1d1d2323 	ldcne	3, cr2, [sp, #-140]	; 0xffffff74
    2c2c:	033e2134 	teqeq	lr, #52, 2
    2c30:	214c200a 	cmpcs	ip, sl
    2c34:	2a243a1f 	bcs	9114b8 <__Stack_Size+0x910cb8>
    2c38:	3c670397 	stclcc	3, cr0, [r7], #-604	; 0xfffffda4
    2c3c:	2e130336 	mrccs	3, 0, r0, cr3, cr6, {1}
    2c40:	6f032b5b 	svcvs	0x00032b5b
    2c44:	2159762e 	cmpcs	r9, lr, lsr #12
    2c48:	022e0b03 	eoreq	r0, lr, #3072	; 0xc00
    2c4c:	01010002 	tsteq	r1, r2
    2c50:	b8020500 	stmdalt	r2, {r8, sl}
    2c54:	03080054 	movweq	r0, #32852	; 0x8054
    2c58:	340101f0 	strcc	r0, [r1], #-496	; 0x1f0
    2c5c:	7403252f 	strvc	r2, [r3], #-1327	; 0x52f
    2c60:	200a032e 	andcs	r0, sl, lr, lsr #6
    2c64:	03311d31 	teqeq	r1, #3136	; 0xc40
    2c68:	03255873 	teqeq	r5, #7536640	; 0x730000
    2c6c:	2c032054 	stccs	0, cr2, [r3], {84}	; 0x54
    2c70:	2e570320 	cdpcs	3, 5, cr0, cr7, cr0, {1}
    2c74:	67202d03 	strvs	r2, [r0, -r3, lsl #26]!
    2c78:	034a5303 	movteq	r5, #41731	; 0xa303
    2c7c:	09032e23 	stmdbeq	r3, {r0, r1, r5, r9, sl, fp, sp}
    2c80:	4f038320 	svcmi	0x00038320
    2c84:	03302466 	teqeq	r0, #1711276032	; 0x66000000
    2c88:	03363c78 	teqeq	r6, #120, 24	; 0x7800
    2c8c:	03225811 	teqeq	r2, #1114112	; 0x110000
    2c90:	31236664 	teqcc	r3, r4, ror #12
    2c94:	21341d1d 	teqcs	r4, sp, lsl sp
    2c98:	3c78033e 	ldclcc	3, cr0, [r8], #-248	; 0xffffff08
    2c9c:	0c035136 	stfeqs	f5, [r3], {54}	; 0x36
    2ca0:	7420032e 	strtvc	r0, [r0], #-814	; 0x32e
    2ca4:	91919191 			; <UNDEFINED> instruction: 0x91919191
    2ca8:	9f9f9191 	svcls	0x009f9191
    2cac:	923c4703 	eorsls	r4, ip, #786432	; 0xc0000
    2cb0:	341e2f3d 	ldrcc	r2, [lr], #-3901	; 0xf3d
    2cb4:	3a1f215a 	bcc	7cb224 <__Stack_Size+0x7caa24>
    2cb8:	76032a24 	strvc	r2, [r3], -r4, lsr #20
    2cbc:	2f773eac 	svccs	0x00773eac
    2cc0:	341e3e1e 	ldrcc	r3, [lr], #-3614	; 0xe1e
    2cc4:	1f21262a 	svcne	0x0021262a
    2cc8:	552a243a 	strpl	r2, [sl, #-1082]!	; 0x43a
    2ccc:	7603433f 			; <UNDEFINED> instruction: 0x7603433f
    2cd0:	0006023c 	andeq	r0, r6, ip, lsr r2
    2cd4:	05300101 	ldreq	r0, [r0, #-257]!	; 0x101
    2cd8:	00020000 	andeq	r0, r2, r0
    2cdc:	00000160 	andeq	r0, r0, r0, ror #2
    2ce0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    2ce4:	0101000d 	tsteq	r1, sp
    2ce8:	00000101 	andeq	r0, r0, r1, lsl #2
    2cec:	00000100 	andeq	r0, r0, r0, lsl #2
    2cf0:	35353201 	ldrcc	r3, [r5, #-513]!	; 0x201
    2cf4:	63003931 	movwvs	r3, #2353	; 0x931
    2cf8:	72705c3a 	rsbsvc	r5, r0, #14848	; 0x3a00
    2cfc:	6172676f 	cmnvs	r2, pc, ror #14
    2d00:	6966206d 	stmdbvs	r6!, {r0, r2, r3, r5, r6, sp}^
    2d04:	2073656c 	rsbscs	r6, r3, ip, ror #10
    2d08:	36387828 	ldrtcc	r7, [r8], -r8, lsr #16
    2d0c:	6e675c29 	cdpvs	12, 6, cr5, cr7, cr9, {1}
    2d10:	6f742075 	svcvs	0x00742075
    2d14:	20736c6f 	rsbscs	r6, r3, pc, ror #24
    2d18:	206d7261 	rsbcs	r7, sp, r1, ror #4
    2d1c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
    2d20:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    2d24:	382e345c 	stmdacc	lr!, {r2, r3, r4, r6, sl, ip, sp}
    2d28:	31303220 	teqcc	r0, r0, lsr #4
    2d2c:	5c337134 	ldfpls	f7, [r3], #-208	; 0xffffff30
    2d30:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    2d34:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xf6e
    2d38:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    2d3c:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    2d40:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2d44:	616d5c65 	cmnvs	sp, r5, ror #24
    2d48:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2d4c:	3a630065 	bcc	18c2ee8 <__Stack_Size+0x18c26e8>
    2d50:	6f72705c 	svcvs	0x0072705c
    2d54:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
    2d58:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
    2d5c:	28207365 	stmdacs	r0!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    2d60:	29363878 	ldmdbcs	r6!, {r3, r4, r5, r6, fp, ip, sp}
    2d64:	756e675c 	strbvc	r6, [lr, #-1884]!	; 0x75c
    2d68:	6f6f7420 	svcvs	0x006f7420
    2d6c:	6120736c 	teqvs	r0, ip, ror #6
    2d70:	65206d72 	strvs	r6, [r0, #-3442]!	; 0xd72
    2d74:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d
    2d78:	5c646564 	cfstr64pl	mvdx6, [r4], #-400	; 0xfffffe70
    2d7c:	20382e34 	eorscs	r2, r8, r4, lsr lr
    2d80:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
    2d84:	615c3371 	cmpvs	ip, r1, ror r3
    2d88:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    2d8c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2d90:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2d94:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    2d98:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    2d9c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    2da0:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    2da4:	206d6172 	rsbcs	r6, sp, r2, ror r1
    2da8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    2dac:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    2db0:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    2db4:	20756e67 	rsbscs	r6, r5, r7, ror #28
    2db8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2bf0 <__Stack_Size+0x23f0>
    2dbc:	72612073 	rsbvc	r2, r1, #115	; 0x73
    2dc0:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    2dc4:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    2dc8:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    2dcc:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    2dd0:	71343130 	teqvc	r4, r0, lsr r1
    2dd4:	696c5c33 	stmdbvs	ip!, {r0, r1, r4, r5, sl, fp, ip, lr}^
    2dd8:	63675c62 	cmnvs	r7, #25088	; 0x6200
    2ddc:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
    2de0:	6f6e2d6d 	svcvs	0x006e2d6d
    2de4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    2de8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    2dec:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    2df0:	6e695c34 	mcrvs	12, 3, r5, cr9, cr4, {1}
    2df4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xc63
    2df8:	73000065 	movwvc	r0, #101	; 0x65
    2dfc:	31356168 	teqcc	r5, r8, ror #2
    2e00:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    2e04:	5f000001 	svcpl	0x00000001
    2e08:	61666564 	cmnvs	r6, r4, ror #10
    2e0c:	5f746c75 	svcpl	0x00746c75
    2e10:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    2e14:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2e18:	73000002 	movwvc	r0, #2
    2e1c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2e20:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2e24:	73000003 	movwvc	r0, #3
    2e28:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    2e2c:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2e30:	73000004 	movwvc	r0, #4
    2e34:	31356168 	teqcc	r5, r8, ror #2
    2e38:	00682e32 	rsbeq	r2, r8, r2, lsr lr
    2e3c:	00000001 	andeq	r0, r0, r1
    2e40:	d0020500 	andle	r0, r2, r0, lsl #10
    2e44:	03080056 	movweq	r0, #32854	; 0x8056
    2e48:	3c0100e4 	stccc	0, cr0, [r1], {228}	; 0xe4
    2e4c:	21585a03 	cmpcs	r8, r3, lsl #20
    2e50:	08f3839f 	ldmeq	r3!, {r0, r1, r2, r3, r4, r7, r8, r9, pc}^
    2e54:	03bbbb13 			; <UNDEFINED> instruction: 0x03bbbb13
    2e58:	5a036626 	bpl	dc6f8 <__Stack_Size+0xdbef8>
    2e5c:	2e240320 	cdpcs	3, 2, cr0, cr4, cr0, {1}
    2e60:	21272d21 	teqcs	r7, r1, lsr #26
    2e64:	2f212d1f 	svccs	0x00212d1f
    2e68:	1c332f2c 	ldcne	15, cr2, [r3], #-176	; 0xffffff50
    2e6c:	232f4632 	teqcs	pc, #52428800	; 0x3200000
    2e70:	26207a03 	strtcs	r7, [r0], -r3, lsl #20
    2e74:	2f322b2b 	svccs	0x00322b2b
    2e78:	312f1c22 	teqcc	pc, r2, lsr #24
    2e7c:	79033246 	stmdbvc	r3, {r1, r2, r6, r9, ip, sp}
    2e80:	20090320 	andcs	r0, r9, r0, lsr #6
    2e84:	4c1f2f2a 	ldcmi	15, cr2, [pc], {42}	; 0x2a
    2e88:	4d2b2149 	stfmis	f2, [fp, #-292]!	; 0xfffffedc
    2e8c:	19032f3b 	stmdbne	r3, {r0, r1, r3, r4, r5, r8, r9, sl, fp, sp}
    2e90:	006a0858 	rsbeq	r0, sl, r8, asr r8
    2e94:	03020402 	movweq	r0, #9218	; 0x2402
    2e98:	02002e67 	andeq	r2, r0, #1648	; 0x670
    2e9c:	66030204 	strvs	r0, [r3], -r4, lsl #4
    2ea0:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    2ea4:	ba1b0302 	blt	6c3ab4 <__Stack_Size+0x6c32b4>
    2ea8:	02040200 	andeq	r0, r4, #0, 4
    2eac:	002e6503 	eoreq	r6, lr, r3, lsl #10
    2eb0:	03020402 	movweq	r0, #9218	; 0x2402
    2eb4:	02002e1b 	andeq	r2, r0, #432	; 0x1b0
    2eb8:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    2ebc:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2ec0:	3c1b0302 	ldccc	3, cr0, [fp], {2}
    2ec4:	02040200 	andeq	r0, r4, #0, 4
    2ec8:	002e6503 	eoreq	r6, lr, r3, lsl #10
    2ecc:	03020402 	movweq	r0, #9218	; 0x2402
    2ed0:	02002e1b 	andeq	r2, r0, #432	; 0x1b0
    2ed4:	65030204 	strvs	r0, [r3, #-516]	; 0x204
    2ed8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2edc:	201f0302 	andscs	r0, pc, r2, lsl #6
    2ee0:	02040200 	andeq	r0, r4, #0, 4
    2ee4:	0402001c 	streq	r0, [r2], #-28
    2ee8:	20650302 	rsbcs	r0, r5, r2, lsl #6
    2eec:	02040200 	andeq	r0, r4, #0, 4
    2ef0:	003c1f03 	eorseq	r1, ip, r3, lsl #30
    2ef4:	03020402 	movweq	r0, #9218	; 0x2402
    2ef8:	02002e61 	andeq	r2, r0, #1552	; 0x610
    2efc:	1f030204 	svcne	0x00030204
    2f00:	04020066 	streq	r0, [r2], #-102	; 0x66
    2f04:	20610302 	rsbcs	r0, r1, r2, lsl #6
    2f08:	02040200 	andeq	r0, r4, #0, 4
    2f0c:	003c1c03 	eorseq	r1, ip, r3, lsl #24
    2f10:	03020402 	movweq	r0, #9218	; 0x2402
    2f14:	02003c64 	andeq	r3, r0, #100, 24	; 0x6400
    2f18:	1c030204 	sfmne	f0, 4, [r3], {4}
    2f1c:	04020058 	streq	r0, [r2], #-88	; 0x58
    2f20:	2e640302 	cdpcs	3, 6, cr0, cr4, cr2, {0}
    2f24:	02040200 	andeq	r0, r4, #0, 4
    2f28:	002e1f03 	eoreq	r1, lr, r3, lsl #30
    2f2c:	03020402 	movweq	r0, #9218	; 0x2402
    2f30:	02002061 	andeq	r2, r0, #97	; 0x61
    2f34:	1c030204 	sfmne	f0, 4, [r3], {4}
    2f38:	04020058 	streq	r0, [r2], #-88	; 0x58
    2f3c:	02003302 	andeq	r3, r0, #134217728	; 0x8000000
    2f40:	002c0204 	eoreq	r0, ip, r4, lsl #4
    2f44:	03020402 	movweq	r0, #9218	; 0x2402
    2f48:	02002061 	andeq	r2, r0, #97	; 0x61
    2f4c:	1f030204 	svcne	0x00030204
    2f50:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    2f54:	02005a02 	andeq	r5, r0, #8192	; 0x2000
    2f58:	001e0204 	andseq	r0, lr, r4, lsl #4
    2f5c:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
    2f60:	02040200 	andeq	r0, r4, #0, 4
    2f64:	003c5f03 	eorseq	r5, ip, r3, lsl #30
    2f68:	03020402 	movweq	r0, #9218	; 0x2402
    2f6c:	0200d61e 	andeq	sp, r0, #31457280	; 0x1e00000
    2f70:	006d0204 	rsbeq	r0, sp, r4, lsl #4
    2f74:	2a020402 	bcs	83f84 <__Stack_Size+0x83784>
    2f78:	02040200 	andeq	r0, r4, #0, 4
    2f7c:	04020032 	streq	r0, [r2], #-50	; 0x32
    2f80:	ba110302 	blt	443b90 <__Stack_Size+0x443390>
    2f84:	02040200 	andeq	r0, r4, #0, 4
    2f88:	002e6703 	eoreq	r6, lr, r3, lsl #14
    2f8c:	03020402 	movweq	r0, #9218	; 0x2402
    2f90:	02005819 	andeq	r5, r0, #1638400	; 0x190000
    2f94:	4a030204 	bmi	c37ac <__Stack_Size+0xc2fac>
    2f98:	040200ac 	streq	r0, [r2], #-172	; 0xac
    2f9c:	82360302 	eorshi	r0, r6, #134217728	; 0x8000000
    2fa0:	02040200 	andeq	r0, r4, #0, 4
    2fa4:	00204a03 	eoreq	r4, r0, r3, lsl #20
    2fa8:	03020402 	movweq	r0, #9218	; 0x2402
    2fac:	02002e36 	andeq	r2, r0, #864	; 0x360
    2fb0:	4a030204 	bmi	c37c8 <__Stack_Size+0xc2fc8>
    2fb4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2fb8:	2e210302 	cdpcs	3, 2, cr0, cr1, cr2, {0}
    2fbc:	02040200 	andeq	r0, r4, #0, 4
    2fc0:	04020065 	streq	r0, [r2], #-101	; 0x65
    2fc4:	3c160302 	ldccc	3, cr0, [r6], {2}
    2fc8:	02040200 	andeq	r0, r4, #0, 4
    2fcc:	00206a03 	eoreq	r6, r0, r3, lsl #20
    2fd0:	03020402 	movweq	r0, #9218	; 0x2402
    2fd4:	02002e16 	andeq	r2, r0, #352	; 0x160
    2fd8:	70030204 	andvc	r0, r3, r4, lsl #4
    2fdc:	0402004a 	streq	r0, [r2], #-74	; 0x4a
    2fe0:	d65a0302 	ldrble	r0, [sl], -r2, lsl #6
    2fe4:	02040200 	andeq	r0, r4, #0, 4
    2fe8:	002e2703 	eoreq	r2, lr, r3, lsl #14
    2fec:	03020402 	movweq	r0, #9218	; 0x2402
    2ff0:	02002e59 	andeq	r2, r0, #1424	; 0x590
    2ff4:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    2ff8:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    2ffc:	3c590302 	mrrccc	3, 0, r0, r9, cr2
    3000:	02040200 	andeq	r0, r4, #0, 4
    3004:	00202703 	eoreq	r2, r0, r3, lsl #14
    3008:	03020402 	movweq	r0, #9218	; 0x2402
    300c:	02002e59 	andeq	r2, r0, #1424	; 0x590
    3010:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    3014:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3018:	3c590302 	mrrccc	3, 0, r0, r9, cr2
    301c:	02040200 	andeq	r0, r4, #0, 4
    3020:	004a2803 	subeq	r2, sl, r3, lsl #16
    3024:	03020402 	movweq	r0, #9218	; 0x2402
    3028:	02002e58 	andeq	r2, r0, #88, 28	; 0x580
    302c:	27030204 	strcs	r0, [r3, -r4, lsl #4]
    3030:	0402003c 	streq	r0, [r2], #-60	; 0x3c
    3034:	02002f02 	andeq	r2, r0, #2, 30
    3038:	58030204 	stmdapl	r3, {r2, r9}
    303c:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3040:	2e280302 	cdpcs	3, 2, cr0, cr8, cr2, {0}
    3044:	02040200 	andeq	r0, r4, #0, 4
    3048:	002e5803 	eoreq	r5, lr, r3, lsl #16
    304c:	03020402 	movweq	r0, #9218	; 0x2402
    3050:	02003c28 	andeq	r3, r0, #40, 24	; 0x2800
    3054:	58030204 	stmdapl	r3, {r2, r9}
    3058:	04020020 	streq	r0, [r2], #-32
    305c:	3c240302 	stccc	3, cr0, [r4], #-8
    3060:	02040200 	andeq	r0, r4, #0, 4
    3064:	00ba1203 	adcseq	r1, sl, r3, lsl #4
    3068:	03020402 	movweq	r0, #9218	; 0x2402
    306c:	02002e71 	andeq	r2, r0, #1808	; 0x710
    3070:	0f030204 	svceq	0x00030204
    3074:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3078:	2e710302 	cdpcs	3, 7, cr0, cr1, cr2, {0}
    307c:	02040200 	andeq	r0, r4, #0, 4
    3080:	0402004b 	streq	r0, [r2], #-75	; 0x4b
    3084:	02002d02 	andeq	r2, r0, #2, 26	; 0x80
    3088:	003d0204 	eorseq	r0, sp, r4, lsl #4
    308c:	9d020402 	cfstrsls	mvf0, [r2, #-8]
    3090:	02040200 	andeq	r0, r4, #0, 4
    3094:	0402005a 	streq	r0, [r2], #-90	; 0x5a
    3098:	02005e02 	andeq	r5, r0, #2, 28
    309c:	005c0204 	subseq	r0, ip, r4, lsl #4
    30a0:	03020402 	movweq	r0, #9218	; 0x2402
    30a4:	22033c65 	andcs	r3, r3, #25856	; 0x6500
    30a8:	806759f2 	strdhi	r5, [r7], #-146	; 0xffffff6e	; <UNPREDICTABLE>
    30ac:	302b2f31 	eorcc	r2, fp, r1, lsr pc
    30b0:	671f3e59 			; <UNDEFINED> instruction: 0x671f3e59
    30b4:	2d2f312b 	stfcss	f3, [pc, #-172]!	; 3010 <__Stack_Size+0x2810>
    30b8:	34207a03 	strtcc	r7, [r0], #-2563	; 0xa03
    30bc:	312c7d2f 	teqcc	ip, pc, lsr #26
    30c0:	2c302f2b 	ldccs	15, cr2, [r0], #-172	; 0xffffff54
    30c4:	2f2f2f31 	svccs	0x002f2f31
    30c8:	0006022f 	andeq	r0, r6, pc, lsr #4
    30cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    30d0:	005b6402 	subseq	r6, fp, r2, lsl #8
    30d4:	01a60308 			; <UNDEFINED> instruction: 0x01a60308
    30d8:	201f2f01 	andscs	r2, pc, r1, lsl #30
    30dc:	363e5b3d 			; <UNDEFINED> instruction: 0x363e5b3d
    30e0:	207f9a03 	rsbscs	r9, pc, r3, lsl #20
    30e4:	03241e22 	teqeq	r4, #544	; 0x220
    30e8:	032e00e3 	teqeq	lr, #227	; 0xe3
    30ec:	302e7f98 	mlacc	lr, r8, pc, r7	; <UNPREDICTABLE>
    30f0:	30303030 	eorscc	r3, r0, r0, lsr r0
    30f4:	da033030 	ble	cf1bc <__Stack_Size+0xce9bc>
    30f8:	032f2e00 	teqeq	pc, #0, 28
    30fc:	3e593c75 	mrccc	12, 2, r3, cr9, cr5, {3}
    3100:	4b21301e 	blmi	84f180 <__Stack_Size+0x84e980>
    3104:	01000602 	tsteq	r0, r2, lsl #12
    3108:	02050001 	andeq	r0, r5, #1
    310c:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    3110:	0101ba03 	tsteq	r1, r3, lsl #20
    3114:	31201d31 	teqcc	r0, r1, lsr sp
    3118:	38245c23 	stmdacc	r4!, {r0, r1, r5, sl, fp, ip, lr}
    311c:	04020024 	streq	r0, [r2], #-36	; 0x24
    3120:	2e0e0301 	cdpcs	3, 0, cr0, cr14, cr1, {0}
    3124:	06120806 	ldreq	r0, [r2], -r6, lsl #16
    3128:	7ef7034b 	cdpvc	3, 15, cr0, cr7, cr11, {2}
    312c:	87038458 	smlsdhi	r3, r8, r4, r8
    3130:	f9032001 			; <UNDEFINED> instruction: 0xf9032001
    3134:	483e207e 	ldmdami	lr!, {r1, r2, r3, r4, r5, r6, sp}
    3138:	26463022 	strbcs	r3, [r6], -r2, lsr #32
    313c:	683e301e 	ldmdavs	lr!, {r1, r2, r3, r4, ip, sp}
    3140:	03747703 	cmneq	r4, #786432	; 0xc0000
    3144:	77032e09 	strvc	r2, [r3, -r9, lsl #28]
    3148:	200a032e 	andcs	r0, sl, lr, lsr #6
    314c:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    3150:	74032e0c 	strvc	r2, [r3], #-3596	; 0xe0c
    3154:	200a032e 	andcs	r0, sl, lr, lsr #6
    3158:	032a1e1e 	teqeq	sl, #480	; 0x1e0
    315c:	03200187 	teqeq	r0, #-1073741791	; 0xc0000021
    3160:	03207f85 	teqeq	r0, #532	; 0x214
    3164:	082e00fb 	stmdaeq	lr!, {r0, r1, r3, r4, r5, r6, r7}
    3168:	6c034235 	sfmvs	f4, 4, [r3], {53}	; 0x35
    316c:	7eff033c 	mrcvc	3, 7, r0, cr15, cr12, {1}
    3170:	2c5a4c58 	mrrccs	12, 5, r4, sl, cr8
    3174:	2c322c30 	ldccs	12, cr2, [r2], #-192	; 0xffffff40
    3178:	2c322c4c 	ldccs	12, cr2, [r2], #-304	; 0xfffffed0
    317c:	4a770330 	bmi	1dc3e44 <__Stack_Size+0x1dc3644>
    3180:	462e0b03 	strtmi	r0, [lr], -r3, lsl #22
    3184:	3c750334 	ldclcc	3, cr0, [r5], #-208	; 0xffffff30
    3188:	03352c34 	teqeq	r5, #52, 24	; 0x3400
    318c:	f6032e7a 			; <UNDEFINED> instruction: 0xf6032e7a
    3190:	87032e00 	strhi	r2, [r3, -r0, lsl #28]
    3194:	30302e7f 	eorscc	r2, r0, pc, ror lr
    3198:	2e760342 	cdpcs	3, 7, cr0, cr6, cr2, {2}
    319c:	032d3134 	teqeq	sp, #52, 2
    31a0:	212e00f6 	strdcs	r0, [lr, -r6]!
    31a4:	207f8b03 	rsbscs	r8, pc, r3, lsl #22
    31a8:	2000ef03 	andcs	lr, r0, r3, lsl #30
    31ac:	587f9103 	ldmdapl	pc!, {r0, r1, r8, ip, pc}^	; <UNPREDICTABLE>
    31b0:	2e00f403 	cdpcs	4, 0, cr15, cr0, cr3, {0}
    31b4:	1f3d1f30 	svcne	0x003d1f30
    31b8:	3c7f8a03 	ldclcc	10, cr8, [pc], #-12	; 31b4 <__Stack_Size+0x29b4>
    31bc:	2e00f603 	cfmadd32cs	mvax0, mvfx15, mvfx0, mvfx3
    31c0:	2b312b30 	blcs	c4de88 <__Stack_Size+0xc4d688>
    31c4:	033c1103 	teqeq	ip, #-1073741824	; 0xc0000000
    31c8:	5a827eee 	bpl	fe0a2d88 <BootRAM+0xd013529>
    31cc:	684c302c 	stmdavs	ip, {r2, r3, r5, ip, sp}^
    31d0:	035a4c4c 	cmpeq	sl, #76, 24	; 0x4c00
    31d4:	0b032e73 	bleq	ceba8 <__Stack_Size+0xce3a8>
    31d8:	7303302e 	movwvc	r3, #12334	; 0x302e
    31dc:	2e0a034a 	cdpcs	3, 0, cr0, cr10, cr10, {2}
    31e0:	1e302c32 	mrcne	12, 1, r2, cr0, cr2, {1}
    31e4:	2e77032d 	cdpcs	3, 7, cr0, cr7, cr13, {1}
    31e8:	032e0b03 	teqeq	lr, #3072	; 0xc00
    31ec:	30302e77 	eorscc	r2, r0, r7, ror lr
    31f0:	2e018c03 	cdpcs	12, 0, cr8, cr1, cr3, {0}
    31f4:	207efa03 	rsbscs	pc, lr, r3, lsl #20
    31f8:	2e018603 	cfmadd32cs	mvax0, mvfx8, mvfx1, mvfx3
    31fc:	207ef903 	rsbscs	pc, lr, r3, lsl #18
    3200:	2e018703 	cdpcs	7, 0, cr8, cr1, cr3, {0}
    3204:	00030230 	andeq	r0, r3, r0, lsr r2
    3208:	00c00101 	sbceq	r0, r0, r1, lsl #2
    320c:	00020000 	andeq	r0, r2, r0
    3210:	00000034 	andeq	r0, r0, r4, lsr r0
    3214:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3218:	0101000d 	tsteq	r1, sp
    321c:	00000101 	andeq	r0, r0, r1, lsl #2
    3220:	00000100 	andeq	r0, r0, r0, lsl #2
    3224:	73616201 	cmnvc	r1, #268435456	; 0x10000000
    3228:	00343665 	eorseq	r3, r4, r5, ror #12
    322c:	65646300 	strbvs	r6, [r4, #-768]!	; 0x300
    3230:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    3234:	0100632e 	tsteq	r0, lr, lsr #6
    3238:	64630000 	strbtvs	r0, [r3], #-0
    323c:	646f6365 	strbtvs	r6, [pc], #-869	; 3244 <__Stack_Size+0x2a44>
    3240:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3244:	00000001 	andeq	r0, r0, r1
    3248:	00020500 	andeq	r0, r2, r0, lsl #10
    324c:	03000000 	movweq	r0, #0
    3250:	2f15010a 	svccs	0x0015010a
    3254:	02303b21 	eorseq	r3, r0, #33792	; 0x8400
    3258:	01010004 	tsteq	r1, r4
    325c:	00020500 	andeq	r0, r2, r0, lsl #10
    3260:	03000000 	movweq	r0, #0
    3264:	2f130113 	svccs	0x00130113
    3268:	01000202 	tsteq	r0, r2, lsl #4
    326c:	02050001 	andeq	r0, r5, #1
    3270:	00000000 	andeq	r0, r0, r0
    3274:	2e011903 	cdpcs	9, 0, cr1, cr1, cr3, {0}
    3278:	22251b25 	eorcs	r1, r5, #37888	; 0x9400
    327c:	35207903 	strcc	r7, [r0, #-2307]!	; 0x903
    3280:	03747a03 	cmneq	r4, #12288	; 0x3000
    3284:	2c3e200c 	ldccs	0, cr2, [lr], #-48	; 0xffffffd0
    3288:	301e4c26 	andscc	r4, lr, r6, lsr #24
    328c:	032e7203 	teqeq	lr, #805306368	; 0x30000000
    3290:	1703207a 	smlsdxne	r3, sl, r0, r2
    3294:	212f4c20 	teqcs	pc, r0, lsr #24
    3298:	4c30211f 	ldfmis	f2, [r0], #-124	; 0xffffff84
    329c:	3d301d4b 	ldccc	13, cr1, [r0, #-300]!	; 0xfffffed4
    32a0:	032e6603 	teqeq	lr, #3145728	; 0x300000
    32a4:	2303207a 	movwcs	r2, #12410	; 0x307a
    32a8:	2f2f4c20 	svccs	0x002f4c20
    32ac:	4c30212d 	ldfmis	f2, [r0], #-180	; 0xffffff4c
    32b0:	4b301d59 	blmi	c0a81c <__Stack_Size+0xc0a01c>
    32b4:	033c5a03 	teqeq	ip, #12288	; 0x3000
    32b8:	2f03207a 	svccs	0x0003207a
    32bc:	2f2f4c20 	svccs	0x002f4c20
    32c0:	3e30212d 	rsfccsp	f2, f0, #5.0
    32c4:	234b3056 	movtcs	r3, #45142	; 0xb056
    32c8:	00020221 	andeq	r0, r2, r1, lsr #4
    32cc:	00db0101 	sbcseq	r0, fp, r1, lsl #2
    32d0:	00020000 	andeq	r0, r2, r0
    32d4:	00000034 	andeq	r0, r0, r4, lsr r0
    32d8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    32dc:	0101000d 	tsteq	r1, sp
    32e0:	00000101 	andeq	r0, r0, r1, lsl #2
    32e4:	00000100 	andeq	r0, r0, r0, lsl #2
    32e8:	73616201 	cmnvc	r1, #268435456	; 0x10000000
    32ec:	00343665 	eorseq	r3, r4, r5, ror #12
    32f0:	6e656300 	cdpvs	3, 6, cr6, cr5, cr0, {0}
    32f4:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    32f8:	0100632e 	tsteq	r0, lr, lsr #6
    32fc:	65630000 	strbvs	r0, [r3, #-0]!
    3300:	646f636e 	strbtvs	r6, [pc], #-878	; 3308 <__Stack_Size+0x2b08>
    3304:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3308:	00000001 	andeq	r0, r0, r1
    330c:	84020500 	strhi	r0, [r2], #-1280	; 0x500
    3310:	0308005e 	movweq	r0, #32862	; 0x805e
    3314:	2f13010c 	svccs	0x0013010c
    3318:	00020221 	andeq	r0, r2, r1, lsr #4
    331c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3320:	005e9002 	subseq	r9, lr, r2
    3324:	01130308 	tsteq	r3, r8, lsl #6
    3328:	223b2114 	eorscs	r2, fp, #20, 2
    332c:	01000302 	tsteq	r0, r2, lsl #6
    3330:	02050001 	andeq	r0, r5, #1
    3334:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
    3338:	2e011a03 	vmlacs.f32	s2, s2, s6
    333c:	77032227 	strvc	r2, [r3, -r7, lsr #4]
    3340:	20090320 	andcs	r0, r9, r0, lsr #6
    3344:	22207703 	eorcs	r7, r0, #786432	; 0xc0000
    3348:	4a7a0335 	bmi	1e84024 <__Stack_Size+0x1e83824>
    334c:	0b03301e 	bleq	cf3cc <__Stack_Size+0xcebcc>
    3350:	211f3120 	tstcs	pc, r0, lsr #2
    3354:	64223e21 	strtvs	r3, [r2], #-3617	; 0xe21
    3358:	03392f22 	teqeq	r9, #34, 30	; 0x88
    335c:	16033c6f 	strne	r3, [r3], -pc, ror #24
    3360:	211f3120 	tstcs	pc, r0, lsr #2
    3364:	753e3e21 	ldrvc	r3, [lr, #-3617]!	; 0xe21
    3368:	3122212d 	teqcc	r2, sp, lsr #2
    336c:	3e21211f 	mcrcc	1, 1, r2, cr1, cr15, {0}
    3370:	222d4b4c 	eorcs	r4, sp, #76, 22	; 0x13000
    3374:	211f2f4c 	tstcs	pc, ip, asr #30
    3378:	1f2f411d 	svcne	0x002f411d
    337c:	0221332f 	eoreq	r3, r1, #-1140850688	; 0xbc000000
    3380:	01010003 	tsteq	r1, r3
    3384:	76020500 	strvc	r0, [r2], -r0, lsl #10
    3388:	0308005f 	movweq	r0, #32863	; 0x805f
    338c:	150100d7 	strne	r0, [r1, #-215]	; 0xd7
    3390:	231d231d 	tstcs	sp, #1946157056	; 0x74000000
    3394:	2f1f4b44 	svccs	0x001f4b44
    3398:	20790321 	rsbscs	r0, r9, r1, lsr #6
    339c:	21211f3d 	teqcs	r1, sp, lsr pc
    33a0:	207a032f 	rsbscs	r0, sl, pc, lsr #6
    33a4:	4d200e03 	stcmi	14, cr0, [r0, #-12]!
    33a8:	01000202 	tsteq	r0, r2, lsl #4
    33ac:	00026801 	andeq	r6, r2, r1, lsl #16
    33b0:	c6000200 	strgt	r0, [r0], -r0, lsl #4
    33b4:	02000001 	andeq	r0, r0, #1
    33b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    33bc:	01010100 	mrseq	r0, (UNDEF: 17)
    33c0:	00000001 	andeq	r0, r0, r1
    33c4:	01000001 	tsteq	r0, r1
    33c8:	705c3a63 	subsvc	r3, ip, r3, ror #20
    33cc:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    33d0:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    33d4:	73656c69 	cmnvc	r5, #26880	; 0x6900
    33d8:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    33dc:	675c2936 	smmlarvs	ip, r6, r9, r2
    33e0:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    33e4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    33e8:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    33ec:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    33f0:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    33f4:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    33f8:	30322038 	eorscc	r2, r2, r8, lsr r0
    33fc:	33713431 	cmncc	r1, #822083584	; 0x31000000
    3400:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
    3404:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    3408:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    340c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    3410:	61652d65 	cmnvs	r5, r5, ror #26
    3414:	345c6962 	ldrbcc	r6, [ip], #-2402	; 0x962
    3418:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
    341c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    3420:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0x56c
    3424:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    3428:	676f7270 			; <UNDEFINED> instruction: 0x676f7270
    342c:	206d6172 	rsbcs	r6, sp, r2, ror r1
    3430:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0x966
    3434:	78282073 	stmdavc	r8!, {r0, r1, r4, r5, r6, sp}
    3438:	5c293638 	stcpl	6, cr3, [r9], #-224	; 0xffffff20
    343c:	20756e67 	rsbscs	r6, r5, r7, ror #28
    3440:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 3278 <__Stack_Size+0x2a78>
    3444:	72612073 	rsbvc	r2, r1, #115	; 0x73
    3448:	6d65206d 	stclvs	0, cr2, [r5, #-436]!	; 0xfffffe4c
    344c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    3450:	345c6465 	ldrbcc	r6, [ip], #-1125	; 0x465
    3454:	3220382e 	eorcc	r3, r0, #3014656	; 0x2e0000
    3458:	71343130 	teqvc	r4, r0, lsr r1
    345c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    3460:	6f6e2d6d 	svcvs	0x006e2d6d
    3464:	652d656e 	strvs	r6, [sp, #-1390]!	; 0x56e
    3468:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    346c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3470:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    3474:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3478:	00656e69 	rsbeq	r6, r5, r9, ror #28
    347c:	705c3a63 	subsvc	r3, ip, r3, ror #20
    3480:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
    3484:	66206d61 	strtvs	r6, [r0], -r1, ror #26
    3488:	73656c69 	cmnvc	r5, #26880	; 0x6900
    348c:	38782820 	ldmdacc	r8!, {r5, fp, sp}^
    3490:	675c2936 	smmlarvs	ip, r6, r9, r2
    3494:	7420756e 	strtvc	r7, [r0], #-1390	; 0x56e
    3498:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    349c:	6d726120 	ldfvse	f6, [r2, #-128]!	; 0xffffff80
    34a0:	626d6520 	rsbvs	r6, sp, #32, 10	; 0x8000000
    34a4:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
    34a8:	2e345c64 	cdpcs	12, 3, cr5, cr4, cr4, {3}
    34ac:	30322038 	eorscc	r2, r2, r8, lsr r0
    34b0:	33713431 	cmncc	r1, #822083584	; 0x31000000
    34b4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    34b8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    34bc:	61652d65 	cmnvs	r5, r5, ror #26
    34c0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    34c4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0x36e
    34c8:	2e006564 	cfsh32cs	mvfx6, mvfx0, #52
    34cc:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
    34d0:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
    34d4:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
    34d8:	3535322f 	ldrcc	r3, [r5, #-559]!	; 0x22f
    34dc:	00003931 	andeq	r3, r0, r1, lsr r9
    34e0:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
    34e4:	00632e65 	rsbeq	r2, r3, r5, ror #28
    34e8:	73000000 	movwvc	r0, #0
    34ec:	65646474 	strbvs	r6, [r4, #-1140]!	; 0x474
    34f0:	00682e66 	rsbeq	r2, r8, r6, ror #28
    34f4:	5f000001 	svcpl	0x00000001
    34f8:	61666564 	cmnvs	r6, r4, ror #10
    34fc:	5f746c75 	svcpl	0x00746c75
    3500:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3504:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3508:	73000002 	movwvc	r0, #2
    350c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3510:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3514:	73000003 	movwvc	r0, #3
    3518:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    351c:	78303166 	ldmdavc	r0!, {r1, r2, r5, r6, r8, ip, sp}
    3520:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3524:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3528:	68000004 	stmdavs	r0, {r2}
    352c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
    3530:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
    3534:	00000068 	andeq	r0, r0, r8, rrx
    3538:	61687300 	cmnvs	r8, r0, lsl #6
    353c:	2e363532 	mrccs	5, 1, r3, cr6, cr2, {1}
    3540:	00050068 	andeq	r0, r5, r8, rrx
    3544:	616d6900 	cmnvs	sp, r0, lsl #18
    3548:	682e6567 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, sl, sp, lr}
    354c:	00000000 	andeq	r0, r0, r0
    3550:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
    3554:	00000068 	andeq	r0, r0, r8, rrx
    3558:	64747300 	ldrbtvs	r7, [r4], #-768	; 0x300
    355c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3560:	00000300 	andeq	r0, r0, r0, lsl #6
    3564:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    3568:	682e6e67 	stmdavs	lr!, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}
    356c:	00000500 	andeq	r0, r0, r0, lsl #10
    3570:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3574:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    3578:	00000300 	andeq	r0, r0, r0, lsl #6
    357c:	02050000 	andeq	r0, r5, #0
    3580:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    3584:	22012503 	andcs	r2, r1, #12582912	; 0xc00000
    3588:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
    358c:	10022d3e 	andne	r2, r2, lr, lsr sp
    3590:	00010100 	andeq	r0, r1, r0, lsl #2
    3594:	5ffc0205 	svcpl	0x00fc0205
    3598:	30030800 	andcc	r0, r3, r0, lsl #16
    359c:	1b333c01 	blne	cd25a8 <__Stack_Size+0xcd1da8>
    35a0:	591f4c25 	ldmdbpl	pc, {r0, r2, r5, sl, fp, lr}	; <UNPREDICTABLE>
    35a4:	00580b03 	subseq	r0, r8, r3, lsl #22
    35a8:	4b010402 	blmi	445b8 <__Stack_Size+0x43db8>
    35ac:	002e0903 	eoreq	r0, lr, r3, lsl #18
    35b0:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    35b4:	01040200 	mrseq	r0, R12_usr
    35b8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    35bc:	303e2f01 	eorscc	r2, lr, r1, lsl #30
    35c0:	4c303021 	ldcmi	0, cr3, [r0], #-132	; 0xffffff7c
    35c4:	1c252925 	stcne	9, cr2, [r5], #-148	; 0xffffff6c
    35c8:	5a423140 	bpl	108fad0 <__Stack_Size+0x108f2d0>
    35cc:	54212d21 	strtpl	r2, [r1], #-3361	; 0xd21
    35d0:	01040200 	mrseq	r0, R12_usr
    35d4:	67213125 	strvs	r3, [r1, -r5, lsr #2]!
    35d8:	01040200 	mrseq	r0, R12_usr
    35dc:	04020030 	streq	r0, [r2], #-48	; 0x30
    35e0:	02005901 	andeq	r5, r0, #16384	; 0x4000
    35e4:	00590104 	subseq	r0, r9, r4, lsl #2
    35e8:	68010402 	stmdavs	r1, {r1, sl}
    35ec:	01040200 	mrseq	r0, R12_usr
    35f0:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    35f4:	0a032101 	beq	cba00 <__Stack_Size+0xcb200>
    35f8:	3ebd3d2e 	cdpcc	13, 11, cr3, cr13, cr14, {1}
    35fc:	4b594c59 	blmi	1656768 <__Stack_Size+0x1655f68>
    3600:	4c5d503d 	mrrcmi	0, 3, r5, sp, cr13
    3604:	1d404b3d 	vstrne	d20, [r0, #-244]	; 0xffffff0c
    3608:	a0311d23 	eorsge	r1, r1, r3, lsr #26
    360c:	303e2f75 	eorscc	r2, lr, r5, ror pc
    3610:	24213121 	strtcs	r3, [r1], #-289	; 0x121
    3614:	01001e02 	tsteq	r0, r2, lsl #28
    3618:	0004c701 	andeq	ip, r4, r1, lsl #14
    361c:	45000200 	strmi	r0, [r0, #-512]	; 0x200
    3620:	02000000 	andeq	r0, r0, #0
    3624:	0d0efb01 	vstreq	d15, [lr, #-4]
    3628:	01010100 	mrseq	r0, (UNDEF: 17)
    362c:	00000001 	andeq	r0, r0, r1
    3630:	01000001 	tsteq	r0, r1
    3634:	5f627375 	svcpl	0x00627375
    3638:	0062696c 	rsbeq	r6, r2, ip, ror #18
    363c:	62737500 	rsbsvs	r7, r3, #0, 10
    3640:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    3644:	00632e73 	rsbeq	r2, r3, r3, ror lr
    3648:	75000001 	strvc	r0, [r0, #-1]
    364c:	745f6273 	ldrbvc	r6, [pc], #-627	; 3654 <__Stack_Size+0x2e54>
    3650:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    3654:	00010068 	andeq	r0, r1, r8, rrx
    3658:	62737500 	rsbsvs	r7, r3, #0, 10
    365c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    3660:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3664:	00000001 	andeq	r0, r0, r1
    3668:	00020500 	andeq	r0, r2, r0, lsl #10
    366c:	03000000 	movweq	r0, #0
    3670:	02130122 	andseq	r0, r3, #-2147483640	; 0x80000008
    3674:	01010006 	tsteq	r1, r6
    3678:	00020500 	andeq	r0, r2, r0, lsl #10
    367c:	03000000 	movweq	r0, #0
    3680:	2f13012e 	svccs	0x0013012e
    3684:	01000402 	tsteq	r0, r2, lsl #8
    3688:	02050001 	andeq	r0, r5, #1
    368c:	00000000 	andeq	r0, r0, r0
    3690:	13013a03 	movwne	r3, #6659	; 0x1a03
    3694:	01000602 	tsteq	r0, r2, lsl #12
    3698:	02050001 	andeq	r0, r5, #1
    369c:	00000000 	andeq	r0, r0, r0
    36a0:	0100c603 	tsteq	r0, r3, lsl #12
    36a4:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    36a8:	00010100 	andeq	r0, r1, r0, lsl #2
    36ac:	00000205 	andeq	r0, r0, r5, lsl #4
    36b0:	d2030000 	andle	r0, r3, #0
    36b4:	2f130100 	svccs	0x00130100
    36b8:	01000402 	tsteq	r0, r2, lsl #8
    36bc:	02050001 	andeq	r0, r5, #1
    36c0:	00000000 	andeq	r0, r0, r0
    36c4:	0100de03 	tsteq	r0, r3, lsl #28
    36c8:	00060213 	andeq	r0, r6, r3, lsl r2
    36cc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    36d0:	00000002 	andeq	r0, r0, r2
    36d4:	00ea0300 	rsceq	r0, sl, r0, lsl #6
    36d8:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
    36dc:	01010004 	tsteq	r1, r4
    36e0:	00020500 	andeq	r0, r2, r0, lsl #10
    36e4:	03000000 	movweq	r0, #0
    36e8:	130100f6 	movwne	r0, #4342	; 0x10f6
    36ec:	01000802 	tsteq	r0, r2, lsl #16
    36f0:	02050001 	andeq	r0, r5, #1
    36f4:	00000000 	andeq	r0, r0, r0
    36f8:	01018203 	tsteq	r1, r3, lsl #4
    36fc:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
    3700:	00010100 	andeq	r0, r1, r0, lsl #2
    3704:	00000205 	andeq	r0, r0, r5, lsl #4
    3708:	8f030000 	svchi	0x00030000
    370c:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
    3710:	01010007 	tsteq	r1, r7
    3714:	00020500 	andeq	r0, r2, r0, lsl #10
    3718:	03000000 	movweq	r0, #0
    371c:	1301019b 	movwne	r0, #4507	; 0x119b
    3720:	00020267 	andeq	r0, r2, r7, ror #4
    3724:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3728:	00000002 	andeq	r0, r0, r2
    372c:	01a80300 			; <UNDEFINED> instruction: 0x01a80300
    3730:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    3734:	00010100 	andeq	r0, r1, r0, lsl #2
    3738:	00000205 	andeq	r0, r0, r5, lsl #4
    373c:	b4030000 	strlt	r0, [r3], #-0
    3740:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    3744:	01000302 	tsteq	r0, r2, lsl #6
    3748:	02050001 	andeq	r0, r5, #1
    374c:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    3750:	0101c103 	tsteq	r1, r3, lsl #2
    3754:	00150213 	andseq	r0, r5, r3, lsl r2
    3758:	05000101 	streq	r0, [r0, #-257]	; 0x101
    375c:	00000002 	andeq	r0, r0, r2
    3760:	01ce0300 	biceq	r0, lr, r0, lsl #6
    3764:	15021301 	strne	r1, [r2, #-769]	; 0x301
    3768:	00010100 	andeq	r0, r1, r0, lsl #2
    376c:	00000205 	andeq	r0, r0, r5, lsl #4
    3770:	db030000 	blle	c3778 <__Stack_Size+0xc2f78>
    3774:	41030101 	tstmi	r3, r1, lsl #2
    3778:	00c20301 	sbceq	r0, r2, r1, lsl #6
    377c:	7fbe0358 	svcvc	0x00be0358
    3780:	00c20320 	sbceq	r0, r2, r0, lsr #6
    3784:	303e2220 	eorscc	r2, lr, r0, lsr #4
    3788:	01000502 	tsteq	r0, r2, lsl #10
    378c:	02050001 	andeq	r0, r5, #1
    3790:	00000000 	andeq	r0, r0, r0
    3794:	0101f003 	tsteq	r1, r3
    3798:	03026713 	movweq	r6, #10003	; 0x2713
    379c:	00010100 	andeq	r0, r1, r0, lsl #2
    37a0:	00000205 	andeq	r0, r0, r5, lsl #4
    37a4:	fc030000 	stc2	0, cr0, [r3], {-0}
    37a8:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
    37ac:	01000302 	tsteq	r0, r2, lsl #6
    37b0:	02050001 	andeq	r0, r5, #1
    37b4:	00000000 	andeq	r0, r0, r0
    37b8:	01028803 	tsteq	r2, r3, lsl #16
    37bc:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
    37c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    37c4:	00620202 	rsbeq	r0, r2, r2, lsl #4
    37c8:	02940308 	addseq	r0, r4, #8, 6	; 0x20000000
    37cc:	0f021301 	svceq	0x00021301
    37d0:	00010100 	andeq	r0, r1, r0, lsl #2
    37d4:	00000205 	andeq	r0, r0, r5, lsl #4
    37d8:	a0030000 	andge	r0, r3, r0
    37dc:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    37e0:	0101000f 	tsteq	r1, pc
    37e4:	00020500 	andeq	r0, r2, r0, lsl #10
    37e8:	03000000 	movweq	r0, #0
    37ec:	130102ac 	movwne	r0, #4780	; 0x12ac
    37f0:	01000e02 	tsteq	r0, r2, lsl #28
    37f4:	02050001 	andeq	r0, r5, #1
    37f8:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
    37fc:	0102b703 	tsteq	r2, r3, lsl #14
    3800:	000e0213 	andeq	r0, lr, r3, lsl r2
    3804:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3808:	00000002 	andeq	r0, r0, r2
    380c:	02c20300 	sbceq	r0, r2, #0, 6
    3810:	0f021301 	svceq	0x00021301
    3814:	00010100 	andeq	r0, r1, r0, lsl #2
    3818:	00000205 	andeq	r0, r0, r5, lsl #4
    381c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    3820:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
    3824:	0101000f 	tsteq	r1, pc
    3828:	00020500 	andeq	r0, r2, r0, lsl #10
    382c:	03000000 	movweq	r0, #0
    3830:	130102d8 	movwne	r0, #4824	; 0x12d8
    3834:	01000e02 	tsteq	r0, r2, lsl #28
    3838:	02050001 	andeq	r0, r5, #1
    383c:	00000000 	andeq	r0, r0, r0
    3840:	0102e303 	tsteq	r2, r3, lsl #6
    3844:	05028313 	streq	r8, [r2, #-787]	; 0x313
    3848:	00010100 	andeq	r0, r1, r0, lsl #2
    384c:	00000205 	andeq	r0, r0, r5, lsl #4
    3850:	ee030000 	cdp	0, 0, cr0, cr3, cr0, {0}
    3854:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
    3858:	01000502 	tsteq	r0, r2, lsl #10
    385c:	02050001 	andeq	r0, r5, #1
    3860:	00000000 	andeq	r0, r0, r0
    3864:	0102f903 	tsteq	r2, r3, lsl #18
    3868:	000c0213 	andeq	r0, ip, r3, lsl r2
    386c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3870:	00000002 	andeq	r0, r0, r2
    3874:	03840300 	orreq	r0, r4, #0, 6
    3878:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
    387c:	00010100 	andeq	r0, r1, r0, lsl #2
    3880:	00000205 	andeq	r0, r0, r5, lsl #4
    3884:	8f030000 	svchi	0x00030000
    3888:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    388c:	01010010 	tsteq	r1, r0, lsl r0
    3890:	00020500 	andeq	r0, r2, r0, lsl #10
    3894:	03000000 	movweq	r0, #0
    3898:	1301039a 	movwne	r0, #5018	; 0x139a
    389c:	01001002 	tsteq	r0, r2
    38a0:	02050001 	andeq	r0, r5, #1
    38a4:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
    38a8:	0103a503 	tsteq	r3, r3, lsl #10
    38ac:	04020013 	streq	r0, [r2], #-19
    38b0:	02820601 	addeq	r0, r2, #1048576	; 0x100000
    38b4:	01010008 	tsteq	r1, r8
    38b8:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
    38bc:	03080062 	movweq	r0, #32866	; 0x8062
    38c0:	130103b0 	movwne	r0, #5040	; 0x13b0
    38c4:	01040200 	mrseq	r0, R12_usr
    38c8:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
    38cc:	00010100 	andeq	r0, r1, r0, lsl #2
    38d0:	00000205 	andeq	r0, r0, r5, lsl #4
    38d4:	bc030000 	stclt	0, cr0, [r3], {-0}
    38d8:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    38dc:	0101000f 	tsteq	r1, pc
    38e0:	00020500 	andeq	r0, r2, r0, lsl #10
    38e4:	03000000 	movweq	r0, #0
    38e8:	130103c7 	movwne	r0, #5063	; 0x13c7
    38ec:	00030267 	andeq	r0, r3, r7, ror #4
    38f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    38f4:	00000002 	andeq	r0, r0, r2
    38f8:	03d30300 	bicseq	r0, r3, #0, 6
    38fc:	10021301 	andne	r1, r2, r1, lsl #6
    3900:	00010100 	andeq	r0, r1, r0, lsl #2
    3904:	00000205 	andeq	r0, r0, r5, lsl #4
    3908:	df030000 	svcle	0x00030000
    390c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
    3910:	01010010 	tsteq	r1, r0, lsl r0
    3914:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
    3918:	03080062 	movweq	r0, #32866	; 0x8062
    391c:	130103ea 	movwne	r0, #5098	; 0x13ea
    3920:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    3924:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3928:	00629802 	rsbeq	r9, r2, r2, lsl #16
    392c:	03f50308 	mvnseq	r0, #8, 6	; 0x20000000
    3930:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    3934:	01010006 	tsteq	r1, r6
    3938:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
    393c:	03080062 	movweq	r0, #32866	; 0x8062
    3940:	13010481 	movwne	r0, #5249	; 0x1481
    3944:	01000e02 	tsteq	r0, r2, lsl #28
    3948:	02050001 	andeq	r0, r5, #1
    394c:	00000000 	andeq	r0, r0, r0
    3950:	01048d03 	tsteq	r4, r3, lsl #26
    3954:	04020013 	streq	r0, [r2], #-19
    3958:	002e0601 	eoreq	r0, lr, r1, lsl #12
    395c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3960:	01000702 	tsteq	r0, r2, lsl #14
    3964:	02050001 	andeq	r0, r5, #1
    3968:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
    396c:	01049903 	tsteq	r4, r3, lsl #18
    3970:	04020013 	streq	r0, [r2], #-19
    3974:	00ac0601 	adceq	r0, ip, r1, lsl #12
    3978:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    397c:	01000b02 	tsteq	r0, r2, lsl #22
    3980:	02050001 	andeq	r0, r5, #1
    3984:	00000000 	andeq	r0, r0, r0
    3988:	0104a403 	tsteq	r4, r3, lsl #8
    398c:	07029113 	smladeq	r2, r3, r1, r9
    3990:	00010100 	andeq	r0, r1, r0, lsl #2
    3994:	00000205 	andeq	r0, r0, r5, lsl #4
    3998:	af030000 	svcge	0x00030000
    399c:	91130104 	tstls	r3, r4, lsl #2
    39a0:	01000702 	tsteq	r0, r2, lsl #14
    39a4:	02050001 	andeq	r0, r5, #1
    39a8:	00000000 	andeq	r0, r0, r0
    39ac:	0104bc03 	tsteq	r4, r3, lsl #24
    39b0:	001b0221 	andseq	r0, fp, r1, lsr #4
    39b4:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39b8:	00000002 	andeq	r0, r0, r2
    39bc:	04c80300 	strbeq	r0, [r8], #768	; 0x300
    39c0:	10021301 	andne	r1, r2, r1, lsl #6
    39c4:	00010100 	andeq	r0, r1, r0, lsl #2
    39c8:	00000205 	andeq	r0, r0, r5, lsl #4
    39cc:	d4030000 	strle	r0, [r3], #-0
    39d0:	02130104 	andseq	r0, r3, #4, 2
    39d4:	01010010 	tsteq	r1, r0, lsl r0
    39d8:	00020500 	andeq	r0, r2, r0, lsl #10
    39dc:	03000000 	movweq	r0, #0
    39e0:	130104df 	movwne	r0, #5343	; 0x14df
    39e4:	0004029f 	muleq	r4, pc, r2	; <UNPREDICTABLE>
    39e8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    39ec:	00000002 	andeq	r0, r0, r2
    39f0:	04ea0300 	strbteq	r0, [sl], #768	; 0x300
    39f4:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
    39f8:	01010006 	tsteq	r1, r6
    39fc:	00020500 	andeq	r0, r2, r0, lsl #10
    3a00:	03000000 	movweq	r0, #0
    3a04:	130104f6 	movwne	r0, #5366	; 0x14f6
    3a08:	0200211f 	andeq	r2, r0, #-1073741817	; 0xc0000007
    3a0c:	20060104 	andcs	r0, r6, r4, lsl #2
    3a10:	02040200 	andeq	r0, r4, #0, 4
    3a14:	02005808 	andeq	r5, r0, #8, 16	; 0x80000
    3a18:	00f20104 	rscseq	r0, r2, r4, lsl #2
    3a1c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3a20:	01040200 	mrseq	r0, R12_usr
    3a24:	0402002e 	streq	r0, [r2], #-46	; 0x2e
    3a28:	02120802 	andseq	r0, r2, #131072	; 0x20000
    3a2c:	0101000e 	tsteq	r1, lr
    3a30:	00020500 	andeq	r0, r2, r0, lsl #10
    3a34:	03000000 	movweq	r0, #0
    3a38:	13010582 	movwne	r0, #5506	; 0x1582
    3a3c:	01040200 	mrseq	r0, R12_usr
    3a40:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
    3a44:	4a080204 	bmi	20425c <__Stack_Size+0x203a5c>
    3a48:	01040200 	mrseq	r0, R12_usr
    3a4c:	000e0290 	muleq	lr, r0, r2
    3a50:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a54:	00000002 	andeq	r0, r0, r2
    3a58:	058e0300 	streq	r0, [lr, #768]	; 0x300
    3a5c:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
    3a60:	2e060104 	adfcss	f0, f6, f4
    3a64:	02040200 	andeq	r0, r4, #0, 4
    3a68:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
    3a6c:	02900104 	addseq	r0, r0, #4, 2
    3a70:	0101000e 	tsteq	r1, lr
    3a74:	00020500 	andeq	r0, r2, r0, lsl #10
    3a78:	03000000 	movweq	r0, #0
    3a7c:	1301059a 	movwne	r0, #5530	; 0x159a
    3a80:	00070291 	muleq	r7, r1, r2
    3a84:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3a88:	00000002 	andeq	r0, r0, r2
    3a8c:	05a60300 	streq	r0, [r6, #768]!	; 0x300
    3a90:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
    3a94:	01010007 	tsteq	r1, r7
    3a98:	00020500 	andeq	r0, r2, r0, lsl #10
    3a9c:	03000000 	movweq	r0, #0
    3aa0:	130105b2 	movwne	r0, #5554	; 0x15b2
    3aa4:	25489fbc 	strbcs	r9, [r8, #-4028]	; 0xfbc
    3aa8:	01000702 	tsteq	r0, r2, lsl #14
    3aac:	02050001 	andeq	r0, r5, #1
    3ab0:	00000000 	andeq	r0, r0, r0
    3ab4:	0105c303 	tsteq	r5, r3, lsl #6
    3ab8:	30bc3013 	adcscc	r3, ip, r3, lsl r0
    3abc:	01000d02 	tsteq	r0, r2, lsl #26
    3ac0:	02050001 	andeq	r0, r5, #1
    3ac4:	00000000 	andeq	r0, r0, r0
    3ac8:	0105d603 	tsteq	r5, r3, lsl #12
    3acc:	00030216 	andeq	r0, r3, r6, lsl r2
    3ad0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3ad4:	00000002 	andeq	r0, r0, r2
    3ad8:	05e30300 	strbeq	r0, [r3, #768]!	; 0x300
    3adc:	02301601 	eorseq	r1, r0, #1048576	; 0x100000
    3ae0:	01010003 	tsteq	r1, r3
    3ae4:	000000b4 	strheq	r0, [r0], -r4
    3ae8:	00600002 	rsbeq	r0, r0, r2
    3aec:	01020000 	mrseq	r0, (UNDEF: 2)
    3af0:	000d0efb 	strdeq	r0, [sp], -fp
    3af4:	01010101 	tsteq	r1, r1, lsl #2
    3af8:	01000000 	mrseq	r0, (UNDEF: 0)
    3afc:	75010000 	strvc	r0, [r1, #-0]
    3b00:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3b04:	00006269 	andeq	r6, r0, r9, ror #4
    3b08:	5f627375 	svcpl	0x00627375
    3b0c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3b10:	00010063 	andeq	r0, r1, r3, rrx
    3b14:	62737500 	rsbsvs	r7, r3, #0, 10
    3b18:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3b1c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3b20:	75000001 	strvc	r0, [r0, #-1]
    3b24:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    3b28:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    3b2c:	00010068 	andeq	r0, r1, r8, rrx
    3b30:	62737500 	rsbsvs	r7, r3, #0, 10
    3b34:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    3b38:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3b3c:	75000001 	strvc	r0, [r0, #-1]
    3b40:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3b44:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3b48:	00010068 	andeq	r0, r1, r8, rrx
    3b4c:	05000000 	streq	r0, [r0, #-0]
    3b50:	00631002 	rsbeq	r1, r3, r2
    3b54:	01290308 	teqeq	r9, r8, lsl #6
    3b58:	593e8423 	ldmdbpl	lr!, {r0, r1, r5, sl, pc}
    3b5c:	3d1f3d36 	ldccc	13, cr3, [pc, #-216]	; 3a8c <__Stack_Size+0x328c>
    3b60:	0395914b 	orrseq	r9, r5, #-1073741806	; 0xc0000012
    3b64:	30213c17 	eorcc	r3, r1, r7, lsl ip
    3b68:	59304259 	ldmdbpl	r0!, {r0, r3, r4, r6, r9, lr}
    3b6c:	30593043 	subscc	r3, r9, r3, asr #32
    3b70:	03f31308 	mvnseq	r1, #8, 6	; 0x20000000
    3b74:	31672009 	cmncc	r7, r9
    3b78:	933f5c5b 	teqls	pc, #23296	; 0x5b00
    3b7c:	1602311d 			; <UNDEFINED> instruction: 0x1602311d
    3b80:	00010100 	andeq	r0, r1, r0, lsl #2
    3b84:	00000205 	andeq	r0, r0, r5, lsl #4
    3b88:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    3b8c:	76230101 	strtvc	r0, [r3], -r1, lsl #2
    3b90:	31675a3e 	cmncc	r7, lr, lsr sl
    3b94:	5b313f5b 	blpl	c53908 <__Stack_Size+0xc53108>
    3b98:	01010008 	tsteq	r1, r8
    3b9c:	00000063 	andeq	r0, r0, r3, rrx
    3ba0:	00450002 	subeq	r0, r5, r2
    3ba4:	01020000 	mrseq	r0, (UNDEF: 2)
    3ba8:	000d0efb 	strdeq	r0, [sp], -fp
    3bac:	01010101 	tsteq	r1, r1, lsl #2
    3bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    3bb4:	75010000 	strvc	r0, [r1, #-0]
    3bb8:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    3bbc:	00006269 	andeq	r6, r0, r9, ror #4
    3bc0:	5f627375 	svcpl	0x00627375
    3bc4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    3bc8:	0100632e 	tsteq	r0, lr, lsr #6
    3bcc:	73750000 	cmnvc	r5, #0
    3bd0:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3bd4:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    3bd8:	00000100 	andeq	r0, r0, r0, lsl #2
    3bdc:	5f627375 	svcpl	0x00627375
    3be0:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3be4:	0100682e 	tsteq	r0, lr, lsr #16
    3be8:	00000000 	andeq	r0, r0, r0
    3bec:	64640205 	strbtvs	r0, [r4], #-517	; 0x205
    3bf0:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    3bf4:	1d312101 	ldfnes	f2, [r1, #-4]!
    3bf8:	233d2f21 	teqcs	sp, #33, 30	; 0x84
    3bfc:	0f02231d 	svceq	0x0002231d
    3c00:	50010100 	andpl	r0, r1, r0, lsl #2
    3c04:	02000003 	andeq	r0, r0, #3
    3c08:	00007b00 	andeq	r7, r0, r0, lsl #22
    3c0c:	fb010200 	blx	44416 <__Stack_Size+0x43c16>
    3c10:	01000d0e 	tsteq	r0, lr, lsl #26
    3c14:	00010101 	andeq	r0, r1, r1, lsl #2
    3c18:	00010000 	andeq	r0, r1, r0
    3c1c:	73750100 	cmnvc	r5, #0, 2
    3c20:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3c24:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3c28:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    3c2c:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    3c30:	00010063 	andeq	r0, r1, r3, rrx
    3c34:	62737500 	rsbsvs	r7, r3, #0, 10
    3c38:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    3c3c:	00682e65 	rsbeq	r2, r8, r5, ror #28
    3c40:	75000001 	strvc	r0, [r0, #-1]
    3c44:	645f6273 	ldrbvs	r6, [pc], #-627	; 3c4c <__Stack_Size+0x344c>
    3c48:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    3c4c:	00000100 	andeq	r0, r0, r0, lsl #2
    3c50:	5f627375 	svcpl	0x00627375
    3c54:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    3c58:	0100682e 	tsteq	r0, lr, lsr #16
    3c5c:	73750000 	cmnvc	r5, #0
    3c60:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    3c64:	682e7469 	stmdavs	lr!, {r0, r3, r5, r6, sl, ip, sp, lr}
    3c68:	00000100 	andeq	r0, r0, r0, lsl #2
    3c6c:	5f627375 	svcpl	0x00627375
    3c70:	2e6d656d 	cdpcs	5, 6, cr6, cr13, cr13, {3}
    3c74:	00010068 	andeq	r0, r1, r8, rrx
    3c78:	62737500 	rsbsvs	r7, r3, #0, 10
    3c7c:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    3c80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3c84:	00000001 	andeq	r0, r0, r1
    3c88:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    3c8c:	03080064 	movweq	r0, #32868	; 0x8064
    3c90:	222f0135 	eorcs	r0, pc, #1073741837	; 0x4000000d
    3c94:	2f4b223e 	svccs	0x004b223e
    3c98:	01000502 	tsteq	r0, r2, lsl #10
    3c9c:	02050001 	andeq	r0, r5, #1
    3ca0:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
    3ca4:	0100e303 	tsteq	r0, r3, lsl #6
    3ca8:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    3cac:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    3cb0:	00010100 	andeq	r0, r1, r0, lsl #2
    3cb4:	64e40205 	strbtvs	r0, [r4], #517	; 0x205
    3cb8:	9b030800 	blls	c5cc0 <__Stack_Size+0xc54c0>
    3cbc:	222f0101 	eorcs	r0, pc, #1073741824	; 0x40000000
    3cc0:	1d23233d 	stcne	3, cr2, [r3, #-244]!	; 0xffffff0c
    3cc4:	22235b31 	eorcs	r5, r3, #50176	; 0xc400
    3cc8:	404e3040 	submi	r3, lr, r0, asr #32
    3ccc:	40223133 	eormi	r3, r2, r3, lsr r1
    3cd0:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    3cd4:	0b03424c 	bleq	d460c <__Stack_Size+0xd3e0c>
    3cd8:	60034b58 	andvs	r4, r3, r8, asr fp
    3cdc:	2021032e 	eorcs	r0, r1, lr, lsr #6
    3ce0:	01000702 	tsteq	r0, r2, lsl #14
    3ce4:	02050001 	andeq	r0, r5, #1
    3ce8:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    3cec:	0103e003 	tsteq	r3, r3
    3cf0:	2f2f1f13 	svccs	0x002f1f13
    3cf4:	02003321 	andeq	r3, r0, #-2080374784	; 0x84000000
    3cf8:	20060104 	andcs	r0, r6, r4, lsl #2
    3cfc:	924d3006 	subls	r3, sp, #6
    3d00:	21352d34 	teqcs	r5, r4, lsr sp
    3d04:	4c847651 	stcmi	6, cr7, [r4], {81}	; 0x51
    3d08:	2f2f2a24 	svccs	0x002f2a24
    3d0c:	23231d30 	teqcs	r3, #48, 26	; 0xc00
    3d10:	01001202 	tsteq	r0, r2, lsl #4
    3d14:	02050001 	andeq	r0, r5, #1
    3d18:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
    3d1c:	0100ca03 	tsteq	r0, r3, lsl #20
    3d20:	591f2122 	ldmdbpl	pc, {r1, r5, r8, sp}	; <UNPREDICTABLE>
    3d24:	4b21302f 	blmi	84fde8 <__Stack_Size+0x84f5e8>
    3d28:	08022232 	stmdaeq	r2, {r1, r4, r5, r9, sp}
    3d2c:	00010100 	andeq	r0, r1, r0, lsl #2
    3d30:	66540205 	ldrbvs	r0, [r4], -r5, lsl #4
    3d34:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    3d38:	84240100 	strthi	r0, [r4], #-256	; 0x100
    3d3c:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    3d40:	06200601 	strteq	r0, [r0], -r1, lsl #12
    3d44:	224b342f 	subcs	r3, fp, #788529152	; 0x2f000000
    3d48:	252f2f1e 	strcs	r2, [pc, #-3870]!	; 2e32 <__Stack_Size+0x2632>
    3d4c:	00070221 	andeq	r0, r7, r1, lsr #4
    3d50:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d54:	00669c02 	rsbeq	r9, r6, r2, lsl #24
    3d58:	01e90308 	mvneq	r0, r8, lsl #6
    3d5c:	3e402101 	dvfccs	f2, f0, f1
    3d60:	3d35224b 	lfmcc	f2, 4, [r5, #-300]!	; 0xfffffed4
    3d64:	200f0342 	andcs	r0, pc, r2, asr #6
    3d68:	43207203 	teqmi	r0, #805306368	; 0x30000000
    3d6c:	2075035f 	rsbscs	r0, r5, pc, asr r3
    3d70:	00314032 	eorseq	r4, r1, r2, lsr r0
    3d74:	06010402 	streq	r0, [r1], -r2, lsl #8
    3d78:	032f062e 	teqeq	pc, #48234496	; 0x2e00000
    3d7c:	23472e09 	movtcs	r2, #32265	; 0x7e09
    3d80:	4b4c231d 	blmi	130c9fc <__Stack_Size+0x130c1fc>
    3d84:	6b235a5e 	blvs	8da704 <__Stack_Size+0x8d9f04>
    3d88:	314b942f 	cmpcc	fp, pc, lsr #8
    3d8c:	000a0221 	andeq	r0, sl, r1, lsr #4
    3d90:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3d94:	00676c02 	rsbeq	r6, r7, r2, lsl #24
    3d98:	02c20308 	sbceq	r0, r2, #8, 6	; 0x20000000
    3d9c:	0f032601 	svceq	0x00032601
    3da0:	20710320 	rsbscs	r0, r1, r0, lsr #6
    3da4:	03200f03 	teqeq	r0, #3, 30
    3da8:	43212071 	teqmi	r1, #113	; 0x71
    3dac:	31403254 	cmpcc	r0, r4, asr r2
    3db0:	0402002f 	streq	r0, [r2], #-47	; 0x2f
    3db4:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    3db8:	2e090321 	cdpcs	3, 0, cr0, cr9, cr1, {1}
    3dbc:	231d3147 	tstcs	sp, #-1073741807	; 0xc0000011
    3dc0:	034b8588 	movteq	r8, #46472	; 0xb588
    3dc4:	12032e6f 	andne	r2, r3, #1776	; 0x6f0
    3dc8:	00070220 	andeq	r0, r7, r0, lsr #4
    3dcc:	05000101 	streq	r0, [r0, #-257]	; 0x101
    3dd0:	0067f002 	rsbeq	pc, r7, r2
    3dd4:	02f80308 	rscseq	r0, r8, #8, 6	; 0x20000000
    3dd8:	4c672101 	stfmie	f2, [r7], #-4
    3ddc:	01000702 	tsteq	r0, r2, lsl #14
    3de0:	02050001 	andeq	r0, r5, #1
    3de4:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
    3de8:	01039203 	tsteq	r3, r3, lsl #4
    3dec:	3d223d15 	stccc	13, cr3, [r2, #-84]!	; 0xffffffac
    3df0:	04022f23 	streq	r2, [r2], #-3875	; 0xf23
    3df4:	00010100 	andeq	r0, r1, r0, lsl #2
    3df8:	68300205 	ldmdavs	r0!, {r0, r2, r9}
    3dfc:	c9030800 	stmdbgt	r3, {fp}
    3e00:	68210107 	stmdavs	r1!, {r0, r1, r2, r8}
    3e04:	02404b5a 	subeq	r4, r0, #92160	; 0x16800
    3e08:	0101000d 	tsteq	r1, sp
    3e0c:	70020500 	andvc	r0, r2, r0, lsl #10
    3e10:	03080068 	movweq	r0, #32872	; 0x8068
    3e14:	280106cc 	stmdacs	r1, {r2, r3, r6, r7, r9, sl}
    3e18:	563e2c3e 			; <UNDEFINED> instruction: 0x563e2c3e
    3e1c:	30302f5c 	eorscc	r2, r0, ip, asr pc
    3e20:	032f3130 	teqeq	pc, #48, 2
    3e24:	4e4a7dbd 	mcrmi	13, 2, r7, cr10, cr13, {5}
    3e28:	4f304030 	svcmi	0x00304030
    3e2c:	033d3d29 	teqeq	sp, #2624	; 0xa40
    3e30:	03304a0c 	teqeq	r0, #12, 20	; 0xc000
    3e34:	03593c3c 	cmpeq	r9, #60, 24	; 0x3c00
    3e38:	3e3d3c44 	cdpcc	12, 3, cr3, cr13, cr4, {2}
    3e3c:	3d3d3044 	ldccc	0, cr3, [sp, #-272]!	; 0xfffffef0
    3e40:	3c0b033e 	stccc	3, cr0, [fp], {62}	; 0x3e
    3e44:	31413031 	cmpcc	r1, r1, lsr r0
    3e48:	09033033 	stmdbeq	r3, {r0, r1, r4, r5, ip, sp}
    3e4c:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    3e50:	75039c36 	strvc	r9, [r3, #-3126]	; 0xc36
    3e54:	2010032e 	andscs	r0, r0, lr, lsr #6
    3e58:	303c1903 	eorscc	r1, ip, r3, lsl #18
    3e5c:	3e302f3e 	mrccc	15, 1, r2, cr0, cr14, {1}
    3e60:	3d303e30 	ldccc	14, cr3, [r0, #-192]!	; 0xffffff40
    3e64:	695a4230 	ldmdbvs	sl, {r4, r5, r9, lr}^
    3e68:	75305e4b 	ldrvc	r5, [r0, #-3659]!	; 0xe4b
    3e6c:	0e03306d 	cdpeq	0, 0, cr3, cr3, cr13, {3}
    3e70:	20720320 	rsbscs	r0, r2, r0, lsr #6
    3e74:	75035f43 	strvc	r5, [r3, #-3907]	; 0xf43
    3e78:	31403220 	cmpcc	r0, r0, lsr #4
    3e7c:	3c090359 	stccc	3, cr0, [r9], {89}	; 0x59
    3e80:	59305030 	ldmdbpl	r0!, {r4, r5, ip, lr}
    3e84:	2289674b 	addcs	r6, r9, #19660800	; 0x12c0000
    3e88:	322f233d 	eorcc	r2, pc, #-201326592	; 0xf4000000
    3e8c:	69413067 	stmdbvs	r1, {r0, r1, r2, r5, r6, ip, sp}^
    3e90:	4d413f31 	stclmi	15, cr3, [r1, #-196]	; 0xffffff3c
    3e94:	23084c31 	movwcs	r4, #35889	; 0x8c31
    3e98:	5a305a30 	bpl	c1a760 <__Stack_Size+0xc19f60>
    3e9c:	2f404b40 	svccs	0x00404b40
    3ea0:	2f4a2f03 	svccs	0x004a2f03
    3ea4:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    3ea8:	032e2c03 	teqeq	lr, #768	; 0x300
    3eac:	0c022e0b 	stceq	14, cr2, [r2], {11}
    3eb0:	00010100 	andeq	r0, r1, r0, lsl #2
    3eb4:	6b4c0205 	blvs	13046d0 <__Stack_Size+0x1303ed0>
    3eb8:	a0030800 	andge	r0, r3, r0, lsl #16
    3ebc:	3e210107 	sufccs	f0, f1, f7
    3ec0:	01040200 	mrseq	r0, R12_usr
    3ec4:	03062e06 	movweq	r2, #28166	; 0x6e06
    3ec8:	1e2e7c8a 	cdpne	12, 2, cr7, cr14, cr10, {4}
    3ecc:	59263322 	stmdbpl	r6!, {r1, r5, r8, r9, ip, sp}
    3ed0:	222f211f 	eorcs	r2, pc, #-1073741817	; 0xc0000007
    3ed4:	3077301e 	rsbscc	r3, r7, lr, lsl r0
    3ed8:	1f2f1f21 	svcne	0x002f1f21
    3edc:	4c3f2f21 	ldcmi	15, cr2, [pc], #-132	; 3e60 <__Stack_Size+0x3660>
    3ee0:	3d4e2240 	sfmcc	f2, 2, [lr, #-256]	; 0xffffff00
    3ee4:	9e03d303 	cdpls	3, 0, cr13, cr3, cr3, {0}
    3ee8:	0351303f 	cmpeq	r1, #63	; 0x3f
    3eec:	2d312009 	ldccs	0, cr2, [r1, #-36]!	; 0xffffffdc
    3ef0:	01000f02 	tsteq	r0, r2, lsl #30
    3ef4:	02050001 	andeq	r0, r5, #1
    3ef8:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
    3efc:	0107dd03 	tsteq	r7, r3, lsl #26
    3f00:	02003122 	andeq	r3, r0, #-2147483640	; 0x80000008
    3f04:	20060104 	andcs	r0, r6, r4, lsl #2
    3f08:	02040200 	andeq	r0, r4, #0, 4
    3f0c:	02007606 	andeq	r7, r0, #6291456	; 0x600000
    3f10:	32640204 	rsbcc	r0, r4, #4, 4	; 0x40000000
    3f14:	01000902 	tsteq	r0, r2, lsl #18
    3f18:	02050001 	andeq	r0, r5, #1
    3f1c:	08006c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, sp, lr}
    3f20:	0106f803 	tsteq	r6, r3, lsl #16
    3f24:	02003e21 	andeq	r3, r0, #528	; 0x210
    3f28:	2e060104 	adfcss	f0, f6, f4
    3f2c:	3f303006 	svccc	0x00303006
    3f30:	04020030 	streq	r0, [r2], #-48	; 0x30
    3f34:	02003d01 	andeq	r3, r0, #1, 26	; 0x40
    3f38:	311f0104 	tstcc	pc, r4, lsl #2
    3f3c:	23504c3d 	cmpcs	r0, #15616	; 0x3d00
    3f40:	09022d31 	stmdbeq	r2, {r0, r4, r5, r8, sl, fp, sp}
    3f44:	00010100 	andeq	r0, r1, r0, lsl #2
    3f48:	00000205 	andeq	r0, r0, r5, lsl #4
    3f4c:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    3f50:	01020107 	tsteq	r2, r7, lsl #2
    3f54:	8f010100 	svchi	0x00010100
    3f58:	02000000 	andeq	r0, r0, #0
    3f5c:	00003600 	andeq	r3, r0, r0, lsl #12
    3f60:	fb010200 	blx	4476a <__Stack_Size+0x43f6a>
    3f64:	01000d0e 	tsteq	r0, lr, lsl #26
    3f68:	00010101 	andeq	r0, r1, r1, lsl #2
    3f6c:	00010000 	andeq	r0, r1, r0
    3f70:	73750100 	cmnvc	r5, #0, 2
    3f74:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    3f78:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    3f7c:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 3db8 <__Stack_Size+0x35b8>
    3f80:	632e6d65 	teqvs	lr, #6464	; 0x1940
    3f84:	00000100 	andeq	r0, r0, r0, lsl #2
    3f88:	5f627375 	svcpl	0x00627375
    3f8c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    3f90:	0100682e 	tsteq	r0, lr, lsr #16
    3f94:	00000000 	andeq	r0, r0, r0
    3f98:	6ca80205 	sfmvs	f0, 4, [r8], #20
    3f9c:	23030800 	movwcs	r0, #14336	; 0x3800
    3fa0:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    3fa4:	0021232b 	eoreq	r2, r1, fp, lsr #6
    3fa8:	06010402 	streq	r0, [r1], -r2, lsl #8
    3fac:	04020020 	streq	r0, [r2], #-32
    3fb0:	004e0602 	subeq	r0, lr, r2, lsl #12
    3fb4:	2c020402 	cfstrscs	mvf0, [r2], {2}
    3fb8:	02040200 	andeq	r0, r4, #0, 4
    3fbc:	04020030 	streq	r0, [r2], #-48	; 0x30
    3fc0:	024e2f02 	subeq	r2, lr, #2, 30
    3fc4:	01010001 	tsteq	r1, r1
    3fc8:	d8020500 	stmdale	r2, {r8, sl}
    3fcc:	0308006c 	movweq	r0, #32876	; 0x806c
    3fd0:	2b24013c 	blcs	9044c8 <__Stack_Size+0x903cc8>
    3fd4:	21232b23 	teqcs	r3, r3, lsr #22
    3fd8:	01040200 	mrseq	r0, R12_usr
    3fdc:	02002006 	andeq	r2, r0, #6
    3fe0:	30060204 	andcc	r0, r6, r4, lsl #4
    3fe4:	00010269 	andeq	r0, r1, r9, ror #4
    3fe8:	Address 0x00003fe8 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0000000c 	andeq	r0, r0, ip
      14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
      1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	0000000c 	andeq	r0, r0, ip
      24:	00000000 	andeq	r0, r0, r0
      28:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0000000c 	andeq	r0, r0, ip
      34:	00000000 	andeq	r0, r0, r0
      38:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00000000 	andeq	r0, r0, r0
      48:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
      4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	0000000c 	andeq	r0, r0, ip
      54:	00000000 	andeq	r0, r0, r0
      58:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
      5c:	00000002 	andeq	r0, r0, r2
      60:	0000000c 	andeq	r0, r0, ip
      64:	00000000 	andeq	r0, r0, r0
      68:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
      6c:	00000018 	andeq	r0, r0, r8, lsl r0
      70:	0000000c 	andeq	r0, r0, ip
      74:	00000000 	andeq	r0, r0, r0
      78:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
      7c:	00000002 	andeq	r0, r0, r2
      80:	0000000c 	andeq	r0, r0, ip
      84:	00000000 	andeq	r0, r0, r0
      88:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
      8c:	00000002 	andeq	r0, r0, r2
      90:	0000000c 	andeq	r0, r0, ip
      94:	00000000 	andeq	r0, r0, r0
      98:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
      9c:	00000002 	andeq	r0, r0, r2
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000000 	andeq	r0, r0, r0
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	00000002 	andeq	r0, r0, r2
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	00000000 	andeq	r0, r0, r0
			*plainchar    = (fragment & 0x003) << 6;
      b8:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
      bc:	00000002 	andeq	r0, r0, r2
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	0000000c 	andeq	r0, r0, ip
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	00000000 	andeq	r0, r0, r0
      c8:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
				{
					state_in->step = step_d;
      cc:	00000002 	andeq	r0, r0, r2
					state_in->plainchar = *plainchar;
      d0:	0000000c 	andeq	r0, r0, ip
					return plainchar - plaintext_out;
      d4:	00000000 	andeq	r0, r0, r0
      d8:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	00000018 	andeq	r0, r0, r8, lsl r0
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	00000000 	andeq	r0, r0, r0
      e8:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	000000a8 	andeq	r0, r0, r8, lsr #1
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	40080e41 	andmi	r0, r8, r1, asr #28
      f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
		}
      f8:	00000001 	andeq	r0, r0, r1
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	0000001c 	andeq	r0, r0, ip, lsl r0
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00000000 	andeq	r0, r0, r0
     104:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}

	f25519_sub(a, x1sq, z1sq);
     108:	00000060 	andeq	r0, r0, r0, rrx
     10c:	40100e41 	andsmi	r0, r0, r1, asr #28
	f25519_mul__distinct(x3, a, a);
     110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     114:	02854003 	addeq	r4, r5, #3
     118:	00018e40 	andeq	r8, r1, r0, asr #28

	f25519_mul_c(a, x1z1, 486662);
     11c:	0000000c 	andeq	r0, r0, ip
     120:	00000000 	andeq	r0, r0, r0
	f25519_add(a, x1sq, a);
     124:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
     128:	0000000c 	andeq	r0, r0, ip
     12c:	0000000c 	andeq	r0, r0, ip
	f25519_add(a, z1sq, a);
     130:	00000000 	andeq	r0, r0, r0
     134:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	0000000c 	andeq	r0, r0, ip
     13c:	0000000c 	andeq	r0, r0, ip
     140:	00000000 	andeq	r0, r0, r0
	f25519_mul_c(z3, x1sq, 4);
     144:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
     148:	00000020 	andeq	r0, r0, r0, lsr #32
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	0000000c 	andeq	r0, r0, ip
     150:	00000000 	andeq	r0, r0, r0
     154:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
	f25519_sub(b, x3, z3); /* D */
     158:	0000000c 	andeq	r0, r0, ip
     15c:	00000018 	andeq	r0, r0, r8, lsl r0
	f25519_mul__distinct(da, a, b);
     160:	00000000 	andeq	r0, r0, r0
     164:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
     168:	00000028 	andeq	r0, r0, r8, lsr #32

	f25519_sub(b, x2, z2);
     16c:	40080e41 	andmi	r0, r8, r1, asr #28
     170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
	f25519_add(a, x3, z3); /* C */
     174:	00000001 	andeq	r0, r0, r1
     178:	00000024 	andeq	r0, r0, r4, lsr #32
     17c:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(cb, a, b);
     180:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
     184:	00000068 	andeq	r0, r0, r8, rrx

	f25519_add(a, da, cb);
     188:	40180e41 	andsmi	r0, r8, r1, asr #28
     18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     190:	04824005 	streq	r4, [r2], #5
	f25519_mul__distinct(b, a, a);
     194:	40038440 	andmi	r8, r3, r0, asr #8
     198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
	f25519_mul__distinct(x5, z1, b);
     19c:	00000001 	andeq	r0, r0, r1
     1a0:	0000000c 	andeq	r0, r0, ip
	...

	f25519_sub(a, da, cb);
     1ac:	00000004 	andeq	r0, r0, r4
	f25519_mul__distinct(b, a, a);
     1b0:	0000000c 	andeq	r0, r0, ip
     1b4:	00000000 	andeq	r0, r0, r0
     1b8:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	0000000c 	andeq	r0, r0, ip
     1c4:	00000000 	andeq	r0, r0, r0

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
     1cc:	00000018 	andeq	r0, r0, r8, lsl r0
     1d0:	00000018 	andeq	r0, r0, r8, lsl r0
     1d4:	00000000 	andeq	r0, r0, r0
		f25519_select(zm1, zm1, zm, bit);
     1d8:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     1dc:	00000084 	andeq	r0, r0, r4, lsl #1
     1e0:	40080e41 	andmi	r0, r8, r1, asr #28
		f25519_select(xm, xm, xms, bit);
     1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     1e8:	00000001 	andeq	r0, r0, r1
     1ec:	00000018 	andeq	r0, r0, r8, lsl r0
		f25519_select(zm, zm, zms, bit);
     1f0:	00000000 	andeq	r0, r0, r0
     1f4:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
     1f8:	00000048 	andeq	r0, r0, r8, asr #32
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	40080e42 	andmi	r0, r8, r2, asr #28
     200:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	00000001 	andeq	r0, r0, r1
     208:	00000018 	andeq	r0, r0, r8, lsl r0
	f25519_mul__distinct(result, zm1, xm);
     20c:	00000000 	andeq	r0, r0, r0
     210:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
	f25519_normalize(result);
     214:	0000003c 	andeq	r0, r0, ip, lsr r0
     218:	40080e43 	andmi	r0, r8, r3, asr #28
}
     21c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     220:	00000001 	andeq	r0, r0, r1
     224:	0000000c 	andeq	r0, r0, ip
     228:	00000000 	andeq	r0, r0, r0
     22c:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
     230:	00000004 	andeq	r0, r0, r4
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
     238:	00000000 	andeq	r0, r0, r0
     23c:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
     240:	00000024 	andeq	r0, r0, r4, lsr #32
     244:	40100e41 	andsmi	r0, r0, r1, asr #28
     248:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     24c:	02824003 	addeq	r4, r2, #3
     250:	00018e40 	andeq	r8, r1, r0, asr #28
     254:	00000018 	andeq	r0, r0, r8, lsl r0
     258:	00000000 	andeq	r0, r0, r0
     25c:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
     260:	00000040 	andeq	r0, r0, r0, asr #32
     264:	40080e41 	andmi	r0, r8, r1, asr #28
     268:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     26c:	00000001 	andeq	r0, r0, r1
     270:	0000001c 	andeq	r0, r0, ip, lsl r0
     274:	00000000 	andeq	r0, r0, r0
     278:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
     27c:	00000022 	andeq	r0, r0, r2, lsr #32
     280:	40100e41 	andsmi	r0, r0, r1, asr #28
     284:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     288:	02824003 	addeq	r4, r2, #3
     28c:	00018e40 	andeq	r8, r1, r0, asr #28
     290:	0000001c 	andeq	r0, r0, ip, lsl r0
     294:	00000000 	andeq	r0, r0, r0
     298:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}
     29c:	000000b4 	strheq	r0, [r0], -r4
     2a0:	40100e41 	andsmi	r0, r0, r1, asr #28
     2a4:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     2a8:	02864003 	addeq	r4, r6, #3
     2ac:	00018e40 	andeq	r8, r1, r0, asr #28
     2b0:	0000000c 	andeq	r0, r0, ip
	...
     2bc:	0000000c 	andeq	r0, r0, ip
     2c0:	0000000c 	andeq	r0, r0, ip
     2c4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2c8:	7c020001 	stcvc	0, cr0, [r2], {1}
     2cc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2d0:	00000024 	andeq	r0, r0, r4, lsr #32
     2d4:	000002c0 	andeq	r0, r0, r0, asr #5
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00000026 	andeq	r0, r0, r6, lsr #32
     2e0:	40180e41 	andsmi	r0, r8, r1, asr #28
     2e4:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     2e8:	04824005 	streq	r4, [r2], #5
     2ec:	40038440 	andmi	r8, r3, r0, asr #8
     2f0:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
     2f4:	00000001 	andeq	r0, r0, r1
     2f8:	00000024 	andeq	r0, r0, r4, lsr #32
     2fc:	000002c0 	andeq	r0, r0, r0, asr #5
     300:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
     304:	0000002e 	andeq	r0, r0, lr, lsr #32
     308:	40180e41 	andsmi	r0, r8, r1, asr #28
     30c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     310:	04844005 	streq	r4, [r4], #5
     314:	40038540 	andmi	r8, r3, r0, asr #10
     318:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
     31c:	00000001 	andeq	r0, r0, r1
     320:	0000001c 	andeq	r0, r0, ip, lsl r0
     324:	000002c0 	andeq	r0, r0, r0, asr #5
     328:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
     32c:	000000b8 	strheq	r0, [r0], -r8
     330:	40080e41 	andmi	r0, r8, r1, asr #28
     334:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     338:	a00e4201 	andge	r4, lr, r1, lsl #4
     33c:	00000006 	andeq	r0, r0, r6
     340:	0000001c 	andeq	r0, r0, ip, lsl r0
     344:	000002c0 	andeq	r0, r0, r0, asr #5
     348:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
     34c:	000000fc 	strdeq	r0, [r0], -ip
     350:	400c0e41 	andmi	r0, ip, r1, asr #28
     354:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     358:	018e4002 	orreq	r4, lr, r2
     35c:	00200e41 	eoreq	r0, r0, r1, asr #28
     360:	0000000c 	andeq	r0, r0, ip
     364:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     368:	7c020001 	stcvc	0, cr0, [r2], {1}
     36c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     370:	0000000c 	andeq	r0, r0, ip
     374:	00000360 	andeq	r0, r0, r0, ror #6
     378:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     37c:	00000016 	andeq	r0, r0, r6, lsl r0
     380:	0000000c 	andeq	r0, r0, ip
     384:	00000360 	andeq	r0, r0, r0, ror #6
     388:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
     38c:	00000012 	andeq	r0, r0, r2, lsl r0
     390:	00000028 	andeq	r0, r0, r8, lsr #32
     394:	00000360 	andeq	r0, r0, r0, ror #6
     398:	08001240 	stmdaeq	r0, {r6, r9, ip}
     39c:	00000050 	andeq	r0, r0, r0, asr r0
     3a0:	40200e42 	eormi	r0, r0, r2, asr #28
     3a4:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     3a8:	06864007 	streq	r4, [r6], r7
     3ac:	40058740 	andmi	r8, r5, r0, asr #14
     3b0:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     3b4:	028a4003 	addeq	r4, sl, #3
     3b8:	00018e40 	andeq	r8, r1, r0, asr #28
     3bc:	0000000c 	andeq	r0, r0, ip
     3c0:	00000360 	andeq	r0, r0, r0, ror #6
     3c4:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
     3c8:	0000000a 	andeq	r0, r0, sl
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	00000360 	andeq	r0, r0, r0, ror #6
     3d4:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
     3d8:	00000016 	andeq	r0, r0, r6, lsl r0
     3dc:	40100e41 	andsmi	r0, r0, r1, asr #28
     3e0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     3e4:	02854003 	addeq	r4, r5, #3
     3e8:	00018e40 	andeq	r8, r1, r0, asr #28
     3ec:	00000018 	andeq	r0, r0, r8, lsl r0
     3f0:	00000360 	andeq	r0, r0, r0, ror #6
     3f4:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
     3f8:	00000028 	andeq	r0, r0, r8, lsr #32
     3fc:	40040e41 	andmi	r0, r4, r1, asr #28
     400:	0e42018e 	dvfeqd	f0, f2, #0.5
     404:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     408:	0000002c 	andeq	r0, r0, ip, lsr #32
     40c:	00000360 	andeq	r0, r0, r0, ror #6
     410:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
     414:	0000001a 	andeq	r0, r0, sl, lsl r0
     418:	40100e41 	andsmi	r0, r0, r1, asr #28
     41c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
     420:	02824003 	addeq	r4, r2, #3
     424:	41018340 	tstmi	r1, r0, asr #6
     428:	8040200e 	subhi	r2, r0, lr
     42c:	07814008 	streq	r4, [r1, r8]
     430:	40068240 	andmi	r8, r6, r0, asr #4
     434:	0000058e 	andeq	r0, r0, lr, lsl #11
     438:	00000024 	andeq	r0, r0, r4, lsr #32
     43c:	00000360 	andeq	r0, r0, r0, ror #6
     440:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
     444:	0000009c 	muleq	r0, ip, r0
     448:	40140e41 	andsmi	r0, r4, r1, asr #28
     44c:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     450:	03864004 	orreq	r4, r6, #4
     454:	40028740 	andmi	r8, r2, r0, asr #14
     458:	0e41018e 	dvfeqd	f0, f1, #0.5
     45c:	00000030 	andeq	r0, r0, r0, lsr r0
     460:	0000001c 	andeq	r0, r0, ip, lsl r0
     464:	00000360 	andeq	r0, r0, r0, ror #6
     468:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     46c:	00000028 	andeq	r0, r0, r8, lsr #32
     470:	40100e41 	andsmi	r0, r0, r1, asr #28
     474:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     478:	02854003 	addeq	r4, r5, #3
     47c:	00018e40 	andeq	r8, r1, r0, asr #28
     480:	00000018 	andeq	r0, r0, r8, lsl r0
     484:	00000360 	andeq	r0, r0, r0, ror #6
     488:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
     48c:	00000088 	andeq	r0, r0, r8, lsl #1
     490:	40080e41 	andmi	r0, r8, r1, asr #28
     494:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     498:	200e4201 	andcs	r4, lr, r1, lsl #4
     49c:	0000000c 	andeq	r0, r0, ip
     4a0:	00000360 	andeq	r0, r0, r0, ror #6
     4a4:	08001440 	stmdaeq	r0, {r6, sl, ip}
     4a8:	00000048 	andeq	r0, r0, r8, asr #32
     4ac:	0000000c 	andeq	r0, r0, ip
     4b0:	00000360 	andeq	r0, r0, r0, ror #6
     4b4:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
     4b8:	00000060 	andeq	r0, r0, r0, rrx
     4bc:	0000000c 	andeq	r0, r0, ip
     4c0:	00000360 	andeq	r0, r0, r0, ror #6
     4c4:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
     4c8:	00000014 	andeq	r0, r0, r4, lsl r0
     4cc:	0000000c 	andeq	r0, r0, ip
     4d0:	00000360 	andeq	r0, r0, r0, ror #6
     4d4:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
     4d8:	0000001c 	andeq	r0, r0, ip, lsl r0
     4dc:	0000000c 	andeq	r0, r0, ip
     4e0:	00000360 	andeq	r0, r0, r0, ror #6
     4e4:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
     4e8:	0000002c 	andeq	r0, r0, ip, lsr #32
     4ec:	00000018 	andeq	r0, r0, r8, lsl r0
     4f0:	00000360 	andeq	r0, r0, r0, ror #6
     4f4:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
     4f8:	00000018 	andeq	r0, r0, r8, lsl r0
     4fc:	40080e42 	andmi	r0, r8, r2, asr #28
     500:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     504:	00000001 	andeq	r0, r0, r1
     508:	0000000c 	andeq	r0, r0, ip
     50c:	00000360 	andeq	r0, r0, r0, ror #6
     510:	00000000 	andeq	r0, r0, r0
     514:	0000002c 	andeq	r0, r0, ip, lsr #32
     518:	0000001c 	andeq	r0, r0, ip, lsl r0
     51c:	00000360 	andeq	r0, r0, r0, ror #6
     520:	00000000 	andeq	r0, r0, r0
     524:	00000048 	andeq	r0, r0, r8, asr #32
     528:	40100e41 	andsmi	r0, r0, r1, asr #28
     52c:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     530:	02854003 	addeq	r4, r5, #3
     534:	00018e40 	andeq	r8, r1, r0, asr #28
     538:	00000018 	andeq	r0, r0, r8, lsl r0
     53c:	00000360 	andeq	r0, r0, r0, ror #6
     540:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
     544:	0000006c 	andeq	r0, r0, ip, rrx
     548:	400c0e42 	andmi	r0, ip, r2, asr #28
     54c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     550:	018e4002 	orreq	r4, lr, r2
     554:	0000000c 	andeq	r0, r0, ip
     558:	00000360 	andeq	r0, r0, r0, ror #6
     55c:	080015c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip}
     560:	00000024 	andeq	r0, r0, r4, lsr #32
     564:	00000018 	andeq	r0, r0, r8, lsl r0
     568:	00000360 	andeq	r0, r0, r0, ror #6
     56c:	080015ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip}
     570:	0000001e 	andeq	r0, r0, lr, lsl r0
     574:	40080e41 	andmi	r0, r8, r1, asr #28
     578:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     57c:	00000001 	andeq	r0, r0, r1
     580:	0000000c 	andeq	r0, r0, ip
     584:	00000360 	andeq	r0, r0, r0, ror #6
     588:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
     58c:	00000014 	andeq	r0, r0, r4, lsl r0
     590:	00000018 	andeq	r0, r0, r8, lsl r0
     594:	00000360 	andeq	r0, r0, r0, ror #6
     598:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
     59c:	00000034 	andeq	r0, r0, r4, lsr r0
     5a0:	40080e42 	andmi	r0, r8, r2, asr #28
     5a4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     5a8:	00000001 	andeq	r0, r0, r1
     5ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     5b0:	00000360 	andeq	r0, r0, r0, ror #6
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	00000030 	andeq	r0, r0, r0, lsr r0
     5bc:	40100e42 	andsmi	r0, r0, r2, asr #28
     5c0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     5c4:	02854003 	addeq	r4, r5, #3
     5c8:	00018e40 	andeq	r8, r1, r0, asr #28
     5cc:	00000024 	andeq	r0, r0, r4, lsr #32
     5d0:	00000360 	andeq	r0, r0, r0, ror #6
     5d4:	08001654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip}
     5d8:	0000004c 	andeq	r0, r0, ip, asr #32
     5dc:	40180e41 	andsmi	r0, r8, r1, asr #28
     5e0:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
     5e4:	04824005 	streq	r4, [r2], #5
     5e8:	40038440 	andmi	r8, r3, r0, asr #8
     5ec:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
     5f0:	00000001 	andeq	r0, r0, r1
     5f4:	0000000c 	andeq	r0, r0, ip
     5f8:	00000360 	andeq	r0, r0, r0, ror #6
     5fc:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
     600:	0000000c 	andeq	r0, r0, ip
     604:	0000000c 	andeq	r0, r0, ip
     608:	00000360 	andeq	r0, r0, r0, ror #6
     60c:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
     610:	00000018 	andeq	r0, r0, r8, lsl r0
     614:	0000000c 	andeq	r0, r0, ip
     618:	00000360 	andeq	r0, r0, r0, ror #6
     61c:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
     620:	00000012 	andeq	r0, r0, r2, lsl r0
     624:	0000000c 	andeq	r0, r0, ip
     628:	00000360 	andeq	r0, r0, r0, ror #6
     62c:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
     630:	00000010 	andeq	r0, r0, r0, lsl r0
     634:	0000000c 	andeq	r0, r0, ip
     638:	00000360 	andeq	r0, r0, r0, ror #6
     63c:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
     640:	00000018 	andeq	r0, r0, r8, lsl r0
     644:	0000000c 	andeq	r0, r0, ip
     648:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     64c:	7c020001 	stcvc	0, cr0, [r2], {1}
     650:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     654:	00000018 	andeq	r0, r0, r8, lsl r0
     658:	00000644 	andeq	r0, r0, r4, asr #12
     65c:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
     660:	00000088 	andeq	r0, r0, r8, lsl #1
     664:	40080e42 	andmi	r0, r8, r2, asr #28
     668:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     66c:	00000001 	andeq	r0, r0, r1
     670:	00000018 	andeq	r0, r0, r8, lsl r0
     674:	00000644 	andeq	r0, r0, r4, asr #12
     678:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
     67c:	00000044 	andeq	r0, r0, r4, asr #32
     680:	40080e41 	andmi	r0, r8, r1, asr #28
     684:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     688:	00000001 	andeq	r0, r0, r1
     68c:	0000000c 	andeq	r0, r0, ip
     690:	00000644 	andeq	r0, r0, r4, asr #12
     694:	00000000 	andeq	r0, r0, r0
     698:	00000002 	andeq	r0, r0, r2
     69c:	0000000c 	andeq	r0, r0, ip
     6a0:	00000644 	andeq	r0, r0, r4, asr #12
     6a4:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
     6ac:	0000000c 	andeq	r0, r0, ip
     6b0:	00000644 	andeq	r0, r0, r4, asr #12
     6b4:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
     6b8:	00000018 	andeq	r0, r0, r8, lsl r0
     6bc:	0000000c 	andeq	r0, r0, ip
     6c0:	00000644 	andeq	r0, r0, r4, asr #12
     6c4:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
     6c8:	00000028 	andeq	r0, r0, r8, lsr #32
     6cc:	0000000c 	andeq	r0, r0, ip
     6d0:	00000644 	andeq	r0, r0, r4, asr #12
     6d4:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
     6d8:	00000034 	andeq	r0, r0, r4, lsr r0
     6dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e0:	00000644 	andeq	r0, r0, r4, asr #12
     6e4:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
     6e8:	00000058 	andeq	r0, r0, r8, asr r0
     6ec:	40100e41 	andsmi	r0, r0, r1, asr #28
     6f0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
     6f4:	02854003 	addeq	r4, r5, #3
     6f8:	00018e40 	andeq	r8, r1, r0, asr #28
     6fc:	00000028 	andeq	r0, r0, r8, lsr #32
     700:	00000644 	andeq	r0, r0, r4, asr #12
     704:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
     708:	00000260 	andeq	r0, r0, r0, ror #4
     70c:	40200e42 	eormi	r0, r0, r2, asr #28
     710:	81400880 	smlalbbhi	r0, r0, r0, r8	; <UNPREDICTABLE>
     714:	06844007 	streq	r4, [r4], r7
     718:	40058540 	andmi	r8, r5, r0, asr #10
     71c:	87400486 	strbhi	r0, [r0, -r6, lsl #9]
     720:	02884003 	addeq	r4, r8, #3
     724:	00018e40 	andeq	r8, r1, r0, asr #28
     728:	0000000c 	andeq	r0, r0, ip
     72c:	00000644 	andeq	r0, r0, r4, asr #12
     730:	00000000 	andeq	r0, r0, r0
     734:	0000000c 	andeq	r0, r0, ip
     738:	0000000c 	andeq	r0, r0, ip
     73c:	00000644 	andeq	r0, r0, r4, asr #12
     740:	00000000 	andeq	r0, r0, r0
     744:	0000000c 	andeq	r0, r0, ip
     748:	0000000c 	andeq	r0, r0, ip
     74c:	00000644 	andeq	r0, r0, r4, asr #12
     750:	08001b10 	stmdaeq	r0, {r4, r8, r9, fp, ip}
     754:	0000000c 	andeq	r0, r0, ip
     758:	0000000c 	andeq	r0, r0, ip
     75c:	00000644 	andeq	r0, r0, r4, asr #12
     760:	00000000 	andeq	r0, r0, r0
     764:	0000001c 	andeq	r0, r0, ip, lsl r0
     768:	0000000c 	andeq	r0, r0, ip
     76c:	00000644 	andeq	r0, r0, r4, asr #12
     770:	08001b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip}
     774:	00000002 	andeq	r0, r0, r2
     778:	0000000c 	andeq	r0, r0, ip
     77c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     780:	7c020001 	stcvc	0, cr0, [r2], {1}
     784:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     788:	00000028 	andeq	r0, r0, r8, lsr #32
     78c:	00000778 	andeq	r0, r0, r8, ror r7
     790:	00000000 	andeq	r0, r0, r0
     794:	00000228 	andeq	r0, r0, r8, lsr #4
     798:	40180e42 	andsmi	r0, r8, r2, asr #28
     79c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     7a0:	04864005 	streq	r4, [r6], #5
     7a4:	40038740 	andmi	r8, r3, r0, asr #14
     7a8:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     7ac:	d80e4201 	stmdale	lr, {r0, r9, lr}
     7b0:	00000002 	andeq	r0, r0, r2
     7b4:	0000000c 	andeq	r0, r0, ip
     7b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     7bc:	7c020001 	stcvc	0, cr0, [r2], {1}
     7c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     7c4:	00000024 	andeq	r0, r0, r4, lsr #32
     7c8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     7cc:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
     7d0:	00000070 	andeq	r0, r0, r0, ror r0
     7d4:	40180e41 	andsmi	r0, r8, r1, asr #28
     7d8:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
     7dc:	04854005 	streq	r4, [r5], #5
     7e0:	40038640 	andmi	r8, r3, r0, asr #12
     7e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000020 	andeq	r0, r0, r0, lsr #32
     7f0:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     7f4:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
     7f8:	0000003a 	andeq	r0, r0, sl, lsr r0
     7fc:	40100e41 	andsmi	r0, r0, r1, asr #28
     800:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     804:	02864003 	addeq	r4, r6, #3
     808:	41018e40 	tstmi	r1, r0, asr #28
     80c:	0000300e 	andeq	r3, r0, lr
     810:	00000024 	andeq	r0, r0, r4, lsr #32
     814:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     818:	08001bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip}
     81c:	0000005e 	andeq	r0, r0, lr, asr r0
     820:	40140e41 	andsmi	r0, r4, r1, asr #28
     824:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     828:	03864004 	orreq	r4, r6, #4
     82c:	40028740 	andmi	r8, r2, r0, asr #14
     830:	0e44018e 	dvfeqd	f0, f4, #0.5
     834:	00000038 	andeq	r0, r0, r8, lsr r0
     838:	00000024 	andeq	r0, r0, r4, lsr #32
     83c:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     840:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
     844:	000000c8 	andeq	r0, r0, r8, asr #1
     848:	40180e42 	andsmi	r0, r8, r2, asr #28
     84c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     850:	04864005 	streq	r4, [r6], #5
     854:	40038740 	andmi	r8, r3, r0, asr #14
     858:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     85c:	780e5301 	stmdavc	lr, {r0, r8, r9, ip, lr}
     860:	00000028 	andeq	r0, r0, r8, lsr #32
     864:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     868:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
     86c:	000000e0 	andeq	r0, r0, r0, ror #1
     870:	40180e42 	andsmi	r0, r8, r2, asr #28
     874:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     878:	04864005 	streq	r4, [r6], #5
     87c:	40038740 	andmi	r8, r3, r0, asr #14
     880:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     884:	980e4201 	stmdals	lr, {r0, r9, lr}
     888:	00000002 	andeq	r0, r0, r2
     88c:	00000020 	andeq	r0, r0, r0, lsr #32
     890:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     894:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
     898:	000000b4 	strheq	r0, [r0], -r4
     89c:	40100e41 	andsmi	r0, r0, r1, asr #28
     8a0:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     8a4:	02864003 	addeq	r4, r6, #3
     8a8:	41018e40 	tstmi	r1, r0, asr #28
     8ac:	0001f00e 	andeq	pc, r1, lr
     8b0:	00000028 	andeq	r0, r0, r8, lsr #32
     8b4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     8b8:	08001e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip}
     8bc:	00000084 	andeq	r0, r0, r4, lsl #1
     8c0:	40180e42 	andsmi	r0, r8, r2, asr #28
     8c4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     8c8:	04864005 	streq	r4, [r6], #5
     8cc:	40038740 	andmi	r8, r3, r0, asr #14
     8d0:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     8d4:	980e4101 	stmdals	lr, {r0, r8, lr}
     8d8:	00000002 	andeq	r0, r0, r2
     8dc:	0000000c 	andeq	r0, r0, ip
     8e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     8e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     8e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     8ec:	00000024 	andeq	r0, r0, r4, lsr #32
     8f0:	000008dc 	ldrdeq	r0, [r0], -ip
     8f4:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
     8f8:	00000054 	andeq	r0, r0, r4, asr r0
     8fc:	40140e41 	andsmi	r0, r4, r1, asr #28
     900:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     904:	03864004 	orreq	r4, r6, #4
     908:	40028740 	andmi	r8, r2, r0, asr #14
     90c:	0e42018e 	dvfeqd	f0, f2, #0.5
     910:	00000058 	andeq	r0, r0, r8, asr r0
     914:	0000002c 	andeq	r0, r0, ip, lsr #32
     918:	000008dc 	ldrdeq	r0, [r0], -ip
     91c:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
     920:	0000009c 	muleq	r0, ip, r0
     924:	40200e42 	eormi	r0, r0, r2, asr #28
     928:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     92c:	06864007 	streq	r4, [r6], r7
     930:	40058740 	andmi	r8, r5, r0, asr #14
     934:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     938:	028a4003 	addeq	r4, sl, #3
     93c:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     940:	0000600e 	andeq	r6, r0, lr
     944:	0000001c 	andeq	r0, r0, ip, lsl r0
     948:	000008dc 	ldrdeq	r0, [r0], -ip
     94c:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
     950:	0000002c 	andeq	r0, r0, ip, lsr #32
     954:	40080e41 	andmi	r0, r8, r1, asr #28
     958:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     95c:	c80e4101 	stmdagt	lr, {r0, r8, lr}
     960:	00000001 	andeq	r0, r0, r1
     964:	00000018 	andeq	r0, r0, r8, lsl r0
     968:	000008dc 	ldrdeq	r0, [r0], -ip
     96c:	08002028 	stmdaeq	r0, {r3, r5, sp}
     970:	00000018 	andeq	r0, r0, r8, lsl r0
     974:	40080e41 	andmi	r0, r8, r1, asr #28
     978:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     97c:	480e4101 	stmdami	lr, {r0, r8, lr}
     980:	00000028 	andeq	r0, r0, r8, lsr #32
     984:	000008dc 	ldrdeq	r0, [r0], -ip
     988:	08002040 	stmdaeq	r0, {r6, sp}
     98c:	000000c0 	andeq	r0, r0, r0, asr #1
     990:	401c0e42 	andsmi	r0, ip, r2, asr #28
     994:	85400784 	strbhi	r0, [r0, #-1924]	; 0x784
     998:	05864006 	streq	r4, [r6, #6]
     99c:	40048740 	andmi	r8, r4, r0, asr #14
     9a0:	89400388 	stmdbhi	r0, {r3, r7, r8, r9}^
     9a4:	018e4002 	orreq	r4, lr, r2
     9a8:	02c80e41 	sbceq	r0, r8, #1040	; 0x410
     9ac:	00000028 	andeq	r0, r0, r8, lsr #32
     9b0:	000008dc 	ldrdeq	r0, [r0], -ip
     9b4:	08002100 	stmdaeq	r0, {r8, sp}
     9b8:	000000c0 	andeq	r0, r0, r0, asr #1
     9bc:	40180e42 	andsmi	r0, r8, r2, asr #28
     9c0:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     9c4:	04864005 	streq	r4, [r6], #5
     9c8:	40038740 	andmi	r8, r3, r0, asr #14
     9cc:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     9d0:	c00e4101 	andgt	r4, lr, r1, lsl #2
     9d4:	00000003 	andeq	r0, r0, r3
     9d8:	0000000c 	andeq	r0, r0, ip
     9dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     9e0:	7c020001 	stcvc	0, cr0, [r2], {1}
     9e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     9e8:	00000014 	andeq	r0, r0, r4, lsl r0
     9ec:	000009d8 	ldrdeq	r0, [r0], -r8
     9f0:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
     9f4:	0000001e 	andeq	r0, r0, lr, lsl r0
     9f8:	40040e41 	andmi	r0, r4, r1, asr #28
     9fc:	00000184 	andeq	r0, r0, r4, lsl #3
     a00:	00000018 	andeq	r0, r0, r8, lsl r0
     a04:	000009d8 	ldrdeq	r0, [r0], -r8
     a08:	080021e0 	stmdaeq	r0, {r5, r6, r7, r8, sp}
     a0c:	0000006e 	andeq	r0, r0, lr, rrx
     a10:	40040e41 	andmi	r0, r4, r1, asr #28
     a14:	0e420184 	dvfeqd	f0, f2, f4
     a18:	00000028 	andeq	r0, r0, r8, lsr #32
     a1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a20:	000009d8 	ldrdeq	r0, [r0], -r8
     a24:	08002250 	stmdaeq	r0, {r4, r6, r9, sp}
     a28:	0000009a 	muleq	r0, sl, r0
     a2c:	40100e44 	andsmi	r0, r0, r4, asr #28
     a30:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     a34:	02864003 	addeq	r4, r6, #3
     a38:	00018740 	andeq	r8, r1, r0, asr #14
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	000009d8 	ldrdeq	r0, [r0], -r8
     a44:	080022ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp}
     a48:	000000c2 	andeq	r0, r0, r2, asr #1
     a4c:	40100e41 	andsmi	r0, r0, r1, asr #28
     a50:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     a54:	02864003 	addeq	r4, r6, #3
     a58:	00018740 	andeq	r8, r1, r0, asr #14
     a5c:	00000018 	andeq	r0, r0, r8, lsl r0
     a60:	000009d8 	ldrdeq	r0, [r0], -r8
     a64:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
     a68:	00000046 	andeq	r0, r0, r6, asr #32
     a6c:	400c0e42 	andmi	r0, ip, r2, asr #28
     a70:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a74:	01864002 	orreq	r4, r6, r2
     a78:	00000018 	andeq	r0, r0, r8, lsl r0
     a7c:	000009d8 	ldrdeq	r0, [r0], -r8
     a80:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
     a84:	0000004c 	andeq	r0, r0, ip, asr #32
     a88:	400c0e41 	andmi	r0, ip, r1, asr #28
     a8c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     a90:	01864002 	orreq	r4, r6, r2
     a94:	00000014 	andeq	r0, r0, r4, lsl r0
     a98:	000009d8 	ldrdeq	r0, [r0], -r8
     a9c:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
     aa0:	00000046 	andeq	r0, r0, r6, asr #32
     aa4:	40040e41 	andmi	r0, r4, r1, asr #28
     aa8:	00000184 	andeq	r0, r0, r4, lsl #3
     aac:	00000024 	andeq	r0, r0, r4, lsr #32
     ab0:	000009d8 	ldrdeq	r0, [r0], -r8
     ab4:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
     ab8:	00000088 	andeq	r0, r0, r8, lsl #1
     abc:	40180e42 	andsmi	r0, r8, r2, asr #28
     ac0:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     ac4:	04864005 	streq	r4, [r6], #5
     ac8:	40038740 	andmi	r8, r3, r0, asr #14
     acc:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     ad0:	00000001 	andeq	r0, r0, r1
     ad4:	00000024 	andeq	r0, r0, r4, lsr #32
     ad8:	000009d8 	ldrdeq	r0, [r0], -r8
     adc:	00000000 	andeq	r0, r0, r0
     ae0:	000000b8 	strheq	r0, [r0], -r8
     ae4:	40180e42 	andsmi	r0, r8, r2, asr #28
     ae8:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     aec:	04864005 	streq	r4, [r6], #5
     af0:	40038740 	andmi	r8, r3, r0, asr #14
     af4:	89400288 	stmdbhi	r0, {r3, r7, r9}^
     af8:	380e4401 	stmdacc	lr, {r0, sl, lr}
     afc:	00000018 	andeq	r0, r0, r8, lsl r0
     b00:	000009d8 	ldrdeq	r0, [r0], -r8
     b04:	00000000 	andeq	r0, r0, r0
     b08:	00000040 	andeq	r0, r0, r0, asr #32
     b0c:	40080e42 	andmi	r0, r8, r2, asr #28
     b10:	85400284 	strbhi	r0, [r0, #-644]	; 0x284
     b14:	00000001 	andeq	r0, r0, r1
     b18:	0000002c 	andeq	r0, r0, ip, lsr #32
     b1c:	000009d8 	ldrdeq	r0, [r0], -r8
     b20:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
     b24:	000005ea 	andeq	r0, r0, sl, ror #11
     b28:	40200e42 	eormi	r0, r0, r2, asr #28
     b2c:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     b30:	06864007 	streq	r4, [r6], r7
     b34:	40058740 	andmi	r8, r5, r0, asr #14
     b38:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     b3c:	028a4003 	addeq	r4, sl, #3
     b40:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     b44:	0000400e 	andeq	r4, r0, lr
     b48:	0000001c 	andeq	r0, r0, ip, lsl r0
     b4c:	000009d8 	ldrdeq	r0, [r0], -r8
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00000026 	andeq	r0, r0, r6, lsr #32
     b58:	400c0e41 	andmi	r0, ip, r1, asr #28
     b5c:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     b60:	018e4002 	orreq	r4, lr, r2
     b64:	00300e41 	eorseq	r0, r0, r1, asr #28
     b68:	0000002c 	andeq	r0, r0, ip, lsr #32
     b6c:	000009d8 	ldrdeq	r0, [r0], -r8
     b70:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
     b74:	00000634 	andeq	r0, r0, r4, lsr r6
     b78:	40200e42 	eormi	r0, r0, r2, asr #28
     b7c:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     b80:	06864007 	streq	r4, [r6], r7
     b84:	40058740 	andmi	r8, r5, r0, asr #14
     b88:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     b8c:	028a4003 	addeq	r4, sl, #3
     b90:	42018b40 	andmi	r8, r1, #64, 22	; 0x10000
     b94:	0001b00e 	andeq	fp, r1, lr
     b98:	0000000c 	andeq	r0, r0, ip
     b9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ba0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ba4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ba8:	00000014 	andeq	r0, r0, r4, lsl r0
     bac:	00000b98 	muleq	r0, r8, fp
     bb0:	00000000 	andeq	r0, r0, r0
     bb4:	0000001e 	andeq	r0, r0, lr, lsl r0
     bb8:	40040e41 	andmi	r0, r4, r1, asr #28
     bbc:	00000184 	andeq	r0, r0, r4, lsl #3
     bc0:	00000030 	andeq	r0, r0, r0, lsr r0
     bc4:	00000b98 	muleq	r0, r8, fp
     bc8:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
     bcc:	000001a0 	andeq	r0, r0, r0, lsr #3
     bd0:	40240e42 	eormi	r0, r4, r2, asr #28
     bd4:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     bd8:	07864008 	streq	r4, [r6, r8]
     bdc:	40068740 	andmi	r8, r6, r0, asr #14
     be0:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     be4:	038a4004 	orreq	r4, sl, #4
     be8:	40028b40 	andmi	r8, r2, r0, asr #22
     bec:	0e42018e 	dvfeqd	f0, f2, #0.5
     bf0:	00000050 	andeq	r0, r0, r0, asr r0
     bf4:	0000001c 	andeq	r0, r0, ip, lsl r0
     bf8:	00000b98 	muleq	r0, r8, fp
     bfc:	00000000 	andeq	r0, r0, r0
     c00:	0000002c 	andeq	r0, r0, ip, lsr #32
     c04:	400c0e41 	andmi	r0, ip, r1, asr #28
     c08:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c0c:	018e4002 	orreq	r4, lr, r2
     c10:	00300e41 	eorseq	r0, r0, r1, asr #28
     c14:	0000001c 	andeq	r0, r0, ip, lsl r0
     c18:	00000b98 	muleq	r0, r8, fp
     c1c:	00000000 	andeq	r0, r0, r0
     c20:	0000009a 	muleq	r0, sl, r0
     c24:	40100e44 	andsmi	r0, r0, r4, asr #28
     c28:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     c2c:	02864003 	addeq	r4, r6, #3
     c30:	00018740 	andeq	r8, r1, r0, asr #14
     c34:	0000001c 	andeq	r0, r0, ip, lsl r0
     c38:	00000b98 	muleq	r0, r8, fp
     c3c:	00000000 	andeq	r0, r0, r0
     c40:	000000c2 	andeq	r0, r0, r2, asr #1
     c44:	40100e41 	andsmi	r0, r0, r1, asr #28
     c48:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     c4c:	02864003 	addeq	r4, r6, #3
     c50:	00018740 	andeq	r8, r1, r0, asr #14
     c54:	0000001c 	andeq	r0, r0, ip, lsl r0
     c58:	00000b98 	muleq	r0, r8, fp
     c5c:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
     c60:	00000058 	andeq	r0, r0, r8, asr r0
     c64:	400c0e41 	andmi	r0, ip, r1, asr #28
     c68:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c6c:	01864002 	orreq	r4, r6, r2
     c70:	00300e42 	eorseq	r0, r0, r2, asr #28
     c74:	0000001c 	andeq	r0, r0, ip, lsl r0
     c78:	00000b98 	muleq	r0, r8, fp
     c7c:	00000000 	andeq	r0, r0, r0
     c80:	0000008e 	andeq	r0, r0, lr, lsl #1
     c84:	400c0e41 	andmi	r0, ip, r1, asr #28
     c88:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
     c8c:	01864002 	orreq	r4, r6, r2
     c90:	00300e42 	eorseq	r0, r0, r2, asr #28
     c94:	00000030 	andeq	r0, r0, r0, lsr r0
     c98:	00000b98 	muleq	r0, r8, fp
     c9c:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
     ca0:	0000013e 	andeq	r0, r0, lr, lsr r1
     ca4:	40240e42 	eormi	r0, r4, r2, asr #28
     ca8:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     cac:	07864008 	streq	r4, [r6, r8]
     cb0:	40068740 	andmi	r8, r6, r0, asr #14
     cb4:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     cb8:	038a4004 	orreq	r4, sl, #4
     cbc:	40028b40 	andmi	r8, r2, r0, asr #22
     cc0:	0e42018e 	dvfeqd	f0, f2, #0.5
     cc4:	00000068 	andeq	r0, r0, r8, rrx
     cc8:	00000024 	andeq	r0, r0, r4, lsr #32
     ccc:	00000b98 	muleq	r0, r8, fp
     cd0:	00000000 	andeq	r0, r0, r0
     cd4:	000000d2 	ldrdeq	r0, [r0], -r2
     cd8:	40180e42 	andsmi	r0, r8, r2, asr #28
     cdc:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     ce0:	04864005 	streq	r4, [r6], #5
     ce4:	40038740 	andmi	r8, r3, r0, asr #14
     ce8:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     cec:	580e4301 	stmdapl	lr, {r0, r8, r9, lr}
     cf0:	0000000c 	andeq	r0, r0, ip
     cf4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     cf8:	7c020001 	stcvc	0, cr0, [r2], {1}
     cfc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d00:	00000020 	andeq	r0, r0, r0, lsr #32
     d04:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d08:	00000000 	andeq	r0, r0, r0
     d0c:	00000040 	andeq	r0, r0, r0, asr #32
     d10:	40100e41 	andsmi	r0, r0, r1, asr #28
     d14:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
     d18:	02864003 	addeq	r4, r6, #3
     d1c:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     d20:	0000500e 	andeq	r5, r0, lr
     d24:	00000024 	andeq	r0, r0, r4, lsr #32
     d28:	00000cf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	000000d4 	ldrdeq	r0, [r0], -r4
     d34:	40180e42 	andsmi	r0, r8, r2, asr #28
     d38:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     d3c:	04864005 	streq	r4, [r6], #5
     d40:	40038740 	andmi	r8, r3, r0, asr #14
     d44:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     d48:	780e4201 	stmdavc	lr, {r0, r9, lr}
     d4c:	0000000c 	andeq	r0, r0, ip
     d50:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d54:	7c020001 	stcvc	0, cr0, [r2], {1}
     d58:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d5c:	00000020 	andeq	r0, r0, r0, lsr #32
     d60:	00000d4c 	andeq	r0, r0, ip, asr #26
     d64:	0800346c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, sp}
     d68:	00000058 	andeq	r0, r0, r8, asr r0
     d6c:	40140e42 	andsmi	r0, r4, r2, asr #28
     d70:	85400584 	strbhi	r0, [r0, #-1412]	; 0x584
     d74:	03864004 	orreq	r4, r6, #4
     d78:	40028740 	andmi	r8, r2, r0, asr #14
     d7c:	00000188 	andeq	r0, r0, r8, lsl #3
     d80:	0000002c 	andeq	r0, r0, ip, lsr #32
     d84:	00000d4c 	andeq	r0, r0, ip, asr #26
     d88:	080034c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, sp}
     d8c:	00001f64 	andeq	r1, r0, r4, ror #30
     d90:	40200e42 	eormi	r0, r0, r2, asr #28
     d94:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     d98:	06864007 	streq	r4, [r6], r7
     d9c:	40058740 	andmi	r8, r5, r0, asr #14
     da0:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     da4:	028a4003 	addeq	r4, sl, #3
     da8:	41018b40 	tstmi	r1, r0, asr #22
     dac:	0001900e 	andeq	r9, r1, lr
     db0:	00000024 	andeq	r0, r0, r4, lsr #32
     db4:	00000d4c 	andeq	r0, r0, ip, asr #26
     db8:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
     dbc:	0000008e 	andeq	r0, r0, lr, lsl #1
     dc0:	40180e42 	andsmi	r0, r8, r2, asr #28
     dc4:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     dc8:	04864005 	streq	r4, [r6], #5
     dcc:	40038740 	andmi	r8, r3, r0, asr #14
     dd0:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     dd4:	00000001 	andeq	r0, r0, r1
     dd8:	00000030 	andeq	r0, r0, r0, lsr r0
     ddc:	00000d4c 	andeq	r0, r0, ip, asr #26
     de0:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
     de4:	00000218 	andeq	r0, r0, r8, lsl r2
     de8:	40240e42 	eormi	r0, r4, r2, asr #28
     dec:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     df0:	07864008 	streq	r4, [r6, r8]
     df4:	40068740 	andmi	r8, r6, r0, asr #14
     df8:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     dfc:	038a4004 	orreq	r4, sl, #4
     e00:	40028b40 	andmi	r8, r2, r0, asr #22
     e04:	0e46018e 	dvfeqd	f0, f6, #0.5
     e08:	00000030 	andeq	r0, r0, r0, lsr r0
     e0c:	0000000c 	andeq	r0, r0, ip
     e10:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e14:	7c020001 	stcvc	0, cr0, [r2], {1}
     e18:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e1c:	0000002c 	andeq	r0, r0, ip, lsr #32
     e20:	00000e0c 	andeq	r0, r0, ip, lsl #28
     e24:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
     e28:	00000494 	muleq	r0, r4, r4
     e2c:	40200e42 	eormi	r0, r0, r2, asr #28
     e30:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     e34:	06864007 	streq	r4, [r6], r7
     e38:	40058740 	andmi	r8, r5, r0, asr #14
     e3c:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     e40:	028a4003 	addeq	r4, sl, #3
     e44:	41018b40 	tstmi	r1, r0, asr #22
     e48:	0003b00e 	andeq	fp, r3, lr
     e4c:	0000002c 	andeq	r0, r0, ip, lsr #32
     e50:	00000e0c 	andeq	r0, r0, ip, lsl #28
     e54:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
     e58:	00000088 	andeq	r0, r0, r8, lsl #1
     e5c:	40200e42 	eormi	r0, r0, r2, asr #28
     e60:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
     e64:	06864007 	streq	r4, [r6], r7
     e68:	40058740 	andmi	r8, r5, r0, asr #14
     e6c:	89400488 	stmdbhi	r0, {r3, r7, sl}^
     e70:	028a4003 	addeq	r4, sl, #3
     e74:	42018e40 	andmi	r8, r1, #64, 28	; 0x400
     e78:	0001a00e 	andeq	sl, r1, lr
     e7c:	00000030 	andeq	r0, r0, r0, lsr r0
     e80:	00000e0c 	andeq	r0, r0, ip, lsl #28
     e84:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
     e88:	00000296 	muleq	r0, r6, r2
     e8c:	40240e42 	eormi	r0, r4, r2, asr #28
     e90:	85400984 	strbhi	r0, [r0, #-2436]	; 0x984
     e94:	07864008 	streq	r4, [r6, r8]
     e98:	40068740 	andmi	r8, r6, r0, asr #14
     e9c:	89400588 	stmdbhi	r0, {r3, r7, r8, sl}^
     ea0:	038a4004 	orreq	r4, sl, #4
     ea4:	40028b40 	andmi	r8, r2, r0, asr #22
     ea8:	0e42018e 	dvfeqd	f0, f2, #0.5
     eac:	00000190 	muleq	r0, r0, r1
     eb0:	0000000c 	andeq	r0, r0, ip
     eb4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eb8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ebc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ec0:	0000000c 	andeq	r0, r0, ip
     ec4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	00000018 	andeq	r0, r0, r8, lsl r0
     ed0:	0000000c 	andeq	r0, r0, ip
     ed4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	00000008 	andeq	r0, r0, r8
     ee0:	00000030 	andeq	r0, r0, r0, lsr r0
     ee4:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	00000100 	andeq	r0, r0, r0, lsl #2
     ef0:	40280e42 	eormi	r0, r8, r2, asr #28
     ef4:	84400a83 	strbhi	r0, [r0], #-2691	; 0xa83
     ef8:	08854009 	stmeq	r5, {r0, r3, lr}
     efc:	40078640 	andmi	r8, r7, r0, asr #12
     f00:	88400687 	stmdahi	r0, {r0, r1, r2, r7, r9, sl}^
     f04:	04894005 	streq	r4, [r9], #5
     f08:	40038a40 	andmi	r8, r3, r0, asr #20
     f0c:	8e40028b 	cdphi	2, 4, cr0, cr0, cr11, {4}
     f10:	00000001 	andeq	r0, r0, r1
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     f20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f24:	0000000c 	andeq	r0, r0, ip
     f28:	00000f14 	andeq	r0, r0, r4, lsl pc
     f2c:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
     f30:	0000000a 	andeq	r0, r0, sl
     f34:	0000000c 	andeq	r0, r0, ip
     f38:	00000f14 	andeq	r0, r0, r4, lsl pc
     f3c:	08005e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, lr}
     f40:	00000010 	andeq	r0, r0, r0, lsl r0
     f44:	00000034 	andeq	r0, r0, r4, lsr r0
     f48:	00000f14 	andeq	r0, r0, r4, lsl pc
     f4c:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
     f50:	000000d6 	ldrdeq	r0, [r0], -r6
     f54:	40300e42 	eorsmi	r0, r0, r2, asr #28
     f58:	81400c80 	smlalbbhi	r0, r0, r0, ip	; <UNPREDICTABLE>
     f5c:	0a82400b 	beq	fe090f90 <BootRAM+0xd001731>
     f60:	40098440 	andmi	r8, r9, r0, asr #8
     f64:	86400885 	strbhi	r0, [r0], -r5, lsl #17
     f68:	06874007 	streq	r4, [r7], r7
     f6c:	40058840 	andmi	r8, r5, r0, asr #16
     f70:	8a400489 	bhi	100219c <__Stack_Size+0x100199c>
     f74:	028b4003 	addeq	r4, fp, #3
     f78:	00018e40 	andeq	r8, r1, r0, asr #28
     f7c:	00000018 	andeq	r0, r0, r8, lsl r0
     f80:	00000f14 	andeq	r0, r0, r4, lsl pc
     f84:	08005f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}
     f88:	00000040 	andeq	r0, r0, r0, asr #32
     f8c:	40080e42 	andmi	r0, r8, r2, asr #28
     f90:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
     f94:	00000001 	andeq	r0, r0, r1
     f98:	0000000c 	andeq	r0, r0, ip
     f9c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fa0:	7c020001 	stcvc	0, cr0, [r2], {1}
     fa4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa8:	00000018 	andeq	r0, r0, r8, lsl r0
     fac:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     fb0:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
     fb4:	00000044 	andeq	r0, r0, r4, asr #32
     fb8:	40080e41 	andmi	r0, r8, r1, asr #28
     fbc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
     fc0:	00000001 	andeq	r0, r0, r1
     fc4:	00000028 	andeq	r0, r0, r8, lsr #32
     fc8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     fcc:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fd0:	000001dc 	ldrdeq	r0, [r0], -ip
     fd4:	40180e42 	andsmi	r0, r8, r2, asr #28
     fd8:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
     fdc:	04864005 	streq	r4, [r6], #5
     fe0:	40038740 	andmi	r8, r3, r0, asr #14
     fe4:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
     fe8:	f80e4101 			; <UNDEFINED> instruction: 0xf80e4101
     fec:	00000003 	andeq	r0, r0, r3
     ff0:	0000000c 	andeq	r0, r0, ip
     ff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ff8:	7c020001 	stcvc	0, cr0, [r2], {1}
     ffc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1000:	0000000c 	andeq	r0, r0, ip
    1004:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1008:	00000000 	andeq	r0, r0, r0
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	0000000c 	andeq	r0, r0, ip
    1014:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1018:	00000000 	andeq	r0, r0, r0
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	0000000c 	andeq	r0, r0, ip
    1024:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1028:	00000000 	andeq	r0, r0, r0
    102c:	0000000c 	andeq	r0, r0, ip
    1030:	0000000c 	andeq	r0, r0, ip
    1034:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1038:	00000000 	andeq	r0, r0, r0
    103c:	0000000c 	andeq	r0, r0, ip
    1040:	0000000c 	andeq	r0, r0, ip
    1044:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1048:	00000000 	andeq	r0, r0, r0
    104c:	0000000c 	andeq	r0, r0, ip
    1050:	0000000c 	andeq	r0, r0, ip
    1054:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1058:	00000000 	andeq	r0, r0, r0
    105c:	0000000c 	andeq	r0, r0, ip
    1060:	0000000c 	andeq	r0, r0, ip
    1064:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1068:	00000000 	andeq	r0, r0, r0
    106c:	0000000c 	andeq	r0, r0, ip
    1070:	0000000c 	andeq	r0, r0, ip
    1074:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1078:	00000000 	andeq	r0, r0, r0
    107c:	00000010 	andeq	r0, r0, r0, lsl r0
    1080:	0000000c 	andeq	r0, r0, ip
    1084:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1088:	00000000 	andeq	r0, r0, r0
    108c:	0000000c 	andeq	r0, r0, ip
    1090:	0000000c 	andeq	r0, r0, ip
    1094:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1098:	00000000 	andeq	r0, r0, r0
    109c:	0000000e 	andeq	r0, r0, lr
    10a0:	0000000c 	andeq	r0, r0, ip
    10a4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	00000010 	andeq	r0, r0, r0, lsl r0
    10b0:	0000000c 	andeq	r0, r0, ip
    10b4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10c0:	0000000c 	andeq	r0, r0, ip
    10c4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	00000012 	andeq	r0, r0, r2, lsl r0
    10d0:	0000000c 	andeq	r0, r0, ip
    10d4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10d8:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    10dc:	0000002a 	andeq	r0, r0, sl, lsr #32
    10e0:	0000000c 	andeq	r0, r0, ip
    10e4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10e8:	00000000 	andeq	r0, r0, r0
    10ec:	0000002a 	andeq	r0, r0, sl, lsr #32
    10f0:	0000000c 	andeq	r0, r0, ip
    10f4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	00000024 	andeq	r0, r0, r4, lsr #32
    1100:	0000000c 	andeq	r0, r0, ip
    1104:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1108:	00000000 	andeq	r0, r0, r0
    110c:	00000012 	andeq	r0, r0, r2, lsl r0
    1110:	0000000c 	andeq	r0, r0, ip
    1114:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1118:	00000000 	andeq	r0, r0, r0
    111c:	00000012 	andeq	r0, r0, r2, lsl r0
    1120:	0000000c 	andeq	r0, r0, ip
    1124:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1128:	00000000 	andeq	r0, r0, r0
    112c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1130:	0000000c 	andeq	r0, r0, ip
    1134:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1138:	08006202 	stmdaeq	r0, {r1, r9, sp, lr}
    113c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1148:	00000000 	andeq	r0, r0, r0
    114c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1150:	0000000c 	andeq	r0, r0, ip
    1154:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1158:	00000000 	andeq	r0, r0, r0
    115c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1160:	0000000c 	andeq	r0, r0, ip
    1164:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1168:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
    116c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1170:	0000000c 	andeq	r0, r0, ip
    1174:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1178:	00000000 	andeq	r0, r0, r0
    117c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1180:	0000000c 	andeq	r0, r0, ip
    1184:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1188:	00000000 	andeq	r0, r0, r0
    118c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1190:	0000000c 	andeq	r0, r0, ip
    1194:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1198:	00000000 	andeq	r0, r0, r0
    119c:	0000001c 	andeq	r0, r0, ip, lsl r0
    11a0:	0000000c 	andeq	r0, r0, ip
    11a4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	0000001a 	andeq	r0, r0, sl, lsl r0
    11b0:	0000000c 	andeq	r0, r0, ip
    11b4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	0000001a 	andeq	r0, r0, sl, lsl r0
    11c0:	0000000c 	andeq	r0, r0, ip
    11c4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11c8:	00000000 	andeq	r0, r0, r0
    11cc:	00000018 	andeq	r0, r0, r8, lsl r0
    11d0:	0000000c 	andeq	r0, r0, ip
    11d4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11d8:	00000000 	andeq	r0, r0, r0
    11dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11e0:	0000000c 	andeq	r0, r0, ip
    11e4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	00000020 	andeq	r0, r0, r0, lsr #32
    11f0:	0000000c 	andeq	r0, r0, ip
    11f4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    11f8:	00000000 	andeq	r0, r0, r0
    11fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1200:	0000000c 	andeq	r0, r0, ip
    1204:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1208:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
    120c:	00000020 	andeq	r0, r0, r0, lsr #32
    1210:	0000000c 	andeq	r0, r0, ip
    1214:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1218:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
    121c:	00000020 	andeq	r0, r0, r0, lsr #32
    1220:	0000000c 	andeq	r0, r0, ip
    1224:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1228:	00000000 	andeq	r0, r0, r0
    122c:	0000001e 	andeq	r0, r0, lr, lsl r0
    1230:	0000000c 	andeq	r0, r0, ip
    1234:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1238:	00000000 	andeq	r0, r0, r0
    123c:	00000012 	andeq	r0, r0, r2, lsl r0
    1240:	0000000c 	andeq	r0, r0, ip
    1244:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1248:	00000000 	andeq	r0, r0, r0
    124c:	00000020 	andeq	r0, r0, r0, lsr #32
    1250:	0000000c 	andeq	r0, r0, ip
    1254:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1258:	00000000 	andeq	r0, r0, r0
    125c:	00000020 	andeq	r0, r0, r0, lsr #32
    1260:	0000000c 	andeq	r0, r0, ip
    1264:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1268:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
    126c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1270:	0000000c 	andeq	r0, r0, ip
    1274:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1278:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    127c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1280:	0000000c 	andeq	r0, r0, ip
    1284:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1288:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
    128c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1290:	0000000c 	andeq	r0, r0, ip
    1294:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1298:	00000000 	andeq	r0, r0, r0
    129c:	00000026 	andeq	r0, r0, r6, lsr #32
    12a0:	0000000c 	andeq	r0, r0, ip
    12a4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12a8:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
    12ac:	00000040 	andeq	r0, r0, r0, asr #32
    12b0:	0000000c 	andeq	r0, r0, ip
    12b4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12b8:	00000000 	andeq	r0, r0, r0
    12bc:	00000020 	andeq	r0, r0, r0, lsr #32
    12c0:	0000000c 	andeq	r0, r0, ip
    12c4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	00000020 	andeq	r0, r0, r0, lsr #32
    12d0:	00000018 	andeq	r0, r0, r8, lsl r0
    12d4:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12d8:	00000000 	andeq	r0, r0, r0
    12dc:	00000038 	andeq	r0, r0, r8, lsr r0
    12e0:	40080e41 	andmi	r0, r8, r1, asr #28
    12e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    12e8:	00000001 	andeq	r0, r0, r1
    12ec:	0000000c 	andeq	r0, r0, ip
    12f0:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    12f4:	00000000 	andeq	r0, r0, r0
    12f8:	00000020 	andeq	r0, r0, r0, lsr #32
    12fc:	0000000c 	andeq	r0, r0, ip
    1300:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1304:	00000000 	andeq	r0, r0, r0
    1308:	00000020 	andeq	r0, r0, r0, lsr #32
    130c:	0000000c 	andeq	r0, r0, ip
    1310:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1314:	00000000 	andeq	r0, r0, r0
    1318:	0000001c 	andeq	r0, r0, ip, lsl r0
    131c:	0000000c 	andeq	r0, r0, ip
    1320:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1324:	00000000 	andeq	r0, r0, r0
    1328:	0000001c 	andeq	r0, r0, ip, lsl r0
    132c:	00000018 	andeq	r0, r0, r8, lsl r0
    1330:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1334:	00000000 	andeq	r0, r0, r0
    1338:	000000a8 	andeq	r0, r0, r8, lsr #1
    133c:	40080e42 	andmi	r0, r8, r2, asr #28
    1340:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1344:	00000001 	andeq	r0, r0, r1
    1348:	0000000c 	andeq	r0, r0, ip
    134c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1350:	00000000 	andeq	r0, r0, r0
    1354:	0000005c 	andeq	r0, r0, ip, asr r0
    1358:	0000000c 	andeq	r0, r0, ip
    135c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1360:	00000000 	andeq	r0, r0, r0
    1364:	0000005c 	andeq	r0, r0, ip, asr r0
    1368:	0000000c 	andeq	r0, r0, ip
    136c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1370:	00000000 	andeq	r0, r0, r0
    1374:	00000020 	andeq	r0, r0, r0, lsr #32
    1378:	0000000c 	andeq	r0, r0, ip
    137c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1380:	00000000 	andeq	r0, r0, r0
    1384:	00000020 	andeq	r0, r0, r0, lsr #32
    1388:	0000000c 	andeq	r0, r0, ip
    138c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1390:	00000000 	andeq	r0, r0, r0
    1394:	00000044 	andeq	r0, r0, r4, asr #32
    1398:	0000000c 	andeq	r0, r0, ip
    139c:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13a0:	00000000 	andeq	r0, r0, r0
    13a4:	0000003a 	andeq	r0, r0, sl, lsr r0
    13a8:	0000000c 	andeq	r0, r0, ip
    13ac:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13b0:	00000000 	andeq	r0, r0, r0
    13b4:	00000006 	andeq	r0, r0, r6
    13b8:	0000000c 	andeq	r0, r0, ip
    13bc:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    13c0:	00000000 	andeq	r0, r0, r0
    13c4:	0000000a 	andeq	r0, r0, sl
    13c8:	0000000c 	andeq	r0, r0, ip
    13cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13dc:	000013c8 	andeq	r1, r0, r8, asr #7
    13e0:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
    13e4:	00000154 	andeq	r0, r0, r4, asr r1
    13e8:	40100e41 	andsmi	r0, r0, r1, asr #28
    13ec:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
    13f0:	02864003 	addeq	r4, r6, #3
    13f4:	00018e40 	andeq	r8, r1, r0, asr #28
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
    13fc:	000013c8 	andeq	r1, r0, r8, asr #7
    1400:	00000000 	andeq	r0, r0, r0
    1404:	00000070 	andeq	r0, r0, r0, ror r0
    1408:	40080e41 	andmi	r0, r8, r1, asr #28
    140c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1410:	00000001 	andeq	r0, r0, r1
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    141c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1420:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1424:	00000018 	andeq	r0, r0, r8, lsl r0
    1428:	00001414 	andeq	r1, r0, r4, lsl r4
    142c:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
    1430:	00000038 	andeq	r0, r0, r8, lsr r0
    1434:	40080e41 	andmi	r0, r8, r1, asr #28
    1438:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    143c:	00000001 	andeq	r0, r0, r1
    1440:	0000000c 	andeq	r0, r0, ip
    1444:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1448:	7c020001 	stcvc	0, cr0, [r2], {1}
    144c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1450:	00000018 	andeq	r0, r0, r8, lsl r0
    1454:	00001440 	andeq	r1, r0, r0, asr #8
    1458:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
    145c:	00000024 	andeq	r0, r0, r4, lsr #32
    1460:	40080e41 	andmi	r0, r8, r1, asr #28
    1464:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1468:	00000001 	andeq	r0, r0, r1
    146c:	00000018 	andeq	r0, r0, r8, lsl r0
    1470:	00001440 	andeq	r1, r0, r0, asr #8
    1474:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
    1478:	00000024 	andeq	r0, r0, r4, lsr #32
    147c:	40080e41 	andmi	r0, r8, r1, asr #28
    1480:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1484:	00000001 	andeq	r0, r0, r1
    1488:	00000018 	andeq	r0, r0, r8, lsl r0
    148c:	00001440 	andeq	r1, r0, r0, asr #8
    1490:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
    1494:	00000090 	muleq	r0, r0, r0
    1498:	40080e41 	andmi	r0, r8, r1, asr #28
    149c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    14a0:	00000001 	andeq	r0, r0, r1
    14a4:	00000028 	andeq	r0, r0, r8, lsr #32
    14a8:	00001440 	andeq	r1, r0, r0, asr #8
    14ac:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
    14b0:	000000a8 	andeq	r0, r0, r8, lsr #1
    14b4:	40200e43 	eormi	r0, r0, r3, asr #28
    14b8:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
    14bc:	06854007 	streq	r4, [r5], r7
    14c0:	40058640 	andmi	r8, r5, r0, asr #12
    14c4:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
    14c8:	02894003 	addeq	r4, r9, #3
    14cc:	00018e40 	andeq	r8, r1, r0, asr #28
    14d0:	00000018 	andeq	r0, r0, r8, lsl r0
    14d4:	00001440 	andeq	r1, r0, r0, asr #8
    14d8:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
    14dc:	00000038 	andeq	r0, r0, r8, lsr r0
    14e0:	40080e41 	andmi	r0, r8, r1, asr #28
    14e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    14e8:	00000001 	andeq	r0, r0, r1
    14ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    14f0:	00001440 	andeq	r1, r0, r0, asr #8
    14f4:	08006654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, lr}
    14f8:	00000048 	andeq	r0, r0, r8, asr #32
    14fc:	40100e41 	andsmi	r0, r0, r1, asr #28
    1500:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1504:	02854003 	addeq	r4, r5, #3
    1508:	00018e40 	andeq	r8, r1, r0, asr #28
    150c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1510:	00001440 	andeq	r1, r0, r0, asr #8
    1514:	0800669c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp, lr}
    1518:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    151c:	40100e41 	andsmi	r0, r0, r1, asr #28
    1520:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1524:	02854003 	addeq	r4, r5, #3
    1528:	00018e40 	andeq	r8, r1, r0, asr #28
    152c:	0000001c 	andeq	r0, r0, ip, lsl r0
    1530:	00001440 	andeq	r1, r0, r0, asr #8
    1534:	0800676c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1538:	00000084 	andeq	r0, r0, r4, lsl #1
    153c:	40100e41 	andsmi	r0, r0, r1, asr #28
    1540:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
    1544:	02854003 	addeq	r4, r5, #3
    1548:	00018e40 	andeq	r8, r1, r0, asr #28
    154c:	00000018 	andeq	r0, r0, r8, lsl r0
    1550:	00001440 	andeq	r1, r0, r0, asr #8
    1554:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
    1558:	00000024 	andeq	r0, r0, r4, lsr #32
    155c:	40080e41 	andmi	r0, r8, r1, asr #28
    1560:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1564:	00000001 	andeq	r0, r0, r1
    1568:	0000000c 	andeq	r0, r0, ip
    156c:	00001440 	andeq	r1, r0, r0, asr #8
    1570:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
    1574:	0000001c 	andeq	r0, r0, ip, lsl r0
    1578:	00000018 	andeq	r0, r0, r8, lsl r0
    157c:	00001440 	andeq	r1, r0, r0, asr #8
    1580:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
    1584:	00000040 	andeq	r0, r0, r0, asr #32
    1588:	40080e41 	andmi	r0, r8, r1, asr #28
    158c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
    1590:	00000001 	andeq	r0, r0, r1
    1594:	00000024 	andeq	r0, r0, r4, lsr #32
    1598:	00001440 	andeq	r1, r0, r0, asr #8
    159c:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
    15a0:	000002dc 	ldrdeq	r0, [r0], -ip
    15a4:	40180e41 	andsmi	r0, r8, r1, asr #28
    15a8:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
    15ac:	04844005 	streq	r4, [r4], #5
    15b0:	40038540 	andmi	r8, r3, r0, asr #10
    15b4:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
    15b8:	00000001 	andeq	r0, r0, r1
    15bc:	00000024 	andeq	r0, r0, r4, lsr #32
    15c0:	00001440 	andeq	r1, r0, r0, asr #8
    15c4:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
    15c8:	000000c8 	andeq	r0, r0, r8, asr #1
    15cc:	40180e41 	andsmi	r0, r8, r1, asr #28
    15d0:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
    15d4:	04854005 	streq	r4, [r5], #5
    15d8:	40038640 	andmi	r8, r3, r0, asr #12
    15dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
    15e0:	00000001 	andeq	r0, r0, r1
    15e4:	00000018 	andeq	r0, r0, r8, lsl r0
    15e8:	00001440 	andeq	r1, r0, r0, asr #8
    15ec:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
    15f0:	00000038 	andeq	r0, r0, r8, lsr r0
    15f4:	400c0e41 	andmi	r0, ip, r1, asr #28
    15f8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    15fc:	018e4002 	orreq	r4, lr, r2
    1600:	00000018 	andeq	r0, r0, r8, lsl r0
    1604:	00001440 	andeq	r1, r0, r0, asr #8
    1608:	08006c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, sp, lr}
    160c:	0000005c 	andeq	r0, r0, ip, asr r0
    1610:	40080e41 	andmi	r0, r8, r1, asr #28
    1614:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1618:	00000001 	andeq	r0, r0, r1
    161c:	0000000c 	andeq	r0, r0, ip
    1620:	00001440 	andeq	r1, r0, r0, asr #8
    1624:	00000000 	andeq	r0, r0, r0
    1628:	00000002 	andeq	r0, r0, r2
    162c:	0000000c 	andeq	r0, r0, ip
    1630:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1634:	7c020001 	stcvc	0, cr0, [r2], {1}
    1638:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    163c:	00000018 	andeq	r0, r0, r8, lsl r0
    1640:	0000162c 	andeq	r1, r0, ip, lsr #12
    1644:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
    1648:	00000030 	andeq	r0, r0, r0, lsr r0
    164c:	400c0e41 	andmi	r0, ip, r1, asr #28
    1650:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
    1654:	018e4002 	orreq	r4, lr, r2
    1658:	00000018 	andeq	r0, r0, r8, lsl r0
    165c:	0000162c 	andeq	r1, r0, ip, lsr #12
    1660:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    1664:	00000024 	andeq	r0, r0, r4, lsr #32
    1668:	40080e41 	andmi	r0, r8, r1, asr #28
    166c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
    1670:	00000001 	andeq	r0, r0, r1
    1674:	0000000c 	andeq	r0, r0, ip
    1678:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    167c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1680:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1684:	00000014 	andeq	r0, r0, r4, lsl r0
    1688:	00001674 	andeq	r1, r0, r4, ror r6
    168c:	08006cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
    1690:	00000012 	andeq	r0, r0, r2, lsl r0
    1694:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1698:	00018e02 	andeq	r8, r1, r2, lsl #28
    169c:	0000000c 	andeq	r0, r0, ip
    16a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16a4:	7c020001 	stcvc	0, cr0, [r2], {1}
    16a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16ac:	0000000c 	andeq	r0, r0, ip
    16b0:	0000169c 	muleq	r0, ip, r6
    16b4:	08006d0e 	stmdaeq	r0, {r1, r2, r3, r8, sl, fp, sp, lr}
    16b8:	00000010 	andeq	r0, r0, r0, lsl r0
    16bc:	0000000c 	andeq	r0, r0, ip
    16c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    16c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    16c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    16cc:	00000020 	andeq	r0, r0, r0, lsr #32
    16d0:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
    16d4:	00000000 	andeq	r0, r0, r0
    16d8:	00000040 	andeq	r0, r0, r0, asr #32
    16dc:	82080e41 	andhi	r0, r8, #1040	; 0x410
    16e0:	41018302 	tstmi	r1, r2, lsl #6
    16e4:	0484100e 	streq	r1, [r4], #14
    16e8:	0e41038e 	cdpeq	3, 4, cr0, cr1, cr14, {4}
    16ec:	00000180 	andeq	r0, r0, r0, lsl #3
    16f0:	00000020 	andeq	r0, r0, r0, lsr #32
    16f4:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
    16f8:	08006d20 	stmdaeq	r0, {r5, r8, sl, fp, sp, lr}
    16fc:	00000048 	andeq	r0, r0, r8, asr #32
    1700:	810c0e41 	tsthi	ip, r1, asr #28
    1704:	83028203 	movwhi	r8, #8707	; 0x2203
    1708:	100e4101 	andne	r4, lr, r1, lsl #2
    170c:	0e43048e 	cdpeq	4, 4, cr0, cr3, cr14, {4}
    1710:	00000180 	andeq	r0, r0, r0, lsl #3
    1714:	0000000c 	andeq	r0, r0, ip
    1718:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    171c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1720:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1724:	0000000c 	andeq	r0, r0, ip
    1728:	00001714 	andeq	r1, r0, r4, lsl r7
    172c:	08006d68 	stmdaeq	r0, {r3, r5, r6, r8, sl, fp, sp, lr}
    1730:	00000010 	andeq	r0, r0, r0, lsl r0
    1734:	0000000c 	andeq	r0, r0, ip
    1738:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    173c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1740:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1744:	00000020 	andeq	r0, r0, r0, lsr #32
    1748:	00001734 	andeq	r1, r0, r4, lsr r7
    174c:	08006d78 	stmdaeq	r0, {r3, r4, r5, r6, r8, sl, fp, sp, lr}
    1750:	000000b8 	strheq	r0, [r0], -r8
    1754:	84200e42 	strthi	r0, [r0], #-3650	; 0xe42
    1758:	86078508 	strhi	r8, [r7], -r8, lsl #10
    175c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1760:	8a038904 	bhi	e3b78 <__Stack_Size+0xe3378>
    1764:	00018e02 	andeq	r8, r1, r2, lsl #28
    1768:	00000028 	andeq	r0, r0, r8, lsr #32
    176c:	00001734 	andeq	r1, r0, r4, lsr r7
    1770:	00000000 	andeq	r0, r0, r0
    1774:	000000f2 	strdeq	r0, [r0], -r2
    1778:	80300e42 	eorshi	r0, r0, r2, asr #28
    177c:	820b810c 	andhi	r8, fp, #12, 2
    1780:	8509840a 	strhi	r8, [r9, #-1034]	; 0x40a
    1784:	87078608 	strhi	r8, [r7, -r8, lsl #12]
    1788:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
    178c:	8b038a04 	blhi	e3fa4 <__Stack_Size+0xe37a4>
    1790:	00018e02 	andeq	r8, r1, r2, lsl #28
    1794:	00000024 	andeq	r0, r0, r4, lsr #32
    1798:	00001734 	andeq	r1, r0, r4, lsr r7
    179c:	08006e30 	stmdaeq	r0, {r4, r5, r9, sl, fp, sp, lr}
    17a0:	000001d8 	ldrdeq	r0, [r0], -r8
    17a4:	841c0e42 	ldrhi	r0, [ip], #-3650	; 0xe42
    17a8:	86068507 	strhi	r8, [r6], -r7, lsl #10
    17ac:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
    17b0:	8e028903 	cdphi	9, 0, cr8, cr2, cr3, {0}
    17b4:	900e4101 	andls	r4, lr, r1, lsl #2
    17b8:	00000001 	andeq	r0, r0, r1
    17bc:	0000000c 	andeq	r0, r0, ip
    17c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    17c4:	7c020001 	stcvc	0, cr0, [r2], {1}
    17c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    17cc:	00000020 	andeq	r0, r0, r0, lsr #32
    17d0:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    17d4:	08007008 	stmdaeq	r0, {r3, ip, sp, lr}
    17d8:	000000e4 	andeq	r0, r0, r4, ror #1
    17dc:	83200e42 	teqhi	r0, #1056	; 0x420
    17e0:	85078408 	strhi	r8, [r7, #-1032]	; 0x408
    17e4:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    17e8:	89038804 	stmdbhi	r3, {r2, fp, pc}
    17ec:	00018e02 	andeq	r8, r1, r2, lsl #28
    17f0:	00000028 	andeq	r0, r0, r8, lsr #32
    17f4:	000017bc 			; <UNDEFINED> instruction: 0x000017bc
    17f8:	080070ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, ip, sp, lr}
    17fc:	00000228 	andeq	r0, r0, r8, lsr #4
    1800:	80300e42 	eorshi	r0, r0, r2, asr #28
    1804:	820b810c 	andhi	r8, fp, #12, 2
    1808:	8409830a 	strhi	r8, [r9], #-778	; 0x30a
    180c:	86078508 	strhi	r8, [r7], -r8, lsl #10
    1810:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
    1814:	8a038904 	bhi	e3c2c <__Stack_Size+0xe342c>
    1818:	00018e02 	andeq	r8, r1, r2, lsl #28
    181c:	0000000c 	andeq	r0, r0, ip
    1820:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1824:	7c020001 	stcvc	0, cr0, [r2], {1}
    1828:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    182c:	00000018 	andeq	r0, r0, r8, lsl r0
    1830:	0000181c 	andeq	r1, r0, ip, lsl r8
    1834:	08007314 	stmdaeq	r0, {r2, r4, r8, r9, ip, sp, lr}
    1838:	00000030 	andeq	r0, r0, r0, lsr r0
    183c:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1840:	41018e02 	tstmi	r1, r2, lsl #28
    1844:	0000700e 	andeq	r7, r0, lr
    1848:	00000018 	andeq	r0, r0, r8, lsl r0
    184c:	0000181c 	andeq	r1, r0, ip, lsl r8
    1850:	08007344 	stmdaeq	r0, {r2, r6, r8, r9, ip, sp, lr}
    1854:	0000001c 	andeq	r0, r0, ip, lsl r0
    1858:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    185c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1860:	00000001 	andeq	r0, r0, r1
    1864:	0000000c 	andeq	r0, r0, ip
    1868:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    186c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1870:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1874:	00000014 	andeq	r0, r0, r4, lsl r0
    1878:	00001864 	andeq	r1, r0, r4, ror #16
    187c:	08007360 	stmdaeq	r0, {r5, r6, r8, r9, ip, sp, lr}
    1880:	0000001c 	andeq	r0, r0, ip, lsl r0
    1884:	84080e41 	strhi	r0, [r8], #-3649	; 0xe41
    1888:	00018e02 	andeq	r8, r1, r2, lsl #28
    188c:	0000000c 	andeq	r0, r0, ip
    1890:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1894:	7c020001 	stcvc	0, cr0, [r2], {1}
    1898:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    189c:	00000018 	andeq	r0, r0, r8, lsl r0
    18a0:	0000188c 	andeq	r1, r0, ip, lsl #17
    18a4:	0800737c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    18a8:	00000036 	andeq	r0, r0, r6, lsr r0
    18ac:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    18b0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    18b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    18b8:	0000000c 	andeq	r0, r0, ip
    18bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18c0:	7c020001 	stcvc	0, cr0, [r2], {1}
    18c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18c8:	00000018 	andeq	r0, r0, r8, lsl r0
    18cc:	000018b8 			; <UNDEFINED> instruction: 0x000018b8
    18d0:	080073b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, ip, sp, lr}
    18d4:	00000088 	andeq	r0, r0, r8, lsl #1
    18d8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xe41
    18dc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    18e0:	00000001 	andeq	r0, r0, r1
    18e4:	0000000c 	andeq	r0, r0, ip
    18e8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    18ec:	7c020001 	stcvc	0, cr0, [r2], {1}
    18f0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    18f4:	00000018 	andeq	r0, r0, r8, lsl r0
    18f8:	000018e4 	andeq	r1, r0, r4, ror #17
    18fc:	0800743c 	stmdaeq	r0, {r2, r3, r4, r5, sl, ip, sp, lr}
    1900:	000000a8 	andeq	r0, r0, r8, lsr #1
    1904:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xe41
    1908:	86038504 	strhi	r8, [r3], -r4, lsl #10
    190c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1910:	0000000c 	andeq	r0, r0, ip
    1914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1918:	7c020001 	stcvc	0, cr0, [r2], {1}
    191c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1920:	0000001c 	andeq	r0, r0, ip, lsl r0
    1924:	00001910 	andeq	r1, r0, r0, lsl r9
    1928:	080074e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp, lr}
    192c:	0000004c 	andeq	r0, r0, ip, asr #32
    1930:	83180e41 	tsthi	r8, #1040	; 0x410
    1934:	85058406 	strhi	r8, [r5, #-1030]	; 0x406
    1938:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    193c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1940:	0000000c 	andeq	r0, r0, ip
    1944:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1948:	7c020001 	stcvc	0, cr0, [r2], {1}
    194c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1950:	00000018 	andeq	r0, r0, r8, lsl r0
    1954:	00001940 	andeq	r1, r0, r0, asr #18
    1958:	08007530 	stmdaeq	r0, {r4, r5, r8, sl, ip, sp, lr}
    195c:	00000020 	andeq	r0, r0, r0, lsr #32
    1960:	83100e41 	tsthi	r0, #1040	; 0x410
    1964:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    1968:	00018e02 	andeq	r8, r1, r2, lsl #28
    196c:	0000000c 	andeq	r0, r0, ip
    1970:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1974:	7c020001 	stcvc	0, cr0, [r2], {1}
    1978:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    197c:	0000000c 	andeq	r0, r0, ip
    1980:	0000196c 	andeq	r1, r0, ip, ror #18
    1984:	08007550 	stmdaeq	r0, {r4, r6, r8, sl, ip, sp, lr}
    1988:	00000012 	andeq	r0, r0, r2, lsl r0
    198c:	0000000c 	andeq	r0, r0, ip
    1990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1994:	7c020001 	stcvc	0, cr0, [r2], {1}
    1998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    199c:	00000018 	andeq	r0, r0, r8, lsl r0
    19a0:	0000198c 	andeq	r1, r0, ip, lsl #19
    19a4:	00000000 	andeq	r0, r0, r0
    19a8:	0000001a 	andeq	r0, r0, sl, lsl r0
    19ac:	83100e41 	tsthi	r0, #1040	; 0x410
    19b0:	85038404 	strhi	r8, [r3, #-1028]	; 0x404
    19b4:	00018e02 	andeq	r8, r1, r2, lsl #28
    19b8:	00000018 	andeq	r0, r0, r8, lsl r0
    19bc:	0000198c 	andeq	r1, r0, ip, lsl #19
    19c0:	00000000 	andeq	r0, r0, r0
    19c4:	000000bc 	strheq	r0, [r0], -ip
    19c8:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xe42
    19cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
    19d0:	00018e02 	andeq	r8, r1, r2, lsl #28
    19d4:	0000000c 	andeq	r0, r0, ip
    19d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    19dc:	7c020001 	stcvc	0, cr0, [r2], {1}
    19e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    19e4:	0000000c 	andeq	r0, r0, ip
    19e8:	000019d4 	ldrdeq	r1, [r0], -r4
    19ec:	08007564 	stmdaeq	r0, {r2, r5, r6, r8, sl, ip, sp, lr}
    19f0:	00000034 	andeq	r0, r0, r4, lsr r0

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	31425041 	cmpcc	r2, r1, asr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00524e45 	subseq	r4, r2, r5, asr #28
       8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
       c:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
      14:	42535500 	subsmi	r5, r3, #0, 10
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	71655262 	cmnvc	r5, r2, ror #4
      1c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	72747300 	rsbsvc	r7, r4, #0, 6
      24:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
      28:	50410078 	subpl	r0, r1, r8, ror r0
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	53523242 	cmppl	r2, #536870916	; 0x20000004
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	4f005254 	svcmi	0x00005254
      34:	6544656e 	strbvs	r6, [r4, #-1390]	; 0x56e
      38:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f387500 	svcpl	0x00387500
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
      48:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      4c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	70697263 	rsbvc	r7, r9, r3, ror #4
      54:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
      58:	75005546 	strvc	r5, [r0, #-1350]	; 0x546
      5c:	6e496273 	mcrvs	2, 2, r6, cr9, cr3, {3}
      60:	69007469 	stmdbvs	r0, {r0, r3, r5, r6, sl, ip, sp, lr}
      64:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
      68:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
      6c:	616c4300 	cmnvs	ip, r0, lsl #6
      70:	4e5f7373 	mrcmi	3, 2, r7, cr15, cr3, {3}
      74:	7461446f 	strbtvc	r4, [r1], #-1135	; 0x46f
      78:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
      7c:	00707574 	rsbseq	r7, r0, r4, ror r5
      80:	44627375 	strbtmi	r7, [r2], #-885	; 0x375
      84:	53496273 	movtpl	r6, #37491	; 0x9273
      88:	555f0052 	ldrbpl	r0, [pc, #-82]	; 3e <_Minimum_Stack_Size-0xc2>
      8c:	5f524553 	svcpl	0x00524553
      90:	4e415453 	mcrmi	4, 2, r5, cr1, cr3, {2}
      94:	44524144 	ldrbmi	r4, [r2], #-324	; 0x144
      98:	5145525f 	cmppl	r5, pc, asr r2
      9c:	54534555 	ldrbpl	r4, [r3], #-1365	; 0x555
      a0:	73550053 	cmpvc	r5, #83	; 0x53
      a4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	72547700 	subsvc	r7, r4, #0, 14
      b4:	66736e61 	ldrbtvs	r6, [r3], -r1, ror #28
			*plainchar    = (fragment & 0x003) << 6;
      b8:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
      bc:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
      c0:	4c5f4253 	lfmmi	f4, 2, [pc], {83}	; 0x53
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c4:	41435f50 	cmpmi	r3, r0, asr pc
      c8:	525f314e 	subspl	r3, pc, #-2147483629	; 0x80000013
				{
					state_in->step = step_d;
      cc:	495f3058 	ldmdbmi	pc, {r3, r4, r6, ip, sp}^	; <UNPREDICTABLE>
					state_in->plainchar = *plainchar;
      d0:	61485152 	cmpvs	r8, r2, asr r1
					return plainchar - plaintext_out;
      d4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
      d8:	73750072 	cmnvc	r5, #114	; 0x72
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
      e0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      e8:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	50424100 	subpl	r4, r2, r0, lsl #2
      f4:	54535231 	ldrbpl	r5, [r3], #-561	; 0x231
		}
      f8:	525f0052 	subspl	r0, pc, #82	; 0x52
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     104:	00455441 	subeq	r5, r5, r1, asr #8

	f25519_sub(a, x1sq, z1sq);
     108:	68746f6e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     10c:	50676e69 	rsbpl	r6, r7, r9, ror #28
	f25519_mul__distinct(x3, a, a);
     110:	00636f72 	rsbeq	r6, r3, r2, ror pc
     114:	5645445f 			; <UNDEFINED> instruction: 0x5645445f
     118:	5f454349 	svcpl	0x00454349

	f25519_mul_c(a, x1z1, 486662);
     11c:	4f464e49 	svcmi	0x00464e49
     120:	62737500 	rsbsvs	r7, r3, #0, 10
	f25519_add(a, x1sq, a);
     124:	61446f4e 	cmpvs	r4, lr, asr #30
     128:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     12c:	00707574 	rsbseq	r7, r0, r4, ror r5
	f25519_add(a, z1sq, a);
     130:	5f425355 	svcpl	0x00425355
     134:	55534e55 	ldrbpl	r4, [r3, #-3669]	; 0xe55
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	524f5050 	subpl	r5, pc, #80	; 0x50
     13c:	50700054 	rsbspl	r0, r0, r4, asr r0
     140:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
	f25519_mul_c(z3, x1sq, 4);
     144:	00797472 	rsbseq	r7, r9, r2, ror r4
     148:	77425355 	smlsldvc	r5, r2, r5, r3
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	75007378 	strvc	r7, [r0, #-888]	; 0x378
     154:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
	f25519_sub(b, x3, z3); /* D */
     158:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     15c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
	f25519_mul__distinct(da, a, b);
     160:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     164:	52006e6f 	andpl	r6, r0, #1776	; 0x6f0
     168:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec

	f25519_sub(b, x2, z2);
     16c:	41575f45 	cmpmi	r7, r5, asr #30
     170:	61005449 	tstvs	r0, r9, asr #8
	f25519_add(a, x3, z3); /* C */
     174:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     178:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     17c:	4e450067 	cdpmi	0, 4, cr0, cr5, cr7, {3}
	f25519_mul__distinct(cb, a, b);
     180:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
     184:	525f544e 	subspl	r5, pc, #1308622848	; 0x4e000000

	f25519_add(a, da, cb);
     188:	50494345 	subpl	r4, r9, r5, asr #6
     18c:	544e4549 	strbpl	r4, [lr], #-1353	; 0x549
     190:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
	f25519_mul__distinct(b, a, a);
     194:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     198:	76654474 			; <UNDEFINED> instruction: 0x76654474
	f25519_mul__distinct(x5, z1, b);
     19c:	46656369 	strbtmi	r6, [r5], -r9, ror #6
     1a0:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     1a4:	54006572 	strpl	r6, [r0], #-1394	; 0x572

	f25519_sub(a, da, cb);
     1a8:	00455552 	subeq	r5, r5, r2, asr r5
     1ac:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
	f25519_mul__distinct(b, a, a);
     1b0:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     1b4:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     1b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	00737365 	rsbseq	r7, r3, r5, ror #6
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	47627375 			; <UNDEFINED> instruction: 0x47627375
     1c4:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1c8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     1cc:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     1d0:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     1d4:	5500726f 	strpl	r7, [r0, #-623]	; 0x26f
		f25519_select(zm1, zm1, zm, bit);
     1d8:	775f6273 			; <UNDEFINED> instruction: 0x775f6273
     1dc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     1e0:	76006874 			; <UNDEFINED> instruction: 0x76006874
		f25519_select(xm, xm, xms, bit);
     1e4:	00363175 	eorseq	r3, r6, r5, ror r1
     1e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     1ec:	616d726f 	cmnvs	sp, pc, ror #4
		f25519_select(zm, zm, zms, bit);
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     1f8:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	79547469 	ldmdbvc	r4, {r0, r3, r5, r6, sl, ip, sp, lr}^
     200:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	73750066 	cmnvc	r5, #102	; 0x66
     208:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
	f25519_mul__distinct(result, zm1, xm);
     20c:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     210:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
	f25519_normalize(result);
     214:	6f697461 	svcvs	0x00697461
     218:	6544006e 	strbvs	r0, [r4, #-110]	; 0x6e
}
     21c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     220:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     224:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     228:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     22c:	646e4574 	strbtvs	r4, [lr], #-1396	; 0x574
     230:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     234:	61654674 	smcvs	21604	; 0x5464
     238:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     23c:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     240:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     244:	5f544e45 	svcpl	0x00544e45
     248:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0x954
     24c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     250:	6f6c2067 	svcvs	0x006c2067
     254:	7520676e 	strvc	r6, [r0, #-1902]!	; 0x76e
     258:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     25c:	2064656e 	rsbcs	r6, r4, lr, ror #10
     260:	00746e69 	rsbseq	r6, r4, r9, ror #28
     264:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
     268:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
     26c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     270:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     274:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     278:	6144726f 	cmpvs	r4, pc, ror #4
     27c:	63006174 	movwvs	r6, #372	; 0x174
     280:	73614d72 	cmnvc	r1, #7296	; 0x1c80
     284:	5355006b 	cmppl	r5, #107	; 0x6b
     288:	55535f42 	ldrbpl	r5, [r3, #-3906]	; 0xf42
     28c:	53454343 	movtpl	r4, #21315	; 0x5343
     290:	53550053 	cmppl	r5, #83	; 0x53
     294:	6e495f42 	cdpvs	15, 4, cr5, cr9, cr2, {2}
     298:	55007469 	strpl	r7, [r0, #-1129]	; 0x469
     29c:	5f726573 	svcpl	0x00726573
     2a0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     2a4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     2a8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     2ac:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     2b0:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     2b4:	76654474 			; <UNDEFINED> instruction: 0x76654474
     2b8:	41656369 	cmnmi	r5, r9, ror #6
     2bc:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0x464
     2c0:	43007373 	movwmi	r7, #883	; 0x373
     2c4:	7373616c 	cmnvc	r3, #108, 2
     2c8:	7461445f 	strbtvc	r4, [r1], #-1119	; 0x45f
     2cc:	65535f61 	ldrbvs	r5, [r3, #-3937]	; 0xf61
     2d0:	00707574 	rsbseq	r7, r0, r4, ror r5
     2d4:	47627375 			; <UNDEFINED> instruction: 0x47627375
     2d8:	65447465 	strbvs	r7, [r4, #-1125]	; 0x465
     2dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     2e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     2e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     2e8:	4400726f 	strmi	r7, [r0], #-623	; 0x26f
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	72505f65 	subsvc	r5, r0, #404	; 0x194
     2f4:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
     2f8:	62007974 	andvs	r7, r0, #116, 18	; 0x1d0000
     2fc:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     300:	74536563 	ldrbvc	r6, [r3], #-1379	; 0x563
     304:	00657461 	rsbeq	r7, r5, r1, ror #8
     308:	4f534562 	svcmi	0x00534562
     30c:	746e6346 	strbtvc	r6, [lr], #-838	; 0x346
     310:	42535500 	subsmi	r5, r3, #0, 10
     314:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
     318:	00736575 	rsbseq	r6, r3, r5, ror r5
     31c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     320:	455f454d 	ldrbmi	r4, [pc, #-1357]	; fffffddb <BootRAM+0xef7057c>
     324:	00464f53 	subeq	r4, r6, r3, asr pc
     328:	41627375 	smcmi	10037	; 0x2735
     32c:	6e497070 	mcrvs	0, 2, r7, cr9, cr0, {3}
     330:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     334:	545f4343 	ldrbpl	r4, [pc], #-835	; 33c <_Minimum_Stack_Size+0x23c>
     338:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     33c:	75006665 	strvc	r6, [r0, #-1637]	; 0x665
     340:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     344:	6e754674 	mrcvs	6, 3, r4, cr5, cr4, {3}
     348:	6f697463 	svcvs	0x00697463
     34c:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     350:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     354:	6f747069 	svcvs	0x00747069
     358:	75760072 	ldrbvc	r0, [r6, #-114]!	; 0x72
     35c:	67003233 	smladxvs	r0, r3, r2, r3
     360:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
     364:	50687361 	rsbpl	r7, r8, r1, ror #6
     368:	53656761 	cmnpl	r5, #25427968	; 0x1840000
     36c:	00657a69 	rsbeq	r7, r5, r9, ror #20
     370:	61746f54 	cmnvs	r4, r4, asr pc
     374:	6e455f6c 	cdpvs	15, 4, cr5, cr5, cr12, {3}
     378:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
     37c:	5300746e 	movwpl	r7, #1134	; 0x46e
     380:	50457465 	subpl	r7, r5, r5, ror #8
     384:	61567852 	cmpvs	r6, r2, asr r8
     388:	0064696c 	rsbeq	r6, r4, ip, ror #18
     38c:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     390:	4f5f454d 	svcmi	0x005f454d
     394:	564e004e 	strbpl	r0, [lr], -lr, asr #32
     398:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     39c:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     3a0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     3a4:	646d436c 	strbtvs	r4, [sp], #-876	; 0x36c
     3a8:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     3ac:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     3b0:	4f52505f 	svcmi	0x0052505f
     3b4:	73750050 	cmnvc	r5, #80	; 0x50
     3b8:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     3bc:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     3c0:	65446769 	strbvs	r6, [r4, #-1897]	; 0x769
     3c4:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     3c8:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     3cc:	44444100 	strbmi	r4, [r4], #-256	; 0x100
     3d0:	53534552 	cmppl	r3, #343932928	; 0x14800000
     3d4:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     3d8:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     3dc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     3e0:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     3e4:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     3e8:	7500726f 	strvc	r7, [r0, #-623]	; 0x26f
     3ec:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     3f0:	73654400 	cmnvc	r5, #0, 8
     3f4:	70697263 	rsbvc	r7, r9, r3, ror #4
     3f8:	5f726f74 	svcpl	0x00726f74
     3fc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     400:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     404:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     408:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     40c:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     410:	00657275 	rsbeq	r7, r5, r5, ror r2
     414:	5f434352 	svcpl	0x00434352
     418:	746f6c42 	strbtvc	r6, [pc], #-3138	; 420 <_Minimum_Stack_Size+0x320>
     41c:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     420:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     424:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     428:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     42c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     430:	55006e6f 	strpl	r6, [r0, #-3695]	; 0xe6f
     434:	5f726573 	svcpl	0x00726573
     438:	49746553 	ldmdbmi	r4!, {r0, r1, r4, r6, r8, sl, sp, lr}^
     43c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     440:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     444:	42484100 	submi	r4, r8, #0, 2
     448:	00524e45 	subseq	r4, r2, r5, asr #28
     44c:	50627375 	rsbpl	r7, r2, r5, ror r3
     450:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     454:	52006e4f 	andpl	r6, r0, #1264	; 0x4f0
     458:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     45c:	4e495f45 	cdpmi	15, 4, cr5, cr9, cr5, {2}
     460:	4e524554 	mrcmi	5, 2, r4, cr2, cr4, {2}
     464:	52004c41 	andpl	r4, r0, #16640	; 0x4100
     468:	5f504578 	svcpl	0x00504578
     46c:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     470:	75007265 	strvc	r7, [r0, #-613]	; 0x265
     474:	6e456273 	mcrvs	2, 2, r6, cr5, cr3, {3}
     478:	52534962 	subspl	r4, r3, #1605632	; 0x188000
     47c:	62737500 	rsbsvs	r7, r3, #0, 10
     480:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
     484:	6400656d 	strvs	r6, [r0], #-1389	; 0x56d
     488:	70557566 	subsvc	r7, r5, r6, ror #10
     48c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     490:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     494:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     498:	73750074 	cmnvc	r5, #116	; 0x74
     49c:	61745362 	cmnvs	r4, r2, ror #6
     4a0:	4f737574 	svcmi	0x00737574
     4a4:	75007475 	strvc	r7, [r0, #-1141]	; 0x475
     4a8:	65526273 	ldrbvs	r6, [r2, #-627]	; 0x273
     4ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     4b0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     4b4:	62737500 	rsbsvs	r7, r3, #0, 10
     4b8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
     4bc:	73750074 	cmnvc	r5, #116	; 0x74
     4c0:	61745362 	cmnvs	r4, r2, ror #6
     4c4:	49737574 	ldmdbmi	r3!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}^
     4c8:	4552006e 	ldrbmi	r0, [r2, #-110]	; 0x6e
     4cc:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     4d0:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
     4d4:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     4d8:	6f6c2067 	svcvs	0x006c2067
     4dc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     4e0:	5000746e 	andpl	r7, r0, lr, ror #8
     4e4:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     4e8:	55004445 	strpl	r4, [r0, #-1093]	; 0x445
     4ec:	4c774253 	lfmmi	f4, 2, [r7], #-332	; 0xfffffeb4
     4f0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     4f4:	75007368 	strvc	r7, [r0, #-872]	; 0x368
     4f8:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
     4fc:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
     500:	61667265 	cmnvs	r6, r5, ror #4
     504:	43006563 	movwmi	r6, #1379	; 0x563
     508:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     50c:	435f746e 	cmpmi	pc, #1845493760	; 0x6e000000
     510:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     514:	61727567 	cmnvs	r2, r7, ror #10
     518:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     51c:	6e497700 	cdpvs	7, 4, cr7, cr9, cr0, {0}
     520:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
     524:	5f747075 	svcpl	0x00747075
     528:	6b73614d 	blvs	1cd8a64 <__Stack_Size+0x1cd8264>
     52c:	6f6f6200 	svcvs	0x006f6200
     530:	4544006c 	strbmi	r0, [r4, #-108]	; 0x6c
     534:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     538:	4345525f 	movtmi	r5, #21087	; 0x525f
     53c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     540:	7500544e 	strvc	r5, [r0, #-1102]	; 0x44e
     544:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     548:	61745374 	cmnvs	r4, r4, ror r3
     54c:	43006574 	movwmi	r6, #1396	; 0x574
     550:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     554:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     558:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     55c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     560:	4e437700 	cdpmi	7, 4, cr7, cr3, cr0, {0}
     564:	75005254 	strvc	r5, [r0, #-596]	; 0x254
     568:	73446273 	movtvc	r6, #17011	; 0x4273
     56c:	73754262 	cmnvc	r5, #536870918	; 0x20000006
     570:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     574:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     578:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     57c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     580:	62737500 	rsbsvs	r7, r3, #0, 10
     584:	70737553 	rsbsvc	r7, r3, r3, asr r5
     588:	00646e65 	rsbeq	r6, r4, r5, ror #28
     58c:	61746f54 	cmnvs	r4, r4, asr pc
     590:	6f435f6c 	svcvs	0x00435f6c
     594:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     598:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     59c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     5a0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     5a4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
     5a8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
     5ac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     5b0:	6f697461 	svcvs	0x00697461
     5b4:	564e006e 	strbpl	r0, [lr], -lr, rrx
     5b8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     5bc:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     5c0:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     5c4:	4552006c 	ldrbmi	r0, [r2, #-108]	; 0x6c
     5c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     5cc:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     5d0:	414e5245 	cmpmi	lr, r5, asr #4
     5d4:	7543004c 	strbvc	r0, [r3, #-76]	; 0x4c
     5d8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     5dc:	6c415f74 	mcrrvs	15, 7, r5, r1, cr4
     5e0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
     5e4:	53657461 	cmnpl	r5, #1627389952	; 0x61000000
     5e8:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     5ec:	4100676e 	tstmi	r0, lr, ror #14
     5f0:	45324250 	ldrmi	r4, [r2, #-592]!	; 0x250
     5f4:	7200524e 	andvc	r5, r0, #-536870908	; 0xe0000004
     5f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     5fc:	5f007473 	svcpl	0x00007473
     600:	50444e45 	subpl	r4, r4, r5, asr #28
     604:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
     608:	464e495f 			; <UNDEFINED> instruction: 0x464e495f
     60c:	6f43004f 	svcvs	0x0043004f
     610:	6f527970 	svcvs	0x00527970
     614:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     618:	43520065 	cmpmi	r2, #101	; 0x65
     61c:	44425f43 	strbmi	r5, [r2], #-3907	; 0xf43
     620:	5f005243 	svcpl	0x00005243
     624:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     628:	55004543 	strpl	r4, [r0, #-1347]	; 0x543
     62c:	4e5f4253 	mrcmi	2, 2, r4, cr15, cr3, {2}
     630:	525f544f 	subspl	r5, pc, #1325400064	; 0x4f000000
     634:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
     638:	554e4700 	strbpl	r4, [lr, #-1792]	; 0x700
     63c:	34204320 	strtcc	r4, [r0], #-800	; 0x320
     640:	342e382e 	strtcc	r3, [lr], #-2094	; 0x82e
     644:	31303220 	teqcc	r0, r0, lsr #4
     648:	32373034 	eorscc	r3, r7, #52	; 0x34
     64c:	72282035 	eorvc	r2, r8, #53	; 0x35
     650:	61656c65 	cmnvs	r5, r5, ror #24
     654:	20296573 	eorcs	r6, r9, r3, ror r5
     658:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     65c:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
     660:	65646465 	strbvs	r6, [r4, #-1125]!	; 0x465
     664:	5f342d64 	svcpl	0x00342d64
     668:	72622d38 	rsbvc	r2, r2, #56, 26	; 0xe00
     66c:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     670:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
     674:	6f697369 	svcvs	0x00697369
     678:	3132206e 	teqcc	r2, lr, rrx
     67c:	37343133 			; <UNDEFINED> instruction: 0x37343133
     680:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
     684:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     688:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
     68c:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
     690:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     694:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
     698:	6d2d2033 	stcvs	0, cr2, [sp, #-204]!	; 0xffffff34
     69c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
     6a0:	6e692d62 	cdpvs	13, 6, cr2, cr9, cr2, {3}
     6a4:	77726574 			; <UNDEFINED> instruction: 0x77726574
     6a8:	206b726f 	rsbcs	r7, fp, pc, ror #4
     6ac:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
     6b0:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
     6b4:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
     6b8:	6f697463 	svcvs	0x00697463
     6bc:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xd6e
     6c0:	6f697463 	svcvs	0x00697463
     6c4:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
     6c8:	74616466 	strbtvc	r6, [r1], #-1126	; 0x466
     6cc:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xd61
     6d0:	6f697463 	svcvs	0x00697463
     6d4:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
     6d8:	50746e49 	rsbspl	r6, r4, r9, asr #28
     6dc:	536b6361 	cmnpl	fp, #-2080374783	; 0x84000001
     6e0:	7500464f 	strvc	r4, [r0, #-1615]	; 0x64f
     6e4:	6f506273 	svcvs	0x00506273
     6e8:	4f726577 	svcmi	0x00726577
     6ec:	43006666 	movwmi	r6, #1638	; 0x666
     6f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     6f4:	74536c6f 	ldrbvc	r6, [r3], #-3183	; 0xc6f
     6f8:	00657461 	rsbeq	r7, r5, r1, ror #8
     6fc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     700:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     704:	73750074 	cmnvc	r5, #116	; 0x74
     708:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     70c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     710:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     714:	65520065 	ldrbvs	r0, [r2, #-101]	; 0x65
     718:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     71c:	65640053 	strbvs	r0, [r4, #-83]!	; 0x53
     720:	0079616c 	rsbseq	r6, r9, ip, ror #2
     724:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     728:	43414652 	movtmi	r4, #5714	; 0x1652
     72c:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
     730:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     734:	00544e45 	subseq	r4, r4, r5, asr #28
     738:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     73c:	61746144 	cmnvs	r4, r4, asr #2
     740:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     744:	6c435f72 	mcrrvs	15, 7, r5, r3, cr2
     748:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     74c:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     750:	46006572 			; <UNDEFINED> instruction: 0x46006572
     754:	45534c41 	ldrbmi	r4, [r3, #-3137]	; 0xc41
     758:	47464300 	strbmi	r4, [r6, -r0, lsl #6]
     75c:	775f0052 			; <UNDEFINED> instruction: 0x775f0052
     760:	56676552 			; <UNDEFINED> instruction: 0x56676552
     764:	55006c61 	strpl	r6, [r0, #-3169]	; 0xc61
     768:	6d624253 	sfmvs	f4, 2, [r2, #-332]!	; 0xfffffeb4
     76c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     770:	54747365 	ldrbtpl	r7, [r4], #-869	; 0x365
     774:	00657079 	rsbeq	r7, r5, r9, ror r0
     778:	636f7250 	cmnvs	pc, #80, 4
     77c:	5f737365 	svcpl	0x00737365
     780:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     784:	4f5f7375 	svcmi	0x005f7375
     788:	73005455 	movwvc	r5, #1109	; 0x455
     78c:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xa69
     790:	00657079 	rsbeq	r7, r5, r9, ror r0
     794:	61656c43 	cmnvs	r5, r3, asr #24
     798:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     79c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     7a0:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     7a4:	5f387500 	svcpl	0x00387500
     7a8:	46627375 			; <UNDEFINED> instruction: 0x46627375
     7ac:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xe75
     7b0:	616e6f69 	cmnvs	lr, r9, ror #30
     7b4:	7365446c 	cmnvc	r5, #108, 8	; 0x6c000000
     7b8:	70697263 	rsbvc	r7, r9, r3, ror #4
     7bc:	00726f74 	rsbseq	r6, r2, r4, ror pc
     7c0:	5345525f 	movtpl	r5, #21087	; 0x525f
     7c4:	00544c55 	subseq	r4, r4, r5, asr ip
     7c8:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     7cc:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     7d0:	6573006f 	ldrbvs	r0, [r3, #-111]!	; 0x6f
     7d4:	55707574 	ldrbpl	r7, [r0, #-1396]!	; 0x574
     7d8:	67004253 	smlsdvs	r0, r3, r2, r4
     7dc:	5f6f6970 	svcpl	0x006f6970
     7e0:	74697277 	strbtvc	r7, [r9], #-631	; 0x277
     7e4:	69625f65 	stmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
     7e8:	73750074 	cmnvc	r5, #116	; 0x74
     7ec:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     7f0:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     7f4:	43007075 	movwmi	r7, #117	; 0x75
     7f8:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
     7fc:	45525547 	ldrbmi	r5, [r2, #-1351]	; 0x547
     800:	49770044 	ldmdbmi	r7!, {r2, r6}^
     804:	00727473 	rsbseq	r7, r2, r3, ror r4
     808:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     80c:	5f746e65 	svcpl	0x00746e65
     810:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     814:	00657275 	rsbeq	r7, r5, r5, ror r2
     818:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     81c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     820:	61686320 	cmnvs	r8, r0, lsr #6
     824:	52650072 	rsbpl	r0, r5, #114	; 0x72
     828:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     82c:	74655365 	strbtvc	r5, [r5], #-869	; 0x365
     830:	006c6156 	rsbeq	r6, ip, r6, asr r1
     834:	5f525443 	svcpl	0x00525443
     838:	6400504c 	strvs	r5, [r0], #-76	; 0x4c
     83c:	70557566 	subsvc	r7, r5, r6, ror #10
     840:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     844:	65527942 	ldrbvs	r7, [r2, #-2370]	; 0x942
     848:	00746573 	rsbseq	r6, r4, r3, ror r5
     84c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     850:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     854:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     858:	62737500 	rsbsvs	r7, r3, #0, 10
     85c:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     860:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     864:	61654665 	cmnvs	r5, r5, ror #12
     868:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     86c:	62735500 	rsbsvs	r5, r3, #0, 10
     870:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     874:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     878:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
     87c:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     880:	4154535f 	cmpmi	r4, pc, asr r3
     884:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     888:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     88c:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     890:	43004445 	movwmi	r4, #1093	; 0x445
     894:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
     898:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
     89c:	66696168 	strbtvs	r6, [r9], -r8, ror #2
     8a0:	68637369 	stmdavs	r3!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     8a4:	7365445c 	cmnvc	r5, #92, 8	; 0x5c000000
     8a8:	706f746b 	rsbvc	r7, pc, fp, ror #8
     8ac:	636e655c 	cmnvs	lr, #92, 10	; 0x17000000
     8b0:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0x16c
     8b4:	6f72705f 	svcvs	0x0072705f
     8b8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     8bc:	6f6f625c 	svcvs	0x006f625c
     8c0:	616f6c74 	smcvs	63172	; 0xf6c4
     8c4:	5c726564 	cfldr64pl	mvdx6, [r2], #-400	; 0xfffffe70
     8c8:	334d5453 	movtcc	r5, #54355	; 0xd453
     8cc:	00314632 	eorseq	r4, r1, r2, lsr r6
     8d0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     8d4:	535f454d 	cmppl	pc, #322961408	; 0x13400000
     8d8:	54524154 	ldrbpl	r4, [r2], #-340	; 0x154
     8dc:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     8e0:	52495f43 	subpl	r5, r9, #268	; 0x10c
     8e4:	61684351 	cmnvs	r8, r1, asr r3
     8e8:	6c656e6e 	stclvs	14, cr6, [r5], #-440	; 0xfffffe48
     8ec:	50627553 	rsbpl	r7, r2, r3, asr r5
     8f0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     8f4:	00797469 	rsbseq	r7, r9, r9, ror #8
     8f8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
     8fc:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     900:	50646e45 	rsbpl	r6, r4, r5, asr #28
     904:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     908:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     90c:	00657275 	rsbeq	r7, r5, r5, ror r2
     910:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     914:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     918:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     91c:	00657275 	rsbeq	r7, r5, r5, ror r2
     920:	4548544f 	strbmi	r5, [r8, #-1103]	; 0x44f
     924:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xf52
     928:	49504943 	ldmdbmi	r0, {r0, r1, r6, r8, fp, lr}^
     92c:	00544e45 	subseq	r4, r4, r5, asr #28
     930:	5f363175 	svcpl	0x00363175
     934:	50003875 	andpl	r3, r0, r5, ror r8
     938:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     93c:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     940:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     944:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     948:	6f687300 	svcvs	0x00687300
     94c:	75207472 	strvc	r7, [r0, #-1138]!	; 0x472
     950:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     954:	2064656e 	rsbcs	r6, r4, lr, ror #10
     958:	00746e69 	rsbseq	r6, r4, r9, ror #28
     95c:	41545441 	cmpmi	r4, r1, asr #8
     960:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     964:	70457000 	subvc	r7, r5, r0
     968:	5f746e49 	svcpl	0x00746e49
     96c:	0054554f 	subseq	r5, r4, pc, asr #10
     970:	4349564e 	movtmi	r5, #38478	; 0x964e
     974:	5152495f 	cmppl	r2, pc, asr r9
     978:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     97c:	506c656e 	rsbpl	r6, ip, lr, ror #10
     980:	6d656572 	cfstr64vs	mvdx6, [r5, #-456]!	; 0xfffffe38
     984:	6f697470 	svcvs	0x00697470
     988:	6972506e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, ip, lr}^
     98c:	7469726f 	strbtvc	r7, [r9], #-623	; 0x26f
     990:	55530079 	ldrbpl	r0, [r3, #-121]	; 0x79
     994:	4e455053 	mcrmi	0, 2, r5, cr5, cr3, {2}
     998:	00444544 	subeq	r4, r4, r4, asr #10
     99c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     9a0:	43785250 	cmnmi	r8, #80, 4
     9a4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
     9a8:	42535500 	subsmi	r5, r3, #0, 10
     9ac:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
     9b0:	7000524f 	andvc	r5, r0, pc, asr #4
     9b4:	6e497045 	cdpvs	0, 4, cr7, cr9, cr5, {2}
     9b8:	4e495f74 	mcrmi	15, 2, r5, cr9, cr4, {3}
     9bc:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     9c0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     9c4:	616c4300 	cmnvs	ip, r0, lsl #6
     9c8:	475f7373 			; <UNDEFINED> instruction: 0x475f7373
     9cc:	495f7465 	ldmdbmi	pc, {r0, r2, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     9d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9d4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     9d8:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     9dc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     9e0:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     9e4:	696e4963 	stmdbvs	lr!, {r0, r1, r5, r6, r8, fp, lr}^
     9e8:	38750074 	ldmdacc	r5!, {r2, r4, r5, r6}^
     9ec:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     9f0:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     9f4:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     9f8:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     9fc:	5f387500 	svcpl	0x00387500
     a00:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     a04:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     a08:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     a0c:	61667265 	cmnvs	r6, r5, ror #4
     a10:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	41676e69 	cmnmi	r7, r9, ror #28
     a20:	0031746c 	eorseq	r7, r1, ip, ror #8
     a24:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 1b7 <_Minimum_Stack_Size+0xb7>
     a28:	65446273 	strbvs	r6, [r4, #-627]	; 0x273
     a2c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     a30:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
     a34:	74706972 	ldrbtvc	r6, [r0], #-2418	; 0x972
     a38:	4644726f 	strbmi	r7, [r4], -pc, ror #4
     a3c:	38750055 	ldmdacc	r5!, {r0, r2, r4, r6}^
     a40:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a44:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a48:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a4c:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a50:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a54:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a58:	53676e69 	cmnpl	r7, #1680	; 0x690
     a5c:	61697265 	cmnvs	r9, r5, ror #4
     a60:	3875006c 	ldmdacc	r5!, {r2, r3, r5, r6}^
     a64:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a68:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a6c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a70:	75003074 	strvc	r3, [r0, #-116]	; 0x74
     a74:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a78:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a7c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a80:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a84:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a88:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a8c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a90:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a94:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a98:	73750064 	cmnvc	r5, #100	; 0x64
     a9c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     aa0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     aa4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     aa8:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
     aac:	36657361 	strbtcc	r7, [r5], -r1, ror #6
     ab0:	6e695f34 	mcrvs	15, 3, r5, cr9, cr4, {1}
     ab4:	655f7469 	ldrbvs	r7, [pc, #-1129]	; 653 <_Minimum_Stack_Size+0x553>
     ab8:	646f636e 	strbtvs	r6, [pc], #-878	; ac0 <__Stack_Size+0x2c0>
     abc:	61747365 	cmnvs	r4, r5, ror #6
     ac0:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     ac4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
     ac8:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
     acc:	415f7065 	cmpmi	pc, r5, rrx
     ad0:	73616200 	cmnvc	r1, #0, 4
     ad4:	5f343665 	svcpl	0x00343665
     ad8:	00627570 	rsbeq	r7, r2, r0, ror r5
     adc:	70657473 	rsbvc	r7, r5, r3, ror r4
     ae0:	6f00435f 	svcvs	0x0000435f
     ae4:	00326666 	eorseq	r6, r2, r6, ror #12
     ae8:	616d495f 	cmnvs	sp, pc, asr r9
     aec:	624f6567 	subvs	r6, pc, #432013312	; 0x19c00000
     af0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0x56a
     af4:	64616548 	strbtvs	r6, [r1], #-1352	; 0x548
     af8:	6f007265 	svcvs	0x00007265
     afc:	00346666 	eorseq	r6, r4, r6, ror #12
     b00:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     b04:	735f3436 	cmpvc	pc, #905969664	; 0x36000000
     b08:	616e6769 	cmnvs	lr, r9, ror #14
     b0c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     b10:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     b14:	65730038 	ldrbvs	r0, [r3, #-56]!	; 0x38
     b18:	43707574 	cmnmi	r0, #116, 10	; 0x1d000000
     b1c:	73004b4c 	movwvc	r4, #2892	; 0xb4c
     b20:	5f657a69 	svcpl	0x00657a69
     b24:	6e690074 	mcrvs	0, 3, r0, cr9, cr4, {3}
     b28:	00747570 	rsbseq	r7, r4, r0, ror r5
     b2c:	5f646975 	svcpl	0x00646975
     b30:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     b34:	61687300 	cmnvs	r8, r0, lsl #6
     b38:	5f363532 	svcpl	0x00363532
     b3c:	61647075 	smcvs	18181	; 0x4705
     b40:	65006574 	strvs	r6, [r0, #-1396]	; 0x574
     b44:	646f636e 	strbtvs	r6, [pc], #-878	; b4c <__Stack_Size+0x34c>
     b48:	36625f65 	strbtcc	r5, [r2], -r5, ror #30
     b4c:	5f5f0034 	svcpl	0x005f0034
     b50:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     b54:	745f3233 	ldrbvc	r3, [pc], #-563	; b5c <__Stack_Size+0x35c>
     b58:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0x300
     b5c:	00615f70 	rsbeq	r5, r1, r0, ror pc
     b60:	70657473 	rsbvc	r7, r5, r3, ror r4
     b64:	5f00625f 	svcpl	0x0000625f
     b68:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
     b6c:	5f363174 	svcpl	0x00363174
     b70:	74730074 	ldrbtvc	r0, [r3], #-116	; 0x74
     b74:	645f7065 	ldrbvs	r7, [pc], #-101	; b7c <__Stack_Size+0x37c>
     b78:	61687300 	cmnvs	r8, r0, lsl #6
     b7c:	5f363532 	svcpl	0x00363532
     b80:	696e6966 	stmdbvs	lr!, {r1, r2, r5, r6, r8, fp, sp, lr}^
     b84:	70006873 	andvc	r6, r0, r3, ror r8
     b88:	6e69616c 	powvsez	f6, f1, #4.0
     b8c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     b90:	73797300 	cmnvc	r9, #0, 6
     b94:	526d6574 	rsbpl	r6, sp, #116, 10	; 0x1d000000
     b98:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     b9c:	73616200 	cmnvc	r1, #0, 4
     ba0:	5f343665 	svcpl	0x00343665
     ba4:	6f636564 	svcvs	0x00636564
     ba8:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0x564
     bac:	00657461 	rsbeq	r7, r5, r1, ror #8
     bb0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     bb4:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 786 <_Minimum_Stack_Size+0x686>
     bb8:	646f636e 	strbtvs	r6, [pc], #-878	; bc0 <__Stack_Size+0x3c0>
     bbc:	61747365 	cmnvs	r4, r5, ror #6
     bc0:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
     bc4:	36657361 	strbtcc	r7, [r5], -r1, ror #6
     bc8:	65645f34 	strbvs	r5, [r4, #-3892]!	; 0xf34
     bcc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
     bd0:	6f6c625f 	svcvs	0x006c625f
     bd4:	73006b63 	movwvc	r6, #2915	; 0xb63
     bd8:	70757465 	rsbsvc	r7, r5, r5, ror #8
     bdc:	53414c46 	movtpl	r4, #7238	; 0x1c46
     be0:	68690048 	stmdavs	r9!, {r3, r6}^
     be4:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     be8:	72007265 	andvc	r7, r0, #1342177286	; 0x50000006
     bec:	50646165 	rsbpl	r6, r4, r5, ror #2
     bf0:	49006e69 	stmdbmi	r0, {r0, r3, r5, r6, r9, sl, fp, sp, lr}
     bf4:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     bf8:	656a624f 	strbvs	r6, [sl, #-591]!	; 0x24f
     bfc:	61487463 	cmpvs	r8, r3, ror #8
     c00:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0x46e
     c04:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0x300
     c08:	00425f70 	subeq	r5, r2, r0, ror pc
     c0c:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
     c10:	73007465 	movwvc	r7, #1125	; 0x465
     c14:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     c18:	74735f36 	ldrbtvc	r5, [r3], #-3894	; 0xf36
     c1c:	73747261 	cmnvc	r4, #268435462	; 0x10000006
     c20:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     c24:	696e6946 	stmdbvs	lr!, {r1, r2, r6, r8, fp, sp, lr}^
     c28:	70556873 	subsvc	r6, r5, r3, ror r8
     c2c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
     c30:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
     c34:	5f5f0030 	svcpl	0x005f0030
     c38:	746e6975 	strbtvc	r6, [lr], #-2421	; 0x975
     c3c:	00745f38 	rsbseq	r5, r4, r8, lsr pc
     c40:	6f636564 	svcvs	0x00636564
     c44:	625f6564 	subsvs	r6, pc, #100, 10	; 0x19000000
     c48:	69003436 	stmdbvs	r0, {r1, r2, r4, r5, sl, ip, sp}
     c4c:	67614d68 	strbvs	r4, [r1, -r8, ror #26]!
     c50:	70006369 	andvc	r6, r0, r9, ror #6
     c54:	696c6275 	stmdbvs	ip!, {r0, r2, r4, r5, r6, r9, sp, lr}^
     c58:	79656b63 	stmdbvc	r5!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     c5c:	6f6c6200 	svcvs	0x006c6200
     c60:	69736b63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
     c64:	5f00657a 	svcpl	0x0000657a
     c68:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
     c6c:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     c70:	616e7265 	cmnvs	lr, r5, ror #4
     c74:	6174536c 	cmnvs	r4, ip, ror #6
     c78:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     c7c:	43746f6f 	cmnmi	r4, #444	; 0x1bc
     c80:	64650041 	strbtvs	r0, [r5], #-65	; 0x41
     c84:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     c88:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
     c8c:	5f6f745f 	svcpl	0x006f745f
     c90:	00627570 	rsbeq	r7, r2, r0, ror r5
     c94:	73727563 	cmnvc	r2, #415236096	; 0x18c00000
     c98:	6900726f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
     c9c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     ca0:	63656843 	cmnvs	r5, #4390912	; 0x430000
     ca4:	6f72466b 	svcvs	0x0072466b
     ca8:	6464416d 	strbtvs	r4, [r4], #-365	; 0x16d
     cac:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     cb0:	72747300 	rsbsvc	r7, r4, #0, 6
     cb4:	5065626f 	rsbpl	r6, r5, pc, ror #4
     cb8:	6e006e69 	cdpvs	14, 0, cr6, cr0, cr9, {3}
     cbc:	73755f6f 	cmnvc	r5, #444	; 0x1bc
     cc0:	6a5f7265 	bvs	17dd65c <__Stack_Size+0x17dce5c>
     cc4:	00706d75 	rsbseq	r6, r0, r5, ror sp
     cc8:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     ccc:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0x73
     cd0:	4c707574 	cfldr64mi	mvdx7, [r0], #-464	; 0xfffffe30
     cd4:	6e414445 	cdpvs	4, 4, cr4, cr1, cr5, {2}
     cd8:	74754264 	ldrbtvc	r4, [r5], #-612	; 0x264
     cdc:	006e6f74 	rsbeq	r6, lr, r4, ror pc
     ce0:	75426869 	strbvc	r6, [r2, #-2153]	; 0x869
     ce4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ce8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     cec:	73006874 	movwvc	r6, #2164	; 0x874
     cf0:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
     cf4:	6f635f36 	svcvs	0x00635f36
     cf8:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     cfc:	61750074 	cmnvs	r5, r4, ror r0
     d00:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
     d04:	61007469 	tstvs	r0, r9, ror #8
     d08:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     d0c:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     d10:	65747300 	ldrbvs	r7, [r4, #-768]!	; 0x300
     d14:	00635f70 	rsbeq	r5, r3, r0, ror pc
     d18:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     d1c:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 8ee <__Stack_Size+0xee>
     d20:	646f636e 	strbtvs	r6, [pc], #-878	; d28 <__Stack_Size+0x528>
     d24:	65747365 	ldrbvs	r7, [r4, #-869]!	; 0x365
     d28:	68690070 	stmdavs	r9!, {r4, r5, r6}^
     d2c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     d30:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     d34:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0x6e
     d38:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
     d3c:	6d756a00 	vldmdbvs	r5!, {s13-s12}
     d40:	556f5470 	strbpl	r5, [pc, #-1136]!	; 8d8 <__Stack_Size+0xd8>
     d44:	00726573 	rsbseq	r6, r2, r3, ror r5
     d48:	6e69616d 	powvsez	f6, f1, #5.0
     d4c:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
     d50:	0064695f 	rsbeq	r6, r4, pc, asr r9
     d54:	67616d69 	strbvs	r6, [r1, -r9, ror #26]!
     d58:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
     d5c:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
     d60:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
     d64:	6664006e 	strbtvs	r0, [r4], -lr, rrx
     d68:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     d6c:	5364616f 	cmnpl	r4, #-1073741797	; 0xc000001b
     d70:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
     d74:	74006465 	strvc	r6, [r0], #-1125	; 0x465
     d78:	736e6172 	cmnvc	lr, #-2147483620	; 0x8000001c
     d7c:	5f74696d 	svcpl	0x0074696d
     d80:	6c627570 	cfstr64vs	mvdx7, [r2], #-448	; 0xfffffe40
     d84:	656b6369 	strbvs	r6, [fp, #-873]!	; 0x369
     d88:	61645f79 	smcvs	17913	; 0x45f9
     d8c:	69006174 	stmdbvs	r0, {r2, r4, r5, r6, r8, sp, lr}
     d90:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
     d94:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     d98:	7500656c 	strvc	r6, [r0, #-1388]	; 0x56c
     d9c:	7571696e 	ldrbvc	r6, [r1, #-2414]!	; 0x96e
     da0:	00444965 	subeq	r4, r4, r5, ror #18
     da4:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     da8:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 97a <__Stack_Size+0x17a>
     dac:	646f636e 	strbtvs	r6, [pc], #-878	; db4 <__Stack_Size+0x5b4>
     db0:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     db4:	656b636f 	strbvs	r6, [fp, #-879]!	; 0x36f
     db8:	7500646e 	strvc	r6, [r0, #-1134]	; 0x46e
     dbc:	5f747261 	svcpl	0x00747261
     dc0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     dc4:	6f006674 	svcvs	0x00006674
     dc8:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0x475
     dcc:	61620074 	smcvs	8196	; 0x2004
     dd0:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
     dd4:	6365645f 	cmnvs	r5, #1593835520	; 0x5f000000
     dd8:	7365646f 	cmnvc	r5, #1862270976	; 0x6f000000
     ddc:	00706574 	rsbseq	r6, r0, r4, ror r5
     de0:	69536869 	ldmdbvs	r3, {r0, r3, r5, r6, fp, sp, lr}^
     de4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     de8:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     dec:	6c006874 	stcvs	8, cr6, [r0], {116}	; 0x74
     df0:	54747361 	ldrbtpl	r7, [r4], #-865	; 0x361
     df4:	69006761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
     df8:	696b5368 	stmdbvs	fp!, {r3, r5, r6, r8, r9, ip, lr}^
     dfc:	73694470 	cmnvc	r9, #112, 8	; 0x70000000
     e00:	636e6174 	cmnvs	lr, #116, 2
     e04:	74730065 	ldrbtvc	r0, [r3], #-101	; 0x65
     e08:	6f637065 	svcvs	0x00637065
     e0c:	00746e75 	rsbseq	r6, r4, r5, ror lr
     e10:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     e14:	655f3436 	ldrbvs	r3, [pc, #-1078]	; 9e6 <__Stack_Size+0x1e6>
     e18:	646f636e 	strbtvs	r6, [pc], #-878	; e20 <__Stack_Size+0x620>
     e1c:	6c625f65 	stclvs	15, cr5, [r2], #-404	; 0xfffffe6c
     e20:	006b636f 	rsbeq	r6, fp, pc, ror #6
     e24:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
     e28:	695f3436 	ldmdbvs	pc, {r1, r2, r4, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     e2c:	5f74696e 	svcpl	0x0074696e
     e30:	6f636564 	svcvs	0x00636564
     e34:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0x564
     e38:	00657461 	rsbeq	r7, r5, r1, ror #8
     e3c:	73616c66 	cmnvc	r1, #26112	; 0x6600
     e40:	61724568 	cmnvs	r2, r8, ror #10
     e44:	61506573 	cmpvs	r0, r3, ror r5
     e48:	42006567 	andmi	r6, r0, #432013312	; 0x19c00000
     e4c:	00525253 	subseq	r5, r2, r3, asr r2
     e50:	4f495047 	svcmi	0x00495047
     e54:	646f4d5f 	strbtvs	r4, [pc], #-3423	; e5c <__Stack_Size+0x65c>
     e58:	50470065 	subpl	r0, r7, r5, rrx
     e5c:	505f4f49 	subspl	r4, pc, r9, asr #30
     e60:	73006e69 	movwvc	r6, #3689	; 0xe69
     e64:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     e68:	7261486d 	rsbvc	r4, r1, #7143424	; 0x6d0000
     e6c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
     e70:	62007465 	andvs	r7, r0, #1694498816	; 0x65000000
     e74:	3031706b 	eorscc	r7, r1, fp, rrx
     e78:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     e7c:	4e720065 	cdpmi	0, 7, cr0, cr2, cr5, {3}
     e80:	00434956 	subeq	r4, r3, r6, asr r9
     e84:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     e88:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     e8c:	74536c61 	ldrbvc	r6, [r3], #-3169	; 0xc61
     e90:	00657461 	rsbeq	r7, r5, r1, ror #8
     e94:	63656863 	cmnvs	r5, #6488064	; 0x630000
     e98:	646e416b 	strbtvs	r4, [lr], #-363	; 0x16b
     e9c:	61656c43 	cmnvs	r5, r3, asr #24
     ea0:	6f6f4272 	svcvs	0x006f4272
     ea4:	616f6c74 	smcvs	63172	; 0xf6c4
     ea8:	46726564 	ldrbtmi	r6, [r2], -r4, ror #10
     eac:	0067616c 	rsbeq	r6, r7, ip, ror #2
     eb0:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     eb4:	69766e00 	ldmdbvs	r6!, {r9, sl, fp, sp, lr}^
     eb8:	73694463 	cmnvc	r9, #1660944384	; 0x63000000
     ebc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0x261
     ec0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     ec4:	70757272 	rsbsvc	r7, r5, r2, ror r2
     ec8:	55007374 	strpl	r7, [r0, #-884]	; 0x374
     ecc:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     ed0:	726f575f 	rsbvc	r5, pc, #24903680	; 0x17c0000
     ed4:	6e654c64 	cdpvs	12, 6, cr4, cr5, cr4, {3}
     ed8:	00687467 	rsbeq	r7, r8, r7, ror #8
     edc:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     ee0:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     ee4:	5500632e 	strpl	r6, [r0, #-814]	; 0x32e
     ee8:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     eec:	6f74535f 	svcvs	0x0074535f
     ef0:	74694270 	strbtvc	r4, [r9], #-624	; 0x270
     ef4:	77700073 			; <UNDEFINED> instruction: 0x77700073
     ef8:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xf72
     efc:	616d5f67 	cmnvs	sp, r7, ror #30
     f00:	73760070 	cmnvc	r6, #112	; 0x70
     f04:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     f08:	47006674 	smlsdxmi	r0, r4, r6, r6
     f0c:	5f4f4950 	svcpl	0x004f4950
     f10:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
     f14:	706d7400 	rsbvc	r7, sp, r0, lsl #8
     f18:	6b73616d 	blvs	1cd94d4 <__Stack_Size+0x1cd8cd4>
     f1c:	78656800 	stmdavc	r5!, {fp, sp, lr}^
     f20:	706d7564 	rsbvc	r7, sp, r4, ror #10
     f24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     f28:	70535f4f 	subsvc	r5, r3, pc, asr #30
     f2c:	5f646565 	svcpl	0x00646565
     f30:	7a484d32 	bvc	1214400 <__Stack_Size+0x1213c00>
     f34:	50544700 	subspl	r4, r4, r0, lsl #14
     f38:	6e6f0052 	mcrvs	0, 3, r0, cr15, cr2, {2}
     f3c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f40:	53550065 	cmppl	r5, #101	; 0x65
     f44:	5f545241 	svcpl	0x00545241
     f48:	64756142 	ldrbtvs	r6, [r5], #-322	; 0x142
     f4c:	65746152 	ldrbvs	r6, [r4, #-338]!	; 0x152
     f50:	45534900 	ldrbmi	r4, [r3, #-2304]	; 0x900
     f54:	53520052 	cmppl	r2, #82	; 0x52
     f58:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     f5c:	47003144 	strmi	r3, [r0, -r4, asr #2]
     f60:	5f4f4950 	svcpl	0x004f4950
     f64:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
     f68:	30315f64 	eorscc	r5, r1, r4, ror #30
     f6c:	007a484d 	rsbseq	r4, sl, sp, asr #16
     f70:	5f706b62 	svcpl	0x00706b62
     f74:	5f676572 	svcpl	0x00676572
     f78:	0070616d 	rsbseq	r6, r0, sp, ror #2
     f7c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
     f80:	61685f74 	smcvs	34292	; 0x85f4
     f84:	55006873 	strpl	r6, [r0, #-2163]	; 0x873
     f88:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
     f8c:	7261505f 	rsbvc	r5, r1, #95	; 0x5f
     f90:	00797469 	rsbseq	r7, r9, r9, ror #8
     f94:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
     f98:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
     f9c:	47007469 	strmi	r7, [r0, -r9, ror #8]
     fa0:	5f4f4950 	svcpl	0x004f4950
     fa4:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
     fa8:	4450495f 	ldrbmi	r4, [r0], #-2399	; 0x95f
     fac:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     fb0:	6f4d5f4f 	svcvs	0x004d5f4f
     fb4:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     fb8:	5f005550 	svcpl	0x00005550
     fbc:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0x75f
     fc0:	61765f63 	cmnvs	r6, r3, ror #30
     fc4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     fc8:	50430074 	subpl	r0, r3, r4, ror r0
     fcc:	00444955 	subeq	r4, r4, r5, asr r9
     fd0:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     fd4:	53006765 	movwpl	r6, #1893	; 0x765
     fd8:	00525048 	subseq	r5, r2, r8, asr #32
     fdc:	52534641 	subspl	r4, r3, #68157440	; 0x4100000
     fe0:	41535500 	cmpmi	r3, r0, lsl #10
     fe4:	545f5452 	ldrbpl	r5, [pc], #-1106	; fec <__Stack_Size+0x7ec>
     fe8:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     fec:	41006665 	tstmi	r0, r5, ror #12
     ff0:	52314250 	eorspl	r4, r1, #80, 4
     ff4:	00525453 	subseq	r5, r2, r3, asr r4
     ff8:	52534648 	subspl	r4, r3, #72, 12	; 0x4800000
     ffc:	616c6600 	cmnvs	ip, r0, lsl #12
    1000:	72576873 	subsvc	r6, r7, #7536640	; 0x730000
    1004:	57657469 	strbpl	r7, [r5, -r9, ror #8]!
    1008:	0064726f 	rsbeq	r7, r4, pc, ror #4
    100c:	52415355 	subpl	r5, r1, #1409286145	; 0x54000001
    1010:	6e495f54 	mcrvs	15, 2, r5, cr9, cr4, {2}
    1014:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    1018:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    101c:	00657275 	rsbeq	r7, r5, r5, ror r2
    1020:	4f495047 	svcmi	0x00495047
    1024:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 102c <__Stack_Size+0x82c>
    1028:	754f5f65 	strbvc	r5, [pc, #-3941]	; cb <_Minimum_Stack_Size-0x35>
    102c:	50505f74 	subspl	r5, r0, r4, ror pc
    1030:	74617200 	strbtvc	r7, [r1], #-512	; 0x200
    1034:	49440065 	stmdbmi	r4, {r0, r2, r5, r6}^
    1038:	4c424153 	stfmie	f4, [r2], {83}	; 0x53
    103c:	49410045 	stmdbmi	r1, {r0, r2, r6}^
    1040:	00524352 	subseq	r4, r2, r2, asr r3
    1044:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    1048:	00727450 	rsbseq	r7, r2, r0, asr r4
    104c:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1050:	6600676e 	strvs	r6, [r0], -lr, ror #14
    1054:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1058:	6f6c6e55 	svcvs	0x006c6e55
    105c:	74006b63 	strvc	r6, [r0], #-2915	; 0xb63
    1060:	7270706d 	rsbsvc	r7, r0, #109	; 0x6d
    1064:	53550065 	cmppl	r5, #101	; 0x65
    1068:	5f545241 	svcpl	0x00545241
    106c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1070:	6d777200 	lfmvs	f7, 2, [r7, #-0]
    1074:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1078:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    107c:	00746553 	rsbseq	r6, r4, r3, asr r5
    1080:	41727375 	cmnmi	r2, r5, ror r3
    1084:	00726464 	rsbseq	r6, r2, r4, ror #8
    1088:	53434853 	movtpl	r4, #14419	; 0x3853
    108c:	53550052 	cmppl	r5, #82	; 0x52
    1090:	5f545241 	svcpl	0x00545241
    1094:	64726148 	ldrbtvs	r6, [r2], #-328	; 0x148
    1098:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
    109c:	776f6c46 	strbvc	r6, [pc, -r6, asr #24]!
    10a0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xf43
    10a4:	006c6f72 	rsbeq	r6, ip, r2, ror pc
    10a8:	52534643 	subspl	r4, r3, #70254592	; 0x4300000
    10ac:	5f555500 	svcpl	0x00555500
    10b0:	53747550 	cmnpl	r4, #80, 10	; 0x14000000
    10b4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    10b8:	5f5f0067 	svcpl	0x005f0067
    10bc:	75007061 	strvc	r7, [r0, #-97]	; 0x61
    10c0:	614d7273 	hvcvs	55075	; 0xd723
    10c4:	67006e69 	strvs	r6, [r0, -r9, ror #28]
    10c8:	6c467465 	cfstrdvs	mvd7, [r6], {101}	; 0x65
    10cc:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
    10d0:	6600646e 	strvs	r6, [r0], -lr, ror #8
    10d4:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    10d8:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    10dc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    10e0:	6e495f4f 	cdpvs	15, 4, cr5, cr9, cr15, {2}
    10e4:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
    10e8:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
    10ec:	00657275 	rsbeq	r7, r5, r5, ror r2
    10f0:	30315244 	eorscc	r5, r1, r4, asr #4
    10f4:	50434900 	subpl	r4, r3, r0, lsl #18
    10f8:	43520052 	cmpmi	r2, #82	; 0x52
    10fc:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xf43
    1100:	72745367 	rsbsvc	r5, r4, #-1677721599	; 0x9c000001
    1104:	00746375 	rsbseq	r6, r4, r5, ror r3
    1108:	4f495047 	svcmi	0x00495047
    110c:	646f4d5f 	strbtvs	r4, [pc], #-3423	; 1114 <__Stack_Size+0x914>
    1110:	46415f65 	strbmi	r5, [r1], -r5, ror #30
    1114:	00444f5f 	subeq	r4, r4, pc, asr pc
    1118:	42435372 	submi	r5, r3, #-939524095	; 0xc8000001
    111c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
    1120:	6c660070 	stclvs	0, cr0, [r6], #-448	; 0xfffffe40
    1124:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
    1128:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    112c:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
    1130:	70760073 	rsbsvc	r0, r6, r3, ror r0
    1134:	746e6972 	strbtvc	r6, [lr], #-2418	; 0x972
    1138:	41535500 	cmpmi	r3, r0, lsl #10
    113c:	00785452 	rsbseq	r5, r8, r2, asr r4
    1140:	41464d4d 	cmpmi	r6, sp, asr #26
    1144:	50470052 	subpl	r0, r7, r2, asr r0
    1148:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 102c <__Stack_Size+0x82c>
    114c:	5f65646f 	svcpl	0x0065646f
    1150:	004e4941 	subeq	r4, lr, r1, asr #18
    1154:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1158:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    115c:	45520030 	ldrbmi	r0, [r2, #-48]	; 0x30
    1160:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1164:	00314445 	eorseq	r4, r1, r5, asr #8
    1168:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    116c:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1170:	45520032 	ldrbmi	r0, [r2, #-50]	; 0x32
    1174:	56524553 			; <UNDEFINED> instruction: 0x56524553
    1178:	00334445 	eorseq	r4, r3, r5, asr #8
    117c:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1180:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1184:	45520034 	ldrbmi	r0, [r2, #-52]	; 0x34
    1188:	56524553 			; <UNDEFINED> instruction: 0x56524553
    118c:	00354445 	eorseq	r4, r5, r5, asr #8
    1190:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    1194:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    1198:	45520036 	ldrbmi	r0, [r2, #-54]	; 0x36
    119c:	56524553 			; <UNDEFINED> instruction: 0x56524553
    11a0:	00384445 	eorseq	r4, r8, r5, asr #8
    11a4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0x552
    11a8:	44455652 	strbmi	r5, [r5], #-1618	; 0x652
    11ac:	50470039 	subpl	r0, r7, r9, lsr r0
    11b0:	4d5f4f49 	ldclmi	15, cr4, [pc, #-292]	; 1094 <__Stack_Size+0x894>
    11b4:	5f65646f 	svcpl	0x0065646f
    11b8:	505f4641 	subspl	r4, pc, r1, asr #12
    11bc:	50470050 	subpl	r0, r7, r0, asr r0
    11c0:	535f4f49 	cmppl	pc, #292	; 0x124
    11c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    11c8:	5f555500 	svcpl	0x00555500
    11cc:	43747550 	cmnmi	r4, #80, 10	; 0x14000000
    11d0:	00726168 	rsbseq	r6, r2, r8, ror #2
    11d4:	73616c66 	cmnvc	r1, #26112	; 0x6600
    11d8:	636f4c68 	cmnvs	pc, #104, 24	; 0x6800
    11dc:	6f77006b 	svcvs	0x0077006b
    11e0:	73006472 	movwvc	r6, #1138	; 0x472
    11e4:	734d7465 	movtvc	r7, #54373	; 0xd465
    11e8:	646e4170 	strbtvs	r4, [lr], #-368	; 0x170
    11ec:	706d754a 	rsbvc	r7, sp, sl, asr #10
    11f0:	41464200 	mrsmi	r4, (UNDEF: 102)
    11f4:	50470052 	subpl	r0, r7, r2, asr r0
    11f8:	545f4f49 	ldrbpl	r4, [pc], #-3913	; 1200 <__Stack_Size+0xa00>
    11fc:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    1200:	56006665 	strpl	r6, [r0], -r5, ror #12
    1204:	00524f54 	subseq	r4, r2, r4, asr pc
    1208:	4f495047 	svcmi	0x00495047
    120c:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xf4d
    1210:	7079545f 	rsbsvc	r5, r9, pc, asr r4
    1214:	66654465 	strbtvs	r4, [r5], -r5, ror #8
    1218:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
    121c:	79545f43 	ldmdbvc	r4, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
    1220:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1224:	6d740066 	ldclvs	0, cr0, [r4, #-408]!	; 0xfffffe68
    1228:	62757370 	rsbsvs	r7, r5, #112, 6	; 0xc0000001
    122c:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
    1230:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
    1234:	45007473 	strmi	r7, [r0, #-1139]	; 0x473
    1238:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
    123c:	43490045 	movtmi	r0, #36933	; 0x9045
    1240:	53005253 	movwpl	r5, #595	; 0x253
    1244:	545f4243 	ldrbpl	r4, [pc], #-579	; 124c <__Stack_Size+0xa4c>
    1248:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
    124c:	47006665 	strmi	r6, [r0, -r5, ror #12]
    1250:	5f4f4950 	svcpl	0x004f4950
    1254:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    1258:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    125c:	00666544 	rsbeq	r6, r6, r4, asr #10
    1260:	73616c66 	cmnvc	r1, #26112	; 0x6600
    1264:	64644168 	strbtvs	r4, [r4], #-360	; 0x168
    1268:	564e0072 			; <UNDEFINED> instruction: 0x564e0072
    126c:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    1270:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
    1274:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    1278:	50470074 	subpl	r0, r7, r4, ror r0
    127c:	535f4f49 	cmppl	pc, #292	; 0x124
    1280:	64656570 	strbtvs	r6, [r5], #-1392	; 0x570
    1284:	4d30355f 	cfldr32mi	mvfx3, [r0, #-380]!	; 0xfffffe84
    1288:	55007a48 	strpl	r7, [r0, #-2632]	; 0xa48
    128c:	54524153 	ldrbpl	r4, [r2], #-339	; 0x153
    1290:	646d435f 	strbtvs	r4, [sp], #-863	; 0x35f
    1294:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1298:	6f4d5f4f 	svcvs	0x004d5f4f
    129c:	4f5f6564 	svcmi	0x005f6564
    12a0:	4f5f7475 	svcmi	0x005f7475
    12a4:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
    12a8:	56524553 			; <UNDEFINED> instruction: 0x56524553
    12ac:	30314445 	eorscc	r4, r1, r5, asr #8
    12b0:	53455200 	movtpl	r5, #20992	; 0x5200
    12b4:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
    12b8:	00313144 	eorseq	r3, r1, r4, asr #2
    12bc:	52454349 	subpl	r4, r5, #603979777	; 0x24000001
    12c0:	64646100 	strbtvs	r6, [r4], #-256	; 0x100
    12c4:	53550072 	cmppl	r5, #114	; 0x72
    12c8:	5f545241 	svcpl	0x00545241
    12cc:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xe49
    12d0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    12d4:	00666544 	rsbeq	r6, r6, r4, asr #10
    12d8:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
    12dc:	63757600 	cmnvs	r5, #0, 12
    12e0:	52003233 	andpl	r3, r0, #805306371	; 0x30000003
    12e4:	415f4343 	cmpmi	pc, r3, asr #6
    12e8:	50324250 	eorspl	r4, r2, r0, asr r2
    12ec:	70697265 	rsbvc	r7, r9, r5, ror #4
    12f0:	6f6c4368 	svcvs	0x006c4368
    12f4:	6d436b63 	vstrvs	d22, [r3, #-396]	; 0xfffffe74
    12f8:	54520064 	ldrbpl	r0, [r2], #-100	; 0x64
    12fc:	00524343 	subseq	r4, r2, r3, asr #6
    1300:	4f495047 	svcmi	0x00495047
    1304:	65657053 	strbvs	r7, [r5, #-83]!	; 0x53
    1308:	79545f64 	ldmdbvc	r4, {r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    130c:	65446570 	strbvs	r6, [r4, #-1392]	; 0x570
    1310:	61620066 	cmnvs	r2, r6, rrx
    1314:	70006b6e 	andvc	r6, r0, lr, ror #22
    1318:	41656761 	cmnmi	r5, r1, ror #14
    131c:	00726464 	rsbseq	r6, r2, r4, ror #8
    1320:	6f57686c 	svcvs	0x0057686c
    1324:	49006472 	stmdbmi	r0, {r1, r4, r5, r6, sl, sp, lr}
    1328:	00525053 	subseq	r5, r2, r3, asr r0
    132c:	706d756a 	rsbvc	r7, sp, sl, ror #10
    1330:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1334:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1338:	6f4d5f4f 	svcvs	0x004d5f4f
    133c:	495f6564 	ldmdbmi	pc, {r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1340:	4c465f4e 	mcrrmi	15, 4, r5, r6, cr14
    1344:	4954414f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, r8, lr}^
    1348:	5200474e 	andpl	r4, r0, #20447232	; 0x1380000
    134c:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1350:	37444556 	smlsldcc	r4, r4, r6, r5	; <UNPREDICTABLE>
    1354:	57686800 	strbpl	r6, [r8, -r0, lsl #16]!
    1358:	0064726f 	rsbeq	r7, r4, pc, ror #4
    135c:	70706d74 	rsbsvc	r6, r0, r4, ror sp
    1360:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
    1364:	00797469 	rsbseq	r7, r9, r9, ror #8
    1368:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    136c:	43705574 	cmnmi	r0, #116, 10	; 0x1d000000
    1370:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1374:	4c007265 	sfmmi	f7, 4, [r0], {101}	; 0x65
    1378:	00524b43 	subseq	r4, r2, r3, asr #22
    137c:	5f554644 	svcpl	0x00554644
    1380:	4f4c5055 	svcmi	0x004c5055
    1384:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    1388:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    138c:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    1390:	30373030 	eorscc	r3, r7, r0, lsr r0
    1394:	73003030 	movwvc	r3, #48	; 0x30
    1398:	74726174 	ldrbtvc	r6, [r2], #-372	; 0x174
    139c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    13a0:	73750065 	cmnvc	r5, #101	; 0x65
    13a4:	70417265 	subvc	r7, r1, r5, ror #4
    13a8:	64644170 	strbtvs	r4, [r4], #-368	; 0x170
    13ac:	46440072 			; <UNDEFINED> instruction: 0x46440072
    13b0:	50555f55 	subspl	r5, r5, r5, asr pc
    13b4:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    13b8:	414c465f 	cmpmi	ip, pc, asr r6
    13bc:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    13c0:	30303858 	eorscc	r3, r0, r8, asr r8
    13c4:	30303032 	eorscc	r3, r0, r2, lsr r0
    13c8:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    13cc:	53746553 	cmnpl	r4, #348127232	; 0x14c00000
    13d0:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    13d4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    13d8:	6f6c7055 	svcvs	0x006c7055
    13dc:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
    13e0:	5f736570 	svcpl	0x00736570
    13e4:	66640074 			; <UNDEFINED> instruction: 0x66640074
    13e8:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
    13ec:	4464616f 	strbtmi	r6, [r4], #-367	; 0x16f
    13f0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    13f4:	5f554644 	svcpl	0x00554644
    13f8:	4f4c5055 	svcmi	0x004c5055
    13fc:	525f4441 	subspl	r4, pc, #1090519040	; 0x41000000
    1400:	72004d41 	andvc	r4, r0, #4160	; 0x1040
    1404:	42766365 	rsbsmi	r6, r6, #-1811939327	; 0x94000001
    1408:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    140c:	66640072 			; <UNDEFINED> instruction: 0x66640072
    1410:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    1414:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
    1418:	0044414f 	subeq	r4, r4, pc, asr #2
    141c:	73696874 	cmnvc	r9, #116, 16	; 0x740000
    1420:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1424:	6e654c6b 	cdpvs	12, 6, cr4, cr5, cr11, {3}
    1428:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    142c:	61647055 	qdsubvs	r7, r5, r4
    1430:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
    1434:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0x954
    1438:	0074756f 	rsbseq	r7, r4, pc, ror #10
    143c:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
    1440:	00797375 	rsbseq	r7, r9, r5, ror r3
    1444:	4f4c505f 	svcmi	0x004c505f
    1448:	46440054 			; <UNDEFINED> instruction: 0x46440054
    144c:	50555f55 	subspl	r5, r5, r5, asr pc
    1450:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1454:	414c465f 	cmpmi	ip, pc, asr r6
    1458:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
    145c:	30303858 	eorscc	r3, r0, r8, asr r8
    1460:	30303036 	eorscc	r3, r0, r6, lsr r0
    1464:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
    1468:	7500632e 	strvc	r6, [r0, #-814]	; 0x32e
    146c:	53726573 	cmnpl	r2, #482344960	; 0x1cc00000
    1470:	65636170 	strbvs	r6, [r3, #-368]!	; 0x170
    1474:	74536900 	ldrbvc	r6, [r3], #-2304	; 0x900
    1478:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    147c:	6c707500 	cfldr64vs	mvdx7, [r0], #-0
    1480:	4264616f 	rsbmi	r6, r4, #-1073741797	; 0xc000001b
    1484:	6b636f6c 	blvs	18dd23c <__Stack_Size+0x18dca3c>
    1488:	006e654c 	rsbeq	r6, lr, ip, asr #10
    148c:	5f554644 	svcpl	0x00554644
    1490:	4f4c5055 	svcmi	0x004c5055
    1494:	465f4441 	ldrbmi	r4, [pc], -r1, asr #8
    1498:	4853414c 	ldmdami	r3, {r2, r3, r6, r8, lr}^
    149c:	3858305f 	ldmdacc	r8, {r0, r1, r2, r3, r4, r6, ip, sp}^
    14a0:	30383030 	eorscc	r3, r8, r0, lsr r0
    14a4:	44003030 	strmi	r3, [r0], #-48	; 0x30
    14a8:	555f5546 	ldrbpl	r5, [pc, #-1350]	; f6a <__Stack_Size+0x76a>
    14ac:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
    14b0:	4f4e5f44 	svcmi	0x004e5f44
    14b4:	7500454e 	strvc	r4, [r0, #-1358]	; 0x54e
    14b8:	46726573 			; <UNDEFINED> instruction: 0x46726573
    14bc:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
    14c0:	4c657261 	sfmmi	f7, 2, [r5], #-388	; 0xfffffe7c
    14c4:	64006e65 	strvs	r6, [r0], #-3685	; 0xe65
    14c8:	70417566 	subvc	r7, r1, r6, ror #10
    14cc:	61745370 	cmnvs	r4, r0, ror r3
    14d0:	00737574 	rsbseq	r7, r3, r4, ror r5
    14d4:	5546445f 	strbpl	r4, [r6, #-1119]	; 0x45f
    14d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14dc:	6c007375 	stcvs	3, cr7, [r0], {117}	; 0x75
    14e0:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
    14e4:	66640068 	strbtvs	r0, [r4], -r8, rrx
    14e8:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    14ec:	61745379 	cmnvs	r4, r9, ror r3
    14f0:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
    14f4:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    14f8:	64007375 	strvs	r7, [r0], #-885	; 0x375
    14fc:	6f437566 	svcvs	0x00437566
    1500:	4e447970 	mcrmi	9, 2, r7, cr4, cr0, {3}
    1504:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
    1508:	50776200 	rsbspl	r6, r7, r0, lsl #4
    150c:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
    1510:	6f656d69 	svcvs	0x00656d69
    1514:	00307475 	eorseq	r7, r0, r5, ror r4
    1518:	6f507762 	svcvs	0x00507762
    151c:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
    1520:	756f656d 	strbvc	r6, [pc, #-1389]!	; fbb <__Stack_Size+0x7bb>
    1524:	62003174 	andvs	r3, r0, #116, 2
    1528:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; 1354 <__Stack_Size+0xb54>
    152c:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
    1530:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
    1534:	45420032 	strbmi	r0, [r2, #-50]	; 0x32
    1538:	4e4e4947 	cdpmi	9, 4, cr4, cr14, cr7, {2}
    153c:	00474e49 	subeq	r4, r7, r9, asr #28
    1540:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
    1544:	5379706f 	cmnpl	r9, #111	; 0x6f
    1548:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    154c:	6f630073 	svcvs	0x00630073
    1550:	635f6564 	cmpvs	pc, #100, 10	; 0x19000000
    1554:	5f79706f 	svcpl	0x0079706f
    1558:	6b636f6c 	blvs	18dd310 <__Stack_Size+0x18dcb10>
    155c:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
    1560:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
    1564:	5f44414f 	svcpl	0x0044414f
    1568:	53414c46 	movtpl	r4, #7238	; 0x1c46
    156c:	58305f48 	ldmdapl	r0!, {r3, r6, r8, r9, sl, fp, ip, lr}
    1570:	35303038 	ldrcc	r3, [r0, #-56]!	; 0x38
    1574:	00303030 	eorseq	r3, r0, r0, lsr r0
    1578:	47756664 	ldrbmi	r6, [r5, -r4, ror #12]!
    157c:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
    1580:	00657461 	rsbeq	r7, r5, r1, ror #8
    1584:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
    1588:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
    158c:	4d00646e 	cfstrsmi	mvf6, [r0, #-440]	; 0xfffffe48
    1590:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
    1594:	73750045 	cmnvc	r5, #69	; 0x45
    1598:	70557265 	subsvc	r7, r5, r5, ror #4
    159c:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    15a0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    15a4:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    15a8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    15ac:	66640065 	strbtvs	r0, [r4], -r5, rrx
    15b0:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
    15b4:	66754279 			; <UNDEFINED> instruction: 0x66754279
    15b8:	54726566 	ldrbtpl	r6, [r2], #-1382	; 0x566
    15bc:	6578456f 	ldrbvs	r4, [r8, #-1391]!	; 0x56f
    15c0:	53620063 	cmnpl	r2, #99	; 0x63
    15c4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    15c8:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    15cc:	632f3931 	teqvs	pc, #802816	; 0xc4000
    15d0:	31353532 	teqcc	r5, r2, lsr r5
    15d4:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    15d8:	645f6378 	ldrbvs	r6, [pc], #-888	; 15e0 <__Stack_Size+0xde0>
    15dc:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    15e0:	32660065 	rsbcc	r0, r6, #101	; 0x65
    15e4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15e8:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    15ec:	32630079 	rsbcc	r0, r3, #121	; 0x79
    15f0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    15f4:	7361625f 	cmnvc	r1, #-268435451	; 0xf0000005
    15f8:	00785f65 	rsbseq	r5, r8, r5, ror #30
    15fc:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    1600:	615f3931 	cmpvs	pc, r1, lsr r9	; <UNPREDICTABLE>
    1604:	66006464 	strvs	r6, [r0], -r4, ror #8
    1608:	31353532 	teqcc	r5, r2, lsr r5
    160c:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    1610:	00635f6c 	rsbeq	r5, r3, ip, ror #30
    1614:	71733178 	cmnvc	r3, r8, ror r1
    1618:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    161c:	5f393135 	svcpl	0x00393135
    1620:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1624:	7173317a 	cmnvc	r3, sl, ror r1
    1628:	35326300 	ldrcc	r6, [r2, #-768]!	; 0x300
    162c:	5f393135 	svcpl	0x00393135
    1630:	6c756d73 	ldclvs	13, cr6, [r5], #-460	; 0xfffffe34
    1634:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
    1638:	20432055 	subcs	r2, r3, r5, asr r0
    163c:	2e382e34 	mrccs	14, 1, r2, cr8, cr4, {1}
    1640:	30322034 	eorscc	r2, r2, r4, lsr r0
    1644:	37303431 			; <UNDEFINED> instruction: 0x37303431
    1648:	28203532 	stmdacs	r0!, {r1, r4, r5, r8, sl, ip, sp}
    164c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0x572
    1650:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1654:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    1658:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
    165c:	64646562 	strbtvs	r6, [r4], #-1378	; 0x562
    1660:	342d6465 	strtcc	r6, [sp], #-1125	; 0x465
    1664:	622d385f 	eorvs	r3, sp, #6225920	; 0x5f0000
    1668:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    166c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0x68
    1670:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    1674:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
    1678:	34313331 	ldrtcc	r3, [r1], #-817	; 0x331
    167c:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    1680:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    1684:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    1688:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0x36d
    168c:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
    1690:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    1694:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
    1698:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0x46d
    169c:	692d626d 	pushvs	{r0, r2, r3, r5, r6, r9, sp, lr}
    16a0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    16a4:	6b726f77 	blvs	1c9d488 <__Stack_Size+0x1c9cc88>
    16a8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    16ac:	20334f2d 	eorscs	r4, r3, sp, lsr #30
    16b0:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0x62d
    16b4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    16b8:	732d6e6f 	teqvc	sp, #1776	; 0x6f0
    16bc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16c0:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    16c4:	6164662d 	cmnvs	r4, sp, lsr #12
    16c8:	732d6174 	teqvc	sp, #116, 2
    16cc:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    16d0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
    16d4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    16d8:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    16dc:	78006275 	stmdavc	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
    16e0:	00317a31 	eorseq	r7, r1, r1, lsr sl
    16e4:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    16e8:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    16ec:	616d726f 	cmnvs	sp, pc, ror #4
    16f0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
    16f4:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    16f8:	5f393135 	svcpl	0x00393135
    16fc:	5f6c756d 	svcpl	0x006c756d
    1700:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
    1704:	636e6974 	cmnvs	lr, #116, 18	; 0x1d0000
    1708:	32660074 	rsbcc	r0, r6, #116	; 0x74
    170c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1710:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    1714:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    1718:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
    171c:	66007463 	strvs	r7, [r0], -r3, ror #8
    1720:	31353532 	teqcc	r5, r2, lsr r5
    1724:	65735f39 	ldrbvs	r5, [r3, #-3897]!	; 0xf39
    1728:	7463656c 	strbtvc	r6, [r3], #-1388	; 0x56c
    172c:	5f637800 	svcpl	0x00637800
    1730:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    1734:	00646461 	rsbeq	r6, r4, r1, ror #8
    1738:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    173c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1740:	5f393135 	svcpl	0x00393135
    1744:	72007165 	andvc	r7, r0, #1073741849	; 0x40000019
    1748:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xf5f
    174c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1750:	00797063 	rsbseq	r7, r9, r3, rrx
    1754:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1758:	5f393135 	svcpl	0x00393135
    175c:	6b636170 	blvs	18d9d24 <__Stack_Size+0x18d9524>
    1760:	72617000 	rsbvc	r7, r1, #0
    1764:	00797469 	rsbseq	r7, r9, r9, ror #8
    1768:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    176c:	5f393135 	svcpl	0x00393135
    1770:	00646461 	rsbeq	r6, r4, r1, ror #8
    1774:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1778:	5f393135 	svcpl	0x00393135
    177c:	5f797274 	svcpl	0x00797274
    1780:	61706e75 	cmnvs	r0, r5, ror lr
    1784:	65006b63 	strvs	r6, [r0, #-2915]	; 0xb63
    1788:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    178c:	705f3931 	subsvc	r3, pc, r1, lsr r9	; <UNPREDICTABLE>
    1790:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    1794:	32007463 	andcc	r7, r0, #1660944384	; 0x63000000
    1798:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    179c:	3264652f 	rsbcc	r6, r4, #197132288	; 0xbc00000
    17a0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17a4:	6500632e 	strvs	r6, [r0, #-814]	; 0x32e
    17a8:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    17ac:	735f3931 	cmpvc	pc, #802816	; 0xc4000
    17b0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0x56d
    17b4:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    17b8:	5f393135 	svcpl	0x00393135
    17bc:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    17c0:	32646500 	rsbcc	r6, r4, #0, 10
    17c4:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    17c8:	706e755f 	rsbvc	r7, lr, pc, asr r5
    17cc:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xf72
    17d0:	65007463 	strvs	r7, [r0, #-1123]	; 0x463
    17d4:	35353264 	ldrcc	r3, [r5, #-612]!	; 0x264
    17d8:	6e5f3931 	mrcvs	9, 2, r3, cr15, cr1, {1}
    17dc:	72747565 	rsbsvc	r7, r4, #423624704	; 0x19400000
    17e0:	66006c61 	strvs	r6, [r0], -r1, ror #24
    17e4:	31353532 	teqcc	r5, r2, lsr r5
    17e8:	71735f39 	cmnvc	r3, r9, lsr pc
    17ec:	66007472 			; <UNDEFINED> instruction: 0x66007472
    17f0:	31353532 	teqcc	r5, r2, lsr r5
    17f4:	656e5f39 	strbvs	r5, [lr, #-3897]!	; 0xf39
    17f8:	64650067 	strbtvs	r0, [r5], #-103	; 0x67
    17fc:	31353532 	teqcc	r5, r2, lsr r5
    1800:	6f645f39 	svcvs	0x00645f39
    1804:	656c6275 	strbvs	r6, [ip, #-629]!	; 0x275
    1808:	32646500 	rsbcc	r6, r4, #0, 10
    180c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1810:	0074705f 	rsbseq	r7, r4, pc, asr r0
    1814:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    1818:	5f393135 	svcpl	0x00393135
    181c:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0x162
    1820:	32646500 	rsbcc	r6, r4, #0, 10
    1824:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1828:	706f635f 	rsbvc	r6, pc, pc, asr r3	; <UNPREDICTABLE>
    182c:	64650079 	strbtvs	r0, [r5], #-121	; 0x79
    1830:	31353532 	teqcc	r5, r2, lsr r5
    1834:	00645f39 	rsbeq	r5, r4, r9, lsr pc
    1838:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    183c:	5f393135 	svcpl	0x00393135
    1840:	6873006b 	ldmdavs	r3!, {r0, r1, r3, r5, r6}^
    1844:	32313561 	eorscc	r3, r1, #406847488	; 0x18400000
    1848:	6e69665f 	mcrvs	6, 3, r6, cr9, cr15, {2}
    184c:	69006c61 	stmdbvs	r0, {r0, r5, r6, sl, fp, sp, lr}
    1850:	5f74696e 	svcpl	0x0074696e
    1854:	636f6c62 	cmnvs	pc, #25088	; 0x6200
    1858:	3532006b 	ldrcc	r0, [r2, #-107]!	; 0x6b
    185c:	2f393135 	svccs	0x00393135
    1860:	69736465 	ldmdbvs	r3!, {r0, r2, r5, r6, sl, sp, lr}^
    1864:	632e6e67 	teqvs	lr, #1648	; 0x670
    1868:	32646500 	rsbcc	r6, r4, #0, 10
    186c:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1870:	6572705f 	ldrbvs	r7, [r2, #-95]!	; 0x5f
    1874:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0x170
    1878:	72706600 	rsbsvc	r6, r0, #0, 12
    187c:	5f656d69 	svcpl	0x00656d69
    1880:	00646461 	rsbeq	r6, r4, r1, ror #8
    1884:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1888:	695f3231 	ldmdbvs	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    188c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
    1890:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1894:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1898:	61687300 	cmnvs	r8, r0, lsl #6
    189c:	5f323135 	svcpl	0x00323135
    18a0:	00746567 	rsbseq	r6, r4, r7, ror #10
    18a4:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    18a8:	6d5f656d 	cfldr64vs	mvdx6, [pc, #-436]	; 16fc <__Stack_Size+0xefc>
    18ac:	65006c75 	strvs	r6, [r0, #-3189]	; 0xc75
    18b0:	6e617078 	mcrvs	0, 3, r7, cr1, cr8, {3}
    18b4:	656b5f64 	strbvs	r5, [fp, #-3940]!	; 0xf64
    18b8:	78650079 	stmdavc	r5!, {r0, r3, r4, r5, r6}^
    18bc:	646e6170 	strbtvs	r6, [lr], #-368	; 0x170
    18c0:	6f006465 	svcvs	0x00006465
    18c4:	665f7475 			; <UNDEFINED> instruction: 0x665f7475
    18c8:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0x70
    18cc:	74657263 	strbtvc	r7, [r5], #-611	; 0x263
    18d0:	63617000 	cmnvs	r1, #0
    18d4:	0064656b 	rsbeq	r6, r4, fp, ror #10
    18d8:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    18dc:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0x46e
    18e0:	6b00745f 	blvs	1ea64 <__Stack_Size+0x1e264>
    18e4:	5f6e6567 	svcpl	0x006e6567
    18e8:	0079656b 	rsbseq	r6, r9, fp, ror #10
    18ec:	66657270 			; <UNDEFINED> instruction: 0x66657270
    18f0:	735f7869 	cmpvc	pc, #6881280	; 0x690000
    18f4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    18f8:	35326465 	ldrcc	r6, [r2, #-1125]!	; 0x465
    18fc:	5f393135 	svcpl	0x00393135
    1900:	6564726f 	strbvs	r7, [r4, #-623]!	; 0x26f
    1904:	70660072 	rsbvc	r0, r6, r2, ror r0
    1908:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    190c:	6f72665f 	svcvs	0x0072665f
    1910:	79625f6d 	stmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    1914:	00736574 	rsbseq	r6, r3, r4, ror r5
    1918:	68736168 	ldmdavs	r3!, {r3, r5, r6, r8, sp, lr}^
    191c:	73656d5f 	cmnvc	r5, #6080	; 0x17c0
    1920:	65676173 	strbvs	r6, [r7, #-371]!	; 0x173
    1924:	73616800 	cmnvc	r1, #0, 16
    1928:	69775f68 	ldmdbvs	r7!, {r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    192c:	705f6874 	subsvc	r6, pc, r4, ror r8	; <UNPREDICTABLE>
    1930:	69666572 	stmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1934:	6d730078 	ldclvs	0, cr0, [r3, #-480]!	; 0xfffffe20
    1938:	6361705f 	cmnvs	r1, #95	; 0x5f
    193c:	6567006b 	strbvs	r0, [r7, #-107]!	; 0x6b
    1940:	6172656e 	cmnvs	r2, lr, ror #10
    1944:	6b5f6574 	blvs	17daf1c <__Stack_Size+0x17da71c>
    1948:	61687300 	cmnvs	r8, r0, lsl #6
    194c:	5f323135 	svcpl	0x00323135
    1950:	74617473 	strbtvc	r7, [r1], #-1139	; 0x473
    1954:	64650065 	strbtvs	r0, [r5], #-101	; 0x65
    1958:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    195c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
    1960:	00796669 	rsbseq	r6, r9, r9, ror #12
    1964:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1968:	695f3231 	ldmdbvs	pc, {r0, r4, r5, r9, ip, sp}^	; <UNPREDICTABLE>
    196c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1970:	35616873 	strbcc	r6, [r1, #-2163]!	; 0x873
    1974:	625f3231 	subsvs	r3, pc, #268435459	; 0x10000003
    1978:	6b636f6c 	blvs	18dd730 <__Stack_Size+0x18dcf30>
    197c:	35326600 	ldrcc	r6, [r2, #-1536]!	; 0x600
    1980:	5f393135 	svcpl	0x00393135
    1984:	6f72657a 	svcvs	0x0072657a
    1988:	70786500 	rsbsvc	r6, r8, r0, lsl #10
    198c:	33323532 	teqcc	r2, #209715200	; 0xc800000
    1990:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1994:	662f3931 			; <UNDEFINED> instruction: 0x662f3931
    1998:	31353532 	teqcc	r5, r2, lsr r5
    199c:	00632e39 	rsbeq	r2, r3, r9, lsr lr
    19a0:	35353266 	ldrcc	r3, [r5, #-614]!	; 0x266
    19a4:	695f3931 	ldmdbvs	pc, {r0, r4, r5, r8, fp, ip, sp}^	; <UNPREDICTABLE>
    19a8:	6600766e 	strvs	r7, [r0], -lr, ror #12
    19ac:	31353532 	teqcc	r5, r2, lsr r5
    19b0:	756d5f39 	strbvc	r5, [sp, #-3897]!	; 0xf39
    19b4:	6f63006c 	svcvs	0x0063006c
    19b8:	7469646e 	strbtvc	r6, [r9], #-1134	; 0x46e
    19bc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    19c0:	756e696d 	strbvc	r6, [lr, #-2413]!	; 0x96d
    19c4:	70007073 	andvc	r7, r0, r3, ror r0
    19c8:	6f6c6572 	svcvs	0x006c6572
    19cc:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
    19d0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    19d4:	65727000 	ldrbvs	r7, [r2, #-0]!
    19d8:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    19dc:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
    19e0:	70660073 	rsbvc	r0, r6, r3, ror r0
    19e4:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    19e8:	766e695f 			; <UNDEFINED> instruction: 0x766e695f
    19ec:	69627200 	stmdbvs	r2!, {r9, ip, sp, lr}^
    19f0:	70007374 	andvc	r7, r0, r4, ror r3
    19f4:	6173756c 	cmnvs	r3, ip, ror #10
    19f8:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    19fc:	6e5f7466 	cdpvs	4, 5, cr7, cr15, cr6, {3}
    1a00:	7469625f 	strbtvc	r6, [r9], #-607	; 0x25f
    1a04:	70660073 	rsbvc	r0, r6, r3, ror r0
    1a08:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1a0c:	6c65735f 	stclvs	3, cr7, [r5], #-380	; 0xfffffe84
    1a10:	00746365 	rsbseq	r6, r4, r5, ror #6
    1a14:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    1a18:	735f656d 	cmpvc	pc, #457179136	; 0x1b400000
    1a1c:	6d006275 	sfmvs	f6, 4, [r0, #-468]	; 0xfffffe2c
    1a20:	695f6e69 	ldmdbvs	pc, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    1a24:	6d00746e 	cfstrsvs	mvf7, [r0, #-440]	; 0xfffffe48
    1a28:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1a2c:	66007375 			; <UNDEFINED> instruction: 0x66007375
    1a30:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a34:	657a5f65 	ldrbvs	r5, [sl, #-3941]!	; 0xf65
    1a38:	72006f72 	andvc	r6, r0, #456	; 0x1c8
    1a3c:	745f7761 	ldrbvc	r7, [pc], #-1889	; 1a44 <__Stack_Size+0x1244>
    1a40:	735f7972 	cmpvc	pc, #1867776	; 0x1c8000
    1a44:	70006275 	andvc	r6, r0, r5, ror r2
    1a48:	656d6972 	strbvs	r6, [sp, #-2418]!	; 0x972
    1a4c:	62736d5f 	rsbsvs	r6, r3, #6080	; 0x17c0
    1a50:	72706600 	rsbsvc	r6, r0, #0, 12
    1a54:	5f656d69 	svcpl	0x00656d69
    1a58:	66007165 	strvs	r7, [r0], -r5, ror #2
    1a5c:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a60:	6f6c5f65 	svcvs	0x006c5f65
    1a64:	66006461 	strvs	r6, [r0], -r1, ror #8
    1a68:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    1a6c:	6f635f65 	svcvs	0x00635f65
    1a70:	32007970 	andcc	r7, r0, #112, 18	; 0x1c0000
    1a74:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1a78:	7270662f 	rsbsvc	r6, r0, #49283072	; 0x2f00000
    1a7c:	2e656d69 	cdpcs	13, 6, cr6, cr5, cr9, {3}
    1a80:	72700063 	rsbsvc	r0, r0, #99	; 0x63
    1a84:	616f6c65 	cmnvs	pc, r5, ror #24
    1a88:	6f745f64 	svcvs	0x00745f64
    1a8c:	006c6174 	rsbeq	r6, ip, r4, ror r1
    1a90:	69727066 	ldmdbvs	r2!, {r1, r2, r5, r6, ip, sp, lr}^
    1a94:	6e5f656d 	cdpvs	5, 5, cr6, cr15, cr13, {3}
    1a98:	616d726f 	cmnvs	sp, pc, ror #4
    1a9c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0x96c
    1aa0:	77617200 	strbvc	r7, [r1, -r0, lsl #4]!
    1aa4:	6464615f 	strbtvs	r6, [r4], #-351	; 0x15f
    1aa8:	72706600 	rsbsvc	r6, r0, #0, 12
    1aac:	5f656d69 	svcpl	0x00656d69
    1ab0:	00656e6f 	rsbeq	r6, r5, pc, ror #28
    1ab4:	31353532 	teqcc	r5, r2, lsr r5
    1ab8:	6f6d2f39 	svcvs	0x006d2f39
    1abc:	32687072 	rsbcc	r7, r8, #114	; 0x72
    1ac0:	39313535 	ldmdbcc	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
    1ac4:	7900632e 	stmdbvc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1ac8:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
    1acc:	726f6d00 	rsbvc	r6, pc, #0, 26
    1ad0:	35326870 	ldrcc	r6, [r2, #-2160]!	; 0x870
    1ad4:	5f393135 	svcpl	0x00393135
    1ad8:	006d3265 	rsbeq	r3, sp, r5, ror #4
    1adc:	6532786d 	ldrvs	r7, [r2, #-2157]!	; 0x86d
    1ae0:	6f6d0079 	svcvs	0x006d0079
    1ae4:	6f67746e 	svcvs	0x0067746e
    1ae8:	7972656d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    1aec:	32796500 	rsbscc	r6, r9, #0, 10
    1af0:	6d007865 	stcvs	8, cr7, [r0, #-404]	; 0xfffffe6c
    1af4:	6870726f 	ldmdavs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    1af8:	31353532 	teqcc	r5, r2, lsr r5
    1afc:	326d5f39 	rsbcc	r5, sp, #57, 30	; 0xe4
    1b00:	6d790065 	ldclvs	0, cr0, [r9, #-404]!	; 0xfffffe6c
    1b04:	73756e69 	cmnvc	r5, #1680	; 0x690
    1b08:	67736d00 	ldrbvs	r6, [r3, -r0, lsl #26]!
    1b0c:	006e656c 	rsbeq	r6, lr, ip, ror #10
    1b10:	7466656c 	strbtvc	r6, [r6], #-1388	; 0x56c
    1b14:	6c696600 	stclvs	6, cr6, [r9], #-0
    1b18:	6170006c 	cmnvs	r0, ip, rrx
    1b1c:	68006e64 	stmdavs	r0, {r2, r5, r6, r9, sl, fp, sp, lr}
    1b20:	00686769 	rsbeq	r6, r8, r9, ror #14
    1b24:	31353532 	teqcc	r5, r2, lsr r5
    1b28:	68732f39 	ldmdavs	r3!, {r0, r3, r4, r5, r8, r9, sl, fp, sp}^
    1b2c:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    1b30:	7300632e 	movwvc	r6, #814	; 0x32e
    1b34:	35326168 	ldrcc	r6, [r2, #-360]!	; 0x168
    1b38:	72705f36 	rsbsvc	r5, r0, #54, 30	; 0xd8
    1b3c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    1b40:	65740073 	ldrbvs	r0, [r4, #-115]!	; 0x73
    1b44:	0031706d 	eorseq	r7, r1, sp, rrx
    1b48:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1b4c:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
    1b50:	36353261 	ldrtcc	r3, [r5], -r1, ror #4
    1b54:	6461705f 	strbtvs	r7, [r1], #-95	; 0x5f
    1b58:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1b5c:	67696400 	strbvs	r6, [r9, -r0, lsl #8]!
    1b60:	00747365 	rsbseq	r7, r4, r5, ror #6
    1b64:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0x16c
    1b68:	746f7400 	strbtvc	r7, [pc], #-1024	; 1b70 <__Stack_Size+0x1370>
    1b6c:	735f6c61 	cmpvc	pc, #24832	; 0x6100
    1b70:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1b74:	35316977 	ldrcc	r6, [r1, #-2423]!	; 0x977
    1b78:	73616c00 	cmnvc	r1, #0, 24
    1b7c:	69735f74 	ldmdbvs	r3!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1b80:	6f00657a 	svcvs	0x0000657a
    1b84:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0x666
    1b88:	65740074 	ldrbvs	r0, [r4, #-116]!	; 0x74
    1b8c:	7200706d 	andvc	r7, r0, #109	; 0x6d
    1b90:	3436746f 	ldrtcc	r7, [r6], #-1135	; 0x46f
    1b94:	6f747300 	svcvs	0x00747300
    1b98:	34366572 	ldrtcc	r6, [r6], #-1394	; 0x572
    1b9c:	35353200 	ldrcc	r3, [r5, #-512]!	; 0x200
    1ba0:	732f3931 	teqvc	pc, #802816	; 0xc4000
    1ba4:	31356168 	teqcc	r5, r8, ror #2
    1ba8:	00632e32 	rsbeq	r2, r3, r2, lsr lr
    1bac:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
    1bb0:	72003436 	andvc	r3, r0, #905969664	; 0x36000000
    1bb4:	646e756f 	strbtvs	r7, [lr], #-1391	; 0x56f
    1bb8:	76006b5f 			; <UNDEFINED> instruction: 0x76006b5f
    1bbc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1bc0:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1bc4:	6f636564 	svcvs	0x00636564
    1bc8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1bcc:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
    1bd0:	5f687467 	svcpl	0x00687467
    1bd4:	66006e69 	strvs	r6, [r0], -r9, ror #28
    1bd8:	6d676172 	stfvse	f6, [r7, #-456]!	; 0xfffffe38
    1bdc:	00746e65 	rsbseq	r6, r4, r5, ror #28
    1be0:	6f636564 	svcvs	0x00636564
    1be4:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1be8:	7a69735f 	bvc	1a5e96c <__Stack_Size+0x1a5e16c>
    1bec:	6f630065 	svcvs	0x00630065
    1bf0:	68636564 	stmdavs	r3!, {r2, r5, r6, r8, sl, sp, lr}^
    1bf4:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
    1bf8:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    1bfc:	65645f34 	strbvs	r5, [r4, #-3892]!	; 0xf34
    1c00:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c04:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    1c08:	63006575 	movwvs	r6, #1397	; 0x575
    1c0c:	5f65646f 	svcpl	0x0065646f
    1c10:	73006e69 	movwvc	r6, #3689	; 0xe69
    1c14:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    1c18:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1c1c:	69616c70 	stmdbvs	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1c20:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1c24:	756f5f74 	strbvc	r5, [pc, #-3956]!	; cb8 <__Stack_Size+0x4b8>
    1c28:	61620074 	smcvs	8196	; 0x2004
    1c2c:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
    1c30:	6564632f 	strbvs	r6, [r4, #-815]!	; 0x32f
    1c34:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c38:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
    1c3c:	36657361 	strbtcc	r7, [r5], -r1, ror #6
    1c40:	6e655f34 	mcrvs	15, 3, r5, cr5, cr4, {1}
    1c44:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c48:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
    1c4c:	70006575 	andvc	r6, r0, r5, ror r5
    1c50:	6e69616c 	powvsez	f6, f1, #4.0
    1c54:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0x574
    1c58:	00646e65 	rsbeq	r6, r4, r5, ror #28
    1c5c:	69616c70 	stmdbvs	r1!, {r4, r5, r6, sl, fp, sp, lr}^
    1c60:	7865746e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    1c64:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    1c68:	636e6500 	cmnvs	lr, #0, 10
    1c6c:	6e69646f 	cdpvs	4, 6, cr6, cr9, cr15, {3}
    1c70:	48430067 	stmdami	r3, {r0, r1, r2, r5, r6}^
    1c74:	5f535241 	svcpl	0x00535241
    1c78:	5f524550 	svcpl	0x00524550
    1c7c:	454e494c 	strbmi	r4, [lr, #-2380]	; 0x94c
    1c80:	646f6300 	strbtvs	r6, [pc], #-768	; 1c88 <__Stack_Size+0x1488>
    1c84:	756f5f65 	strbvc	r5, [pc, #-3941]!	; d27 <__Stack_Size+0x527>
    1c88:	61620074 	smcvs	8196	; 0x2004
    1c8c:	34366573 	ldrtcc	r6, [r6], #-1395	; 0x573
    1c90:	6e65632f 	cdpvs	3, 6, cr6, cr5, cr15, {1}
    1c94:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xf63
    1c98:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1c9c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    1ca0:	6800632e 	stmdavs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    1ca4:	65646165 	strbvs	r6, [r4, #-357]!	; 0x165
    1ca8:	656e0072 	strbvs	r0, [lr, #-114]!	; 0x72
    1cac:	6e614877 	mcrvs	8, 3, r4, cr1, cr7, {3}
    1cb0:	00656c64 	rsbeq	r6, r5, r4, ror #24
    1cb4:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1cb8:	6f6f5265 	svcvs	0x006f5265
    1cbc:	61654874 	smcvs	21636	; 0x5484
    1cc0:	00726564 	rsbseq	r6, r2, r4, ror #10
    1cc4:	32787463 	rsbscc	r7, r8, #1660944384	; 0x63000000
    1cc8:	67616d00 	strbvs	r6, [r1, -r0, lsl #26]!
    1ccc:	64006369 	strvs	r6, [r0], #-873	; 0x369
    1cd0:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    1cd4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1cd8:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1cdc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
    1ce0:	616d6900 	cmnvs	sp, r0, lsl #18
    1ce4:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    1ce8:	66006570 			; <UNDEFINED> instruction: 0x66006570
    1cec:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    1cf0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1cf4:	00737365 	rsbseq	r7, r3, r5, ror #6
    1cf8:	6e676973 	mcrvs	9, 3, r6, cr7, cr3, {3}
    1cfc:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1d00:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1d04:	6168735f 	cmnvs	r8, pc, asr r3
    1d08:	73363532 	teqvc	r6, #209715200	; 0xc800000
    1d0c:	49006d75 	stmdbmi	r0, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}
    1d10:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    1d14:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    1d18:	45676e69 	strbmi	r6, [r7, #-3689]!	; 0xe69
    1d1c:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    1d20:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
    1d24:	616d6900 	cmnvs	sp, r0, lsl #18
    1d28:	75426567 	strbvc	r6, [r2, #-1383]	; 0x567
    1d2c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1d30:	6f687300 	svcvs	0x00687300
    1d34:	45646c75 	strbmi	r6, [r4, #-3189]!	; 0xc75
    1d38:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
    1d3c:	73616c46 	cmnvc	r1, #17920	; 0x4600
    1d40:	466e4f68 	strbtmi	r4, [lr], -r8, ror #30
    1d44:	006c6961 	rsbeq	r6, ip, r1, ror #18
    1d48:	62676973 	rsbvs	r6, r7, #1884160	; 0x1cc000
    1d4c:	00666675 	rsbeq	r6, r6, r5, ror r6
    1d50:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1d54:	69537265 	ldmdbvs	r3, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1d58:	6900657a 	stmdbvs	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1d5c:	6567616d 	strbvs	r6, [r7, #-365]!	; 0x16d
    1d60:	6e676953 	mcrvs	9, 3, r6, cr7, cr3, {2}
    1d64:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    1d68:	61660065 	cmnvs	r6, r5, rrx
    1d6c:	72456c69 	subvc	r6, r5, #26880	; 0x6900
    1d70:	00657361 	rsbeq	r7, r5, r1, ror #6
    1d74:	67616d49 	strbvs	r6, [r1, -r9, asr #26]!
    1d78:	61654865 	cmnvs	r5, r5, ror #16
    1d7c:	00726564 	rsbseq	r6, r2, r4, ror #10
    1d80:	65657246 	strbvs	r7, [r5, #-582]!	; 0x246
    1d84:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    1d88:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1d8c:	47007265 	strmi	r7, [r0, -r5, ror #4]
    1d90:	78547465 	ldmdavc	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
    1d94:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
    1d98:	6174536c 	cmnvs	r4, ip, ror #6
    1d9c:	00737574 	rsbseq	r7, r3, r4, ror r5
    1da0:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1da4:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1da8:	31667542 	cmncc	r6, r2, asr #10
    1dac:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1db0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1db4:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1db8:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
    1dbc:	65530064 	ldrbvs	r0, [r3, #-100]	; 0x64
    1dc0:	756f4474 	strbvc	r4, [pc, #-1140]!	; 1954 <__Stack_Size+0x1154>
    1dc4:	42656c42 	rsbmi	r6, r5, #16896	; 0x4200
    1dc8:	45666675 	strbmi	r6, [r6, #-1653]!	; 0x675
    1dcc:	61745350 	cmnvs	r4, r0, asr r3
    1dd0:	45006c6c 	strmi	r6, [r0, #-3180]	; 0xc6c
    1dd4:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1dd8:	4f5f4655 	svcmi	0x005f4655
    1ddc:	47005455 	smlsdmi	r0, r5, r4, r5
    1de0:	50457465 	subpl	r7, r5, r5, ror #8
    1de4:	74537852 	ldrbvc	r7, [r3], #-2130	; 0x852
    1de8:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1dec:	676f5400 	strbvs	r5, [pc, -r0, lsl #8]!
    1df0:	44656c67 	strbtmi	r6, [r5], #-3175	; 0xc67
    1df4:	5f474f54 	svcpl	0x00474f54
    1df8:	47005854 	smlsdmi	r0, r4, r8, r5
    1dfc:	50457465 	subpl	r7, r5, r5, ror #8
    1e00:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e04:	00737365 	rsbseq	r7, r3, r5, ror #6
    1e08:	5f50455f 	svcpl	0x0050455f
    1e0c:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1e10:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1e14:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1e18:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    1e1c:	74794200 	ldrbtvc	r4, [r9], #-512	; 0x200
    1e20:	61775365 	cmnvs	r7, r5, ror #6
    1e24:	4e770070 	mrcmi	0, 3, r0, cr7, cr0, {3}
    1e28:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1e2c:	4300736b 	movwmi	r7, #875	; 0x36b
    1e30:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1e34:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1e38:	0058525f 	subseq	r5, r8, pc, asr r2
    1e3c:	64644162 	strbtvs	r4, [r4], #-354	; 0x162
    1e40:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1e44:	544e4374 	strbpl	r4, [lr], #-884	; 0x374
    1e48:	65470052 	strbvs	r0, [r7, #-82]	; 0x52
    1e4c:	53785274 	cmnpl	r8, #116, 4	; 0x40000007
    1e50:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
    1e54:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1e58:	47007375 	smlsdxmi	r0, r5, r3, r7
    1e5c:	41447465 	cmpmi	r4, r5, ror #8
    1e60:	00524444 	subseq	r4, r2, r4, asr #8
    1e64:	756f4377 	strbvc	r4, [pc, #-887]!	; 1af5 <__Stack_Size+0x12f5>
    1e68:	5300746e 	movwpl	r7, #1134	; 0x46e
    1e6c:	50457465 	subpl	r7, r5, r5, ror #8
    1e70:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1e74:	00737365 	rsbseq	r7, r3, r5, ror #6
    1e78:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1e7c:	53785250 	cmnpl	r8, #80, 4
    1e80:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1e84:	6f540073 	svcvs	0x00540073
    1e88:	656c6767 	strbvs	r6, [ip, #-1895]!	; 0x767
    1e8c:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    1e90:	0058525f 	subseq	r5, r8, pc, asr r2
    1e94:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1e98:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1e9c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1ea0:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1ea4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1ea8:	79545045 	ldmdbvc	r4, {r0, r2, r6, ip, lr}^
    1eac:	45006570 	strmi	r6, [r0, #-1392]	; 0x570
    1eb0:	42445f50 	submi	r5, r4, #80, 30	; 0x140
    1eb4:	495f4655 	ldmdbmi	pc, {r0, r2, r4, r6, r9, sl, lr}^	; <UNPREDICTABLE>
    1eb8:	5277004e 	rsbspl	r0, r7, #78	; 0x4e
    1ebc:	47007465 	strmi	r7, [r0, -r5, ror #8]
    1ec0:	50457465 	subpl	r7, r5, r5, ror #8
    1ec4:	64417852 	strbvs	r7, [r1], #-2130	; 0x852
    1ec8:	53007264 	movwpl	r7, #612	; 0x264
    1ecc:	50457465 	subpl	r7, r5, r5, ror #8
    1ed0:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1ed4:	41306675 	teqmi	r0, r5, ror r6
    1ed8:	00726464 	rsbseq	r6, r2, r4, ror #8
    1edc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1ee0:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    1ee4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1ee8:	44620073 	strbtmi	r0, [r2], #-115	; 0x73
    1eec:	77007269 	strvc	r7, [r0, -r9, ror #4]
    1ef0:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    1ef4:	62737500 	rsbsvs	r7, r3, #0, 10
    1ef8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1efc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    1f00:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
    1f04:	00632e73 	rsbeq	r2, r3, r3, ror lr
    1f08:	445f5045 	ldrbmi	r5, [pc], #-69	; 1f10 <__Stack_Size+0x1710>
    1f0c:	5f465542 	svcpl	0x00465542
    1f10:	00525245 	subseq	r5, r2, r5, asr #4
    1f14:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1f18:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1f1c:	44667542 	strbtmi	r7, [r6], #-1346	; 0x542
    1f20:	77007269 	strvc	r7, [r0, -r9, ror #4]
    1f24:	31667542 	cmncc	r6, r2, asr #10
    1f28:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1f2c:	77537700 	ldrbvc	r7, [r3, -r0, lsl #14]
    1f30:	65530057 	ldrbvs	r0, [r3, #-87]	; 0x57
    1f34:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1f38:	6c62756f 	cfstr64vs	mvdx7, [r2], #-444	; 0xfffffe44
    1f3c:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
    1f40:	6f540066 	svcvs	0x00540066
    1f44:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
    1f48:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1f4c:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1f50:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1f54:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1f58:	50457261 	subpl	r7, r5, r1, ror #4
    1f5c:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    1f60:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    1f64:	47006666 	strmi	r6, [r0, -r6, ror #12]
    1f68:	50457465 	subpl	r7, r5, r5, ror #8
    1f6c:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1f70:	41316675 	teqmi	r1, r5, ror r6
    1f74:	00726464 	rsbseq	r6, r2, r4, ror #8
    1f78:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1f7c:	70795450 	rsbsvc	r5, r9, r0, asr r4
    1f80:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
    1f84:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1f88:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    1f8c:	58525f52 	ldmdapl	r2, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    1f90:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1f94:	62445045 	subvs	r5, r4, #69	; 0x45
    1f98:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1f9c:	756f4366 	strbvc	r4, [pc, #-870]!	; 1c3e <__Stack_Size+0x143e>
    1fa0:	5300746e 	movwpl	r7, #1134	; 0x46e
    1fa4:	50457465 	subpl	r7, r5, r5, ror #8
    1fa8:	4e494b5f 	vmovmi.8	d9[2], r4
    1fac:	65530044 	ldrbvs	r0, [r3, #-68]	; 0x44
    1fb0:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1fb4:	756f4378 	strbvc	r4, [pc, #-888]!	; 1c44 <__Stack_Size+0x1444>
    1fb8:	4300746e 	movwmi	r7, #1134	; 0x46e
    1fbc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1fc0:	4b5f5045 	blmi	17d60dc <__Stack_Size+0x17d58dc>
    1fc4:	00444e49 	subeq	r4, r4, r9, asr #28
    1fc8:	42746547 	rsbsmi	r6, r4, #297795584	; 0x11c00000
    1fcc:	4c424154 	stfmie	f4, [r2], {84}	; 0x54
    1fd0:	65470045 	strbvs	r0, [r7, #-69]	; 0x45
    1fd4:	54534974 	ldrbpl	r4, [r3], #-2420	; 0x974
    1fd8:	52770052 	rsbspl	r0, r7, #82	; 0x52
    1fdc:	61566765 	cmpvs	r6, r5, ror #14
    1fe0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1fe4:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    1fe8:	4f50444e 	svcmi	0x0050444e
    1fec:	00544e49 	subseq	r4, r4, r9, asr #28
    1ff0:	64644177 	strbtvs	r4, [r4], #-375	; 0x177
    1ff4:	65470072 	strbvs	r0, [r7, #-114]	; 0x72
    1ff8:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1ffc:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    2000:	6f433066 	svcvs	0x00433066
    2004:	00746e75 	rsbseq	r6, r4, r5, ror lr
    2008:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    200c:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
    2010:	77647000 	strbvc	r7, [r4, -r0]!
    2014:	00676552 	rsbeq	r6, r7, r2, asr r5
    2018:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    201c:	756f4350 	strbvc	r4, [pc, #-848]!	; 1cd4 <__Stack_Size+0x14d4>
    2020:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    2024:	00676552 	rsbeq	r6, r7, r2, asr r5
    2028:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    202c:	43785250 	cmnmi	r8, #80, 4
    2030:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    2034:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    2038:	5300706d 	movwpl	r7, #109	; 0x6d
    203c:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    2040:	53005254 	movwpl	r5, #596	; 0x254
    2044:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    2048:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    204c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    2050:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    2054:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    2058:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    205c:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    2060:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    2064:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    2068:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    206c:	62445045 	subvs	r5, r4, #69	; 0x45
    2070:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    2074:	756f4331 	strbvc	r4, [pc, #-817]!	; 1d4b <__Stack_Size+0x154b>
    2078:	5300746e 	movwpl	r7, #1134	; 0x46e
    207c:	50457465 	subpl	r7, r5, r5, ror #8
    2080:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    2084:	43306675 	teqmi	r0, #122683392	; 0x7500000
    2088:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    208c:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    2090:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    2094:	53007264 	movwpl	r7, #612	; 0x264
    2098:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    209c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    20a0:	754f5f73 	strbvc	r5, [pc, #-3955]	; 1135 <__Stack_Size+0x935>
    20a4:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    20a8:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    20ac:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    20b0:	62445045 	subvs	r5, r4, #69	; 0x45
    20b4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    20b8:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    20bc:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    20c0:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    20c4:	445f746e 	ldrbmi	r7, [pc], #-1134	; 20cc <__Stack_Size+0x18cc>
    20c8:	5f474f54 	svcpl	0x00474f54
    20cc:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    20d0:	47007375 	smlsdxmi	r0, r5, r3, r7
    20d4:	50457465 	subpl	r7, r5, r5, ror #8
    20d8:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    20dc:	43007264 	movwmi	r7, #612	; 0x264
    20e0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    20e4:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    20e8:	0058545f 	subseq	r5, r8, pc, asr r4
    20ec:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    20f0:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    20f4:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    20f8:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    20fc:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    2100:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    2104:	50444e45 	subpl	r4, r4, r5, asr #28
    2108:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    210c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    2110:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    2114:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2118:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    211c:	62445045 	subvs	r5, r4, #69	; 0x45
    2120:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    2124:	756f4331 	strbvc	r4, [pc, #-817]!	; 1dfb <__Stack_Size+0x15fb>
    2128:	4300746e 	movwmi	r7, #1134	; 0x46e
    212c:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    2130:	65530050 	ldrbvs	r0, [r3, #-80]	; 0x50
    2134:	30707574 	rsbscc	r7, r0, r4, ror r5
    2138:	6f72505f 	svcvs	0x0072505f
    213c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2140:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    2144:	74535265 	ldrbvc	r5, [r3], #-613	; 0x265
    2148:	00657461 	rsbeq	r7, r5, r1, ror #8
    214c:	65766153 	ldrbvs	r6, [r6, #-339]!	; 0x153
    2150:	61745354 	cmnvs	r4, r4, asr r3
    2154:	77006574 	smlsdxvc	r0, r4, r5, r6
    2158:	61565045 	cmpvs	r6, r5, asr #32
    215c:	7375006c 	cmnvc	r5, #108	; 0x6c
    2160:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    2164:	73752f62 	cmnvc	r5, #392	; 0x188
    2168:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    216c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2170:	5f306e49 	svcpl	0x00306e49
    2174:	636f7250 	cmnvs	pc, #80, 4
    2178:	00737365 	rsbseq	r7, r3, r5, ror #6
    217c:	3074754f 	rsbscc	r7, r4, pc, asr #10
    2180:	6f72505f 	svcvs	0x0072505f
    2184:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2188:	69504500 	ldmdbvs	r0, {r8, sl, lr}^
    218c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2190:	76615300 	strbtvc	r5, [r1], -r0, lsl #6
    2194:	61745365 	cmnvs	r4, r5, ror #6
    2198:	75006574 	strvc	r6, [r0, #-1396]	; 0x574
    219c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    21a0:	752f6269 	strvc	r6, [pc, #-617]!	; 1f3f <__Stack_Size+0x173f>
    21a4:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    21a8:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    21ac:	55700063 	ldrbpl	r0, [r0, #-99]!	; 0x63
    21b0:	5f726573 	svcpl	0x00726573
    21b4:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    21b8:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    21bc:	7165525f 	cmnvc	r5, pc, asr r2
    21c0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    21c4:	65440073 	strbvs	r0, [r4, #-115]	; 0x73
    21c8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
    21cc:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
    21d0:	7375006f 	cmnvc	r5, #111	; 0x6f
    21d4:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    21d8:	73752f62 	cmnvc	r5, #392	; 0x188
    21dc:	6f635f62 	svcvs	0x00635f62
    21e0:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    21e4:	444e4500 	strbmi	r4, [lr], #-1280	; 0x500
    21e8:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
    21ec:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    21f0:	004c4c41 	subeq	r4, ip, r1, asr #24
    21f4:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0x552
    21f8:	5000746c 	andpl	r7, r0, ip, ror #8
    21fc:	3074736f 	rsbscc	r7, r4, pc, ror #6
    2200:	6f72505f 	svcvs	0x0072505f
    2204:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
    2208:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    220c:	66754261 	ldrbtvs	r4, [r5], -r1, ror #4
    2210:	00726566 	rsbseq	r6, r2, r6, ror #10
    2214:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0x552
    2218:	64657672 	strbtvs	r7, [r5], #-1650	; 0x672
    221c:	61745300 	cmnvs	r4, r0, lsl #6
    2220:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    2224:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    2228:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    222c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
    2230:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2234:	44006e6f 	strmi	r6, [r0], #-3695	; 0xe6f
    2238:	53617461 	cmnpl	r1, #1627389952	; 0x61000000
    223c:	65676174 	strbvs	r6, [r7, #-372]!	; 0x174
    2240:	44006e49 	strmi	r6, [r0], #-3657	; 0xe49
    2244:	43495645 	movtmi	r5, #38469	; 0x9645
    2248:	45525f45 	ldrbmi	r5, [r2, #-3909]	; 0xf45
    224c:	45544f4d 	ldrbmi	r4, [r4, #-3917]	; 0xf4d
    2250:	4b41575f 	blmi	1057fd4 <__Stack_Size+0x10577d4>
    2254:	00505545 	subseq	r5, r0, r5, asr #10
    2258:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    225c:	0044454c 	subeq	r4, r4, ip, asr #10
    2260:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    2264:	6365525f 	cmnvs	r5, #-268435451	; 0xf0000005
    2268:	69786500 	ldmdbvs	r8!, {r8, sl, sp, lr}^
    226c:	6f4e5f74 	svcvs	0x004e5f74
    2270:	61746144 	cmnvs	r4, r4, asr #2
    2274:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2278:	00307075 	eorseq	r7, r0, r5, ror r0
    227c:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
    2280:	00316575 	eorseq	r6, r1, r5, ror r5
    2284:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
    2288:	445f4543 	ldrbmi	r4, [pc], #-1347	; 2290 <__Stack_Size+0x1a90>
    228c:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    2290:	4f545049 	svcmi	0x00545049
    2294:	54530052 	ldrbpl	r0, [r3], #-82	; 0x52
    2298:	474e4952 	smlsldmi	r4, lr, r2, r9
    229c:	5345445f 	movtpl	r4, #21599	; 0x545f
    22a0:	50495243 	subpl	r5, r9, r3, asr #4
    22a4:	00524f54 	subseq	r4, r2, r4, asr pc
    22a8:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    22ac:	4d506f54 	ldclmi	15, cr6, [r0, #-336]	; 0xfffffeb0
    22b0:	66754241 	ldrbtvs	r4, [r5], -r1, asr #4
    22b4:	43726566 	cmnmi	r2, #427819008	; 0x19800000
    22b8:	0079706f 	rsbseq	r7, r9, pc, rrx
    22bc:	65766173 	ldrbvs	r6, [r6, #-371]!	; 0x173
    22c0:	654c725f 	strbvs	r7, [ip, #-607]	; 0x25f
    22c4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
    22c8:	53414c00 	movtpl	r4, #7168	; 0x1c00
    22cc:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    22d0:	5441445f 	strbpl	r4, [r1], #-1119	; 0x45f
    22d4:	4f4e0041 	svcmi	0x004e0041
    22d8:	72505f50 	subsvc	r5, r0, #80, 30	; 0x140
    22dc:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    22e0:	74530073 	ldrbvc	r0, [r3], #-115	; 0x73
    22e4:	61646e61 	cmnvs	r4, r1, ror #28
    22e8:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    22ec:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
    22f0:	66726574 			; <UNDEFINED> instruction: 0x66726574
    22f4:	00656361 	rsbeq	r6, r5, r1, ror #6
    22f8:	65707845 	ldrbvs	r7, [r0, #-2117]!	; 0x845
    22fc:	535f7463 	cmppl	pc, #1660944384	; 0x63000000
    2300:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2304:	754f5f73 	strbvc	r5, [pc, #-3955]	; 1399 <__Stack_Size+0xb99>
    2308:	41500074 	cmpmi	r0, r4, ror r0
    230c:	00455355 	subeq	r5, r5, r5, asr r3
    2310:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
    2314:	4e747365 	cdpmi	3, 7, cr7, cr4, cr5, {3}
    2318:	4547006f 	strbmi	r0, [r7, #-111]	; 0x6f
    231c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    2320:	46524554 			; <UNDEFINED> instruction: 0x46524554
    2324:	00454341 	subeq	r4, r5, r1, asr #6
    2328:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    232c:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    2330:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    2334:	50646e45 	rsbpl	r6, r4, r5, asr #28
    2338:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
    233c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    2340:	00657275 	rsbeq	r7, r5, r5, ror r2
    2344:	5f544547 	svcpl	0x00544547
    2348:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    234c:	53005355 	movwpl	r5, #853	; 0x355
    2350:	465f5445 	ldrbmi	r5, [pc], -r5, asr #8
    2354:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    2358:	44004552 	strmi	r4, [r0], #-1362	; 0x552
    235c:	5f617461 	svcpl	0x00617461
    2360:	5f6c754d 	svcpl	0x006c754d
    2364:	5078614d 	rsbspl	r6, r8, sp, asr #2
    2368:	656b6361 	strbvs	r6, [fp, #-865]!	; 0x361
    236c:	7a695374 	bvc	1a57144 <__Stack_Size+0x1a56944>
    2370:	44700065 	ldrbtmi	r0, [r0], #-101	; 0x65
    2374:	53007665 	movwpl	r7, #1637	; 0x665
    2378:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    237c:	5f647261 	svcpl	0x00647261
    2380:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
    2384:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2388:	61654665 	cmnvs	r5, r5, ror #12
    238c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
    2390:	65447000 	strbvs	r7, [r4, #-0]
    2394:	53006373 	movwpl	r6, #883	; 0x373
    2398:	48434e59 	stmdami	r3, {r0, r3, r4, r6, r9, sl, fp, lr}^
    239c:	4152465f 	cmpmi	r2, pc, asr r6
    23a0:	5300454d 	movwpl	r4, #1357	; 0x54d
    23a4:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    23a8:	5f647261 	svcpl	0x00647261
    23ac:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    23b0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    23b4:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
    23b8:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    23bc:	5345445f 	movtpl	r4, #21599	; 0x545f
    23c0:	50495243 	subpl	r5, r9, r3, asr #4
    23c4:	00524f54 	subseq	r4, r2, r4, asr pc
    23c8:	5f544553 	svcpl	0x00544553
    23cc:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    23d0:	43414652 	movtmi	r4, #5714	; 0x1652
    23d4:	465f0045 	ldrbmi	r0, [pc], -r5, asr #32
    23d8:	55544145 	ldrbpl	r4, [r4, #-325]	; 0x145
    23dc:	535f4552 	cmppl	pc, #343932928	; 0x14800000
    23e0:	43454c45 	movtmi	r4, #23621	; 0x5c45
    23e4:	00524f54 	subseq	r4, r2, r4, asr pc
    23e8:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    23ec:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    23f0:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    23f4:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    23f8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
    23fc:	6f697461 	svcvs	0x00697461
    2400:	7453006e 	ldrbvc	r0, [r3], #-110	; 0x6e
    2404:	61646e61 	cmnvs	r4, r1, ror #28
    2408:	435f6472 	cmpmi	pc, #1912602624	; 0x72000000
    240c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    2410:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
    2414:	00657275 	rsbeq	r7, r5, r5, ror r2
    2418:	5f544547 	svcpl	0x00544547
    241c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    2420:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
    2424:	4f495441 	svcmi	0x00495441
    2428:	435f004e 	cmpmi	pc, #78	; 0x4e
    242c:	52544e4f 	subspl	r4, r4, #1264	; 0x4f0
    2430:	535f4c4f 	cmppl	pc, #20224	; 0x4f00
    2434:	45544154 	ldrbmi	r4, [r4, #-340]	; 0x154
    2438:	45445f00 	strbmi	r5, [r4, #-3840]	; 0xf00
    243c:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    2440:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    2444:	5059545f 	subspl	r5, r9, pc, asr r4
    2448:	45530045 	ldrbmi	r0, [r3, #-69]	; 0x45
    244c:	4e495454 	mcrmi	4, 2, r5, cr9, cr4, {2}
    2450:	50555f47 	subspl	r5, r5, r7, asr #30
    2454:	414d5000 	mrsmi	r5, (UNDEF: 77)
    2458:	73556f54 	cmpvc	r5, #84, 30	; 0x150
    245c:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
    2460:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    2464:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    2468:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    246c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    2470:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    2474:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    2478:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    247c:	5f544941 	svcpl	0x00544941
    2480:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    2484:	4f5f5355 	svcmi	0x005f5355
    2488:	54005455 	strpl	r5, [r0], #-1109	; 0x455
    248c:	4c41544f 	cfstrdmi	mvd5, [r1], {79}	; 0x4f
    2490:	4552735f 	ldrbmi	r7, [r2, #-863]	; 0x35f
    2494:	53455551 	movtpl	r5, #21841	; 0x5551
    2498:	4e490054 	mcrmi	0, 2, r0, cr9, cr4, {2}
    249c:	46524554 			; <UNDEFINED> instruction: 0x46524554
    24a0:	5f454341 	svcpl	0x00454341
    24a4:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    24a8:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    24ac:	7300524f 	movwvc	r5, #591	; 0x24f
    24b0:	5f657661 	svcpl	0x00657661
    24b4:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
    24b8:	00687467 	rsbeq	r7, r8, r7, ror #8
    24bc:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    24c0:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    24c4:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    24c8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    24cc:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    24d0:	4f50444e 	svcmi	0x0050444e
    24d4:	5f544e49 	svcpl	0x00544e49
    24d8:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    24dc:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    24e0:	4300524f 	movwmi	r5, #591	; 0x24f
    24e4:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    24e8:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    24ec:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    24f0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    24f4:	75427000 	strbvc	r7, [r2, #-0]
    24f8:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    24fc:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    2500:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    2504:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    2508:	53455244 	movtpl	r5, #21060	; 0x5244
    250c:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    2510:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    2514:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    2518:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    251c:	5300746e 	movwpl	r7, #1134	; 0x46e
    2520:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    2524:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    2528:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    252c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    2530:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    2534:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    2538:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    253c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    2540:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    2544:	61745361 	cmnvs	r4, r1, ror #6
    2548:	754f6567 	strbvc	r6, [pc, #-1383]	; 1fe9 <__Stack_Size+0x17e9>
    254c:	41570074 	cmpmi	r7, r4, ror r0
    2550:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    2554:	50555445 	subspl	r5, r5, r5, asr #8
    2558:	71655200 	cmnvc	r5, r0, lsl #4
    255c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    2560:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    2564:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    2568:	4154535f 	cmpmi	r4, pc, asr r3
    256c:	5f535554 	svcpl	0x00535554
    2570:	43004e49 	movwmi	r4, #3657	; 0xe49
    2574:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    2578:	4145465f 	cmpmi	r5, pc, asr r6
    257c:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    2580:	53414c00 	movtpl	r4, #7168	; 0x1c00
    2584:	554f5f54 	strbpl	r5, [pc, #-3924]	; 1638 <__Stack_Size+0xe38>
    2588:	41445f54 	cmpmi	r4, r4, asr pc
    258c:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    2590:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    2594:	752f6269 	strvc	r6, [pc, #-617]!	; 2333 <__Stack_Size+0x1b33>
    2598:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 23d4 <__Stack_Size+0x1bd4>
    259c:	632e6d65 	teqvs	lr, #6464	; 0x1940
    25a0:	424e7700 	submi	r7, lr, #0, 14
    25a4:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    25a8:	55627000 	strbpl	r7, [r2, #-0]!
    25ac:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    25b0:	50770066 	rsbspl	r0, r7, r6, rrx
    25b4:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    25b8:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    25bc:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    25c0:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	08000ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp}
       8:	a6500001 	ldrbge	r0, [r0], -r1
       c:	a808000b 	stmdage	r8, {r0, r1, r3}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	0408000b 	streq	r0, [r8], #-11
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	000c1800 	andeq	r1, ip, r0, lsl #16
      24:	000c1c08 	andeq	r1, ip, r8, lsl #24
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	08000c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp}
      34:	08000c20 	stmdaeq	r0, {r5, sl, fp}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	000c209f 	muleq	ip, pc, r0	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	000c2208 	andeq	r2, ip, r8, lsl #4
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	229f2740 	addscs	r2, pc, #64, 14	; 0x1000000
      54:	4108000c 	tstmi	r8, ip
      58:	0b08000c 	bleq	200090 <__Stack_Size+0x1ff890>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
      74:	08000c9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, sl, fp}
      78:	9b500001 	blls	1400084 <__Stack_Size+0x13ff884>
      7c:	e408000c 	str	r0, [r8], #-12
      80:	0408000c 	streq	r0, [r8], #-12
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	000c8400 	andeq	r8, ip, r0, lsl #8
      94:	000cae08 	andeq	sl, ip, r8, lsl #28
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	000cb69f 	muleq	ip, pc, r6	; <UNPREDICTABLE>
      a0:	000cbc08 	andeq	fp, ip, r8, lsl #24
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      a8:	000cbc9f 	muleq	ip, pc, ip	; <UNPREDICTABLE>
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ac:	000cc708 	andeq	ip, ip, r8, lsl #14
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	08000ccc 	stmdaeq	r0, {r2, r3, r6, r7, sl, fp}
			*plainchar    = (fragment & 0x003) << 6;
      b8:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
      bc:	9f300002 	svcls	0x00300002
	...
	case step_d:
			do {
				if (codechar == code_in+length_in)
      c8:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
				{
					state_in->step = step_d;
      cc:	08000ce9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, fp}
					state_in->plainchar = *plainchar;
      d0:	e9500001 	ldmdb	r0, {r0}^
					return plainchar - plaintext_out;
      d4:	f008000c 			; <UNDEFINED> instruction: 0xf008000c
      d8:	0408000c 	streq	r0, [r8], #-12
				}
				fragment = (char)base64_decode_value(*codechar++);
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      e4:	00000000 	andeq	r0, r0, r0
      e8:	000cf000 	andeq	pc, ip, r0
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
      ec:	000cf508 	andeq	pc, ip, r8, lsl #10
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000cf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, fp}
		}
      f8:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
      fc:	01f30004 	mvnseq	r0, r4
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0

	f25519_sub(a, x1sq, z1sq);
     108:	0cfc0000 	ldcleq	0, cr0, [ip]
     10c:	0d0f0800 	stceq	8, cr0, [pc, #-0]	; 114 <_Minimum_Stack_Size+0x14>
	f25519_mul__distinct(x3, a, a);
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	000d0f50 	andeq	r0, sp, r0, asr pc
     118:	000d1008 	andeq	r1, sp, r8

	f25519_mul_c(a, x1z1, 486662);
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	109f5001 	addsne	r5, pc, r1
	f25519_add(a, x1sq, a);
     124:	1208000d 	andne	r0, r8, #13
     128:	0108000d 	tsteq	r8, sp
     12c:	0d125000 	ldceq	0, cr5, [r2, #-0]
	f25519_add(a, z1sq, a);
     130:	0d1c0800 	ldceq	8, cr0, [ip, #-0]
     134:	00040800 	andeq	r0, r4, r0, lsl #16
	f25519_mul__distinct(x1sq, x1z1, a);
     138:	9f5001f3 	svcls	0x005001f3
	...
	f25519_mul_c(z3, x1sq, 4);
     144:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
     148:	08000d21 	stmdaeq	r0, {r0, r5, r8, sl, fp}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
     14c:	21500001 	cmpcs	r0, r1
     150:	2808000d 	stmdacs	r8, {r0, r2, r3}
     154:	0408000d 	streq	r0, [r8], #-13
	f25519_sub(b, x3, z3); /* D */
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	f25519_mul__distinct(da, a, b);
     160:	00000000 	andeq	r0, r0, r0
     164:	000d2800 	andeq	r2, sp, r0, lsl #16
     168:	000d3b08 	andeq	r3, sp, r8, lsl #22

	f25519_sub(b, x2, z2);
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	08000d3b 	stmdaeq	r0, {r0, r1, r3, r4, r5, r8, sl, fp}
	f25519_add(a, x3, z3); /* C */
     174:	08000d46 	stmdaeq	r0, {r1, r2, r6, r8, sl, fp}
     178:	01f30004 	mvnseq	r0, r4
     17c:	0d469f50 	stcleq	15, cr9, [r6, #-320]	; 0xfffffec0
	f25519_mul__distinct(cb, a, b);
     180:	0d480800 	stcleq	8, cr0, [r8, #-0]
     184:	00010800 	andeq	r0, r1, r0, lsl #16

	f25519_add(a, da, cb);
     188:	000d4850 	andeq	r4, sp, r0, asr r8
     18c:	000d5008 	andeq	r5, sp, r8
     190:	f3000408 	vshl.u8	d0, d8, d0
	f25519_mul__distinct(b, a, a);
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
	f25519_mul__distinct(x5, z1, b);
     19c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     1a0:	4608000d 	strmi	r0, [r8], -sp
     1a4:	0408000d 	streq	r0, [r8], #-13

	f25519_sub(a, da, cb);
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	f25519_mul__distinct(b, a, a);
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	000dbe00 	andeq	fp, sp, r0, lsl #28
     1b8:	000dc208 	andeq	ip, sp, r8, lsl #4

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
     1c0:	9f213c00 	svcls	0x00213c00
	...

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
     1cc:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
     1d0:	08000e09 	stmdaeq	r0, {r0, r3, r9, sl, fp}
     1d4:	09500001 	ldmdbeq	r0, {r0}^
		f25519_select(zm1, zm1, zm, bit);
     1d8:	0c08000e 	stceq	0, cr0, [r8], {14}
     1dc:	0408000e 	streq	r0, [r8], #-14
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
		f25519_select(xm, xm, xms, bit);
     1e4:	000e0c9f 	muleq	lr, pc, ip	; <UNPREDICTABLE>
     1e8:	000e0f08 	andeq	r0, lr, r8, lsl #30
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
		f25519_select(zm, zm, zms, bit);
     1f0:	08000e0f 	stmdaeq	r0, {r0, r1, r2, r3, r9, sl, fp}
     1f4:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
     1f8:	01f30004 	mvnseq	r0, r4
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
     1fc:	0e149f50 	mrceq	15, 0, r9, cr4, cr0, {2}
     200:	0e620800 	cdpeq	8, 6, cr0, cr2, cr0, {0}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	000e6250 	andeq	r6, lr, r0, asr r2
	f25519_mul__distinct(result, zm1, xm);
     20c:	000e7008 	andeq	r7, lr, r8
     210:	f3000408 	vshl.u8	d0, d8, d0
	f25519_normalize(result);
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
}
     21c:	32000000 	andcc	r0, r0, #0
     220:	3608000e 	strcc	r0, [r8], -lr
     224:	0508000e 	streq	r0, [r8, #-14]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	0e569f21 	cdpeq	15, 5, cr9, cr6, cr1, {1}
     230:	0e5c0800 	cdpeq	8, 5, cr0, cr12, cr0, {0}
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
     24c:	00010000 	andeq	r0, r1, r0
     250:	00000050 	andeq	r0, r0, r0, asr r0
     254:	00000000 	andeq	r0, r0, r0
     258:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     26c:	00510001 	subseq	r0, r1, r1
     270:	00000000 	andeq	r0, r0, r0
     274:	01000000 	mrseq	r0, (UNDEF: 0)
     278:	00005400 	andeq	r5, r0, r0, lsl #8
     27c:	00000000 	andeq	r0, r0, r0
     280:	10340000 	eorsne	r0, r4, r0
     284:	103e0800 	eorsne	r0, lr, r0, lsl #16
     288:	00010800 	andeq	r0, r1, r0, lsl #16
     28c:	00103e50 	andseq	r3, r0, r0, asr lr
     290:	00105208 	andseq	r5, r0, r8, lsl #4
     294:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     298:	08001052 	stmdaeq	r0, {r1, r4, r6, ip}
     29c:	08001062 	stmdaeq	r0, {r1, r5, r6, ip}
     2a0:	01f30004 	mvnseq	r0, r4
     2a4:	00009f50 	andeq	r9, r0, r0, asr pc
     2a8:	00000000 	andeq	r0, r0, r0
     2ac:	10340000 	eorsne	r0, r4, r0
     2b0:	10410800 	subne	r0, r1, r0, lsl #16
     2b4:	00010800 	andeq	r0, r1, r0, lsl #16
     2b8:	00104151 	andseq	r4, r0, r1, asr r1
     2bc:	00106208 	andseq	r6, r0, r8, lsl #4
     2c0:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     2cc:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
     2d0:	08001041 	stmdaeq	r0, {r0, r6, ip}
     2d4:	41520001 	cmpmi	r2, r1
     2d8:	62080010 	andvs	r0, r8, #16
     2dc:	01080010 	tsteq	r8, r0, lsl r0
     2e0:	00005600 	andeq	r5, r0, r0, lsl #12
     2e4:	00000000 	andeq	r0, r0, r0
     2e8:	10520000 	subsne	r0, r2, r0
     2ec:	10540800 	subsne	r0, r4, r0, lsl #16
     2f0:	00010800 	andeq	r0, r1, r0, lsl #16
     2f4:	00105450 	andseq	r5, r0, r0, asr r4
     2f8:	00105c08 	andseq	r5, r0, r8, lsl #24
     2fc:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     300:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
     304:	08001062 	stmdaeq	r0, {r1, r5, r6, ip}
     308:	00500001 	subseq	r0, r0, r1
     30c:	00000000 	andeq	r0, r0, r0
     310:	1c000000 	stcne	0, cr0, [r0], {-0}
     314:	48080011 	stmdami	r8, {r0, r4}
     318:	02080011 	andeq	r0, r8, #17
     31c:	489f3000 	ldmmi	pc, {ip, sp}	; <UNPREDICTABLE>
     320:	4a080011 	bmi	20036c <__Stack_Size+0x1ffb6c>
     324:	07080011 	smladeq	r8, r1, r0, r0
     328:	48007000 	stmdami	r0, {ip, sp, lr}
     32c:	9f293024 	svcls	0x00293024
     330:	0800114a 	stmdaeq	r0, {r1, r3, r6, r8, ip}
     334:	08001174 	stmdaeq	r0, {r2, r4, r5, r6, r8, ip}
     338:	00740007 	rsbseq	r0, r4, r7
     33c:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     340:	00117a9f 	mulseq	r1, pc, sl	; <UNPREDICTABLE>
     344:	00118008 	andseq	r8, r1, r8
     348:	74000708 	strvc	r0, [r0], #-1800	; 0x708
     34c:	30244800 	eorcc	r4, r4, r0, lsl #16
     350:	11809f29 	orrne	r9, r0, r9, lsr #30
     354:	11840800 	orrne	r0, r4, r0, lsl #16
     358:	00020800 	andeq	r0, r2, r0, lsl #16
     35c:	11849f30 	orrne	r9, r4, r0, lsr pc
     360:	11960800 	orrsne	r0, r6, r0, lsl #16
     364:	00070800 	andeq	r0, r7, r0, lsl #16
     368:	24480074 	strbcs	r0, [r8], #-116	; 0x74
     36c:	969f2930 			; <UNDEFINED> instruction: 0x969f2930
     370:	98080011 	stmdals	r8, {r0, r4}
     374:	02080011 	andeq	r0, r8, #17
     378:	989f3100 	ldmls	pc, {r8, ip, sp}	; <UNPREDICTABLE>
     37c:	e4080011 	str	r0, [r8], #-17
     380:	01080011 	tsteq	r8, r1, lsl r0
     384:	11e45400 	mvnne	r5, r0, lsl #8
     388:	12180800 	andsne	r0, r8, #0, 16
     38c:	00010800 	andeq	r0, r1, r0, lsl #16
     390:	00000050 	andeq	r0, r0, r0, asr r0
     394:	00000000 	andeq	r0, r0, r0
     398:	00115a00 	andseq	r5, r1, r0, lsl #20
     39c:	00115e08 	andseq	r5, r1, r8, lsl #28
     3a0:	50000108 	andpl	r0, r0, r8, lsl #2
     3a4:	0800115e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, ip}
     3a8:	08001163 	stmdaeq	r0, {r0, r1, r5, r6, r8, ip}
     3ac:	63510001 	cmpvs	r1, #1
     3b0:	e4080011 	str	r0, [r8], #-17
     3b4:	03080011 	movweq	r0, #32785	; 0x8011
     3b8:	9f027500 	svcls	0x00027500
	...
     3c4:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     3c8:	0800121e 	stmdaeq	r0, {r1, r2, r3, r4, r9, ip}
     3cc:	1e510001 	cdpne	0, 5, cr0, cr1, cr1, {0}
     3d0:	2e080012 	mcrcs	0, 0, r0, cr8, cr2, {0}
     3d4:	04080012 	streq	r0, [r8], #-18
     3d8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     3dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3e0:	00000000 	andeq	r0, r0, r0
     3e4:	00121800 	andseq	r1, r2, r0, lsl #16
     3e8:	00121808 	andseq	r1, r2, r8, lsl #16
     3ec:	52000108 	andpl	r0, r0, #8, 2
     3f0:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
     3f4:	08001222 	stmdaeq	r0, {r1, r5, r9, ip}
     3f8:	00720007 	rsbseq	r0, r2, r7
     3fc:	29302448 	ldmdbcs	r0!, {r3, r6, sl, sp}
     400:	0012229f 	mulseq	r2, pc, r2	; <UNPREDICTABLE>
     404:	00122e08 	andseq	r2, r2, r8, lsl #28
     408:	f3000808 	vsub.i8	d0, d0, d8
     40c:	24485201 	strbcs	r5, [r8], #-513	; 0x201
     410:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
     414:	00000000 	andeq	r0, r0, r0
     418:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     41c:	3e080012 	mcrcc	0, 0, r0, cr8, cr2, {0}
     420:	01080012 	tsteq	r8, r2, lsl r0
     424:	123e5000 	eorsne	r5, lr, #0
     428:	12400800 	subne	r0, r0, #0, 16
     42c:	00040800 	andeq	r0, r4, r0, lsl #16
     430:	9f5001f3 	svcls	0x005001f3
	...
     43c:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
     440:	08001234 	stmdaeq	r0, {r2, r4, r5, r9, ip}
     444:	34510001 	ldrbcc	r0, [r1], #-1
     448:	40080012 	andmi	r0, r8, r2, lsl r0
     44c:	04080012 	streq	r0, [r8], #-18
     450:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     454:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     458:	00000000 	andeq	r0, r0, r0
     45c:	00124000 	andseq	r4, r2, r0
     460:	00125b08 	andseq	r5, r2, r8, lsl #22
     464:	50000108 	andpl	r0, r0, r8, lsl #2
     468:	0800125b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, ip}
     46c:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
     470:	00580001 	subseq	r0, r8, r1
     474:	00000000 	andeq	r0, r0, r0
     478:	40000000 	andmi	r0, r0, r0
     47c:	5b080012 	blpl	2004cc <__Stack_Size+0x1ffccc>
     480:	01080012 	tsteq	r8, r2, lsl r0
     484:	125b5100 	subsne	r5, fp, #0, 2
     488:	12900800 	addsne	r0, r0, #0, 16
     48c:	00040800 	andeq	r0, r4, r0, lsl #16
     490:	9f5101f3 	svcls	0x005101f3
	...
     49c:	08001240 	stmdaeq	r0, {r6, r9, ip}
     4a0:	08001252 	stmdaeq	r0, {r1, r4, r6, r9, ip}
     4a4:	52520001 	subspl	r0, r2, #1
     4a8:	5c080012 	stcpl	0, cr0, [r8], {18}
     4ac:	04080012 	streq	r0, [r8], #-18
     4b0:	5201f300 	andpl	pc, r1, #0, 6
     4b4:	00125c9f 	mulseq	r2, pc, ip	; <UNPREDICTABLE>
     4b8:	00128408 	andseq	r8, r2, r8, lsl #8
     4bc:	74000308 	strvc	r0, [r0], #-776	; 0x308
     4c0:	12849f7f 	addne	r9, r4, #508	; 0x1fc
     4c4:	128a0800 	addne	r0, sl, #0, 16
     4c8:	00030800 	andeq	r0, r3, r0, lsl #16
     4cc:	8c9f0074 	ldchi	0, cr0, [pc], {116}	; 0x74
     4d0:	90080012 	andls	r0, r8, r2, lsl r0
     4d4:	03080012 	movweq	r0, #32786	; 0x8012
     4d8:	9f7f7400 	svcls	0x007f7400
	...
     4e4:	08001240 	stmdaeq	r0, {r6, r9, ip}
     4e8:	0800125b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r9, ip}
     4ec:	5b530001 	blpl	14c04f8 <__Stack_Size+0x14bfcf8>
     4f0:	90080012 	andls	r0, r8, r2, lsl r0
     4f4:	01080012 	tsteq	r8, r2, lsl r0
     4f8:	00005600 	andeq	r5, r0, r0, lsl #12
     4fc:	00000000 	andeq	r0, r0, r0
     500:	12600000 	rsbne	r0, r0, #0
     504:	12720800 	rsbsne	r0, r2, #0, 16
     508:	00010800 	andeq	r0, r1, r0, lsl #16
     50c:	00127255 	andseq	r7, r2, r5, asr r2
     510:	00127408 	andseq	r7, r2, r8, lsl #8
     514:	56000108 	strpl	r0, [r0], -r8, lsl #2
     518:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
     51c:	0800128c 	stmdaeq	r0, {r2, r3, r7, r9, ip}
     520:	00550001 	subseq	r0, r5, r1
     524:	00000000 	andeq	r0, r0, r0
     528:	9a000000 	bls	530 <_Minimum_Stack_Size+0x430>
     52c:	a0080012 	andge	r0, r8, r2, lsl r0
     530:	01080012 	tsteq	r8, r2, lsl r0
     534:	12a05000 	adcne	r5, r0, #0
     538:	12b00800 	adcsne	r0, r0, #0, 16
     53c:	00010800 	andeq	r0, r1, r0, lsl #16
     540:	00000055 	andeq	r0, r0, r5, asr r0
     544:	00000000 	andeq	r0, r0, r0
     548:	00129a00 	andseq	r9, r2, r0, lsl #20
     54c:	0012a008 	andseq	sl, r2, r8
     550:	51000108 	tstpl	r0, r8, lsl #2
     554:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
     558:	080012a4 	stmdaeq	r0, {r2, r5, r7, r9, ip}
     55c:	01740003 	cmneq	r4, r3
     560:	0012a49f 	mulseq	r2, pc, r4	; <UNPREDICTABLE>
     564:	0012ac08 	andseq	sl, r2, r8, lsl #24
     568:	54000108 	strpl	r0, [r0], #-264	; 0x108
     56c:	080012ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, ip}
     570:	080012ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip}
     574:	01740003 	cmneq	r4, r3
     578:	0012ae9f 	mulseq	r2, pc, lr	; <UNPREDICTABLE>
     57c:	0012b008 	andseq	fp, r2, r8
     580:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     58c:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
     590:	080012ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, ip}
     594:	ba500001 	blt	14005a0 <__Stack_Size+0x13ffda0>
     598:	bf080012 	svclt	0x00080012
     59c:	01080012 	tsteq	r8, r2, lsl r0
     5a0:	12bf5300 	adcsne	r5, pc, #0, 6
     5a4:	12d80800 	sbcsne	r0, r8, #0, 16
     5a8:	00040800 	andeq	r0, r4, r0, lsl #16
     5ac:	9f5001f3 	svcls	0x005001f3
	...
     5b8:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
     5bc:	080012bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, ip}
     5c0:	00510001 	subseq	r0, r1, r1
     5c4:	00000000 	andeq	r0, r0, r0
     5c8:	f4000000 	vst4.8	{d0-d3}, [r0], r0
     5cc:	fe080012 	mcr2	0, 0, r0, cr8, cr2, {0}
     5d0:	01080012 	tsteq	r8, r2, lsl r0
     5d4:	12fe5000 	rscsne	r5, lr, #0
     5d8:	13900800 	orrsne	r0, r0, #0, 16
     5dc:	00010800 	andeq	r0, r1, r0, lsl #16
     5e0:	00000056 	andeq	r0, r0, r6, asr r0
     5e4:	00000000 	andeq	r0, r0, r0
     5e8:	0012f400 	andseq	pc, r2, r0, lsl #8
     5ec:	00130008 	andseq	r0, r3, r8
     5f0:	51000108 	tstpl	r0, r8, lsl #2
     5f4:	08001300 	stmdaeq	r0, {r8, r9, ip}
     5f8:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     5fc:	00570001 	subseq	r0, r7, r1
     600:	00000000 	andeq	r0, r0, r0
     604:	06000000 	streq	r0, [r0], -r0
     608:	08080013 	stmdaeq	r8, {r0, r1, r4}
     60c:	02080013 	andeq	r0, r8, #19
     610:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
     614:	54080013 	strpl	r0, [r8], #-19
     618:	01080013 	tsteq	r8, r3, lsl r0
     61c:	13545400 	cmpne	r4, #0, 8
     620:	13560800 	cmpne	r6, #0, 16
     624:	00010800 	andeq	r0, r1, r0, lsl #16
     628:	00136255 	andseq	r6, r3, r5, asr r2
     62c:	00136e08 	andseq	r6, r3, r8, lsl #28
     630:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     634:	0800136e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, ip}
     638:	0800137c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip}
     63c:	01750003 	cmneq	r5, r3
     640:	00137c9f 	mulseq	r3, pc, ip	; <UNPREDICTABLE>
     644:	00139008 	andseq	r9, r3, r8
     648:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     654:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     658:	08001396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip}
     65c:	96500001 	ldrbls	r0, [r0], -r1
     660:	ac080013 	stcge	0, cr0, [r8], {19}
     664:	01080013 	tsteq	r8, r3, lsl r0
     668:	13ac5500 			; <UNDEFINED> instruction: 0x13ac5500
     66c:	13b80800 			; <UNDEFINED> instruction: 0x13b80800
     670:	00040800 	andeq	r0, r4, r0, lsl #16
     674:	9f5001f3 	svcls	0x005001f3
	...
     680:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
     684:	08001396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip}
     688:	9f300002 	svcls	0x00300002
     68c:	08001396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip}
     690:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
     694:	9c540001 	mrrcls	0, 0, r0, r4, cr1
     698:	a0080013 	andge	r0, r8, r3, lsl r0
     69c:	03080013 	movweq	r0, #32787	; 0x8013
     6a0:	9f7f7400 	svcls	0x007f7400
     6a4:	080013a0 	stmdaeq	r0, {r5, r7, r8, r9, ip}
     6a8:	080013ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip}
     6ac:	00540001 	subseq	r0, r4, r1
     6b0:	00000000 	andeq	r0, r0, r0
     6b4:	06000000 	streq	r0, [r0], -r0
     6b8:	0c080015 	stceq	0, cr0, [r8], {21}
     6bc:	01080015 	tsteq	r8, r5, lsl r0
     6c0:	00005200 	andeq	r5, r0, r0, lsl #4
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	15440000 	strbne	r0, [r4, #-0]
     6cc:	15530800 	ldrbne	r0, [r3, #-2048]	; 0x800
     6d0:	00010800 	andeq	r0, r1, r0, lsl #16
     6d4:	00155350 	andseq	r5, r5, r0, asr r3
     6d8:	00155c08 	andseq	r5, r5, r8, lsl #24
     6dc:	f3000408 	vshl.u8	d0, d8, d0
     6e0:	009f5001 	addseq	r5, pc, r1
     6e4:	00000000 	andeq	r0, r0, r0
     6e8:	4a000000 	bmi	6f0 <_Minimum_Stack_Size+0x5f0>
     6ec:	53080015 	movwpl	r0, #32789	; 0x8015
     6f0:	01080015 	tsteq	r8, r5, lsl r0
     6f4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     704:	00020000 	andeq	r0, r2, r0
     708:	00009f30 	andeq	r9, r0, r0, lsr pc
     70c:	00000000 	andeq	r0, r0, r0
     710:	00010000 	andeq	r0, r1, r0
     714:	00000054 	andeq	r0, r0, r4, asr r0
     718:	00000000 	andeq	r0, r0, r0
     71c:	00155c00 	andseq	r5, r5, r0, lsl #24
     720:	00156a08 	andseq	r6, r5, r8, lsl #20
     724:	30000208 	andcc	r0, r0, r8, lsl #4
     728:	00156a9f 	mulseq	r5, pc, sl	; <UNPREDICTABLE>
     72c:	00157208 	andseq	r7, r5, r8, lsl #4
     730:	53000108 	movwpl	r0, #264	; 0x108
     734:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
     738:	0800157e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, sl, ip}
     73c:	7e520001 	cdpvc	0, 5, cr0, cr2, cr1, {0}
     740:	a0080015 	andge	r0, r8, r5, lsl r0
     744:	01080015 	tsteq	r8, r5, lsl r0
     748:	15a05400 	strne	r5, [r0, #1024]!	; 0x400
     74c:	15a20800 	strne	r0, [r2, #2048]!	; 0x800
     750:	00060800 	andeq	r0, r6, r0, lsl #16
     754:	00720074 	rsbseq	r0, r2, r4, ror r0
     758:	15a29f1a 	strne	r9, [r2, #3866]!	; 0xf1a
     75c:	15a40800 	strne	r0, [r4, #2048]!	; 0x800
     760:	00010800 	andeq	r0, r1, r0, lsl #16
     764:	0015a452 	andseq	sl, r5, r2, asr r4
     768:	0015a808 	andseq	sl, r5, r8, lsl #16
     76c:	08001208 	stmdaeq	r0, {r3, r9, ip}
     770:	940070ff 	strls	r7, [r0], #-255	; 0xff
     774:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     778:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     77c:	1a007424 	bne	1d814 <__Stack_Size+0x1d014>
     780:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     784:	00000000 	andeq	r0, r0, r0
     788:	00155c00 	andseq	r5, r5, r0, lsl #24
     78c:	00159c08 	andseq	r9, r5, r8, lsl #24
     790:	30000208 	andcc	r0, r0, r8, lsl #4
     794:	00159c9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
     798:	0015a008 	andseq	sl, r5, r8
     79c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
     7a0:	080015a0 	stmdaeq	r0, {r5, r7, r8, sl, ip}
     7a4:	080015a4 	stmdaeq	r0, {r2, r5, r7, r8, sl, ip}
     7a8:	a4510001 	ldrbge	r0, [r1], #-1
     7ac:	ac080015 	stcge	0, cr0, [r8], {21}
     7b0:	01080015 	tsteq	r8, r5, lsl r0
     7b4:	00005200 	andeq	r5, r0, r0, lsl #4
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	155c0000 	ldrbne	r0, [ip, #-0]
     7c0:	159c0800 	ldrne	r0, [ip, #2048]	; 0x800
     7c4:	00020800 	andeq	r0, r2, r0, lsl #16
     7c8:	159c9f30 	ldrne	r9, [ip, #3888]	; 0xf30
     7cc:	15a20800 	strne	r0, [r2, #2048]!	; 0x800
     7d0:	00010800 	andeq	r0, r1, r0, lsl #16
     7d4:	0015a252 	andseq	sl, r5, r2, asr r2
     7d8:	0015a808 	andseq	sl, r5, r8, lsl #16
     7dc:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
     7e0:	940070ff 	strls	r7, [r0], #-255	; 0xff
     7e4:	081a3301 	ldmdaeq	sl, {r0, r8, r9, ip, sp}
     7e8:	24331aff 	ldrtcs	r1, [r3], #-2815	; 0xaff
     7ec:	00009f24 	andeq	r9, r0, r4, lsr #30
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	155c0000 	ldrbne	r0, [ip, #-0]
     7f8:	156a0800 	strbne	r0, [sl, #-2048]!	; 0x800
     7fc:	00020800 	andeq	r0, r2, r0, lsl #16
     800:	156a9f30 	strbne	r9, [sl, #-3888]!	; 0xf30
     804:	156e0800 	strbne	r0, [lr, #-2048]!	; 0x800
     808:	00050800 	andeq	r0, r5, r0, lsl #16
     80c:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     810:	00156e9f 	mulseq	r5, pc, lr	; <UNPREDICTABLE>
     814:	00157208 	andseq	r7, r5, r8, lsl #4
     818:	52000108 	andpl	r0, r0, #8, 2
     81c:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
     820:	0800157a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, sl, ip}
     824:	73340005 	teqvc	r4, #5
     828:	009f1c00 	addseq	r1, pc, r0, lsl #24
     82c:	00000000 	andeq	r0, r0, r0
     830:	5c000000 	stcpl	0, cr0, [r0], {-0}
     834:	6a080015 	bvs	200890 <__Stack_Size+0x200090>
     838:	02080015 	andeq	r0, r8, #21
     83c:	6a9f3f00 	bvs	fe7d0444 <BootRAM+0xd740be5>
     840:	76080015 			; <UNDEFINED> instruction: 0x76080015
     844:	05080015 	streq	r0, [r8, #-21]
     848:	00733f00 	rsbseq	r3, r3, r0, lsl #30
     84c:	15769f25 	ldrbne	r9, [r6, #-3877]!	; 0xf25
     850:	157c0800 	ldrbne	r0, [ip, #-2048]!	; 0x800
     854:	00010800 	andeq	r0, r1, r0, lsl #16
     858:	00000054 	andeq	r0, r0, r4, asr r0
     85c:	00000000 	andeq	r0, r0, r0
     860:	0015ec00 	andseq	lr, r5, r0, lsl #24
     864:	0015f308 	andseq	pc, r5, r8, lsl #6
     868:	50000108 	andpl	r0, r0, r8, lsl #2
     86c:	080015f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8, sl, ip}
     870:	08001606 	stmdaeq	r0, {r1, r2, r9, sl, ip}
     874:	06540001 	ldrbeq	r0, [r4], -r1
     878:	09080016 	stmdbeq	r8, {r1, r2, r4}
     87c:	01080016 	tsteq	r8, r6, lsl r0
     880:	16095000 	strne	r5, [r9], -r0
     884:	160a0800 	strne	r0, [sl], -r0, lsl #16
     888:	00040800 	andeq	r0, r4, r0, lsl #16
     88c:	9f5001f3 	svcls	0x005001f3
	...
     898:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
     89c:	08001648 	stmdaeq	r0, {r3, r6, r9, sl, ip}
     8a0:	48500001 	ldmdami	r0, {r0}^
     8a4:	54080016 	strpl	r0, [r8], #-22
     8a8:	04080016 	streq	r0, [r8], #-22
     8ac:	5001f300 	andpl	pc, r1, r0, lsl #6
     8b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8b4:	00000000 	andeq	r0, r0, r0
     8b8:	00162600 	andseq	r2, r6, r0, lsl #12
     8bc:	00164408 	andseq	r4, r6, r8, lsl #8
     8c0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
     8c4:	0016449f 	mulseq	r6, pc, r4	; <UNPREDICTABLE>
     8c8:	00165408 	andseq	r5, r6, r8, lsl #8
     8cc:	30000208 	andcc	r0, r0, r8, lsl #4
     8d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8ec:	00550001 	subseq	r0, r5, r1
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	04000000 	streq	r0, [r0], #-0
     8f8:	5001f300 	andpl	pc, r1, r0, lsl #6
     8fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     90c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     918:	01f30004 	mvnseq	r0, r4
     91c:	00009f51 	andeq	r9, r0, r1, asr pc
     920:	00000000 	andeq	r0, r0, r0
     924:	00010000 	andeq	r0, r1, r0
     928:	00000054 	andeq	r0, r0, r4, asr r0
     92c:	00000000 	andeq	r0, r0, r0
     930:	74000300 	strvc	r0, [r0], #-768	; 0x300
     934:	00009f01 	andeq	r9, r0, r1, lsl #30
     938:	00000000 	andeq	r0, r0, r0
     93c:	00010000 	andeq	r0, r1, r0
     940:	00000054 	andeq	r0, r0, r4, asr r0
     944:	00000000 	andeq	r0, r0, r0
     948:	00165400 	andseq	r5, r6, r0, lsl #8
     94c:	00168e08 	andseq	r8, r6, r8, lsl #28
     950:	50000108 	andpl	r0, r0, r8, lsl #2
     954:	0800168e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, ip}
     958:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
     95c:	01f30004 	mvnseq	r0, r4
     960:	00009f50 	andeq	r9, r0, r0, asr pc
     964:	00000000 	andeq	r0, r0, r0
     968:	16640000 	strbtne	r0, [r4], -r0
     96c:	168a0800 	strne	r0, [sl], r0, lsl #16
     970:	00010800 	andeq	r0, r1, r0, lsl #16
     974:	00168a54 	andseq	r8, r6, r4, asr sl
     978:	0016a008 	andseq	sl, r6, r8
     97c:	52000108 	andpl	r0, r0, #8, 2
	...
     988:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
     98c:	080016ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, ip}
     990:	ca500001 	bgt	140099c <__Stack_Size+0x140019c>
     994:	ce080016 	mcrgt	0, 0, r0, cr8, cr6, {0}
     998:	01080016 	tsteq	r8, r6, lsl r0
     99c:	00005000 	andeq	r5, r0, r0
     9a0:	00000000 	andeq	r0, r0, r0
     9a4:	16ca0000 	strbne	r0, [sl], r0
     9a8:	16ce0800 	strbne	r0, [lr], r0, lsl #16
     9ac:	00070800 	andeq	r0, r7, r0, lsl #16
     9b0:	3200703f 	andcc	r7, r0, #63	; 0x3f
     9b4:	d29f2424 	addsle	r2, pc, #36, 8	; 0x24000000
     9b8:	d4080016 	strle	r0, [r8], #-22
     9bc:	01080016 	tsteq	r8, r6, lsl r0
     9c0:	16d45000 	ldrbne	r5, [r4], r0
     9c4:	16d60800 	ldrbne	r0, [r6], r0, lsl #16
     9c8:	00040800 	andeq	r0, r4, r0, lsl #16
     9cc:	9f200070 	svcls	0x00200070
	...
     9d8:	08001794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, ip}
     9dc:	0800179c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl, ip}
     9e0:	ac510001 	mrrcge	0, 0, r0, r1, cr1
     9e4:	b4080017 	strlt	r0, [r8], #-23
     9e8:	01080017 	tsteq	r8, r7, lsl r0
     9ec:	17c05100 	strbne	r5, [r0, r0, lsl #2]
     9f0:	17cc0800 	strbne	r0, [ip, r0, lsl #16]
     9f4:	00010800 	andeq	r0, r1, r0, lsl #16
     9f8:	00000051 	andeq	r0, r0, r1, asr r0
     9fc:	00000000 	andeq	r0, r0, r0
     a00:	0017cc00 	andseq	ip, r7, r0, lsl #24
     a04:	0017da08 	andseq	sp, r7, r8, lsl #20
     a08:	50000108 	andpl	r0, r0, r8, lsl #2
     a0c:	080017da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, sl, ip}
     a10:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
     a14:	01f30004 	mvnseq	r0, r4
     a18:	00009f50 	andeq	r9, r0, r0, asr pc
     a1c:	00000000 	andeq	r0, r0, r0
     a20:	17e40000 	strbne	r0, [r4, r0]!
     a24:	17f20800 	ldrbne	r0, [r2, r0, lsl #16]!
     a28:	00010800 	andeq	r0, r1, r0, lsl #16
     a2c:	0017f250 	andseq	pc, r7, r0, asr r2	; <UNPREDICTABLE>
     a30:	0017fc08 	andseq	pc, r7, r8, lsl #24
     a34:	f3000408 	vshl.u8	d0, d8, d0
     a38:	009f5001 	addseq	r5, pc, r1
     a3c:	00000000 	andeq	r0, r0, r0
     a40:	fc000000 	stc2	0, cr0, [r0], {-0}
     a44:	14080017 	strne	r0, [r8], #-23
     a48:	01080018 	tsteq	r8, r8, lsl r0
     a4c:	18145000 	ldmdane	r4, {ip, lr}
     a50:	18240800 	stmdane	r4!, {fp}
     a54:	00040800 	andeq	r0, r4, r0, lsl #16
     a58:	9f5001f3 	svcls	0x005001f3
	...
     a64:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
     a68:	08001840 	stmdaeq	r0, {r6, fp, ip}
     a6c:	40500001 	subsmi	r0, r0, r1
     a70:	58080018 	stmdapl	r8, {r3, r4}
     a74:	04080018 	streq	r0, [r8], #-24
     a78:	5001f300 	andpl	pc, r1, r0, lsl #6
     a7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a80:	00000000 	andeq	r0, r0, r0
     a84:	00187400 	andseq	r7, r8, r0, lsl #8
     a88:	00187608 	andseq	r7, r8, r8, lsl #12
     a8c:	30000208 	andcc	r0, r0, r8, lsl #4
     a90:	0018769f 	mulseq	r8, pc, r6	; <UNPREDICTABLE>
     a94:	0018a008 	andseq	sl, r8, r8
     a98:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
     aa4:	080018c2 	stmdaeq	r0, {r1, r6, r7, fp, ip}
     aa8:	080018d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, ip}
     aac:	18530001 	ldmdane	r3, {r0}^
     ab0:	1e080019 	mcrne	0, 0, r0, cr8, cr9, {0}
     ab4:	01080019 	tsteq	r8, r9, lsl r0
     ab8:	19605300 	stmdbne	r0!, {r8, r9, ip, lr}^
     abc:	197c0800 	ldmdbne	ip!, {fp}^
     ac0:	00010800 	andeq	r0, r1, r0, lsl #16
     ac4:	00198453 	andseq	r8, r9, r3, asr r4
     ac8:	00199608 	andseq	r9, r9, r8, lsl #12
     acc:	53000108 	movwpl	r0, #264	; 0x108
     ad0:	080019a0 	stmdaeq	r0, {r5, r7, r8, fp, ip}
     ad4:	080019a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp, ip}
     ad8:	f8530001 			; <UNDEFINED> instruction: 0xf8530001
     adc:	08080019 	stmdaeq	r8, {r0, r3, r4}
     ae0:	0108001a 	tsteq	r8, sl, lsl r0
     ae4:	1a0e5300 	bne	3956ec <__Stack_Size+0x394eec>
     ae8:	1a220800 	bne	882af0 <__Stack_Size+0x8822f0>
     aec:	00010800 	andeq	r0, r1, r0, lsl #16
     af0:	001a9a53 	andseq	r9, sl, r3, asr sl
     af4:	001aa008 	andseq	sl, sl, r8
     af8:	53000108 	movwpl	r0, #264	; 0x108
	...
     b04:	080019c4 	stmdaeq	r0, {r2, r6, r7, r8, fp, ip}
     b08:	080019c8 	stmdaeq	r0, {r3, r6, r7, r8, fp, ip}
     b0c:	c8500001 	ldmdagt	r0, {r0}^
     b10:	cd080019 	stcgt	0, cr0, [r8, #-100]	; 0xffffff9c
     b14:	01080019 	tsteq	r8, r9, lsl r0
     b18:	19cd5100 	stmibne	sp, {r8, ip, lr}^
     b1c:	19ea0800 	stmibne	sl!, {fp}^
     b20:	00030800 	andeq	r0, r3, r0, lsl #16
     b24:	009f0275 	addseq	r0, pc, r5, ror r2	; <UNPREDICTABLE>
	...
     b34:	01000000 	mrseq	r0, (UNDEF: 0)
     b38:	00005000 	andeq	r5, r0, r0
     b3c:	00000000 	andeq	r0, r0, r0
     b40:	00010000 	andeq	r0, r1, r0
     b44:	00000058 	andeq	r0, r0, r8, asr r0
     b48:	00000000 	andeq	r0, r0, r0
     b4c:	f3000400 	vshl.u8	d0, d0, d0
     b50:	009f5001 	addseq	r5, pc, r1
	...
     b60:	01000000 	mrseq	r0, (UNDEF: 0)
     b64:	00005100 	andeq	r5, r0, r0, lsl #2
     b68:	00000000 	andeq	r0, r0, r0
     b6c:	00010000 	andeq	r0, r1, r0
     b70:	00000056 	andeq	r0, r0, r6, asr r0
     b74:	00000000 	andeq	r0, r0, r0
     b78:	f3000400 	vshl.u8	d0, d0, d0
     b7c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     b8c:	01000000 	mrseq	r0, (UNDEF: 0)
     b90:	00005200 	andeq	r5, r0, r0, lsl #4
     b94:	00000000 	andeq	r0, r0, r0
     b98:	00010000 	andeq	r0, r1, r0
     b9c:	00000057 	andeq	r0, r0, r7, asr r0
     ba0:	00000000 	andeq	r0, r0, r0
     ba4:	f3000400 	vshl.u8	d0, d0, d0
     ba8:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     bb8:	01000000 	mrseq	r0, (UNDEF: 0)
     bbc:	00005400 	andeq	r5, r0, r0, lsl #8
     bc0:	00000000 	andeq	r0, r0, r0
     bc4:	00030000 	andeq	r0, r3, r0
     bc8:	009f0174 	addseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	01000000 	mrseq	r0, (UNDEF: 0)
     bd4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
     be4:	00010000 	andeq	r0, r1, r0
     be8:	00000056 	andeq	r0, r0, r6, asr r0
     bec:	00000000 	andeq	r0, r0, r0
     bf0:	f3000400 	vshl.u8	d0, d0, d0
     bf4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
     c08:	00005d00 	andeq	r5, r0, r0, lsl #26
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	00040000 	andeq	r0, r4, r0
     c14:	9f7da891 	svcls	0x007da891
	...
     c20:	a87d0004 	ldmdage	sp!, {r2}^
     c24:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
     c34:	00010000 	andeq	r0, r1, r0
     c38:	00000055 	andeq	r0, r0, r5, asr r0
	...
     c48:	91000400 	tstls	r0, r0, lsl #8
     c4c:	009f7e88 	addseq	r7, pc, r8, lsl #29
     c50:	00000000 	andeq	r0, r0, r0
     c54:	01000000 	mrseq	r0, (UNDEF: 0)
     c58:	00005000 	andeq	r5, r0, r0
     c5c:	00000000 	andeq	r0, r0, r0
     c60:	00040000 	andeq	r0, r4, r0
     c64:	9f7e8891 	svcls	0x007e8891
	...
     c70:	00500001 	subseq	r0, r0, r1
     c74:	00000000 	andeq	r0, r0, r0
     c78:	04000000 	streq	r0, [r0], #-0
     c7c:	7e889100 	sinvce	f1, f0
     c80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c84:	00000000 	andeq	r0, r0, r0
     c88:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     c94:	88910004 	ldmhi	r1, {r2}
     c98:	00009f7e 	andeq	r9, r0, lr, ror pc
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	00040000 	andeq	r0, r4, r0
     ca4:	9f7e887d 	svcls	0x007e887d
	...
     cb8:	e8910004 	ldm	r1, {r2}
     cbc:	00009f7d 	andeq	r9, r0, sp, ror pc
     cc0:	00000000 	andeq	r0, r0, r0
     cc4:	00010000 	andeq	r0, r1, r0
     cc8:	00000051 	andeq	r0, r0, r1, asr r0
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	91000400 	tstls	r0, r0, lsl #8
     cd4:	009f7de8 	addseq	r7, pc, r8, ror #27
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	01000000 	mrseq	r0, (UNDEF: 0)
     ce0:	00005000 	andeq	r5, r0, r0
     ce4:	00000000 	andeq	r0, r0, r0
     ce8:	00040000 	andeq	r0, r4, r0
     cec:	9f7de891 	svcls	0x007de891
	...
     cf8:	e87d0004 	ldmda	sp!, {r2}^
     cfc:	00009f7d 	andeq	r9, r0, sp, ror pc
	...
     d0c:	00040000 	andeq	r0, r4, r0
     d10:	9f7dc891 	svcls	0x007dc891
	...
     d1c:	00520001 	subseq	r0, r2, r1
     d20:	00000000 	andeq	r0, r0, r0
     d24:	04000000 	streq	r0, [r0], #-0
     d28:	7dc89100 	stfvcp	f1, [r8]
     d2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d30:	00000000 	andeq	r0, r0, r0
     d34:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d40:	c8910004 	ldmgt	r1, {r2}
     d44:	00009f7d 	andeq	r9, r0, sp, ror pc
     d48:	00000000 	andeq	r0, r0, r0
     d4c:	00010000 	andeq	r0, r1, r0
     d50:	00000051 	andeq	r0, r0, r1, asr r0
     d54:	00000000 	andeq	r0, r0, r0
     d58:	91000400 	tstls	r0, r0, lsl #8
     d5c:	009f7dc8 	addseq	r7, pc, r8, asr #27
     d60:	00000000 	andeq	r0, r0, r0
     d64:	04000000 	streq	r0, [r0], #-0
     d68:	7dc87d00 	stclvc	13, cr7, [r8]
     d6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d7c:	5d000100 	stfpls	f0, [r0, #-0]
	...
     d88:	a8910004 	ldmge	r1, {r2}
     d8c:	00009f7d 	andeq	r9, r0, sp, ror pc
     d90:	00000000 	andeq	r0, r0, r0
     d94:	00040000 	andeq	r0, r4, r0
     d98:	9f7da87d 	svcls	0x007da87d
	...
     dac:	00560001 	subseq	r0, r6, r1
     db0:	00000000 	andeq	r0, r0, r0
     db4:	04000000 	streq	r0, [r0], #-0
     db8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     dbc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     dcc:	91000400 	tstls	r0, r0, lsl #8
     dd0:	009f7ec8 	addseq	r7, pc, r8, asr #29
     dd4:	00000000 	andeq	r0, r0, r0
     dd8:	01000000 	mrseq	r0, (UNDEF: 0)
     ddc:	00005000 	andeq	r5, r0, r0
     de0:	00000000 	andeq	r0, r0, r0
     de4:	00040000 	andeq	r0, r4, r0
     de8:	9f7ec891 	svcls	0x007ec891
	...
     df4:	00520001 	subseq	r0, r2, r1
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	04000000 	streq	r0, [r0], #-0
     e00:	7ec89100 	acsvce	f1, f0
     e04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e08:	00000000 	andeq	r0, r0, r0
     e0c:	7d000400 	cfstrsvc	mvf0, [r0, #-0]
     e10:	009f7ec8 	addseq	r7, pc, r8, asr #29
	...
     e20:	04000000 	streq	r0, [r0], #-0
     e24:	7ea89100 	tanvce	f1, f0
     e28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e2c:	00000000 	andeq	r0, r0, r0
     e30:	52000100 	andpl	r0, r0, #0, 2
	...
     e3c:	a8910004 	ldmge	r1, {r2}
     e40:	00009f7e 	andeq	r9, r0, lr, ror pc
     e44:	00000000 	andeq	r0, r0, r0
     e48:	00040000 	andeq	r0, r4, r0
     e4c:	9f7ea87d 	svcls	0x007ea87d
	...
     e58:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
     e5c:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     e60:	74500001 	ldrbvc	r0, [r0], #-1
     e64:	8c08001b 	stchi	0, cr0, [r8], {27}
     e68:	0108001b 	tsteq	r8, fp, lsl r0
     e6c:	1b8c5400 	blne	fe315e74 <BootRAM+0xd286615>
     e70:	1b8f0800 	blne	fe3c2e78 <BootRAM+0xd333619>
     e74:	00030800 	andeq	r0, r3, r0, lsl #16
     e78:	8f9f4070 	svchi	0x009f4070
     e7c:	9008001b 	andls	r0, r8, fp, lsl r0
     e80:	0408001b 	streq	r0, [r8], #-27
     e84:	5001f300 	andpl	pc, r1, r0, lsl #6
     e88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	001b2000 	andseq	r2, fp, r0
     e94:	001b2e08 	andseq	r2, fp, r8, lsl #28
     e98:	51000108 	tstpl	r0, r8, lsl #2
     e9c:	08001b2e 	stmdaeq	r0, {r1, r2, r3, r5, r8, r9, fp, ip}
     ea0:	08001b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip}
     ea4:	8c550001 	mrrchi	0, 0, r0, r5, cr1
     ea8:	8f08001b 	svchi	0x0008001b
     eac:	0108001b 	tsteq	r8, fp, lsl r0
     eb0:	1b8f5100 	blne	fe3d52b8 <BootRAM+0xd345a59>
     eb4:	1b900800 	blne	fe402ebc <BootRAM+0xd37365d>
     eb8:	00040800 	andeq	r0, r4, r0, lsl #16
     ebc:	9f5101f3 	svcls	0x005101f3
	...
     ec8:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
     ecc:	08001b58 	stmdaeq	r0, {r3, r4, r6, r8, r9, fp, ip}
     ed0:	58520001 	ldmdapl	r2, {r0}^
     ed4:	8c08001b 	stchi	0, cr0, [r8], {27}
     ed8:	0108001b 	tsteq	r8, fp, lsl r0
     edc:	1b8c5600 	blne	fe3166e4 <BootRAM+0xd286e85>
     ee0:	1b8f0800 	blne	fe3c2ee8 <BootRAM+0xd333689>
     ee4:	00010800 	andeq	r0, r1, r0, lsl #16
     ee8:	001b8f52 	andseq	r8, fp, r2, asr pc
     eec:	001b9008 	andseq	r9, fp, r8
     ef0:	f3000408 	vshl.u8	d0, d8, d0
     ef4:	009f5201 	addseq	r5, pc, r1, lsl #4
     ef8:	00000000 	andeq	r0, r0, r0
     efc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     f00:	8c08001b 	stchi	0, cr0, [r8], {27}
     f04:	0108001b 	tsteq	r8, fp, lsl r0
     f08:	1b8c5500 	blne	fe316310 <BootRAM+0xd286ab1>
     f0c:	1b8f0800 	blne	fe3c2f14 <BootRAM+0xd3336b5>
     f10:	00010800 	andeq	r0, r1, r0, lsl #16
     f14:	001b8f51 	andseq	r8, fp, r1, asr pc
     f18:	001b9008 	andseq	r9, fp, r8
     f1c:	f3000408 	vshl.u8	d0, d8, d0
     f20:	009f5101 	addseq	r5, pc, r1, lsl #2
     f24:	00000000 	andeq	r0, r0, r0
     f28:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
     f2c:	7408001b 	strvc	r0, [r8], #-27
     f30:	0108001b 	tsteq	r8, fp, lsl r0
     f34:	1b745000 	blne	1d14f3c <__Stack_Size+0x1d1473c>
     f38:	1b8c0800 	blne	fe302f40 <BootRAM+0xd2736e1>
     f3c:	00010800 	andeq	r0, r1, r0, lsl #16
     f40:	001b8c54 	andseq	r8, fp, r4, asr ip
     f44:	001b8f08 	andseq	r8, fp, r8, lsl #30
     f48:	70000308 	andvc	r0, r0, r8, lsl #6
     f4c:	1b8f9f40 	blne	fe3e8c54 <BootRAM+0xd3593f5>
     f50:	1b900800 	blne	fe402f58 <BootRAM+0xd3736f9>
     f54:	00040800 	andeq	r0, r4, r0, lsl #16
     f58:	9f5001f3 	svcls	0x005001f3
	...
     f64:	08001b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip}
     f68:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
     f6c:	20700003 	rsbscs	r0, r0, r3
     f70:	001b749f 	mulseq	fp, pc, r4	; <UNPREDICTABLE>
     f74:	001b8c08 	andseq	r8, fp, r8, lsl #24
     f78:	74000308 	strvc	r0, [r0], #-776	; 0x308
     f7c:	1b8c9f20 	blne	fe328c04 <BootRAM+0xd2993a5>
     f80:	1b8f0800 	blne	fe3c2f88 <BootRAM+0xd333729>
     f84:	00030800 	andeq	r0, r3, r0, lsl #16
     f88:	8f9f6070 	svchi	0x009f6070
     f8c:	9008001b 	andls	r0, r8, fp, lsl r0
     f90:	0608001b 			; <UNDEFINED> instruction: 0x0608001b
     f94:	5001f300 	andpl	pc, r1, r0, lsl #6
     f98:	009f2023 	addseq	r2, pc, r3, lsr #32
     f9c:	00000000 	andeq	r0, r0, r0
     fa0:	90000000 	andls	r0, r0, r0
     fa4:	9c08001b 	stcls	0, cr0, [r8], {27}
     fa8:	0108001b 	tsteq	r8, fp, lsl r0
     fac:	1b9c5000 	blne	fe714fb4 <BootRAM+0xd685755>
     fb0:	1bca0800 	blne	ff282fb8 <BootRAM+0xe1f3759>
     fb4:	00010800 	andeq	r0, r1, r0, lsl #16
     fb8:	00000056 	andeq	r0, r0, r6, asr r0
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	001b9000 	andseq	r9, fp, r0
     fc4:	001ba008 	andseq	sl, fp, r8
     fc8:	51000108 	tstpl	r0, r8, lsl #2
     fcc:	08001ba0 	stmdaeq	r0, {r5, r7, r8, r9, fp, ip}
     fd0:	08001bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip}
     fd4:	00550001 	subseq	r0, r5, r1
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	90000000 	andls	r0, r0, r0
     fe0:	a308001b 	movwge	r0, #32795	; 0x801b
     fe4:	0108001b 	tsteq	r8, fp, lsl r0
     fe8:	1ba35200 	blne	fe8d57f0 <BootRAM+0xd845f91>
     fec:	1bca0800 	blne	ff282ff4 <BootRAM+0xe1f3795>
     ff0:	00010800 	andeq	r0, r1, r0, lsl #16
     ff4:	00000054 	andeq	r0, r0, r4, asr r0
     ff8:	00000000 	andeq	r0, r0, r0
     ffc:	001bcc00 	andseq	ip, fp, r0, lsl #24
    1000:	001bd808 	andseq	sp, fp, r8, lsl #16
    1004:	50000108 	andpl	r0, r0, r8, lsl #2
    1008:	08001bd8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, fp, ip}
    100c:	08001c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip}
    1010:	00550001 	subseq	r0, r5, r1
    1014:	00000000 	andeq	r0, r0, r0
    1018:	cc000000 	stcgt	0, cr0, [r0], {-0}
    101c:	de08001b 	mcrle	0, 0, r0, cr8, cr11, {0}
    1020:	0108001b 	tsteq	r8, fp, lsl r0
    1024:	1bde5100 	blne	ff79542c <BootRAM+0xe705bcd>
    1028:	1c2a0800 	stcne	8, cr0, [sl], #-0
    102c:	00010800 	andeq	r0, r1, r0, lsl #16
    1030:	00000057 	andeq	r0, r0, r7, asr r0
    1034:	00000000 	andeq	r0, r0, r0
    1038:	001bcc00 	andseq	ip, fp, r0, lsl #24
    103c:	001bda08 	andseq	sp, fp, r8, lsl #20
    1040:	52000108 	andpl	r0, r0, #8, 2
    1044:	08001bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp, ip}
    1048:	08001c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip}
    104c:	00560001 	subseq	r0, r6, r1
    1050:	00000000 	andeq	r0, r0, r0
    1054:	22000000 	andcs	r0, r0, #0
    1058:	2408001c 	strcs	r0, [r8], #-28
    105c:	0108001c 	tsteq	r8, ip, lsl r0
    1060:	00005400 	andeq	r5, r0, r0, lsl #8
    1064:	00000000 	andeq	r0, r0, r0
    1068:	1bd60000 	blne	ff581070 <BootRAM+0xe4f1811>
    106c:	1bde0800 	blne	ff783074 <BootRAM+0xe6f3815>
    1070:	00010800 	andeq	r0, r1, r0, lsl #16
    1074:	001bde51 	andseq	sp, fp, r1, asr lr
    1078:	001c2a08 	andseq	r2, ip, r8, lsl #20
    107c:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1088:	08001bd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, fp, ip}
    108c:	08001c28 	stmdaeq	r0, {r3, r5, sl, fp, ip}
    1090:	285d0001 	ldmdacs	sp, {r0}^
    1094:	2a08001c 	bcs	20110c <__Stack_Size+0x20090c>
    1098:	0308001c 	movweq	r0, #32796	; 0x801c
    109c:	9f489100 	svcls	0x00489100
	...
    10a8:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
    10ac:	08001c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, ip}
    10b0:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    10b4:	ec08001c 	stc	0, cr0, [r8], {28}
    10b8:	0108001c 	tsteq	r8, ip, lsl r0
    10bc:	1cec5400 	cfstrdne	mvd5, [ip]
    10c0:	1cf40800 	ldclne	8, cr0, [r4]
    10c4:	00040800 	andeq	r0, r4, r0, lsl #16
    10c8:	9f5001f3 	svcls	0x005001f3
	...
    10d4:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
    10d8:	08001c71 	stmdaeq	r0, {r0, r4, r5, r6, sl, fp, ip}
    10dc:	71510001 	cmpvc	r1, r1
    10e0:	f408001c 	vst4.8	{d0-d3}, [r8 :64], ip
    10e4:	0408001c 	streq	r0, [r8], #-28
    10e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    10ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10f0:	00000000 	andeq	r0, r0, r0
    10f4:	001c2c00 	andseq	r2, ip, r0, lsl #24
    10f8:	001c6408 	andseq	r6, ip, r8, lsl #8
    10fc:	52000108 	andpl	r0, r0, #8, 2
    1100:	08001c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip}
    1104:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
    1108:	01f30004 	mvnseq	r0, r4
    110c:	00009f52 	andeq	r9, r0, r2, asr pc
    1110:	00000000 	andeq	r0, r0, r0
    1114:	1c400000 	marne	acc0, r0, r0
    1118:	1cec0800 	stclne	8, cr0, [ip]
    111c:	00080800 	andeq	r0, r8, r0, lsl #16
    1120:	25370078 	ldrcs	r0, [r7, #-120]!	; 0x78
    1124:	9f1aff08 	svcls	0x001aff08
	...
    1130:	08001c40 	stmdaeq	r0, {r6, sl, fp, ip}
    1134:	08001c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip}
    1138:	64520001 	ldrbvs	r0, [r2], #-1
    113c:	f408001c 	vst4.8	{d0-d3}, [r8 :64], ip
    1140:	0408001c 	streq	r0, [r8], #-28
    1144:	5201f300 	andpl	pc, r1, #0, 6
    1148:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    114c:	00000000 	andeq	r0, r0, r0
    1150:	001c4000 	andseq	r4, ip, r0
    1154:	001c7108 	andseq	r7, ip, r8, lsl #2
    1158:	51000108 	tstpl	r0, r8, lsl #2
    115c:	08001c71 	stmdaeq	r0, {r0, r4, r5, r6, sl, fp, ip}
    1160:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
    1164:	01f30004 	mvnseq	r0, r4
    1168:	00009f51 	andeq	r9, r0, r1, asr pc
    116c:	00000000 	andeq	r0, r0, r0
    1170:	1cf40000 	ldclne	0, cr0, [r4]
    1174:	1d0a0800 	stcne	8, cr0, [sl, #-0]
    1178:	00010800 	andeq	r0, r1, r0, lsl #16
    117c:	001d0a50 	andseq	r0, sp, r0, asr sl
    1180:	001dd008 	andseq	sp, sp, r8
    1184:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1188:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
    118c:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
    1190:	01f30004 	mvnseq	r0, r4
    1194:	00009f50 	andeq	r9, r0, r0, asr pc
    1198:	00000000 	andeq	r0, r0, r0
    119c:	1cf40000 	ldclne	0, cr0, [r4]
    11a0:	1d060800 	stcne	8, cr0, [r6, #-0]
    11a4:	00010800 	andeq	r0, r1, r0, lsl #16
    11a8:	001d0651 	andseq	r0, sp, r1, asr r6
    11ac:	001dd008 	andseq	sp, sp, r8
    11b0:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    11b4:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
    11b8:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
    11bc:	01f30004 	mvnseq	r0, r4
    11c0:	00009f51 	andeq	r9, r0, r1, asr pc
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	1cf40000 	ldclne	0, cr0, [r4]
    11cc:	1d080800 	stcne	8, cr0, [r8, #-0]
    11d0:	00010800 	andeq	r0, r1, r0, lsl #16
    11d4:	001d0852 	andseq	r0, sp, r2, asr r8
    11d8:	001dd008 	andseq	sp, sp, r8
    11dc:	54000108 	strpl	r0, [r0], #-264	; 0x108
    11e0:	08001dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp, ip}
    11e4:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
    11e8:	01f30004 	mvnseq	r0, r4
    11ec:	00009f52 	andeq	r9, r0, r2, asr pc
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	1dd40000 	ldclne	0, cr0, [r4]
    11f8:	1de20800 	stclne	8, cr0, [r2]
    11fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1200:	001de250 	andseq	lr, sp, r0, asr r2
    1204:	001e8808 	andseq	r8, lr, r8, lsl #16
    1208:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1214:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
    1218:	08001de7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, sl, fp, ip}
    121c:	e7510001 	ldrb	r0, [r1, -r1]
    1220:	8808001d 	stmdahi	r8, {r0, r2, r3, r4}
    1224:	0108001e 	tsteq	r8, lr, lsl r0
    1228:	00005500 	andeq	r5, r0, r0, lsl #10
    122c:	00000000 	andeq	r0, r0, r0
    1230:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    1234:	1e960800 	cdpne	8, 9, cr0, cr6, cr0, {0}
    1238:	00010800 	andeq	r0, r1, r0, lsl #16
    123c:	001e9650 	andseq	r9, lr, r0, asr r6
    1240:	001f0608 	andseq	r0, pc, r8, lsl #12
    1244:	58000108 	stmdapl	r0, {r3, r8}
    1248:	08001f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip}
    124c:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    1250:	01f30004 	mvnseq	r0, r4
    1254:	00009f50 	andeq	r9, r0, r0, asr pc
    1258:	00000000 	andeq	r0, r0, r0
    125c:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    1260:	1e980800 	cdpne	8, 9, cr0, cr8, cr0, {0}
    1264:	00010800 	andeq	r0, r1, r0, lsl #16
    1268:	001e9851 	andseq	r9, lr, r1, asr r8
    126c:	001f0608 	andseq	r0, pc, r8, lsl #12
    1270:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    1274:	08001f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip}
    1278:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    127c:	01f30004 	mvnseq	r0, r4
    1280:	00009f51 	andeq	r9, r0, r1, asr pc
    1284:	00000000 	andeq	r0, r0, r0
    1288:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    128c:	1e9a0800 	cdpne	8, 9, cr0, cr10, cr0, {0}
    1290:	00010800 	andeq	r0, r1, r0, lsl #16
    1294:	001e9a52 	andseq	r9, lr, r2, asr sl
    1298:	001f0608 	andseq	r0, pc, r8, lsl #12
    129c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    12a0:	08001f06 	stmdaeq	r0, {r1, r2, r8, r9, sl, fp, ip}
    12a4:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    12a8:	01f30004 	mvnseq	r0, r4
    12ac:	00009f52 	andeq	r9, r0, r2, asr pc
    12b0:	00000000 	andeq	r0, r0, r0
    12b4:	1e9e0000 	cdpne	0, 9, cr0, cr14, cr0, {0}
    12b8:	1ea00800 	cdpne	8, 10, cr0, cr0, cr0, {0}
    12bc:	00030800 	andeq	r0, r3, r0, lsl #16
    12c0:	a09fff08 	addsge	pc, pc, r8, lsl #30
    12c4:	ea08001e 	b	201344 <__Stack_Size+0x200b44>
    12c8:	0108001e 	tsteq	r8, lr, lsl r0
    12cc:	1eea5400 	cdpne	4, 14, cr5, cr10, cr0, {0}
    12d0:	1ef20800 	cdpne	8, 15, cr0, cr2, cr0, {0}
    12d4:	00030800 	andeq	r0, r3, r0, lsl #16
    12d8:	f29f0174 	vsra.s16	q0, q10, #1
    12dc:	0608001e 			; <UNDEFINED> instruction: 0x0608001e
    12e0:	0108001f 	tsteq	r8, pc, lsl r0
    12e4:	00005400 	andeq	r5, r0, r0, lsl #8
    12e8:	00000000 	andeq	r0, r0, r0
    12ec:	1e8e0000 	cdpne	0, 8, cr0, cr14, cr0, {0}
    12f0:	1f020800 	svcne	0x00020800
    12f4:	00010800 	andeq	r0, r1, r0, lsl #16
    12f8:	001f025d 	andseq	r0, pc, sp, asr r2	; <UNPREDICTABLE>
    12fc:	001f0608 	andseq	r0, pc, r8, lsl #12
    1300:	91000408 	tstls	r0, r8, lsl #8
    1304:	069f7de8 	ldreq	r7, [pc], r8, ror #27
    1308:	0c08001f 	stceq	0, cr0, [r8], {31}
    130c:	0408001f 	streq	r0, [r8], #-31
    1310:	7de87d00 	stclvc	13, cr7, [r8]
    1314:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1318:	00000000 	andeq	r0, r0, r0
    131c:	001eb600 	andseq	fp, lr, r0, lsl #12
    1320:	001f0608 	andseq	r0, pc, r8, lsl #12
    1324:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    1330:	08001ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip}
    1334:	08001f02 	stmdaeq	r0, {r1, r8, r9, sl, fp, ip}
    1338:	025d0001 	subseq	r0, sp, #1
    133c:	0608001f 			; <UNDEFINED> instruction: 0x0608001f
    1340:	0408001f 	streq	r0, [r8], #-31
    1344:	7de89100 	stfvcp	f1, [r8]
    1348:	001f069f 	mulseq	pc, pc, r6	; <UNPREDICTABLE>
    134c:	001f0c08 	andseq	r0, pc, r8, lsl #24
    1350:	7d000408 	cfstrsvc	mvf0, [r0, #-32]	; 0xffffffe0
    1354:	009f7de8 	addseq	r7, pc, r8, ror #27
    1358:	00000000 	andeq	r0, r0, r0
    135c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1360:	0608001e 			; <UNDEFINED> instruction: 0x0608001e
    1364:	0108001f 	tsteq	r8, pc, lsl r0
    1368:	1f065800 	svcne	0x00065800
    136c:	1f0c0800 	svcne	0x000c0800
    1370:	00040800 	andeq	r0, r4, r0, lsl #16
    1374:	9f5001f3 	svcls	0x005001f3
	...
    1380:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    1384:	08001f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, ip}
    1388:	1a500001 	bne	1401394 <__Stack_Size+0x1400b94>
    138c:	5a08001f 	bpl	201410 <__Stack_Size+0x200c10>
    1390:	0108001f 	tsteq	r8, pc, lsl r0
    1394:	1f5a5600 	svcne	0x005a5600
    1398:	1f600800 	svcne	0x00600800
    139c:	00040800 	andeq	r0, r4, r0, lsl #16
    13a0:	9f5001f3 	svcls	0x005001f3
	...
    13ac:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
    13b0:	08001f1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, sl, fp, ip}
    13b4:	1a510001 	bne	14413c0 <__Stack_Size+0x1440bc0>
    13b8:	5a08001f 	bpl	20143c <__Stack_Size+0x200c3c>
    13bc:	0108001f 	tsteq	r8, pc, lsl r0
    13c0:	1f5a5700 	svcne	0x005a5700
    13c4:	1f600800 	svcne	0x00600800
    13c8:	00040800 	andeq	r0, r4, r0, lsl #16
    13cc:	9f5101f3 	svcls	0x005101f3
	...
    13d8:	08001f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip}
    13dc:	08001f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, ip}
    13e0:	585d0001 	ldmdapl	sp, {r0}^
    13e4:	5a08001f 	bpl	201468 <__Stack_Size+0x200c68>
    13e8:	0308001f 	movweq	r0, #32799	; 0x801f
    13ec:	9f507400 	svcls	0x00507400
    13f0:	08001f5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, r9, sl, fp, ip}
    13f4:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
    13f8:	a87d0004 	ldmdage	sp!, {r2}^
    13fc:	00009f7f 	andeq	r9, r0, pc, ror pc
    1400:	00000000 	andeq	r0, r0, r0
    1404:	1f420000 	svcne	0x00420000
    1408:	1f5a0800 	svcne	0x005a0800
    140c:	00010800 	andeq	r0, r1, r0, lsl #16
    1410:	001f5a56 	andseq	r5, pc, r6, asr sl	; <UNPREDICTABLE>
    1414:	001f6008 	andseq	r6, pc, r8
    1418:	f3000408 	vshl.u8	d0, d8, d0
    141c:	009f5001 	addseq	r5, pc, r1
    1420:	00000000 	andeq	r0, r0, r0
    1424:	60000000 	andvs	r0, r0, r0
    1428:	7408001f 	strvc	r0, [r8], #-31
    142c:	0108001f 	tsteq	r8, pc, lsl r0
    1430:	1f745000 	svcne	0x00745000
    1434:	1ff40800 	svcne	0x00f40800
    1438:	00010800 	andeq	r0, r1, r0, lsl #16
    143c:	001ff45a 	andseq	pc, pc, sl, asr r4	; <UNPREDICTABLE>
    1440:	001ffc08 	andseq	pc, pc, r8, lsl #24
    1444:	f3000408 	vshl.u8	d0, d8, d0
    1448:	009f5001 	addseq	r5, pc, r1
    144c:	00000000 	andeq	r0, r0, r0
    1450:	60000000 	andvs	r0, r0, r0
    1454:	7408001f 	strvc	r0, [r8], #-31
    1458:	0108001f 	tsteq	r8, pc, lsl r0
    145c:	1f745100 	svcne	0x00745100
    1460:	1ff40800 	svcne	0x00f40800
    1464:	00010800 	andeq	r0, r1, r0, lsl #16
    1468:	001ff456 	andseq	pc, pc, r6, asr r4	; <UNPREDICTABLE>
    146c:	001ffc08 	andseq	pc, pc, r8, lsl #24
    1470:	f3000408 	vshl.u8	d0, d8, d0
    1474:	009f5101 	addseq	r5, pc, r1, lsl #2
    1478:	00000000 	andeq	r0, r0, r0
    147c:	60000000 	andvs	r0, r0, r0
    1480:	7408001f 	strvc	r0, [r8], #-31
    1484:	0108001f 	tsteq	r8, pc, lsl r0
    1488:	1f745200 	svcne	0x00745200
    148c:	1ff40800 	svcne	0x00f40800
    1490:	00010800 	andeq	r0, r1, r0, lsl #16
    1494:	001ff458 	andseq	pc, pc, r8, asr r4	; <UNPREDICTABLE>
    1498:	001ffc08 	andseq	pc, pc, r8, lsl #24
    149c:	f3000408 	vshl.u8	d0, d8, d0
    14a0:	009f5201 	addseq	r5, pc, r1, lsl #4
    14a4:	00000000 	andeq	r0, r0, r0
    14a8:	60000000 	andvs	r0, r0, r0
    14ac:	7408001f 	strvc	r0, [r8], #-31
    14b0:	0108001f 	tsteq	r8, pc, lsl r0
    14b4:	1f745300 	svcne	0x00745300
    14b8:	1fa20800 	svcne	0x00a20800
    14bc:	00010800 	andeq	r0, r1, r0, lsl #16
    14c0:	001fa259 	andseq	sl, pc, r9, asr r2	; <UNPREDICTABLE>
    14c4:	001fa708 	andseq	sl, pc, r8, lsl #14
    14c8:	51000108 	tstpl	r0, r8, lsl #2
    14cc:	08001fa7 	stmdaeq	r0, {r0, r1, r2, r5, r7, r8, r9, sl, fp, ip}
    14d0:	08001ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    14d4:	f4590001 			; <UNDEFINED> instruction: 0xf4590001
    14d8:	fc08001f 	stc2	0, cr0, [r8], {31}
    14dc:	0408001f 	streq	r0, [r8], #-31
    14e0:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    14e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    14e8:	00000000 	andeq	r0, r0, r0
    14ec:	001f6000 	andseq	r6, pc, r0
    14f0:	001ff408 	andseq	pc, pc, r8, lsl #8
    14f4:	91000208 	tstls	r0, r8, lsl #4
    14f8:	001ff400 	andseq	pc, pc, r0, lsl #8
    14fc:	001ffc08 	andseq	pc, pc, r8, lsl #24
    1500:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
	...
    150c:	001f6800 	andseq	r6, pc, r0, lsl #16
    1510:	001ff008 	andseq	pc, pc, r8
    1514:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    1518:	08001ff0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    151c:	08001ff4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1520:	a0910004 	addsge	r0, r1, r4
    1524:	1ff49f7f 	svcne	0x00f49f7f
    1528:	1ffc0800 	svcne	0x00fc0800
    152c:	00040800 	andeq	r0, r4, r0, lsl #16
    1530:	9f7fa07d 	svcls	0x007fa07d
	...
    153c:	08001fb0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, fp, ip}
    1540:	08001fc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, fp, ip}
    1544:	c4540001 	ldrbgt	r0, [r4], #-1
    1548:	c808001f 	stmdagt	r8, {r0, r1, r2, r3, r4}
    154c:	0108001f 	tsteq	r8, pc, lsl r0
    1550:	1fc85500 	svcne	0x00c85500
    1554:	1fce0800 	svcne	0x00ce0800
    1558:	00010800 	andeq	r0, r1, r0, lsl #16
    155c:	00000054 	andeq	r0, r0, r4, asr r0
    1560:	00000000 	andeq	r0, r0, r0
    1564:	001ffc00 	andseq	pc, pc, r0, lsl #24
    1568:	00200608 	eoreq	r0, r0, r8, lsl #12
    156c:	50000108 	andpl	r0, r0, r8, lsl #2
    1570:	08002006 	stmdaeq	r0, {r1, r2, sp}
    1574:	08002024 	stmdaeq	r0, {r2, r5, sp}
    1578:	24540001 	ldrbcs	r0, [r4], #-1
    157c:	28080020 	stmdacs	r8, {r5}
    1580:	04080020 	streq	r0, [r8], #-32
    1584:	5001f300 	andpl	pc, r1, r0, lsl #6
    1588:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    158c:	00000000 	andeq	r0, r0, r0
    1590:	001ffc00 	andseq	pc, pc, r0, lsl #24
    1594:	00200808 	eoreq	r0, r0, r8, lsl #16
    1598:	51000108 	tstpl	r0, r8, lsl #2
    159c:	08002008 	stmdaeq	r0, {r3, sp}
    15a0:	0800200b 	stmdaeq	r0, {r0, r1, r3, sp}
    15a4:	0b520001 	bleq	14815b0 <__Stack_Size+0x1480db0>
    15a8:	28080020 	stmdacs	r8, {r5}
    15ac:	04080020 	streq	r0, [r8], #-32
    15b0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    15b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15b8:	00000000 	andeq	r0, r0, r0
    15bc:	00200c00 	eoreq	r0, r0, r0, lsl #24
    15c0:	00201208 	eoreq	r1, r0, r8, lsl #4
    15c4:	91000408 	tstls	r0, r8, lsl #8
    15c8:	129f7ef8 	addsne	r7, pc, #248, 28	; 0xf80
    15cc:	15080020 	strne	r0, [r8, #-32]
    15d0:	01080020 	tsteq	r8, r0, lsr #32
    15d4:	20155200 	andscs	r5, r5, r0, lsl #4
    15d8:	20240800 	eorcs	r0, r4, r0, lsl #16
    15dc:	00040800 	andeq	r0, r4, r0, lsl #16
    15e0:	9f7ef891 	svcls	0x007ef891
    15e4:	08002024 	stmdaeq	r0, {r2, r5, sp}
    15e8:	08002028 	stmdaeq	r0, {r3, r5, sp}
    15ec:	f87d0004 			; <UNDEFINED> instruction: 0xf87d0004
    15f0:	00009f7e 	andeq	r9, r0, lr, ror pc
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	200c0000 	andcs	r0, ip, r0
    15fc:	20240800 	eorcs	r0, r4, r0, lsl #16
    1600:	00010800 	andeq	r0, r1, r0, lsl #16
    1604:	00202454 	eoreq	r2, r0, r4, asr r4
    1608:	00202808 	eoreq	r2, r0, r8, lsl #16
    160c:	f3000408 	vshl.u8	d0, d8, d0
    1610:	009f5001 	addseq	r5, pc, r1
    1614:	00000000 	andeq	r0, r0, r0
    1618:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    161c:	30080020 	andcc	r0, r8, r0, lsr #32
    1620:	01080020 	tsteq	r8, r0, lsr #32
    1624:	20305000 	eorscs	r5, r0, r0
    1628:	20400800 	subcs	r0, r0, r0, lsl #16
    162c:	00010800 	andeq	r0, r1, r0, lsl #16
    1630:	00000054 	andeq	r0, r0, r4, asr r0
    1634:	00000000 	andeq	r0, r0, r0
    1638:	00202800 	eoreq	r2, r0, r0, lsl #16
    163c:	00203308 	eoreq	r3, r0, r8, lsl #6
    1640:	51000108 	tstpl	r0, r8, lsl #2
    1644:	08002033 	stmdaeq	r0, {r0, r1, r4, r5, sp}
    1648:	08002040 	stmdaeq	r0, {r6, sp}
    164c:	01f30004 	mvnseq	r0, r4
    1650:	00009f51 	andeq	r9, r0, r1, asr pc
    1654:	00000000 	andeq	r0, r0, r0
    1658:	20400000 	subcs	r0, r0, r0
    165c:	204c0800 	subcs	r0, ip, r0, lsl #16
    1660:	00010800 	andeq	r0, r1, r0, lsl #16
    1664:	00204c50 	eoreq	r4, r0, r0, asr ip
    1668:	00208408 	eoreq	r8, r0, r8, lsl #8
    166c:	58000108 	stmdapl	r0, {r3, r8}
    1670:	08002084 	stmdaeq	r0, {r2, r7, sp}
    1674:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    1678:	60780003 	rsbsvs	r0, r8, r3
    167c:	0020fa9f 	mlaeq	r0, pc, sl, pc	; <UNPREDICTABLE>
    1680:	00210008 	eoreq	r0, r1, r8
    1684:	f3000408 	vshl.u8	d0, d8, d0
    1688:	009f5001 	addseq	r5, pc, r1
    168c:	00000000 	andeq	r0, r0, r0
    1690:	40000000 	andmi	r0, r0, r0
    1694:	4e080020 	cdpmi	0, 0, cr0, cr8, cr0, {1}
    1698:	01080020 	tsteq	r8, r0, lsr #32
    169c:	204e5100 	subcs	r5, lr, r0, lsl #2
    16a0:	20fa0800 	rscscs	r0, sl, r0, lsl #16
    16a4:	00010800 	andeq	r0, r1, r0, lsl #16
    16a8:	0020fa59 	eoreq	pc, r0, r9, asr sl	; <UNPREDICTABLE>
    16ac:	00210008 	eoreq	r0, r1, r8
    16b0:	f3000408 	vshl.u8	d0, d8, d0
    16b4:	009f5101 	addseq	r5, pc, r1, lsl #2
    16b8:	00000000 	andeq	r0, r0, r0
    16bc:	40000000 	andmi	r0, r0, r0
    16c0:	59080020 	stmdbpl	r8, {r5}
    16c4:	01080020 	tsteq	r8, r0, lsr #32
    16c8:	20595200 	subscs	r5, r9, r0, lsl #4
    16cc:	21000800 	tstcs	r0, r0, lsl #16
    16d0:	00040800 	andeq	r0, r4, r0, lsl #16
    16d4:	9f5201f3 	svcls	0x005201f3
	...
    16e0:	08002040 	stmdaeq	r0, {r6, sp}
    16e4:	08002059 	stmdaeq	r0, {r0, r3, r4, r6, sp}
    16e8:	59530001 	ldmdbpl	r3, {r0}^
    16ec:	fa080020 	blx	201774 <__Stack_Size+0x200f74>
    16f0:	01080020 	tsteq	r8, r0, lsr #32
    16f4:	20fa5600 	rscscs	r5, sl, r0, lsl #12
    16f8:	21000800 	tstcs	r0, r0, lsl #16
    16fc:	00040800 	andeq	r0, r4, r0, lsl #16
    1700:	9f5301f3 	svcls	0x005301f3
	...
    170c:	08002040 	stmdaeq	r0, {r6, sp}
    1710:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    1714:	00910002 	addseq	r0, r1, r2
    1718:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    171c:	08002100 	stmdaeq	r0, {r8, sp}
    1720:	007d0002 	rsbseq	r0, sp, r2
	...
    172c:	0800205a 	stmdaeq	r0, {r1, r3, r4, r6, sp}
    1730:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    1734:	00570001 	subseq	r0, r7, r1
    1738:	00000000 	andeq	r0, r0, r0
    173c:	5a000000 	bpl	1744 <__Stack_Size+0xf44>
    1740:	fa080020 	blx	2017c8 <__Stack_Size+0x200fc8>
    1744:	01080020 	tsteq	r8, r0, lsr #32
    1748:	20fa5600 	rscscs	r5, sl, r0, lsl #12
    174c:	21000800 	tstcs	r0, r0, lsl #16
    1750:	00040800 	andeq	r0, r4, r0, lsl #16
    1754:	9f5301f3 	svcls	0x005301f3
	...
    1760:	0800205a 	stmdaeq	r0, {r1, r3, r4, r6, sp}
    1764:	0800205c 	stmdaeq	r0, {r2, r3, r4, r6, sp}
    1768:	5c550001 	mrrcpl	0, 0, r0, r5, cr1
    176c:	84080020 	strhi	r0, [r8], #-32
    1770:	03080020 	movweq	r0, #32800	; 0x8020
    1774:	9f707500 	svcls	0x00707500
    1778:	08002084 	stmdaeq	r0, {r2, r7, sp}
    177c:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    1780:	c0910004 	addsgt	r0, r1, r4
    1784:	20fa9f7e 	rscscs	r9, sl, lr, ror pc
    1788:	21000800 	tstcs	r0, r0, lsl #16
    178c:	00040800 	andeq	r0, r4, r0, lsl #16
    1790:	9f7ec07d 	svcls	0x007ec07d
	...
    179c:	0800205a 	stmdaeq	r0, {r1, r3, r4, r6, sp}
    17a0:	0800206a 	stmdaeq	r0, {r1, r3, r5, r6, sp}
    17a4:	e0910004 	adds	r0, r1, r4
    17a8:	206a9f7d 	rsbcs	r9, sl, sp, ror pc
    17ac:	20730800 	rsbscs	r0, r3, r0, lsl #16
    17b0:	00010800 	andeq	r0, r1, r0, lsl #16
    17b4:	00207350 	eoreq	r7, r0, r0, asr r3
    17b8:	00207808 	eoreq	r7, r0, r8, lsl #16
    17bc:	91000408 	tstls	r0, r8, lsl #8
    17c0:	789f7de0 	ldmvc	pc, {r5, r6, r7, r8, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    17c4:	7b080020 	blvc	20184c <__Stack_Size+0x20104c>
    17c8:	01080020 	tsteq	r8, r0, lsr #32
    17cc:	207b5100 	rsbscs	r5, fp, r0, lsl #2
    17d0:	20da0800 	sbcscs	r0, sl, r0, lsl #16
    17d4:	00040800 	andeq	r0, r4, r0, lsl #16
    17d8:	9f7de091 	svcls	0x007de091
    17dc:	080020da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sp}
    17e0:	080020dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sp}
    17e4:	dd510001 	ldclle	0, cr0, [r1, #-4]
    17e8:	fa080020 	blx	201870 <__Stack_Size+0x201070>
    17ec:	04080020 	streq	r0, [r8], #-32
    17f0:	7de09100 	stfvcp	f1, [r0]
    17f4:	0020fa9f 	mlaeq	r0, pc, sl, pc	; <UNPREDICTABLE>
    17f8:	00210008 	eoreq	r0, r1, r8
    17fc:	7d000408 	cfstrsvc	mvf0, [r0, #-32]	; 0xffffffe0
    1800:	009f7de0 	addseq	r7, pc, r0, ror #27
    1804:	00000000 	andeq	r0, r0, r0
    1808:	7c000000 	stcvc	0, cr0, [r0], {-0}
    180c:	fa080020 	blx	201894 <__Stack_Size+0x201094>
    1810:	01080020 	tsteq	r8, r0, lsr #32
    1814:	00005700 	andeq	r5, r0, r0, lsl #14
    1818:	00000000 	andeq	r0, r0, r0
    181c:	207c0000 	rsbscs	r0, ip, r0
    1820:	20fa0800 	rscscs	r0, sl, r0, lsl #16
    1824:	00010800 	andeq	r0, r1, r0, lsl #16
    1828:	0020fa56 	eoreq	pc, r0, r6, asr sl	; <UNPREDICTABLE>
    182c:	00210008 	eoreq	r0, r1, r8
    1830:	f3000408 	vshl.u8	d0, d8, d0
    1834:	009f5301 	addseq	r5, pc, r1, lsl #6
    1838:	00000000 	andeq	r0, r0, r0
    183c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    1840:	fa080020 	blx	2018c8 <__Stack_Size+0x2010c8>
    1844:	01080020 	tsteq	r8, r0, lsr #32
    1848:	20fa5900 	rscscs	r5, sl, r0, lsl #18
    184c:	21000800 	tstcs	r0, r0, lsl #16
    1850:	00040800 	andeq	r0, r4, r0, lsl #16
    1854:	9f5101f3 	svcls	0x005101f3
	...
    1860:	0800207c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sp}
    1864:	08002084 	stmdaeq	r0, {r2, r7, sp}
    1868:	84580001 	ldrbhi	r0, [r8], #-1
    186c:	fa080020 	blx	2018f4 <__Stack_Size+0x2010f4>
    1870:	03080020 	movweq	r0, #32800	; 0x8020
    1874:	9f607800 	svcls	0x00607800
    1878:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    187c:	08002100 	stmdaeq	r0, {r8, sp}
    1880:	01f30004 	mvnseq	r0, r4
    1884:	00009f50 	andeq	r9, r0, r0, asr pc
    1888:	00000000 	andeq	r0, r0, r0
    188c:	207c0000 	rsbscs	r0, ip, r0
    1890:	20b00800 	adcscs	r0, r0, r0, lsl #16
    1894:	00040800 	andeq	r0, r4, r0, lsl #16
    1898:	9f7e8091 	svcls	0x007e8091
    189c:	080020b0 	stmdaeq	r0, {r4, r5, r7, sp}
    18a0:	080020bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, sp}
    18a4:	bb500001 	bllt	14018b0 <__Stack_Size+0x14010b0>
    18a8:	cc080020 	stcgt	0, cr0, [r8], {32}
    18ac:	04080020 	streq	r0, [r8], #-32
    18b0:	7e809100 	sinvcs	f1, f0
    18b4:	0020cc9f 	mlaeq	r0, pc, ip, ip	; <UNPREDICTABLE>
    18b8:	0020d308 	eoreq	sp, r0, r8, lsl #6
    18bc:	51000108 	tstpl	r0, r8, lsl #2
    18c0:	080020d3 	stmdaeq	r0, {r0, r1, r4, r6, r7, sp}
    18c4:	080020fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sp}
    18c8:	80910004 	addshi	r0, r1, r4
    18cc:	20fa9f7e 	rscscs	r9, sl, lr, ror pc
    18d0:	21000800 	tstcs	r0, r0, lsl #16
    18d4:	00040800 	andeq	r0, r4, r0, lsl #16
    18d8:	9f7e807d 	svcls	0x007e807d
	...
    18e4:	08002100 	stmdaeq	r0, {r8, sp}
    18e8:	08002116 	stmdaeq	r0, {r1, r2, r4, r8, sp}
    18ec:	16500001 	ldrbne	r0, [r0], -r1
    18f0:	c0080021 	andgt	r0, r8, r1, lsr #32
    18f4:	01080021 	tsteq	r8, r1, lsr #32
    18f8:	00005600 	andeq	r5, r0, r0, lsl #12
    18fc:	00000000 	andeq	r0, r0, r0
    1900:	21000000 	mrscs	r0, (UNDEF: 0)
    1904:	21160800 	tstcs	r6, r0, lsl #16
    1908:	00010800 	andeq	r0, r1, r0, lsl #16
    190c:	00211651 	eoreq	r1, r1, r1, asr r6
    1910:	0021c008 	eoreq	ip, r1, r8
    1914:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    1920:	08002100 	stmdaeq	r0, {r8, sp}
    1924:	08002130 	stmdaeq	r0, {r4, r5, r8, sp}
    1928:	30520001 	subscc	r0, r2, r1
    192c:	4d080021 	stcmi	0, cr0, [r8, #-132]	; 0xffffff7c
    1930:	01080021 	tsteq	r8, r1, lsr #32
    1934:	214d5c00 	cmpcs	sp, r0, lsl #24
    1938:	21c00800 	biccs	r0, r0, r0, lsl #16
    193c:	00040800 	andeq	r0, r4, r0, lsl #16
    1940:	9f5201f3 	svcls	0x005201f3
	...
    194c:	08002100 	stmdaeq	r0, {r8, sp}
    1950:	08002146 	stmdaeq	r0, {r1, r2, r6, r8, sp}
    1954:	46530001 	ldrbmi	r0, [r3], -r1
    1958:	4d080021 	stcmi	0, cr0, [r8, #-132]	; 0xffffff7c
    195c:	02080021 	andeq	r0, r8, #33	; 0x21
    1960:	4d007d00 	stcmi	13, cr7, [r0, #-0]
    1964:	c0080021 	andgt	r0, r8, r1, lsr #32
    1968:	04080021 	streq	r0, [r8], #-33	; 0x21
    196c:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    1970:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1974:	00000000 	andeq	r0, r0, r0
    1978:	00210000 	eoreq	r0, r1, r0
    197c:	00216c08 	eoreq	r6, r1, r8, lsl #24
    1980:	31000208 	tstcc	r0, r8, lsl #4
    1984:	00216c9f 	mlaeq	r1, pc, ip, r6	; <UNPREDICTABLE>
    1988:	00218c08 	eoreq	r8, r1, r8, lsl #24
    198c:	75000508 	strvc	r0, [r0, #-1288]	; 0x508
    1990:	9f1a3100 	svcls	0x001a3100
    1994:	0800218c 	stmdaeq	r0, {r2, r3, r7, r8, sp}
    1998:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    199c:	00750008 	rsbseq	r0, r5, r8
    19a0:	311a0074 	tstcc	sl, r4, ror r0
    19a4:	00009f1a 	andeq	r9, r0, sl, lsl pc
    19a8:	00000000 	andeq	r0, r0, r0
    19ac:	210c0000 	mrscs	r0, (UNDEF: 12)
    19b0:	21460800 	cmpcs	r6, r0, lsl #16
    19b4:	00010800 	andeq	r0, r1, r0, lsl #16
    19b8:	00214653 	eoreq	r4, r1, r3, asr r6
    19bc:	00214d08 	eoreq	r4, r1, r8, lsl #26
    19c0:	7d000208 	sfmvc	f0, 4, [r0, #-32]	; 0xffffffe0
    19c4:	00214d00 	eoreq	r4, r1, r0, lsl #26
    19c8:	0021c008 	eoreq	ip, r1, r8
    19cc:	f3000408 	vshl.u8	d0, d8, d0
    19d0:	009f5301 	addseq	r5, pc, r1, lsl #6
    19d4:	00000000 	andeq	r0, r0, r0
    19d8:	0c000000 	stceq	0, cr0, [r0], {-0}
    19dc:	30080021 	andcc	r0, r8, r1, lsr #32
    19e0:	01080021 	tsteq	r8, r1, lsr #32
    19e4:	21305200 	teqcs	r0, r0, lsl #4
    19e8:	214d0800 	cmpcs	sp, r0, lsl #16
    19ec:	00010800 	andeq	r0, r1, r0, lsl #16
    19f0:	00214d5c 	eoreq	r4, r1, ip, asr sp
    19f4:	0021c008 	eoreq	ip, r1, r8
    19f8:	f3000408 	vshl.u8	d0, d8, d0
    19fc:	009f5201 	addseq	r5, pc, r1, lsl #4
    1a00:	00000000 	andeq	r0, r0, r0
    1a04:	0a000000 	beq	1a0c <__Stack_Size+0x120c>
    1a08:	16080021 	strne	r0, [r8], -r1, lsr #32
    1a0c:	01080021 	tsteq	r8, r1, lsr #32
    1a10:	21165100 	tstcs	r6, r0, lsl #2
    1a14:	21c00800 	biccs	r0, r0, r0, lsl #16
    1a18:	00010800 	andeq	r0, r1, r0, lsl #16
    1a1c:	00000057 	andeq	r0, r0, r7, asr r0
    1a20:	00000000 	andeq	r0, r0, r0
    1a24:	00210600 	eoreq	r0, r1, r0, lsl #12
    1a28:	00211608 	eoreq	r1, r1, r8, lsl #12
    1a2c:	50000108 	andpl	r0, r0, r8, lsl #2
    1a30:	08002116 	stmdaeq	r0, {r1, r2, r4, r8, sp}
    1a34:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    1a38:	00560001 	subseq	r0, r6, r1
    1a3c:	00000000 	andeq	r0, r0, r0
    1a40:	06000000 	streq	r0, [r0], -r0
    1a44:	44080021 	strmi	r0, [r8], #-33	; 0x21
    1a48:	04080021 	streq	r0, [r8], #-33	; 0x21
    1a4c:	7d889100 	stfvcd	f1, [r8]
    1a50:	0021449f 	mlaeq	r1, pc, r4, r4	; <UNPREDICTABLE>
    1a54:	00214d08 	eoreq	r4, r1, r8, lsl #26
    1a58:	50000108 	andpl	r0, r0, r8, lsl #2
    1a5c:	0800214d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sp}
    1a60:	08002172 	stmdaeq	r0, {r1, r4, r5, r6, r8, sp}
    1a64:	88910004 	ldmhi	r1, {r2}
    1a68:	21729f7d 	cmncs	r2, sp, ror pc
    1a6c:	21750800 	cmncs	r5, r0, lsl #16
    1a70:	00010800 	andeq	r0, r1, r0, lsl #16
    1a74:	00217552 	eoreq	r7, r1, r2, asr r5
    1a78:	0021c008 	eoreq	ip, r1, r8
    1a7c:	91000408 	tstls	r0, r8, lsl #8
    1a80:	009f7d88 	addseq	r7, pc, r8, lsl #27
    1a84:	00000000 	andeq	r0, r0, r0
    1a88:	56000000 	strpl	r0, [r0], -r0
    1a8c:	68080021 	stmdavs	r8, {r0, r5}
    1a90:	04080021 	streq	r0, [r8], #-33	; 0x21
    1a94:	7de89100 	stfvcp	f1, [r8]
    1a98:	0021689f 	mlaeq	r1, pc, r8, r6	; <UNPREDICTABLE>
    1a9c:	00216b08 	eoreq	r6, r1, r8, lsl #22
    1aa0:	50000108 	andpl	r0, r0, r8, lsl #2
    1aa4:	0800216b 	stmdaeq	r0, {r0, r1, r3, r5, r6, r8, sp}
    1aa8:	0800216e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sp}
    1aac:	e8910004 	ldm	r1, {r2}
    1ab0:	216e9f7d 	smccs	59901	; 0xe9fd
    1ab4:	21750800 	cmncs	r5, r0, lsl #16
    1ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    1abc:	00217550 	eoreq	r7, r1, r0, asr r5
    1ac0:	00218e08 	eoreq	r8, r1, r8, lsl #28
    1ac4:	91000408 	tstls	r0, r8, lsl #8
    1ac8:	8e9f7de8 	cdphi	13, 9, cr7, cr15, cr8, {7}
    1acc:	95080021 	strls	r0, [r8, #-33]	; 0x21
    1ad0:	01080021 	tsteq	r8, r1, lsr #32
    1ad4:	21955000 	orrscs	r5, r5, r0
    1ad8:	219c0800 	orrscs	r0, ip, r0, lsl #16
    1adc:	00040800 	andeq	r0, r4, r0, lsl #16
    1ae0:	9f7de891 	svcls	0x007de891
    1ae4:	0800219c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sp}
    1ae8:	0800219f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r8, sp}
    1aec:	9f520001 	svcls	0x00520001
    1af0:	c0080021 	andgt	r0, r8, r1, lsr #32
    1af4:	04080021 	streq	r0, [r8], #-33	; 0x21
    1af8:	7de89100 	stfvcp	f1, [r8]
    1afc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1b00:	00000000 	andeq	r0, r0, r0
    1b04:	00216400 	eoreq	r6, r1, r0, lsl #8
    1b08:	00216808 	eoreq	r6, r1, r8, lsl #16
    1b0c:	50000108 	andpl	r0, r0, r8, lsl #2
    1b10:	08002168 	stmdaeq	r0, {r3, r5, r6, r8, sp}
    1b14:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    1b18:	00550001 	subseq	r0, r5, r1
    1b1c:	00000000 	andeq	r0, r0, r0
    1b20:	76000000 	strvc	r0, [r0], -r0
    1b24:	88080021 	stmdahi	r8, {r0, r5}
    1b28:	04080021 	streq	r0, [r8], #-33	; 0x21
    1b2c:	7ee89100 	urdvce	f1, f0
    1b30:	0021889f 	mlaeq	r1, pc, r8, r8	; <UNPREDICTABLE>
    1b34:	00218b08 	eoreq	r8, r1, r8, lsl #22
    1b38:	50000108 	andpl	r0, r0, r8, lsl #2
    1b3c:	0800218b 	stmdaeq	r0, {r0, r1, r3, r7, r8, sp}
    1b40:	08002192 	stmdaeq	r0, {r1, r4, r7, r8, sp}
    1b44:	e8910004 	ldm	r1, {r2}
    1b48:	21929f7e 	orrscs	r9, r2, lr, ror pc
    1b4c:	21950800 	orrscs	r0, r5, r0, lsl #16
    1b50:	00010800 	andeq	r0, r1, r0, lsl #16
    1b54:	00219552 	eoreq	r9, r1, r2, asr r5
    1b58:	0021c008 	eoreq	ip, r1, r8
    1b5c:	91000408 	tstls	r0, r8, lsl #8
    1b60:	009f7ee8 	addseq	r7, pc, r8, ror #29
    1b64:	00000000 	andeq	r0, r0, r0
    1b68:	84000000 	strhi	r0, [r0], #-0
    1b6c:	88080021 	stmdahi	r8, {r0, r5}
    1b70:	01080021 	tsteq	r8, r1, lsr #32
    1b74:	21885000 	orrcs	r5, r8, r0
    1b78:	21c00800 	biccs	r0, r0, r0, lsl #16
    1b7c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b80:	00000054 	andeq	r0, r0, r4, asr r0
    1b84:	00000000 	andeq	r0, r0, r0
    1b88:	00219600 	eoreq	r9, r1, r0, lsl #12
    1b8c:	00219c08 	eoreq	r9, r1, r8, lsl #24
    1b90:	91000408 	tstls	r0, r8, lsl #8
    1b94:	9c9f7de8 	ldcls	13, cr7, [pc], {232}	; 0xe8
    1b98:	9f080021 	svcls	0x00080021
    1b9c:	01080021 	tsteq	r8, r1, lsr #32
    1ba0:	219f5200 	orrscs	r5, pc, r0, lsl #4
    1ba4:	21c00800 	biccs	r0, r0, r0, lsl #16
    1ba8:	00040800 	andeq	r0, r4, r0, lsl #16
    1bac:	9f7de891 	svcls	0x007de891
	...
    1bb8:	08002196 	stmdaeq	r0, {r1, r2, r4, r7, r8, sp}
    1bbc:	080021a2 	stmdaeq	r0, {r1, r5, r7, r8, sp}
    1bc0:	e8910004 	ldm	r1, {r2}
    1bc4:	21a29f7c 			; <UNDEFINED> instruction: 0x21a29f7c
    1bc8:	21a90800 			; <UNDEFINED> instruction: 0x21a90800
    1bcc:	00010800 	andeq	r0, r1, r0, lsl #16
    1bd0:	0021a950 	eoreq	sl, r1, r0, asr r9
    1bd4:	0021ae08 	eoreq	sl, r1, r8, lsl #28
    1bd8:	91000408 	tstls	r0, r8, lsl #8
    1bdc:	ae9f7ce8 	cdpge	12, 9, cr7, cr15, cr8, {7}
    1be0:	b1080021 	tstlt	r8, r1, lsr #32
    1be4:	01080021 	tsteq	r8, r1, lsr #32
    1be8:	21b15100 			; <UNDEFINED> instruction: 0x21b15100
    1bec:	21c00800 	biccs	r0, r0, r0, lsl #16
    1bf0:	00040800 	andeq	r0, r4, r0, lsl #16
    1bf4:	9f7ce891 	svcls	0x007ce891
	...
    1c00:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    1c04:	080021d4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sp}
    1c08:	d4500001 	ldrble	r0, [r0], #-1
    1c0c:	dd080021 	stcle	0, cr0, [r8, #-132]	; 0xffffff7c
    1c10:	03080021 	movweq	r0, #32801	; 0x8021
    1c14:	9f7c7000 	svcls	0x007c7000
    1c18:	080021dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sp}
    1c1c:	080021de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sp}
    1c20:	01f30004 	mvnseq	r0, r4
    1c24:	00009f50 	andeq	r9, r0, r0, asr pc
    1c28:	00000000 	andeq	r0, r0, r0
    1c2c:	21c00000 	biccs	r0, r0, r0
    1c30:	21c60800 	biccs	r0, r6, r0, lsl #16
    1c34:	00010800 	andeq	r0, r1, r0, lsl #16
    1c38:	0021c651 	eoreq	ip, r1, r1, asr r6
    1c3c:	0021cc08 	eoreq	ip, r1, r8, lsl #24
    1c40:	52000108 	andpl	r0, r0, #8, 2
    1c44:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
    1c48:	080021d0 	stmdaeq	r0, {r4, r6, r7, r8, sp}
    1c4c:	00720005 	rsbseq	r0, r2, r5
    1c50:	d09f2538 	addsle	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    1c54:	d6080021 	strle	r0, [r8], -r1, lsr #32
    1c58:	07080021 	streq	r0, [r8, -r1, lsr #32]
    1c5c:	38007200 	stmdacc	r0, {r9, ip, sp, lr}
    1c60:	9f253825 	svcls	0x00253825
    1c64:	080021d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, sp}
    1c68:	080021de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sp}
    1c6c:	01f3000a 	mvnseq	r0, sl
    1c70:	38254051 	stmdacc	r5!, {r0, r4, r6, lr}
    1c74:	9f253825 	svcls	0x00253825
	...
    1c80:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
    1c84:	080021c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sp}
    1c88:	9f300002 	svcls	0x00300002
    1c8c:	080021c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, sp}
    1c90:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
    1c94:	9f320002 	svcls	0x00320002
    1c98:	080021cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sp}
    1c9c:	080021d0 	stmdaeq	r0, {r4, r6, r7, r8, sp}
    1ca0:	9f330002 	svcls	0x00330002
    1ca4:	080021d0 	stmdaeq	r0, {r4, r6, r7, r8, sp}
    1ca8:	080021de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sp}
    1cac:	9f340002 	svcls	0x00340002
	...
    1cb8:	080021f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sp}
    1cbc:	08002226 	stmdaeq	r0, {r1, r2, r5, r9, sp}
    1cc0:	28520001 	ldmdacs	r2, {r0}^
    1cc4:	32080022 	andcc	r0, r8, #34	; 0x22
    1cc8:	01080022 	tsteq	r8, r2, lsr #32
    1ccc:	00005200 	andeq	r5, r0, r0, lsl #4
    1cd0:	00000000 	andeq	r0, r0, r0
    1cd4:	21f80000 	mvnscs	r0, r0
    1cd8:	22000800 	andcs	r0, r0, #0, 16
    1cdc:	00010800 	andeq	r0, r1, r0, lsl #16
    1ce0:	00220053 	eoreq	r0, r2, r3, asr r0
    1ce4:	00220608 	eoreq	r0, r2, r8, lsl #12
    1ce8:	73000308 	movwvc	r0, #776	; 0x308
    1cec:	22069f7f 	andcs	r9, r6, #508	; 0x1fc
    1cf0:	220a0800 	andcs	r0, sl, #0, 16
    1cf4:	00010800 	andeq	r0, r1, r0, lsl #16
    1cf8:	00220c53 	eoreq	r0, r2, r3, asr ip
    1cfc:	00221608 	eoreq	r1, r2, r8, lsl #12
    1d00:	53000108 	movwpl	r0, #264	; 0x108
    1d04:	08002216 	stmdaeq	r0, {r1, r2, r4, r9, sp}
    1d08:	0800221c 	stmdaeq	r0, {r2, r3, r4, r9, sp}
    1d0c:	7f730003 	svcvc	0x00730003
    1d10:	00221c9f 	mlaeq	r2, pc, ip, r1	; <UNPREDICTABLE>
    1d14:	00222208 	eoreq	r2, r2, r8, lsl #4
    1d18:	53000108 	movwpl	r0, #264	; 0x108
	...
    1d24:	08002230 	stmdaeq	r0, {r4, r5, r9, sp}
    1d28:	08002232 	stmdaeq	r0, {r1, r4, r5, r9, sp}
    1d2c:	00720005 	rsbseq	r0, r2, r5
    1d30:	009f253f 	addseq	r2, pc, pc, lsr r5	; <UNPREDICTABLE>
    1d34:	00000000 	andeq	r0, r0, r0
    1d38:	30000000 	andcc	r0, r0, r0
    1d3c:	48080022 	stmdami	r8, {r1, r5}
    1d40:	01080022 	tsteq	r8, r2, lsr #32
    1d44:	22485d00 	subcs	r5, r8, #0, 26
    1d48:	224e0800 	subcs	r0, lr, #0, 16
    1d4c:	00030800 	andeq	r0, r3, r0, lsl #16
    1d50:	009f5891 	umullseq	r5, pc, r1, r8	; <UNPREDICTABLE>
    1d54:	00000000 	andeq	r0, r0, r0
    1d58:	32000000 	andcc	r0, r0, #0
    1d5c:	4c080022 	stcmi	0, cr0, [r8], {34}	; 0x22
    1d60:	01080022 	tsteq	r8, r2, lsr #32
    1d64:	00005400 	andeq	r5, r0, r0, lsl #8
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	22500000 	subscs	r0, r0, #0
    1d70:	229a0800 	addscs	r0, sl, #0, 16
    1d74:	00010800 	andeq	r0, r1, r0, lsl #16
    1d78:	00229a50 	eoreq	r9, r2, r0, asr sl
    1d7c:	0022d408 	eoreq	sp, r2, r8, lsl #8
    1d80:	f3000408 	vshl.u8	d0, d8, d0
    1d84:	d49f5001 	ldrle	r5, [pc], #1	; 1d8c <__Stack_Size+0x158c>
    1d88:	ea080022 	b	201e18 <__Stack_Size+0x201618>
    1d8c:	01080022 	tsteq	r8, r2, lsr #32
    1d90:	00005000 	andeq	r5, r0, r0
    1d94:	00000000 	andeq	r0, r0, r0
    1d98:	22500000 	subscs	r0, r0, #0
    1d9c:	229c0800 	addscs	r0, ip, #0, 16
    1da0:	00010800 	andeq	r0, r1, r0, lsl #16
    1da4:	00229c51 	eoreq	r9, r2, r1, asr ip
    1da8:	0022d408 	eoreq	sp, r2, r8, lsl #8
    1dac:	f3000408 	vshl.u8	d0, d8, d0
    1db0:	d49f5101 	ldrle	r5, [pc], #257	; 1db8 <__Stack_Size+0x15b8>
    1db4:	ea080022 	b	201e44 <__Stack_Size+0x201644>
    1db8:	01080022 	tsteq	r8, r2, lsr #32
    1dbc:	00005100 	andeq	r5, r0, r0, lsl #2
    1dc0:	00000000 	andeq	r0, r0, r0
    1dc4:	22500000 	subscs	r0, r0, #0
    1dc8:	225a0800 	subscs	r0, sl, #0, 16
    1dcc:	00020800 	andeq	r0, r2, r0, lsl #16
    1dd0:	22c09f30 	sbccs	r9, r0, #48, 30	; 0xc0
    1dd4:	22c40800 	sbccs	r0, r4, #0, 16
    1dd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1ddc:	0022c452 	eoreq	ip, r2, r2, asr r4
    1de0:	0022c808 	eoreq	ip, r2, r8, lsl #16
    1de4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    1de8:	72253100 	eorvc	r3, r5, #0, 2
    1dec:	d49f2100 	ldrle	r2, [pc], #256	; 1df4 <__Stack_Size+0x15f4>
    1df0:	d8080022 	stmdale	r8, {r1, r5}
    1df4:	02080022 	andeq	r0, r8, #34	; 0x22
    1df8:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    1dfc:	ea080022 	b	201e8c <__Stack_Size+0x20168c>
    1e00:	01080022 	tsteq	r8, r2, lsr #32
    1e04:	00005200 	andeq	r5, r0, r0, lsl #4
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	22500000 	subscs	r0, r0, #0
    1e10:	225a0800 	subscs	r0, sl, #0, 16
    1e14:	00020800 	andeq	r0, r2, r0, lsl #16
    1e18:	22d49f30 	sbcscs	r9, r4, #48, 30	; 0xc0
    1e1c:	22d80800 	sbcscs	r0, r8, #0, 16
    1e20:	00020800 	andeq	r0, r2, r0, lsl #16
    1e24:	22d89f30 	sbcscs	r9, r8, #48, 30	; 0xc0
    1e28:	22de0800 	sbcscs	r0, lr, #0, 16
    1e2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e30:	0022de53 	eoreq	sp, r2, r3, asr lr
    1e34:	0022e608 	eoreq	lr, r2, r8, lsl #12
    1e38:	73000308 	movwvc	r0, #776	; 0x308
    1e3c:	22e69f7f 	rsccs	r9, r6, #508	; 0x1fc
    1e40:	22ea0800 	rsccs	r0, sl, #0, 16
    1e44:	00010800 	andeq	r0, r1, r0, lsl #16
    1e48:	00000053 	andeq	r0, r0, r3, asr r0
    1e4c:	00000000 	andeq	r0, r0, r0
    1e50:	0022ec00 	eoreq	lr, r2, r0, lsl #24
    1e54:	00238808 	eoreq	r8, r3, r8, lsl #16
    1e58:	51000108 	tstpl	r0, r8, lsl #2
    1e5c:	08002388 	stmdaeq	r0, {r3, r7, r8, r9, sp}
    1e60:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    1e64:	01f30004 	mvnseq	r0, r4
    1e68:	23969f51 	orrscs	r9, r6, #324	; 0x144
    1e6c:	23ae0800 			; <UNDEFINED> instruction: 0x23ae0800
    1e70:	00010800 	andeq	r0, r1, r0, lsl #16
    1e74:	00000051 	andeq	r0, r0, r1, asr r0
    1e78:	00000000 	andeq	r0, r0, r0
    1e7c:	0022ec00 	eoreq	lr, r2, r0, lsl #24
    1e80:	00238a08 	eoreq	r8, r3, r8, lsl #20
    1e84:	52000108 	andpl	r0, r0, #8, 2
    1e88:	0800238a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sp}
    1e8c:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    1e90:	01f30004 	mvnseq	r0, r4
    1e94:	23969f52 	orrscs	r9, r6, #328	; 0x148
    1e98:	23ae0800 			; <UNDEFINED> instruction: 0x23ae0800
    1e9c:	00010800 	andeq	r0, r1, r0, lsl #16
    1ea0:	00000052 	andeq	r0, r0, r2, asr r0
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	0022ec00 	eoreq	lr, r2, r0, lsl #24
    1eac:	00231008 	eoreq	r1, r3, r8
    1eb0:	53000108 	movwpl	r0, #264	; 0x108
    1eb4:	08002310 	stmdaeq	r0, {r4, r8, r9, sp}
    1eb8:	080023ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp}
    1ebc:	01f30004 	mvnseq	r0, r4
    1ec0:	00009f53 	andeq	r9, r0, r3, asr pc
    1ec4:	00000000 	andeq	r0, r0, r0
    1ec8:	23140000 	tstcs	r4, #0
    1ecc:	231a0800 	tstcs	sl, #0, 16
    1ed0:	00010800 	andeq	r0, r1, r0, lsl #16
    1ed4:	00231a53 	eoreq	r1, r3, r3, asr sl
    1ed8:	00238c08 	eoreq	r8, r3, r8, lsl #24
    1edc:	56000108 	strpl	r0, [r0], -r8, lsl #2
    1ee0:	08002396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sp}
    1ee4:	080023ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sp}
    1ee8:	00560001 	subseq	r0, r6, r1
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	14000000 	strne	r0, [r0], #-0
    1ef4:	36080023 	strcc	r0, [r8], -r3, lsr #32
    1ef8:	02080023 	andeq	r0, r8, #35	; 0x23
    1efc:	969f3000 	ldrls	r3, [pc], r0
    1f00:	98080023 	stmdals	r8, {r0, r1, r5}
    1f04:	02080023 	andeq	r0, r8, #35	; 0x23
    1f08:	989f3000 	ldmls	pc, {ip, sp}	; <UNPREDICTABLE>
    1f0c:	ae080023 	cdpge	0, 0, cr0, cr8, cr3, {1}
    1f10:	01080023 	tsteq	r8, r3, lsr #32
    1f14:	00005300 	andeq	r5, r0, r0, lsl #6
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	23b00000 	movscs	r0, #0
    1f20:	23e00800 	mvncs	r0, #0, 16
    1f24:	00010800 	andeq	r0, r1, r0, lsl #16
    1f28:	0023e051 	eoreq	lr, r3, r1, asr r0
    1f2c:	0023f608 	eoreq	pc, r3, r8, lsl #12
    1f30:	f3000408 	vshl.u8	d0, d8, d0
    1f34:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f38:	00000000 	andeq	r0, r0, r0
    1f3c:	b0000000 	andlt	r0, r0, r0
    1f40:	d2080023 	andle	r0, r8, #35	; 0x23
    1f44:	01080023 	tsteq	r8, r3, lsr #32
    1f48:	23d25200 	bicscs	r5, r2, #0, 4
    1f4c:	23f60800 	mvnscs	r0, #0, 16
    1f50:	00040800 	andeq	r0, r4, r0, lsl #16
    1f54:	9f5201f3 	svcls	0x005201f3
	...
    1f60:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
    1f64:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    1f68:	9f300002 	svcls	0x00300002
    1f6c:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    1f70:	080023c0 	stmdaeq	r0, {r6, r7, r8, r9, sp}
    1f74:	00740005 	rsbseq	r0, r4, r5
    1f78:	c09f2538 	addsgt	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    1f7c:	cc080023 	stcgt	0, cr0, [r8], {35}	; 0x23
    1f80:	01080023 	tsteq	r8, r3, lsr #32
    1f84:	23de5400 	bicscs	r5, lr, #0, 8
    1f88:	23e40800 	mvncs	r0, #0, 16
    1f8c:	00010800 	andeq	r0, r1, r0, lsl #16
    1f90:	0023e652 	eoreq	lr, r3, r2, asr r6
    1f94:	0023f608 	eoreq	pc, r3, r8, lsl #12
    1f98:	52000108 	andpl	r0, r0, #8, 2
	...
    1fa4:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
    1fa8:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    1fac:	9f300002 	svcls	0x00300002
    1fb0:	080023b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sp}
    1fb4:	080023ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sp}
    1fb8:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
    1fbc:	e0080023 	and	r0, r8, r3, lsr #32
    1fc0:	02080023 	andeq	r0, r8, #35	; 0x23
    1fc4:	e09f3000 	adds	r3, pc, r0
    1fc8:	ea080023 	b	20205c <__Stack_Size+0x20185c>
    1fcc:	01080023 	tsteq	r8, r3, lsr #32
    1fd0:	23ea5300 	mvncs	r5, #0, 6
    1fd4:	23f00800 	mvnscs	r0, #0, 16
    1fd8:	00030800 	andeq	r0, r3, r0, lsl #16
    1fdc:	f09f7f73 			; <UNDEFINED> instruction: 0xf09f7f73
    1fe0:	f6080023 			; <UNDEFINED> instruction: 0xf6080023
    1fe4:	01080023 	tsteq	r8, r3, lsr #32
    1fe8:	00005300 	andeq	r5, r0, r0, lsl #6
    1fec:	00000000 	andeq	r0, r0, r0
    1ff0:	23f80000 	mvnscs	r0, #0
    1ff4:	24180800 	ldrcs	r0, [r8], #-2048	; 0x800
    1ff8:	00010800 	andeq	r0, r1, r0, lsl #16
    1ffc:	00241851 	eoreq	r1, r4, r1, asr r8
    2000:	00244408 	eoreq	r4, r4, r8, lsl #8
    2004:	f3000408 	vshl.u8	d0, d8, d0
    2008:	009f5101 	addseq	r5, pc, r1, lsl #2
    200c:	00000000 	andeq	r0, r0, r0
    2010:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2014:	1a080023 	bne	2020a8 <__Stack_Size+0x2018a8>
    2018:	01080024 	tsteq	r8, r4, lsr #32
    201c:	241a5200 	ldrcs	r5, [sl], #-512	; 0x200
    2020:	24440800 	strbcs	r0, [r4], #-2048	; 0x800
    2024:	00040800 	andeq	r0, r4, r0, lsl #16
    2028:	9f5201f3 	svcls	0x005201f3
	...
    2034:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
    2038:	080023fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sp}
    203c:	da080003 	ble	202050 <__Stack_Size+0x201850>
    2040:	0023fe9f 	mlaeq	r3, pc, lr, pc	; <UNPREDICTABLE>
    2044:	00242a08 	eoreq	r2, r4, r8, lsl #20
    2048:	54000108 	strpl	r0, [r0], #-264	; 0x108
    204c:	08002430 	stmdaeq	r0, {r4, r5, sl, sp}
    2050:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
    2054:	00520001 	subseq	r0, r2, r1
    2058:	00000000 	andeq	r0, r0, r0
    205c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2060:	fe080023 	cdp2	0, 0, cr0, cr8, cr3, {1}
    2064:	02080023 	andeq	r0, r8, #35	; 0x23
    2068:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    206c:	0e080023 	cdpeq	0, 0, cr0, cr8, cr3, {1}
    2070:	01080024 	tsteq	r8, r4, lsr #32
    2074:	240e5300 	strcs	r5, [lr], #-768	; 0x300
    2078:	24140800 	ldrcs	r0, [r4], #-2048	; 0x800
    207c:	00030800 	andeq	r0, r3, r0, lsl #16
    2080:	149f7f73 	ldrne	r7, [pc], #3955	; 2088 <__Stack_Size+0x1888>
    2084:	1c080024 	stcne	0, cr0, [r8], {36}	; 0x24
    2088:	01080024 	tsteq	r8, r4, lsr #32
    208c:	24305300 	ldrtcs	r5, [r0], #-768	; 0x300
    2090:	24380800 	ldrtcs	r0, [r8], #-2048	; 0x800
    2094:	00010800 	andeq	r0, r1, r0, lsl #16
    2098:	00243853 	eoreq	r3, r4, r3, asr r8
    209c:	00243e08 	eoreq	r3, r4, r8, lsl #28
    20a0:	73000308 	movwvc	r0, #776	; 0x308
    20a4:	243e9f7f 	ldrtcs	r9, [lr], #-3967	; 0xf7f
    20a8:	24440800 	strbcs	r0, [r4], #-2048	; 0x800
    20ac:	00010800 	andeq	r0, r1, r0, lsl #16
    20b0:	00000053 	andeq	r0, r0, r3, asr r0
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	00244400 	eoreq	r4, r4, r0, lsl #8
    20bc:	00246008 	eoreq	r6, r4, r8
    20c0:	51000108 	tstpl	r0, r8, lsl #2
    20c4:	08002460 	stmdaeq	r0, {r5, r6, sl, sp}
    20c8:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
    20cc:	01f30004 	mvnseq	r0, r4
    20d0:	00009f51 	andeq	r9, r0, r1, asr pc
    20d4:	00000000 	andeq	r0, r0, r0
    20d8:	24440000 	strbcs	r0, [r4], #-0
    20dc:	244a0800 	strbcs	r0, [sl], #-2048	; 0x800
    20e0:	00030800 	andeq	r0, r3, r0, lsl #16
    20e4:	4a9fda08 	bmi	fe7f890c <BootRAM+0xd7690ad>
    20e8:	6e080024 	cdpvs	0, 0, cr0, cr8, cr4, {1}
    20ec:	01080024 	tsteq	r8, r4, lsr #32
    20f0:	24745200 	ldrbtcs	r5, [r4], #-512	; 0x200
    20f4:	248a0800 	strcs	r0, [sl], #2048	; 0x800
    20f8:	00010800 	andeq	r0, r1, r0, lsl #16
    20fc:	00000052 	andeq	r0, r0, r2, asr r0
    2100:	00000000 	andeq	r0, r0, r0
    2104:	00244400 	eoreq	r4, r4, r0, lsl #8
    2108:	00244a08 	eoreq	r4, r4, r8, lsl #20
    210c:	30000208 	andcc	r0, r0, r8, lsl #4
    2110:	00244a9f 	mlaeq	r4, pc, sl, r4	; <UNPREDICTABLE>
    2114:	00245608 	eoreq	r5, r4, r8, lsl #12
    2118:	53000108 	movwpl	r0, #264	; 0x108
    211c:	08002456 	stmdaeq	r0, {r1, r2, r4, r6, sl, sp}
    2120:	0800245c 	stmdaeq	r0, {r2, r3, r4, r6, sl, sp}
    2124:	7f730003 	svcvc	0x00730003
    2128:	00245c9f 	mlaeq	r4, pc, ip, r5	; <UNPREDICTABLE>
    212c:	00246208 	eoreq	r6, r4, r8, lsl #4
    2130:	53000108 	movwpl	r0, #264	; 0x108
    2134:	08002474 	stmdaeq	r0, {r2, r4, r5, r6, sl, sp}
    2138:	0800247c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, sp}
    213c:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    2140:	82080024 	andhi	r0, r8, #36	; 0x24
    2144:	03080024 	movweq	r0, #32804	; 0x8024
    2148:	9f7f7300 	svcls	0x007f7300
    214c:	08002482 	stmdaeq	r0, {r1, r7, sl, sp}
    2150:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
    2154:	00530001 	subseq	r0, r3, r1
    2158:	00000000 	andeq	r0, r0, r0
    215c:	8c000000 	stchi	0, cr0, [r0], {-0}
    2160:	ec080024 	stc	0, cr0, [r8], {36}	; 0x24
    2164:	01080024 	tsteq	r8, r4, lsr #32
    2168:	24ec5100 	strbtcs	r5, [ip], #256	; 0x100
    216c:	25140800 	ldrcs	r0, [r4, #-2048]	; 0x800
    2170:	00040800 	andeq	r0, r4, r0, lsl #16
    2174:	9f5101f3 	svcls	0x005101f3
	...
    2180:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
    2184:	080024f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, sp}
    2188:	f2520001 	vhadd.s16	d16, d2, d1
    218c:	14080024 	strne	r0, [r8], #-36	; 0x24
    2190:	04080025 	streq	r0, [r8], #-37	; 0x25
    2194:	5201f300 	andpl	pc, r1, #0, 6
    2198:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    219c:	00000000 	andeq	r0, r0, r0
    21a0:	00248c00 	eoreq	r8, r4, r0, lsl #24
    21a4:	00249a08 	eoreq	r9, r4, r8, lsl #20
    21a8:	30000208 	andcc	r0, r0, r8, lsl #4
    21ac:	00249a9f 	mlaeq	r4, pc, sl, r9	; <UNPREDICTABLE>
    21b0:	0024ee08 	eoreq	lr, r4, r8, lsl #28
    21b4:	53000108 	movwpl	r0, #264	; 0x108
    21b8:	080024fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, sl, sp}
    21bc:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
    21c0:	00520001 	subseq	r0, r2, r1
    21c4:	00000000 	andeq	r0, r0, r0
    21c8:	8c000000 	stchi	0, cr0, [r0], {-0}
    21cc:	9a080024 	bls	202264 <__Stack_Size+0x201a64>
    21d0:	02080024 	andeq	r0, r8, #36	; 0x24
    21d4:	9a9f3000 	bls	fe7ce1dc <BootRAM+0xd73e97d>
    21d8:	fa080024 	blx	202270 <__Stack_Size+0x201a70>
    21dc:	01080024 	tsteq	r8, r4, lsr #32
    21e0:	24fa5800 	ldrbtcs	r5, [sl], #2048	; 0x800
    21e4:	24fe0800 	ldrbtcs	r0, [lr], #2048	; 0x800
    21e8:	00020800 	andeq	r0, r2, r0, lsl #16
    21ec:	24fe9f30 	ldrbtcs	r9, [lr], #3888	; 0xf30
    21f0:	25060800 	strcs	r0, [r6, #-2048]	; 0x800
    21f4:	00010800 	andeq	r0, r1, r0, lsl #16
    21f8:	00250653 	eoreq	r0, r5, r3, asr r6
    21fc:	00250c08 	eoreq	r0, r5, r8, lsl #24
    2200:	73000308 	movwvc	r0, #776	; 0x308
    2204:	250c9f7f 	strcs	r9, [ip, #-3967]	; 0xf7f
    2208:	25140800 	ldrcs	r0, [r4, #-2048]	; 0x800
    220c:	00010800 	andeq	r0, r1, r0, lsl #16
    2210:	00000053 	andeq	r0, r0, r3, asr r0
    2214:	00000000 	andeq	r0, r0, r0
    2218:	00249c00 	eoreq	r9, r4, r0, lsl #24
    221c:	0024a208 	eoreq	sl, r4, r8, lsl #4
    2220:	30000208 	andcc	r0, r0, r8, lsl #4
    2224:	0024a29f 	mlaeq	r4, pc, r2, sl	; <UNPREDICTABLE>
    2228:	0024aa08 	eoreq	sl, r4, r8, lsl #20
    222c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2230:	080024aa 	stmdaeq	r0, {r1, r3, r5, r7, sl, sp}
    2234:	080024b0 	stmdaeq	r0, {r4, r5, r7, sl, sp}
    2238:	7f740003 	svcvc	0x00740003
    223c:	0024b09f 	mlaeq	r4, pc, r0, fp	; <UNPREDICTABLE>
    2240:	0024d408 	eoreq	sp, r4, r8, lsl #8
    2244:	54000108 	strpl	r0, [r0], #-264	; 0x108
    2248:	080024d4 	stmdaeq	r0, {r2, r4, r6, r7, sl, sp}
    224c:	080024da 	stmdaeq	r0, {r1, r3, r4, r6, r7, sl, sp}
    2250:	7f740003 	svcvc	0x00740003
    2254:	0024da9f 	mlaeq	r4, pc, sl, sp	; <UNPREDICTABLE>
    2258:	00251208 	eoreq	r1, r5, r8, lsl #4
    225c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    2270:	00500001 	subseq	r0, r0, r1
    2274:	00000000 	andeq	r0, r0, r0
    2278:	01000000 	mrseq	r0, (UNDEF: 0)
    227c:	00005800 	andeq	r5, r0, r0, lsl #16
    2280:	00000000 	andeq	r0, r0, r0
    2284:	00040000 	andeq	r0, r4, r0
    2288:	9f5001f3 	svcls	0x005001f3
	...
    229c:	00510001 	subseq	r0, r1, r1
    22a0:	00000000 	andeq	r0, r0, r0
    22a4:	04000000 	streq	r0, [r0], #-0
    22a8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    22ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    22bc:	52000100 	andpl	r0, r0, #0, 2
	...
    22c8:	01f30004 	mvnseq	r0, r4
    22cc:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    22dc:	00010000 	andeq	r0, r1, r0
    22e0:	00000052 	andeq	r0, r0, r2, asr r0
    22e4:	00000000 	andeq	r0, r0, r0
    22e8:	f3000400 	vshl.u8	d0, d0, d0
    22ec:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    22fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2300:	00005100 	andeq	r5, r0, r0, lsl #2
    2304:	00000000 	andeq	r0, r0, r0
    2308:	00040000 	andeq	r0, r4, r0
    230c:	9f5101f3 	svcls	0x005101f3
	...
    2320:	005d0001 	subseq	r0, sp, r1
    2324:	00000000 	andeq	r0, r0, r0
    2328:	03000000 	movweq	r0, #0
    232c:	9f607400 	svcls	0x00607400
	...
    2338:	487d0003 	ldmdami	sp!, {r0, r1}^
    233c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    234c:	30000200 	andcc	r0, r0, r0, lsl #4
    2350:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2354:	00000000 	andeq	r0, r0, r0
    2358:	53000100 	movwpl	r0, #256	; 0x100
	...
    2364:	00520001 	subseq	r0, r2, r1
	...
    2374:	02000000 	andeq	r0, r0, #0
    2378:	009f3000 	addseq	r3, pc, r0
    237c:	00000000 	andeq	r0, r0, r0
    2380:	01000000 	mrseq	r0, (UNDEF: 0)
    2384:	00005900 	andeq	r5, r0, r0, lsl #18
    2388:	00000000 	andeq	r0, r0, r0
    238c:	00020000 	andeq	r0, r2, r0
    2390:	00009f30 	andeq	r9, r0, r0, lsr pc
    2394:	00000000 	andeq	r0, r0, r0
    2398:	00080000 	andeq	r0, r8, r0
    239c:	00910073 	addseq	r0, r1, r3, ror r0
    23a0:	9f38231c 	svcls	0x0038231c
	...
    23ac:	00730008 	rsbseq	r0, r3, r8
    23b0:	231c0091 	tstcs	ip, #145	; 0x91
    23b4:	00009f37 	andeq	r9, r0, r7, lsr pc
    23b8:	00000000 	andeq	r0, r0, r0
    23bc:	00080000 	andeq	r0, r8, r0
    23c0:	00910073 	addseq	r0, r1, r3, ror r0
    23c4:	9f38231c 	svcls	0x0038231c
	...
    23d8:	9f300002 	svcls	0x00300002
	...
    23e4:	00540001 	subseq	r0, r4, r1
    23e8:	00000000 	andeq	r0, r0, r0
    23ec:	03000000 	movweq	r0, #0
    23f0:	9f7f7400 	svcls	0x007f7400
	...
    23fc:	00540001 	subseq	r0, r4, r1
    2400:	00000000 	andeq	r0, r0, r0
    2404:	03000000 	movweq	r0, #0
    2408:	9f7f7400 	svcls	0x007f7400
	...
    2414:	00540001 	subseq	r0, r4, r1
	...
    2424:	01000000 	mrseq	r0, (UNDEF: 0)
    2428:	00005d00 	andeq	r5, r0, r0, lsl #26
    242c:	00000000 	andeq	r0, r0, r0
    2430:	00030000 	andeq	r0, r3, r0
    2434:	009f6074 	addseq	r6, pc, r4, ror r0	; <UNPREDICTABLE>
    2438:	00000000 	andeq	r0, r0, r0
    243c:	03000000 	movweq	r0, #0
    2440:	9f487d00 	svcls	0x00487d00
	...
    2454:	00580001 	subseq	r0, r8, r1
    2458:	00000000 	andeq	r0, r0, r0
    245c:	04000000 	streq	r0, [r0], #-0
    2460:	5001f300 	andpl	pc, r1, r0, lsl #6
    2464:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2474:	52000100 	andpl	r0, r0, #0, 2
	...
    2480:	01f30004 	mvnseq	r0, r4
    2484:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    2494:	00020000 	andeq	r0, r2, r0
    2498:	00009f30 	andeq	r9, r0, r0, lsr pc
    249c:	00000000 	andeq	r0, r0, r0
    24a0:	00050000 	andeq	r0, r5, r0
    24a4:	25380074 	ldrcs	r0, [r8, #-116]!	; 0x74
    24a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24ac:	00000000 	andeq	r0, r0, r0
    24b0:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    24c4:	9f300002 	svcls	0x00300002
	...
    24d0:	00530001 	subseq	r0, r3, r1
    24d4:	00000000 	andeq	r0, r0, r0
    24d8:	02000000 	andeq	r0, r0, #0
    24dc:	009f3000 	addseq	r3, pc, r0
    24e0:	00000000 	andeq	r0, r0, r0
    24e4:	01000000 	mrseq	r0, (UNDEF: 0)
    24e8:	00005300 	andeq	r5, r0, r0, lsl #6
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	00030000 	andeq	r0, r3, r0
    24f4:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    24f8:	00000000 	andeq	r0, r0, r0
    24fc:	01000000 	mrseq	r0, (UNDEF: 0)
    2500:	00005300 	andeq	r5, r0, r0, lsl #6
    2504:	00000000 	andeq	r0, r0, r0
    2508:	25140000 	ldrcs	r0, [r4, #-0]
    250c:	2ad40800 	bcs	ff504514 <BootRAM+0xe474cb5>
    2510:	00010800 	andeq	r0, r1, r0, lsl #16
    2514:	002ad451 	eoreq	sp, sl, r1, asr r4
    2518:	002afe08 	eoreq	pc, sl, r8, lsl #28
    251c:	f3000408 	vshl.u8	d0, d8, d0
    2520:	009f5101 	addseq	r5, pc, r1, lsl #2
    2524:	00000000 	andeq	r0, r0, r0
    2528:	1c000000 	stcne	0, cr0, [r0], {-0}
    252c:	d4080025 	strle	r0, [r8], #-37	; 0x25
    2530:	0108002a 	tsteq	r8, sl, lsr #32
    2534:	2ad45100 	bcs	ff51693c <BootRAM+0xe4870dd>
    2538:	2afe0800 	bcs	fff84540 <BootRAM+0xeef4ce1>
    253c:	00040800 	andeq	r0, r4, r0, lsl #16
    2540:	9f5101f3 	svcls	0x005101f3
	...
    254c:	0800251c 	stmdaeq	r0, {r2, r3, r4, r8, sl, sp}
    2550:	08002af8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, fp, sp}
    2554:	f85d0001 			; <UNDEFINED> instruction: 0xf85d0001
    2558:	fc08002a 	stc2	0, cr0, [r8], {42}	; 0x2a
    255c:	0308002a 	movweq	r0, #32810	; 0x802a
    2560:	9f409100 	svcls	0x00409100
    2564:	08002afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp, sp}
    2568:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
    256c:	407d0003 	rsbsmi	r0, sp, r3
    2570:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2574:	00000000 	andeq	r0, r0, r0
    2578:	00251c00 	eoreq	r1, r5, r0, lsl #24
    257c:	00252208 	eoreq	r2, r5, r8, lsl #4
    2580:	30000208 	andcc	r0, r0, r8, lsl #4
    2584:	0025229f 	mlaeq	r5, pc, r2, r2	; <UNPREDICTABLE>
    2588:	00257008 	eoreq	r7, r5, r8
    258c:	53000108 	movwpl	r0, #264	; 0x108
    2590:	0800257c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp}
    2594:	0800259a 	stmdaeq	r0, {r1, r3, r4, r7, r8, sl, sp}
    2598:	00520001 	subseq	r0, r2, r1
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	1c000000 	stcne	0, cr0, [r0], {-0}
    25a4:	22080025 	andcs	r0, r8, #37	; 0x25
    25a8:	02080025 	andeq	r0, r8, #37	; 0x25
    25ac:	229f3000 	addscs	r3, pc, #0
    25b0:	7c080025 	stcvc	0, cr0, [r8], {37}	; 0x25
    25b4:	01080025 	tsteq	r8, r5, lsr #32
    25b8:	257c5600 	ldrbcs	r5, [ip, #-1536]!	; 0x600
    25bc:	25840800 	strcs	r0, [r4, #2048]	; 0x800
    25c0:	00020800 	andeq	r0, r2, r0, lsl #16
    25c4:	25849f30 	strcs	r9, [r4, #3888]	; 0xf30
    25c8:	258c0800 	strcs	r0, [ip, #2048]	; 0x800
    25cc:	00080800 	andeq	r0, r8, r0, lsl #16
    25d0:	00910073 	addseq	r0, r1, r3, ror r0
    25d4:	9f40231c 	svcls	0x0040231c
    25d8:	0800258c 	stmdaeq	r0, {r2, r3, r7, r8, sl, sp}
    25dc:	08002592 	stmdaeq	r0, {r1, r4, r7, r8, sl, sp}
    25e0:	00730008 	rsbseq	r0, r3, r8
    25e4:	231c0091 	tstcs	ip, #145	; 0x91
    25e8:	25929f3f 	ldrcs	r9, [r2, #3903]	; 0xf3f
    25ec:	259c0800 	ldrcs	r0, [ip, #2048]	; 0x800
    25f0:	00080800 	andeq	r0, r8, r0, lsl #16
    25f4:	00910073 	addseq	r0, r1, r3, ror r0
    25f8:	9f40231c 	svcls	0x0040231c
	...
    2604:	08002524 	stmdaeq	r0, {r2, r5, r8, sl, sp}
    2608:	08002528 	stmdaeq	r0, {r3, r5, r8, sl, sp}
    260c:	9f300002 	svcls	0x00300002
    2610:	08002528 	stmdaeq	r0, {r3, r5, r8, sl, sp}
    2614:	08002530 	stmdaeq	r0, {r4, r5, r8, sl, sp}
    2618:	30520001 	subscc	r0, r2, r1
    261c:	36080025 	strcc	r0, [r8], -r5, lsr #32
    2620:	03080025 	movweq	r0, #32805	; 0x8025
    2624:	9f7f7200 	svcls	0x007f7200
    2628:	08002536 	stmdaeq	r0, {r1, r2, r4, r5, r8, sl, sp}
    262c:	08002558 	stmdaeq	r0, {r3, r4, r6, r8, sl, sp}
    2630:	58520001 	ldmdapl	r2, {r0}^
    2634:	5e080025 	cdppl	0, 0, cr0, cr8, cr5, {1}
    2638:	03080025 	movweq	r0, #32805	; 0x8025
    263c:	9f7f7200 	svcls	0x007f7200
    2640:	0800255e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, sl, sp}
    2644:	08002574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp}
    2648:	00520001 	subseq	r0, r2, r1
    264c:	00000000 	andeq	r0, r0, r0
    2650:	a4000000 	strge	r0, [r0], #-0
    2654:	ee080025 	cdp	0, 0, cr0, cr8, cr5, {1}
    2658:	01080025 	tsteq	r8, r5, lsr #32
    265c:	25fa5300 	ldrbcs	r5, [sl, #768]!	; 0x300
    2660:	26180800 	ldrcs	r0, [r8], -r0, lsl #16
    2664:	00010800 	andeq	r0, r1, r0, lsl #16
    2668:	00000052 	andeq	r0, r0, r2, asr r0
    266c:	00000000 	andeq	r0, r0, r0
    2670:	0025a400 	eoreq	sl, r5, r0, lsl #8
    2674:	0025fa08 	eoreq	pc, r5, r8, lsl #20
    2678:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    267c:	080025fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, sp}
    2680:	080025fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp}
    2684:	9f300002 	svcls	0x00300002
    2688:	080025fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, sl, sp}
    268c:	08002606 	stmdaeq	r0, {r1, r2, r9, sl, sp}
    2690:	06530001 	ldrbeq	r0, [r3], -r1
    2694:	0c080026 	stceq	0, cr0, [r8], {38}	; 0x26
    2698:	03080026 	movweq	r0, #32806	; 0x8026
    269c:	9f7f7300 	svcls	0x007f7300
    26a0:	0800260c 	stmdaeq	r0, {r2, r3, r9, sl, sp}
    26a4:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
    26a8:	00530001 	subseq	r0, r3, r1
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	a6000000 	strge	r0, [r0], -r0
    26b4:	aa080025 	bge	202750 <__Stack_Size+0x201f50>
    26b8:	02080025 	andeq	r0, r8, #37	; 0x25
    26bc:	aa9f3000 	bge	fe7ce6c4 <BootRAM+0xd73ee65>
    26c0:	b4080025 	strlt	r0, [r8], #-37	; 0x25
    26c4:	01080025 	tsteq	r8, r5, lsr #32
    26c8:	25b45200 	ldrcs	r5, [r4, #512]!	; 0x200
    26cc:	25ba0800 	ldrcs	r0, [sl, #2048]!	; 0x800
    26d0:	00030800 	andeq	r0, r3, r0, lsl #16
    26d4:	ba9f7f72 	blt	fe7e24a4 <BootRAM+0xd752c45>
    26d8:	c0080025 	andgt	r0, r8, r5, lsr #32
    26dc:	01080025 	tsteq	r8, r5, lsr #32
    26e0:	25c05200 	strbcs	r5, [r0, #512]	; 0x200
    26e4:	25ce0800 	strbcs	r0, [lr, #2048]	; 0x800
    26e8:	00030800 	andeq	r0, r3, r0, lsl #16
    26ec:	ce9f0172 	mrcgt	1, 4, r0, cr15, cr2, {3}
    26f0:	d6080025 	strle	r0, [r8], -r5, lsr #32
    26f4:	08080025 	stmdaeq	r8, {r0, r2, r5}
    26f8:	91007200 	mrsls	r7, R8_usr
    26fc:	41231c00 	teqmi	r3, r0, lsl #24
    2700:	0025d69f 	mlaeq	r5, pc, r6, sp	; <UNPREDICTABLE>
    2704:	0025e008 	eoreq	lr, r5, r8
    2708:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    270c:	1c009100 	stfned	f1, [r0], {-0}
    2710:	e09f4023 	adds	r4, pc, r3, lsr #32
    2714:	e2080025 	and	r0, r8, #37	; 0x25
    2718:	08080025 	stmdaeq	r8, {r0, r2, r5}
    271c:	91007200 	mrsls	r7, R8_usr
    2720:	41231c00 	teqmi	r3, r0, lsl #24
    2724:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2728:	00000000 	andeq	r0, r0, r0
    272c:	00261800 	eoreq	r1, r6, r0, lsl #16
    2730:	00261e08 	eoreq	r1, r6, r8, lsl #28
    2734:	30000208 	andcc	r0, r0, r8, lsl #4
    2738:	00261e9f 	mlaeq	r6, pc, lr, r1	; <UNPREDICTABLE>
    273c:	00267808 	eoreq	r7, r6, r8, lsl #16
    2740:	53000108 	movwpl	r0, #264	; 0x108
    2744:	08002684 	stmdaeq	r0, {r2, r7, r9, sl, sp}
    2748:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
    274c:	00520001 	subseq	r0, r2, r1
    2750:	00000000 	andeq	r0, r0, r0
    2754:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2758:	1e080026 	cdpne	0, 0, cr0, cr8, cr6, {1}
    275c:	02080026 	andeq	r0, r8, #38	; 0x26
    2760:	1e9f3000 	cdpne	0, 9, cr3, cr15, cr0, {0}
    2764:	84080026 	strhi	r0, [r8], #-38	; 0x26
    2768:	01080026 	tsteq	r8, r6, lsr #32
    276c:	26845900 	strcs	r5, [r4], r0, lsl #18
    2770:	268a0800 	strcs	r0, [sl], r0, lsl #16
    2774:	00020800 	andeq	r0, r2, r0, lsl #16
    2778:	268a9f30 			; <UNDEFINED> instruction: 0x268a9f30
    277c:	26920800 	ldrcs	r0, [r2], r0, lsl #16
    2780:	00080800 	andeq	r0, r8, r0, lsl #16
    2784:	00910073 	addseq	r0, r1, r3, ror r0
    2788:	9f40231c 	svcls	0x0040231c
    278c:	08002692 	stmdaeq	r0, {r1, r4, r7, r9, sl, sp}
    2790:	08002698 	stmdaeq	r0, {r3, r4, r7, r9, sl, sp}
    2794:	00730008 	rsbseq	r0, r3, r8
    2798:	231c0091 	tstcs	ip, #145	; 0x91
    279c:	26989f3f 			; <UNDEFINED> instruction: 0x26989f3f
    27a0:	26a00800 	strtcs	r0, [r0], r0, lsl #16
    27a4:	00080800 	andeq	r0, r8, r0, lsl #16
    27a8:	00910073 	addseq	r0, r1, r3, ror r0
    27ac:	9f40231c 	svcls	0x0040231c
	...
    27b8:	08002620 	stmdaeq	r0, {r5, r9, sl, sp}
    27bc:	08002626 	stmdaeq	r0, {r1, r2, r5, r9, sl, sp}
    27c0:	9f300002 	svcls	0x00300002
    27c4:	08002626 	stmdaeq	r0, {r1, r2, r5, r9, sl, sp}
    27c8:	08002630 	stmdaeq	r0, {r4, r5, r9, sl, sp}
    27cc:	30520001 	subscc	r0, r2, r1
    27d0:	36080026 	strcc	r0, [r8], -r6, lsr #32
    27d4:	03080026 	movweq	r0, #32806	; 0x8026
    27d8:	9f7f7200 	svcls	0x007f7200
    27dc:	08002636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, sp}
    27e0:	0800265c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sl, sp}
    27e4:	5c520001 	mrrcpl	0, 0, r0, r2, cr1
    27e8:	62080026 	andvs	r0, r8, #38	; 0x26
    27ec:	03080026 	movweq	r0, #32806	; 0x8026
    27f0:	9f7f7200 	svcls	0x007f7200
    27f4:	08002662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp}
    27f8:	0800267c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sl, sp}
    27fc:	00520001 	subseq	r0, r2, r1
    2800:	00000000 	andeq	r0, r0, r0
    2804:	a0000000 	andge	r0, r0, r0
    2808:	f6080026 			; <UNDEFINED> instruction: 0xf6080026
    280c:	01080026 	tsteq	r8, r6, lsr #32
    2810:	27025300 	strcs	r5, [r2, -r0, lsl #6]
    2814:	27240800 	strcs	r0, [r4, -r0, lsl #16]!
    2818:	00010800 	andeq	r0, r1, r0, lsl #16
    281c:	00000052 	andeq	r0, r0, r2, asr r0
    2820:	00000000 	andeq	r0, r0, r0
    2824:	0026a000 	eoreq	sl, r6, r0
    2828:	00270208 	eoreq	r0, r7, r8, lsl #4
    282c:	59000108 	stmdbpl	r0, {r3, r8}
    2830:	08002702 	stmdaeq	r0, {r1, r8, r9, sl, sp}
    2834:	08002706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp}
    2838:	9f300002 	svcls	0x00300002
    283c:	08002706 	stmdaeq	r0, {r1, r2, r8, r9, sl, sp}
    2840:	0800270e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, sp}
    2844:	0e530001 	cdpeq	0, 5, cr0, cr3, cr1, {0}
    2848:	14080027 	strne	r0, [r8], #-39	; 0x27
    284c:	03080027 	movweq	r0, #32807	; 0x8027
    2850:	9f7f7300 	svcls	0x007f7300
    2854:	08002714 	stmdaeq	r0, {r2, r4, r8, r9, sl, sp}
    2858:	08002720 	stmdaeq	r0, {r5, r8, r9, sl, sp}
    285c:	00530001 	subseq	r0, r3, r1
    2860:	00000000 	andeq	r0, r0, r0
    2864:	a2000000 	andge	r0, r0, #0
    2868:	a8080026 	stmdage	r8, {r1, r2, r5}
    286c:	02080026 	andeq	r0, r8, #38	; 0x26
    2870:	a89f3000 	ldmge	pc, {ip, sp}	; <UNPREDICTABLE>
    2874:	b2080026 	andlt	r0, r8, #38	; 0x26
    2878:	01080026 	tsteq	r8, r6, lsr #32
    287c:	26b25200 	ldrtcs	r5, [r2], r0, lsl #4
    2880:	26b80800 	ldrtcs	r0, [r8], r0, lsl #16
    2884:	00030800 	andeq	r0, r3, r0, lsl #16
    2888:	b89f7f72 	ldmlt	pc, {r1, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}	; <UNPREDICTABLE>
    288c:	be080026 	cdplt	0, 0, cr0, cr8, cr6, {1}
    2890:	01080026 	tsteq	r8, r6, lsr #32
    2894:	26be5200 	ldrtcs	r5, [lr], r0, lsl #4
    2898:	26d00800 	ldrbcs	r0, [r0], r0, lsl #16
    289c:	00030800 	andeq	r0, r3, r0, lsl #16
    28a0:	d09f0172 	addsle	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    28a4:	d8080026 	stmdale	r8, {r1, r2, r5}
    28a8:	08080026 	stmdaeq	r8, {r1, r2, r5}
    28ac:	91007200 	mrsls	r7, R8_usr
    28b0:	41231c00 	teqmi	r3, r0, lsl #24
    28b4:	0026d89f 	mlaeq	r6, pc, r8, sp	; <UNPREDICTABLE>
    28b8:	0026e208 	eoreq	lr, r6, r8, lsl #4
    28bc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    28c0:	1c009100 	stfned	f1, [r0], {-0}
    28c4:	e29f4023 	adds	r4, pc, #35	; 0x23
    28c8:	e4080026 	str	r0, [r8], #-38	; 0x26
    28cc:	08080026 	stmdaeq	r8, {r1, r2, r5}
    28d0:	91007200 	mrsls	r7, R8_usr
    28d4:	41231c00 	teqmi	r3, r0, lsl #24
    28d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    28dc:	00000000 	andeq	r0, r0, r0
    28e0:	00272400 	eoreq	r2, r7, r0, lsl #8
    28e4:	00277a08 	eoreq	r7, r7, r8, lsl #20
    28e8:	53000108 	movwpl	r0, #264	; 0x108
    28ec:	08002786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, sp}
    28f0:	080027a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, sp}
    28f4:	00520001 	subseq	r0, r2, r1
    28f8:	00000000 	andeq	r0, r0, r0
    28fc:	24000000 	strcs	r0, [r0], #-0
    2900:	86080027 	strhi	r0, [r8], -r7, lsr #32
    2904:	01080027 	tsteq	r8, r7, lsr #32
    2908:	27865c00 	strcs	r5, [r6, r0, lsl #24]
    290c:	278c0800 	strcs	r0, [ip, r0, lsl #16]
    2910:	00020800 	andeq	r0, r2, r0, lsl #16
    2914:	278c9f30 			; <UNDEFINED> instruction: 0x278c9f30
    2918:	27940800 	ldrcs	r0, [r4, r0, lsl #16]
    291c:	00080800 	andeq	r0, r8, r0, lsl #16
    2920:	00910073 	addseq	r0, r1, r3, ror r0
    2924:	9f40231c 	svcls	0x0040231c
    2928:	08002794 	stmdaeq	r0, {r2, r4, r7, r8, r9, sl, sp}
    292c:	0800279a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, sp}
    2930:	00730008 	rsbseq	r0, r3, r8
    2934:	231c0091 	tstcs	ip, #145	; 0x91
    2938:	279a9f3f 			; <UNDEFINED> instruction: 0x279a9f3f
    293c:	27a40800 	strcs	r0, [r4, r0, lsl #16]!
    2940:	00080800 	andeq	r0, r8, r0, lsl #16
    2944:	00910073 	addseq	r0, r1, r3, ror r0
    2948:	9f40231c 	svcls	0x0040231c
	...
    2954:	08002726 	stmdaeq	r0, {r1, r2, r5, r8, r9, sl, sp}
    2958:	0800272c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp}
    295c:	9f300002 	svcls	0x00300002
    2960:	0800272c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, sp}
    2964:	08002734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp}
    2968:	34520001 	ldrbcc	r0, [r2], #-1
    296c:	3a080027 	bcc	202a10 <__Stack_Size+0x202210>
    2970:	03080027 	movweq	r0, #32807	; 0x8027
    2974:	9f7f7200 	svcls	0x007f7200
    2978:	0800273a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, sp}
    297c:	0800275e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, sp}
    2980:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    2984:	64080027 	strvs	r0, [r8], #-39	; 0x27
    2988:	03080027 	movweq	r0, #32807	; 0x8027
    298c:	9f7f7200 	svcls	0x007f7200
    2990:	08002764 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, sp}
    2994:	0800277e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, sp}
    2998:	00520001 	subseq	r0, r2, r1
    299c:	00000000 	andeq	r0, r0, r0
    29a0:	ac000000 	stcge	0, cr0, [r0], {-0}
    29a4:	f8080027 			; <UNDEFINED> instruction: 0xf8080027
    29a8:	01080027 	tsteq	r8, r7, lsr #32
    29ac:	28045300 	stmdacs	r4, {r8, r9, ip, lr}
    29b0:	28200800 	stmdacs	r0!, {fp}
    29b4:	00010800 	andeq	r0, r1, r0, lsl #16
    29b8:	00000052 	andeq	r0, r0, r2, asr r0
    29bc:	00000000 	andeq	r0, r0, r0
    29c0:	0027ac00 	eoreq	sl, r7, r0, lsl #24
    29c4:	00280408 	eoreq	r0, r8, r8, lsl #8
    29c8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    29cc:	08002804 	stmdaeq	r0, {r2, fp, sp}
    29d0:	08002808 	stmdaeq	r0, {r3, fp, sp}
    29d4:	9f300002 	svcls	0x00300002
    29d8:	08002808 	stmdaeq	r0, {r3, fp, sp}
    29dc:	08002810 	stmdaeq	r0, {r4, fp, sp}
    29e0:	10530001 	subsne	r0, r3, r1
    29e4:	16080028 	strne	r0, [r8], -r8, lsr #32
    29e8:	03080028 	movweq	r0, #32808	; 0x8028
    29ec:	9f7f7300 	svcls	0x007f7300
    29f0:	08002816 	stmdaeq	r0, {r1, r2, r4, fp, sp}
    29f4:	0800281c 	stmdaeq	r0, {r2, r3, r4, fp, sp}
    29f8:	00530001 	subseq	r0, r3, r1
    29fc:	00000000 	andeq	r0, r0, r0
    2a00:	b0000000 	andlt	r0, r0, r0
    2a04:	b4080027 	strlt	r0, [r8], #-39	; 0x27
    2a08:	02080027 	andeq	r0, r8, #39	; 0x27
    2a0c:	b49f3000 	ldrlt	r3, [pc], #0	; 2a14 <__Stack_Size+0x2214>
    2a10:	be080027 	cdplt	0, 0, cr0, cr8, cr7, {1}
    2a14:	01080027 	tsteq	r8, r7, lsr #32
    2a18:	27be5200 	ldrcs	r5, [lr, r0, lsl #4]!
    2a1c:	27c40800 	strbcs	r0, [r4, r0, lsl #16]
    2a20:	00030800 	andeq	r0, r3, r0, lsl #16
    2a24:	c49f7f72 	ldrgt	r7, [pc], #3954	; 2a2c <__Stack_Size+0x222c>
    2a28:	ca080027 	bgt	202acc <__Stack_Size+0x2022cc>
    2a2c:	01080027 	tsteq	r8, r7, lsr #32
    2a30:	27ca5200 	strbcs	r5, [sl, r0, lsl #4]
    2a34:	27d80800 	ldrbcs	r0, [r8, r0, lsl #16]
    2a38:	00030800 	andeq	r0, r3, r0, lsl #16
    2a3c:	d89f0172 	ldmle	pc, {r1, r4, r5, r6, r8}	; <UNPREDICTABLE>
    2a40:	e0080027 	and	r0, r8, r7, lsr #32
    2a44:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    2a48:	91007200 	mrsls	r7, R8_usr
    2a4c:	41231c00 	teqmi	r3, r0, lsl #24
    2a50:	0027e09f 	mlaeq	r7, pc, r0, lr	; <UNPREDICTABLE>
    2a54:	0027ea08 	eoreq	lr, r7, r8, lsl #20
    2a58:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2a5c:	1c009100 	stfned	f1, [r0], {-0}
    2a60:	ea9f4023 	b	fe7d2af4 <BootRAM+0xd743295>
    2a64:	ec080027 	stc	0, cr0, [r8], {39}	; 0x27
    2a68:	08080027 	stmdaeq	r8, {r0, r1, r2, r5}
    2a6c:	91007200 	mrsls	r7, R8_usr
    2a70:	41231c00 	teqmi	r3, r0, lsl #24
    2a74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2a78:	00000000 	andeq	r0, r0, r0
    2a7c:	00282000 	eoreq	r2, r8, r0
    2a80:	00287008 	eoreq	r7, r8, r8
    2a84:	53000108 	movwpl	r0, #264	; 0x108
    2a88:	0800287c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, sp}
    2a8c:	080028a2 	stmdaeq	r0, {r1, r5, r7, fp, sp}
    2a90:	00520001 	subseq	r0, r2, r1
    2a94:	00000000 	andeq	r0, r0, r0
    2a98:	20000000 	andcs	r0, r0, r0
    2a9c:	7c080028 	stcvc	0, cr0, [r8], {40}	; 0x28
    2aa0:	01080028 	tsteq	r8, r8, lsr #32
    2aa4:	287c5600 	ldmdacs	ip!, {r9, sl, ip, lr}^
    2aa8:	28820800 	stmcs	r2, {fp}
    2aac:	00020800 	andeq	r0, r2, r0, lsl #16
    2ab0:	28829f30 	stmcs	r2, {r4, r5, r8, r9, sl, fp, ip, pc}
    2ab4:	288a0800 	stmcs	sl, {fp}
    2ab8:	00080800 	andeq	r0, r8, r0, lsl #16
    2abc:	00910073 	addseq	r0, r1, r3, ror r0
    2ac0:	9f40231c 	svcls	0x0040231c
    2ac4:	0800288a 	stmdaeq	r0, {r1, r3, r7, fp, sp}
    2ac8:	08002890 	stmdaeq	r0, {r4, r7, fp, sp}
    2acc:	00730008 	rsbseq	r0, r3, r8
    2ad0:	231c0091 	tstcs	ip, #145	; 0x91
    2ad4:	28909f3f 	ldmcs	r0, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
    2ad8:	289e0800 	ldmcs	lr, {fp}
    2adc:	00080800 	andeq	r0, r8, r0, lsl #16
    2ae0:	00910073 	addseq	r0, r1, r3, ror r0
    2ae4:	9f40231c 	svcls	0x0040231c
	...
    2af0:	08002822 	stmdaeq	r0, {r1, r5, fp, sp}
    2af4:	08002826 	stmdaeq	r0, {r1, r2, r5, fp, sp}
    2af8:	9f300002 	svcls	0x00300002
    2afc:	08002826 	stmdaeq	r0, {r1, r2, r5, fp, sp}
    2b00:	08002830 	stmdaeq	r0, {r4, r5, fp, sp}
    2b04:	30520001 	subscc	r0, r2, r1
    2b08:	36080028 	strcc	r0, [r8], -r8, lsr #32
    2b0c:	03080028 	movweq	r0, #32808	; 0x8028
    2b10:	9f7f7200 	svcls	0x007f7200
    2b14:	08002836 	stmdaeq	r0, {r1, r2, r4, r5, fp, sp}
    2b18:	08002858 	stmdaeq	r0, {r3, r4, r6, fp, sp}
    2b1c:	58520001 	ldmdapl	r2, {r0}^
    2b20:	5e080028 	cdppl	0, 0, cr0, cr8, cr8, {1}
    2b24:	03080028 	movweq	r0, #32808	; 0x8028
    2b28:	9f7f7200 	svcls	0x007f7200
    2b2c:	0800285e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, sp}
    2b30:	08002874 	stmdaeq	r0, {r2, r4, r5, r6, fp, sp}
    2b34:	00520001 	subseq	r0, r2, r1
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	a2000000 	andge	r0, r0, #0
    2b40:	ee080028 	cdp	0, 0, cr0, cr8, cr8, {1}
    2b44:	01080028 	tsteq	r8, r8, lsr #32
    2b48:	28fa5300 	ldmcs	sl!, {r8, r9, ip, lr}^
    2b4c:	29160800 	ldmdbcs	r6, {fp}
    2b50:	00010800 	andeq	r0, r1, r0, lsl #16
    2b54:	00000052 	andeq	r0, r0, r2, asr r0
    2b58:	00000000 	andeq	r0, r0, r0
    2b5c:	0028a200 	eoreq	sl, r8, r0, lsl #4
    2b60:	0028fa08 	eoreq	pc, r8, r8, lsl #20
    2b64:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2b68:	080028fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, fp, sp}
    2b6c:	080028fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp}
    2b70:	9f300002 	svcls	0x00300002
    2b74:	080028fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, fp, sp}
    2b78:	08002906 	stmdaeq	r0, {r1, r2, r8, fp, sp}
    2b7c:	06530001 	ldrbeq	r0, [r3], -r1
    2b80:	0c080029 	stceq	0, cr0, [r8], {41}	; 0x29
    2b84:	03080029 	movweq	r0, #32809	; 0x8029
    2b88:	9f7f7300 	svcls	0x007f7300
    2b8c:	0800290c 	stmdaeq	r0, {r2, r3, r8, fp, sp}
    2b90:	08002912 	stmdaeq	r0, {r1, r4, r8, fp, sp}
    2b94:	00530001 	subseq	r0, r3, r1
    2b98:	00000000 	andeq	r0, r0, r0
    2b9c:	a6000000 	strge	r0, [r0], -r0
    2ba0:	aa080028 	bge	202c48 <__Stack_Size+0x202448>
    2ba4:	02080028 	andeq	r0, r8, #40	; 0x28
    2ba8:	aa9f3000 	bge	fe7cebb0 <BootRAM+0xd73f351>
    2bac:	b4080028 	strlt	r0, [r8], #-40	; 0x28
    2bb0:	01080028 	tsteq	r8, r8, lsr #32
    2bb4:	28b45200 	ldmcs	r4!, {r9, ip, lr}
    2bb8:	28ba0800 	ldmcs	sl!, {fp}
    2bbc:	00030800 	andeq	r0, r3, r0, lsl #16
    2bc0:	ba9f7f72 	blt	fe7e2990 <BootRAM+0xd753131>
    2bc4:	c0080028 	andgt	r0, r8, r8, lsr #32
    2bc8:	01080028 	tsteq	r8, r8, lsr #32
    2bcc:	28c05200 	stmiacs	r0, {r9, ip, lr}^
    2bd0:	28ce0800 	stmiacs	lr, {fp}^
    2bd4:	00030800 	andeq	r0, r3, r0, lsl #16
    2bd8:	ce9f0172 	mrcgt	1, 4, r0, cr15, cr2, {3}
    2bdc:	d6080028 	strle	r0, [r8], -r8, lsr #32
    2be0:	08080028 	stmdaeq	r8, {r3, r5}
    2be4:	91007200 	mrsls	r7, R8_usr
    2be8:	41231c00 	teqmi	r3, r0, lsl #24
    2bec:	0028d69f 	mlaeq	r8, pc, r6, sp	; <UNPREDICTABLE>
    2bf0:	0028e008 	eoreq	lr, r8, r8
    2bf4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2bf8:	1c009100 	stfned	f1, [r0], {-0}
    2bfc:	e09f4023 	adds	r4, pc, r3, lsr #32
    2c00:	e2080028 	and	r0, r8, #40	; 0x28
    2c04:	08080028 	stmdaeq	r8, {r3, r5}
    2c08:	91007200 	mrsls	r7, R8_usr
    2c0c:	41231c00 	teqmi	r3, r0, lsl #24
    2c10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2c14:	00000000 	andeq	r0, r0, r0
    2c18:	00291600 	eoreq	r1, r9, r0, lsl #12
    2c1c:	00296608 	eoreq	r6, r9, r8, lsl #12
    2c20:	53000108 	movwpl	r0, #264	; 0x108
    2c24:	08002972 	stmdaeq	r0, {r1, r4, r5, r6, r8, fp, sp}
    2c28:	08002998 	stmdaeq	r0, {r3, r4, r7, r8, fp, sp}
    2c2c:	00520001 	subseq	r0, r2, r1
    2c30:	00000000 	andeq	r0, r0, r0
    2c34:	16000000 	strne	r0, [r0], -r0
    2c38:	72080029 	andvc	r0, r8, #41	; 0x29
    2c3c:	01080029 	tsteq	r8, r9, lsr #32
    2c40:	29725600 	ldmdbcs	r2!, {r9, sl, ip, lr}^
    2c44:	29780800 	ldmdbcs	r8!, {fp}^
    2c48:	00020800 	andeq	r0, r2, r0, lsl #16
    2c4c:	29789f30 	ldmdbcs	r8!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    2c50:	29800800 	stmibcs	r0, {fp}
    2c54:	00080800 	andeq	r0, r8, r0, lsl #16
    2c58:	00910073 	addseq	r0, r1, r3, ror r0
    2c5c:	9f40231c 	svcls	0x0040231c
    2c60:	08002980 	stmdaeq	r0, {r7, r8, fp, sp}
    2c64:	08002986 	stmdaeq	r0, {r1, r2, r7, r8, fp, sp}
    2c68:	00730008 	rsbseq	r0, r3, r8
    2c6c:	231c0091 	tstcs	ip, #145	; 0x91
    2c70:	29869f3f 	stmibcs	r6, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, pc}
    2c74:	29940800 	ldmibcs	r4, {fp}
    2c78:	00080800 	andeq	r0, r8, r0, lsl #16
    2c7c:	00910073 	addseq	r0, r1, r3, ror r0
    2c80:	9f40231c 	svcls	0x0040231c
	...
    2c8c:	08002918 	stmdaeq	r0, {r3, r4, r8, fp, sp}
    2c90:	0800291c 	stmdaeq	r0, {r2, r3, r4, r8, fp, sp}
    2c94:	9f300002 	svcls	0x00300002
    2c98:	0800291c 	stmdaeq	r0, {r2, r3, r4, r8, fp, sp}
    2c9c:	08002926 	stmdaeq	r0, {r1, r2, r5, r8, fp, sp}
    2ca0:	26520001 	ldrbcs	r0, [r2], -r1
    2ca4:	2c080029 	stccs	0, cr0, [r8], {41}	; 0x29
    2ca8:	03080029 	movweq	r0, #32809	; 0x8029
    2cac:	9f7f7200 	svcls	0x007f7200
    2cb0:	0800292c 	stmdaeq	r0, {r2, r3, r5, r8, fp, sp}
    2cb4:	0800294e 	stmdaeq	r0, {r1, r2, r3, r6, r8, fp, sp}
    2cb8:	4e520001 	cdpmi	0, 5, cr0, cr2, cr1, {0}
    2cbc:	54080029 	strpl	r0, [r8], #-41	; 0x29
    2cc0:	03080029 	movweq	r0, #32809	; 0x8029
    2cc4:	9f7f7200 	svcls	0x007f7200
    2cc8:	08002954 	stmdaeq	r0, {r2, r4, r6, r8, fp, sp}
    2ccc:	0800296a 	stmdaeq	r0, {r1, r3, r5, r6, r8, fp, sp}
    2cd0:	00520001 	subseq	r0, r2, r1
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    2cdc:	e2080029 	and	r0, r8, #41	; 0x29
    2ce0:	01080029 	tsteq	r8, r9, lsr #32
    2ce4:	29ee5300 	stmibcs	lr!, {r8, r9, ip, lr}^
    2ce8:	2a0a0800 	bcs	284cf0 <__Stack_Size+0x2844f0>
    2cec:	00010800 	andeq	r0, r1, r0, lsl #16
    2cf0:	00000052 	andeq	r0, r0, r2, asr r0
    2cf4:	00000000 	andeq	r0, r0, r0
    2cf8:	00299800 	eoreq	r9, r9, r0, lsl #16
    2cfc:	0029ee08 	eoreq	lr, r9, r8, lsl #28
    2d00:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2d04:	080029ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, fp, sp}
    2d08:	080029f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, sp}
    2d0c:	9f300002 	svcls	0x00300002
    2d10:	080029f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, fp, sp}
    2d14:	080029fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, fp, sp}
    2d18:	fa530001 	blx	14c2d24 <__Stack_Size+0x14c2524>
    2d1c:	00080029 	andeq	r0, r8, r9, lsr #32
    2d20:	0308002a 	movweq	r0, #32810	; 0x802a
    2d24:	9f7f7300 	svcls	0x007f7300
    2d28:	08002a00 	stmdaeq	r0, {r9, fp, sp}
    2d2c:	08002a06 	stmdaeq	r0, {r1, r2, r9, fp, sp}
    2d30:	00530001 	subseq	r0, r3, r1
    2d34:	00000000 	andeq	r0, r0, r0
    2d38:	9a000000 	bls	2d40 <__Stack_Size+0x2540>
    2d3c:	9e080029 	cdpls	0, 0, cr0, cr8, cr9, {1}
    2d40:	02080029 	andeq	r0, r8, #41	; 0x29
    2d44:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    2d48:	a8080029 	stmdage	r8, {r0, r3, r5}
    2d4c:	01080029 	tsteq	r8, r9, lsr #32
    2d50:	29a85200 	stmibcs	r8!, {r9, ip, lr}
    2d54:	29ae0800 	stmibcs	lr!, {fp}
    2d58:	00030800 	andeq	r0, r3, r0, lsl #16
    2d5c:	ae9f7f72 	mrcge	15, 4, r7, cr15, cr2, {3}
    2d60:	b4080029 	strlt	r0, [r8], #-41	; 0x29
    2d64:	01080029 	tsteq	r8, r9, lsr #32
    2d68:	29b45200 	ldmibcs	r4!, {r9, ip, lr}
    2d6c:	29c20800 	stmibcs	r2, {fp}^
    2d70:	00030800 	andeq	r0, r3, r0, lsl #16
    2d74:	c29f0172 	addsgt	r0, pc, #-2147483620	; 0x8000001c
    2d78:	ca080029 	bgt	202e24 <__Stack_Size+0x202624>
    2d7c:	08080029 	stmdaeq	r8, {r0, r3, r5}
    2d80:	91007200 	mrsls	r7, R8_usr
    2d84:	41231c00 	teqmi	r3, r0, lsl #24
    2d88:	0029ca9f 	mlaeq	r9, pc, sl, ip	; <UNPREDICTABLE>
    2d8c:	0029d408 	eoreq	sp, r9, r8, lsl #8
    2d90:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2d94:	1c009100 	stfned	f1, [r0], {-0}
    2d98:	d49f4023 	ldrle	r4, [pc], #35	; 2da0 <__Stack_Size+0x25a0>
    2d9c:	d6080029 	strle	r0, [r8], -r9, lsr #32
    2da0:	08080029 	stmdaeq	r8, {r0, r3, r5}
    2da4:	91007200 	mrsls	r7, R8_usr
    2da8:	41231c00 	teqmi	r3, r0, lsl #24
    2dac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2db0:	00000000 	andeq	r0, r0, r0
    2db4:	002a0a00 	eoreq	r0, sl, r0, lsl #20
    2db8:	002a5a08 	eoreq	r5, sl, r8, lsl #20
    2dbc:	53000108 	movwpl	r0, #264	; 0x108
    2dc0:	08002a66 	stmdaeq	r0, {r1, r2, r5, r6, r9, fp, sp}
    2dc4:	08002a82 	stmdaeq	r0, {r1, r7, r9, fp, sp}
    2dc8:	00520001 	subseq	r0, r2, r1
    2dcc:	00000000 	andeq	r0, r0, r0
    2dd0:	0a000000 	beq	2dd8 <__Stack_Size+0x25d8>
    2dd4:	6608002a 	strvs	r0, [r8], -sl, lsr #32
    2dd8:	0108002a 	tsteq	r8, sl, lsr #32
    2ddc:	2a665600 	bcs	19985e4 <__Stack_Size+0x1997de4>
    2de0:	2a6c0800 	bcs	1b04de8 <__Stack_Size+0x1b045e8>
    2de4:	00020800 	andeq	r0, r2, r0, lsl #16
    2de8:	2a6c9f30 	bcs	1b2aab0 <__Stack_Size+0x1b2a2b0>
    2dec:	2a740800 	bcs	1d04df4 <__Stack_Size+0x1d045f4>
    2df0:	00080800 	andeq	r0, r8, r0, lsl #16
    2df4:	00910073 	addseq	r0, r1, r3, ror r0
    2df8:	9f40231c 	svcls	0x0040231c
    2dfc:	08002a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, sp}
    2e00:	08002a7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, fp, sp}
    2e04:	00730008 	rsbseq	r0, r3, r8
    2e08:	231c0091 	tstcs	ip, #145	; 0x91
    2e0c:	2a7a9f3f 	bcs	1eaab10 <__Stack_Size+0x1eaa310>
    2e10:	2a840800 	bcs	fe104e18 <BootRAM+0xd0755b9>
    2e14:	00080800 	andeq	r0, r8, r0, lsl #16
    2e18:	00910073 	addseq	r0, r1, r3, ror r0
    2e1c:	9f40231c 	svcls	0x0040231c
	...
    2e28:	08002a0c 	stmdaeq	r0, {r2, r3, r9, fp, sp}
    2e2c:	08002a10 	stmdaeq	r0, {r4, r9, fp, sp}
    2e30:	9f300002 	svcls	0x00300002
    2e34:	08002a10 	stmdaeq	r0, {r4, r9, fp, sp}
    2e38:	08002a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, sp}
    2e3c:	1a520001 	bne	1482e48 <__Stack_Size+0x1482648>
    2e40:	2008002a 	andcs	r0, r8, sl, lsr #32
    2e44:	0308002a 	movweq	r0, #32810	; 0x802a
    2e48:	9f7f7200 	svcls	0x007f7200
    2e4c:	08002a20 	stmdaeq	r0, {r5, r9, fp, sp}
    2e50:	08002a42 	stmdaeq	r0, {r1, r6, r9, fp, sp}
    2e54:	42520001 	subsmi	r0, r2, #1
    2e58:	4808002a 	stmdami	r8, {r1, r3, r5}
    2e5c:	0308002a 	movweq	r0, #32810	; 0x802a
    2e60:	9f7f7200 	svcls	0x007f7200
    2e64:	08002a48 	stmdaeq	r0, {r3, r6, r9, fp, sp}
    2e68:	08002a5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r9, fp, sp}
    2e6c:	00520001 	subseq	r0, r2, r1
    2e70:	00000000 	andeq	r0, r0, r0
    2e74:	8c000000 	stchi	0, cr0, [r0], {-0}
    2e78:	d608002a 	strle	r0, [r8], -sl, lsr #32
    2e7c:	0108002a 	tsteq	r8, sl, lsr #32
    2e80:	2ae25300 	bcs	ff897a88 <BootRAM+0xe808229>
    2e84:	2afe0800 	bcs	fff84e8c <BootRAM+0xeef562d>
    2e88:	00010800 	andeq	r0, r1, r0, lsl #16
    2e8c:	00000052 	andeq	r0, r0, r2, asr r0
    2e90:	00000000 	andeq	r0, r0, r0
    2e94:	002a8c00 	eoreq	r8, sl, r0, lsl #24
    2e98:	002ae208 	eoreq	lr, sl, r8, lsl #4
    2e9c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    2ea0:	08002ae2 	stmdaeq	r0, {r1, r5, r6, r7, r9, fp, sp}
    2ea4:	08002ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, sp}
    2ea8:	9f300002 	svcls	0x00300002
    2eac:	08002ae6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, fp, sp}
    2eb0:	08002aee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, fp, sp}
    2eb4:	ee530001 	cdp	0, 5, cr0, cr3, cr1, {0}
    2eb8:	f408002a 	vst4.8	{d0-d3}, [r8 :128], sl
    2ebc:	0308002a 	movweq	r0, #32810	; 0x802a
    2ec0:	9f7f7300 	svcls	0x007f7300
    2ec4:	08002af4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, fp, sp}
    2ec8:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
    2ecc:	00530001 	subseq	r0, r3, r1
    2ed0:	00000000 	andeq	r0, r0, r0
    2ed4:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    2ed8:	9208002a 	andls	r0, r8, #42	; 0x2a
    2edc:	0208002a 	andeq	r0, r8, #42	; 0x2a
    2ee0:	929f3000 	addsls	r3, pc, #0
    2ee4:	9c08002a 	stcls	0, cr0, [r8], {42}	; 0x2a
    2ee8:	0108002a 	tsteq	r8, sl, lsr #32
    2eec:	2a9c5200 	bcs	fe7176f4 <BootRAM+0xd687e95>
    2ef0:	2aa20800 	bcs	fe884ef8 <BootRAM+0xd7f5699>
    2ef4:	00030800 	andeq	r0, r3, r0, lsl #16
    2ef8:	a29f7f72 	addsge	r7, pc, #456	; 0x1c8
    2efc:	a808002a 	stmdage	r8, {r1, r3, r5}
    2f00:	0108002a 	tsteq	r8, sl, lsr #32
    2f04:	2aa85200 	bcs	fea1770c <BootRAM+0xd987ead>
    2f08:	2ab60800 	bcs	fed84f10 <BootRAM+0xdcf56b1>
    2f0c:	00030800 	andeq	r0, r3, r0, lsl #16
    2f10:	b69f0172 			; <UNDEFINED> instruction: 0xb69f0172
    2f14:	be08002a 	cdplt	0, 0, cr0, cr8, cr10, {1}
    2f18:	0808002a 	stmdaeq	r8, {r1, r3, r5}
    2f1c:	91007200 	mrsls	r7, R8_usr
    2f20:	41231c00 	teqmi	r3, r0, lsl #24
    2f24:	002abe9f 	mlaeq	sl, pc, lr, fp	; <UNPREDICTABLE>
    2f28:	002ac808 	eoreq	ip, sl, r8, lsl #16
    2f2c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    2f30:	1c009100 	stfned	f1, [r0], {-0}
    2f34:	c89f4023 	ldmgt	pc, {r0, r1, r5, lr}	; <UNPREDICTABLE>
    2f38:	ca08002a 	bgt	202fe8 <__Stack_Size+0x2027e8>
    2f3c:	0808002a 	stmdaeq	r8, {r1, r3, r5}
    2f40:	91007200 	mrsls	r7, R8_usr
    2f44:	41231c00 	teqmi	r3, r0, lsl #24
    2f48:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    2f58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2f64:	00550001 	subseq	r0, r5, r1
	...
    2f74:	01000000 	mrseq	r0, (UNDEF: 0)
    2f78:	00005100 	andeq	r5, r0, r0, lsl #2
    2f7c:	00000000 	andeq	r0, r0, r0
    2f80:	00040000 	andeq	r0, r4, r0
    2f84:	9f5101f3 	svcls	0x005101f3
	...
    2f98:	005d0001 	subseq	r0, sp, r1
    2f9c:	00000000 	andeq	r0, r0, r0
    2fa0:	03000000 	movweq	r0, #0
    2fa4:	9f607400 	svcls	0x00607400
	...
    2fb0:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
    2fb4:	08002b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, sp}
    2fb8:	12500001 	subsne	r0, r0, #1
    2fbc:	3208002b 	andcc	r0, r8, #43	; 0x2b
    2fc0:	03080031 	movweq	r0, #32817	; 0x8031
    2fc4:	7ed89100 	atnvce	f1, f0
    2fc8:	08003132 	stmdaeq	r0, {r1, r4, r5, r8, ip, sp}
    2fcc:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    2fd0:	d87d0003 	ldmdale	sp!, {r0, r1}^
    2fd4:	0000007e 	andeq	r0, r0, lr, ror r0
    2fd8:	00000000 	andeq	r0, r0, r0
    2fdc:	002b0000 	eoreq	r0, fp, r0
    2fe0:	002b1208 	eoreq	r1, fp, r8, lsl #4
    2fe4:	51000108 	tstpl	r0, r8, lsl #2
    2fe8:	08002b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, sp}
    2fec:	08002b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, sp}
    2ff0:	3a500001 	bcc	1402ffc <__Stack_Size+0x14027fc>
    2ff4:	3208002b 	andcc	r0, r8, #43	; 0x2b
    2ff8:	03080031 	movweq	r0, #32817	; 0x8031
    2ffc:	7edc9100 	atnvce	f1, f0
    3000:	08003132 	stmdaeq	r0, {r1, r4, r5, r8, ip, sp}
    3004:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    3008:	dc7d0003 	ldclle	0, cr0, [sp], #-12
    300c:	0000007e 	andeq	r0, r0, lr, ror r0
    3010:	00000000 	andeq	r0, r0, r0
    3014:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    3018:	002b1208 	eoreq	r1, fp, r8, lsl #4
    301c:	51000108 	tstpl	r0, r8, lsl #2
    3020:	08002b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, sp}
    3024:	08002b3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, fp, sp}
    3028:	3a500001 	bcc	1403034 <__Stack_Size+0x1402834>
    302c:	3208002b 	andcc	r0, r8, #43	; 0x2b
    3030:	03080031 	movweq	r0, #32817	; 0x8031
    3034:	7edc9100 	atnvce	f1, f0
    3038:	08003132 	stmdaeq	r0, {r1, r4, r5, r8, ip, sp}
    303c:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    3040:	dc7d0003 	ldclle	0, cr0, [sp], #-12
    3044:	0000007e 	andeq	r0, r0, lr, ror r0
    3048:	00000000 	andeq	r0, r0, r0
    304c:	002b0800 	eoreq	r0, fp, r0, lsl #16
    3050:	002b1008 	eoreq	r1, fp, r8
    3054:	91000408 	tstls	r0, r8, lsl #8
    3058:	109f7fa0 	addsne	r7, pc, r0, lsr #31
    305c:	3208002b 	andcc	r0, r8, #43	; 0x2b
    3060:	01080031 	tsteq	r8, r1, lsr r0
    3064:	31325600 	teqcc	r2, r0, lsl #12
    3068:	31340800 	teqcc	r4, r0, lsl #16
    306c:	00040800 	andeq	r0, r4, r0, lsl #16
    3070:	9f7fa07d 	svcls	0x007fa07d
	...
    307c:	08002b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp}
    3080:	08002b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, sp}
    3084:	9f300002 	svcls	0x00300002
    3088:	08002b12 	stmdaeq	r0, {r1, r4, r8, r9, fp, sp}
    308c:	08002b1a 	stmdaeq	r0, {r1, r3, r4, r8, r9, fp, sp}
    3090:	00720005 	rsbseq	r0, r2, r5
    3094:	1a9f2538 	bne	fe7cc57c <BootRAM+0xd73cd1d>
    3098:	5608002b 	strpl	r0, [r8], -fp, lsr #32
    309c:	0108002b 	tsteq	r8, fp, lsr #32
    30a0:	00005200 	andeq	r5, r0, r0, lsl #4
    30a4:	00000000 	andeq	r0, r0, r0
    30a8:	2b0c0000 	blcs	3030b0 <__Stack_Size+0x3028b0>
    30ac:	2b120800 	blcs	4850b4 <__Stack_Size+0x4848b4>
    30b0:	00020800 	andeq	r0, r2, r0, lsl #16
    30b4:	2b129f30 	blcs	4aad7c <__Stack_Size+0x4aa57c>
    30b8:	2b260800 	blcs	9850c0 <__Stack_Size+0x9848c0>
    30bc:	00010800 	andeq	r0, r1, r0, lsl #16
    30c0:	002b3853 	eoreq	r3, fp, r3, asr r8
    30c4:	002b3c08 	eoreq	r3, fp, r8, lsl #24
    30c8:	30000208 	andcc	r0, r0, r8, lsl #4
    30cc:	002b3c9f 	mlaeq	fp, pc, ip, r3	; <UNPREDICTABLE>
    30d0:	002b4408 	eoreq	r4, fp, r8, lsl #8
    30d4:	73000808 	movwvc	r0, #2056	; 0x808
    30d8:	1c009100 	stfned	f1, [r0], {-0}
    30dc:	449f6023 	ldrmi	r6, [pc], #35	; 30e4 <__Stack_Size+0x28e4>
    30e0:	4a08002b 	bmi	203194 <__Stack_Size+0x202994>
    30e4:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    30e8:	91007300 	mrsls	r7, LR_irq
    30ec:	5f231c00 	svcpl	0x00231c00
    30f0:	002b4a9f 	mlaeq	fp, pc, sl, r4	; <UNPREDICTABLE>
    30f4:	002b5008 	eoreq	r5, fp, r8
    30f8:	73000808 	movwvc	r0, #2056	; 0x808
    30fc:	1c009100 	stfned	f1, [r0], {-0}
    3100:	009f6023 	addseq	r6, pc, r3, lsr #32
    3104:	00000000 	andeq	r0, r0, r0
    3108:	56000000 	strpl	r0, [r0], -r0
    310c:	a208002b 	andge	r0, r8, #43	; 0x2b
    3110:	0108002b 	tsteq	r8, fp, lsr #32
    3114:	2bae5300 	blcs	feb97d1c <BootRAM+0xdb084bd>
    3118:	2bd00800 	blcs	ff405120 <BootRAM+0xe3758c1>
    311c:	00010800 	andeq	r0, r1, r0, lsl #16
    3120:	00000052 	andeq	r0, r0, r2, asr r0
    3124:	00000000 	andeq	r0, r0, r0
    3128:	002b5600 	eoreq	r5, fp, r0, lsl #12
    312c:	002bae08 	eoreq	sl, fp, r8, lsl #28
    3130:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3134:	08002bae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, fp, sp}
    3138:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    313c:	9f300002 	svcls	0x00300002
    3140:	08002bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, sp}
    3144:	08002bbe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, fp, sp}
    3148:	00730009 	rsbseq	r0, r3, r9
    314c:	231c0091 	tstcs	ip, #145	; 0x91
    3150:	be9f01a0 	fmllt<illegal precision>p	f0, f7, f0
    3154:	c408002b 	strgt	r0, [r8], #-43	; 0x2b
    3158:	0908002b 	stmdbeq	r8, {r0, r1, r3, r5}
    315c:	91007300 	mrsls	r7, LR_irq
    3160:	9f231c00 	svcls	0x00231c00
    3164:	2bc49f01 	blcs	ff12ad70 <BootRAM+0xe09b511>
    3168:	2bca0800 	blcs	ff285170 <BootRAM+0xe1f5911>
    316c:	00090800 	andeq	r0, r9, r0, lsl #16
    3170:	00910073 	addseq	r0, r1, r3, ror r0
    3174:	01a0231c 	lsleq	r2, ip, r3
    3178:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    317c:	00000000 	andeq	r0, r0, r0
    3180:	002b5800 	eoreq	r5, fp, r0, lsl #16
    3184:	002b5c08 	eoreq	r5, fp, r8, lsl #24
    3188:	30000208 	andcc	r0, r0, r8, lsl #4
    318c:	002b5c9f 	mlaeq	fp, pc, ip, r5	; <UNPREDICTABLE>
    3190:	002b6608 	eoreq	r6, fp, r8, lsl #12
    3194:	52000108 	andpl	r0, r0, #8, 2
    3198:	08002b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, sp}
    319c:	08002b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp}
    31a0:	7f720003 	svcvc	0x00720003
    31a4:	002b6c9f 	mlaeq	fp, pc, ip, r6	; <UNPREDICTABLE>
    31a8:	002b7208 	eoreq	r7, fp, r8, lsl #4
    31ac:	52000108 	andpl	r0, r0, #8, 2
    31b0:	08002b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, sp}
    31b4:	08002b7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    31b8:	01720003 	cmneq	r2, r3
    31bc:	002b7e9f 	mlaeq	fp, pc, lr, r7	; <UNPREDICTABLE>
    31c0:	002b8608 	eoreq	r8, fp, r8, lsl #12
    31c4:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    31c8:	1c009100 	stfned	f1, [r0], {-0}
    31cc:	869f6123 	ldrhi	r6, [pc], r3, lsr #2
    31d0:	9008002b 	andls	r0, r8, fp, lsr #32
    31d4:	0808002b 	stmdaeq	r8, {r0, r1, r3, r5}
    31d8:	91007200 	mrsls	r7, R8_usr
    31dc:	60231c00 	eorvs	r1, r3, r0, lsl #24
    31e0:	002b909f 	mlaeq	fp, pc, r0, r9	; <UNPREDICTABLE>
    31e4:	002b9208 	eoreq	r9, fp, r8, lsl #4
    31e8:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    31ec:	1c009100 	stfned	f1, [r0], {-0}
    31f0:	009f6123 	addseq	r6, pc, r3, lsr #2
    31f4:	00000000 	andeq	r0, r0, r0
    31f8:	d0000000 	andle	r0, r0, r0
    31fc:	1e08002b 	cdpne	0, 0, cr0, cr8, cr11, {1}
    3200:	0108002c 	tsteq	r8, ip, lsr #32
    3204:	2c2e5300 	stccs	3, cr5, [lr], #-0
    3208:	2c580800 	mrrccs	8, 0, r0, r8, cr0
    320c:	00010800 	andeq	r0, r1, r0, lsl #16
    3210:	00000052 	andeq	r0, r0, r2, asr r0
    3214:	00000000 	andeq	r0, r0, r0
    3218:	002bd000 	eoreq	sp, fp, r0
    321c:	002c2e08 	eoreq	r2, ip, r8, lsl #28
    3220:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3224:	08002c2e 	stmdaeq	r0, {r1, r2, r3, r5, sl, fp, sp}
    3228:	08002c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, sp}
    322c:	9f300002 	svcls	0x00300002
    3230:	08002c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, sp}
    3234:	08002c42 	stmdaeq	r0, {r1, r6, sl, fp, sp}
    3238:	00730008 	rsbseq	r0, r3, r8
    323c:	231c0091 	tstcs	ip, #145	; 0x91
    3240:	2c429f40 	mcrrcs	15, 4, r9, r2, cr0
    3244:	2c480800 	mcrrcs	8, 0, r0, r8, cr0
    3248:	00080800 	andeq	r0, r8, r0, lsl #16
    324c:	00910073 	addseq	r0, r1, r3, ror r0
    3250:	9f3f231c 	svcls	0x003f231c
    3254:	08002c48 	stmdaeq	r0, {r3, r6, sl, fp, sp}
    3258:	08002c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp}
    325c:	00730008 	rsbseq	r0, r3, r8
    3260:	231c0091 	tstcs	ip, #145	; 0x91
    3264:	00009f40 	andeq	r9, r0, r0, asr #30
    3268:	00000000 	andeq	r0, r0, r0
    326c:	2bd20000 	blcs	ff483274 <BootRAM+0xe3f3a15>
    3270:	2bd60800 	blcs	ff585278 <BootRAM+0xe4f5a19>
    3274:	00020800 	andeq	r0, r2, r0, lsl #16
    3278:	2bd69f30 	blcs	ff5aaf40 <BootRAM+0xe51b6e1>
    327c:	2be40800 	blcs	ff905284 <BootRAM+0xe875a25>
    3280:	00010800 	andeq	r0, r1, r0, lsl #16
    3284:	002be452 	eoreq	lr, fp, r2, asr r4
    3288:	002bea08 	eoreq	lr, fp, r8, lsl #20
    328c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3290:	2bea9f7f 	blcs	ffaab094 <BootRAM+0xea1b835>
    3294:	2bf00800 	blcs	ffc0529c <BootRAM+0xeb75a3d>
    3298:	00010800 	andeq	r0, r1, r0, lsl #16
    329c:	002bf052 	eoreq	pc, fp, r2, asr r0	; <UNPREDICTABLE>
    32a0:	002bfc08 	eoreq	pc, fp, r8, lsl #24
    32a4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    32a8:	2bfc9f01 	blcs	fff2aeb4 <BootRAM+0xee9b655>
    32ac:	2c040800 	stccs	8, cr0, [r4], {-0}
    32b0:	00090800 	andeq	r0, r9, r0, lsl #16
    32b4:	00910072 	addseq	r0, r1, r2, ror r0
    32b8:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    32bc:	002c049f 	mlaeq	ip, pc, r4, r0	; <UNPREDICTABLE>
    32c0:	002c0e08 	eoreq	r0, ip, r8, lsl #28
    32c4:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    32c8:	1c009100 	stfned	f1, [r0], {-0}
    32cc:	9f01a023 	svcls	0x0001a023
    32d0:	08002c0e 	stmdaeq	r0, {r1, r2, r3, sl, fp, sp}
    32d4:	08002c10 	stmdaeq	r0, {r4, sl, fp, sp}
    32d8:	00720009 	rsbseq	r0, r2, r9
    32dc:	231c0091 	tstcs	ip, #145	; 0x91
    32e0:	009f01a1 	addseq	r0, pc, r1, lsr #3
    32e4:	00000000 	andeq	r0, r0, r0
    32e8:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    32ec:	5e08002c 	cdppl	0, 0, cr0, cr8, cr12, {1}
    32f0:	0208002c 	andeq	r0, r8, #44	; 0x2c
    32f4:	5e9f3000 	cdppl	0, 9, cr3, cr15, cr0, {0}
    32f8:	b808002c 	stmdalt	r8, {r2, r3, r5}
    32fc:	0108002c 	tsteq	r8, ip, lsr #32
    3300:	2cc45300 	stclcs	3, cr5, [r4], {0}
    3304:	2ce20800 	stclcs	8, cr0, [r2]
    3308:	00010800 	andeq	r0, r1, r0, lsl #16
    330c:	00000052 	andeq	r0, r0, r2, asr r0
    3310:	00000000 	andeq	r0, r0, r0
    3314:	002c5800 	eoreq	r5, ip, r0, lsl #16
    3318:	002c5e08 	eoreq	r5, ip, r8, lsl #28
    331c:	30000208 	andcc	r0, r0, r8, lsl #4
    3320:	002c5e9f 	mlaeq	ip, pc, lr, r5	; <UNPREDICTABLE>
    3324:	002cc408 	eoreq	ip, ip, r8, lsl #8
    3328:	59000108 	stmdbpl	r0, {r3, r8}
    332c:	08002cc4 	stmdaeq	r0, {r2, r6, r7, sl, fp, sp}
    3330:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    3334:	9f300002 	svcls	0x00300002
    3338:	08002cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp}
    333c:	08002cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp}
    3340:	00730009 	rsbseq	r0, r3, r9
    3344:	231c0091 	tstcs	ip, #145	; 0x91
    3348:	d49f01a0 	ldrle	r0, [pc], #416	; 3350 <__Stack_Size+0x2b50>
    334c:	da08002c 	ble	203404 <__Stack_Size+0x202c04>
    3350:	0908002c 	stmdbeq	r8, {r2, r3, r5}
    3354:	91007300 	mrsls	r7, LR_irq
    3358:	9f231c00 	svcls	0x00231c00
    335c:	2cda9f01 	ldclcs	15, cr9, [sl], {1}
    3360:	2ce20800 	stclcs	8, cr0, [r2]
    3364:	00090800 	andeq	r0, r9, r0, lsl #16
    3368:	00910073 	addseq	r0, r1, r3, ror r0
    336c:	01a0231c 	lsleq	r2, ip, r3
    3370:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3374:	00000000 	andeq	r0, r0, r0
    3378:	002c6000 	eoreq	r6, ip, r0
    337c:	002c6608 	eoreq	r6, ip, r8, lsl #12
    3380:	30000208 	andcc	r0, r0, r8, lsl #4
    3384:	002c669f 	mlaeq	ip, pc, r6, r6	; <UNPREDICTABLE>
    3388:	002c7008 	eoreq	r7, ip, r8
    338c:	52000108 	andpl	r0, r0, #8, 2
    3390:	08002c70 	stmdaeq	r0, {r4, r5, r6, sl, fp, sp}
    3394:	08002c76 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, fp, sp}
    3398:	7f720003 	svcvc	0x00720003
    339c:	002c769f 	mlaeq	ip, pc, r6, r7	; <UNPREDICTABLE>
    33a0:	002c7c08 	eoreq	r7, ip, r8, lsl #24
    33a4:	52000108 	andpl	r0, r0, #8, 2
    33a8:	08002c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp, sp}
    33ac:	08002c8c 	stmdaeq	r0, {r2, r3, r7, sl, fp, sp}
    33b0:	01720003 	cmneq	r2, r3
    33b4:	002c8c9f 	mlaeq	ip, pc, ip, r8	; <UNPREDICTABLE>
    33b8:	002c9408 	eoreq	r9, ip, r8, lsl #8
    33bc:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    33c0:	1c009100 	stfned	f1, [r0], {-0}
    33c4:	949f4123 	ldrls	r4, [pc], #291	; 33cc <__Stack_Size+0x2bcc>
    33c8:	9e08002c 	cdpls	0, 0, cr0, cr8, cr12, {1}
    33cc:	0808002c 	stmdaeq	r8, {r2, r3, r5}
    33d0:	91007200 	mrsls	r7, R8_usr
    33d4:	40231c00 	eormi	r1, r3, r0, lsl #24
    33d8:	002c9e9f 	mlaeq	ip, pc, lr, r9	; <UNPREDICTABLE>
    33dc:	002ca008 	eoreq	sl, ip, r8
    33e0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    33e4:	1c009100 	stfned	f1, [r0], {-0}
    33e8:	009f4123 	addseq	r4, pc, r3, lsr #2
    33ec:	00000000 	andeq	r0, r0, r0
    33f0:	e2000000 	and	r0, r0, #0
    33f4:	3c08002c 	stccc	0, cr0, [r8], {44}	; 0x2c
    33f8:	0108002d 	tsteq	r8, sp, lsr #32
    33fc:	2d485300 	stclcs	3, cr5, [r8, #-0]
    3400:	2d660800 	stclcs	8, cr0, [r6, #-0]
    3404:	00010800 	andeq	r0, r1, r0, lsl #16
    3408:	00000052 	andeq	r0, r0, r2, asr r0
    340c:	00000000 	andeq	r0, r0, r0
    3410:	002ce200 	eoreq	lr, ip, r0, lsl #4
    3414:	002d4808 	eoreq	r4, sp, r8, lsl #16
    3418:	59000108 	stmdbpl	r0, {r3, r8}
    341c:	08002d48 	stmdaeq	r0, {r3, r6, r8, sl, fp, sp}
    3420:	08002d4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, fp, sp}
    3424:	9f300002 	svcls	0x00300002
    3428:	08002d4e 	stmdaeq	r0, {r1, r2, r3, r6, r8, sl, fp, sp}
    342c:	08002d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp, sp}
    3430:	00730008 	rsbseq	r0, r3, r8
    3434:	231c0091 	tstcs	ip, #145	; 0x91
    3438:	2d5c9f40 	ldclcs	15, cr9, [ip, #-256]	; 0xffffff00
    343c:	2d620800 	stclcs	8, cr0, [r2, #-0]
    3440:	00080800 	andeq	r0, r8, r0, lsl #16
    3444:	00910073 	addseq	r0, r1, r3, ror r0
    3448:	9f3f231c 	svcls	0x003f231c
    344c:	08002d62 	stmdaeq	r0, {r1, r5, r6, r8, sl, fp, sp}
    3450:	08002d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp, sp}
    3454:	00730008 	rsbseq	r0, r3, r8
    3458:	231c0091 	tstcs	ip, #145	; 0x91
    345c:	00009f40 	andeq	r9, r0, r0, asr #30
    3460:	00000000 	andeq	r0, r0, r0
    3464:	2ce40000 	stclcs	0, cr0, [r4]
    3468:	2cea0800 	stclcs	8, cr0, [sl]
    346c:	00020800 	andeq	r0, r2, r0, lsl #16
    3470:	2cea9f30 	stclcs	15, cr9, [sl], #192	; 0xc0
    3474:	2cf80800 	ldclcs	8, cr0, [r8]
    3478:	00010800 	andeq	r0, r1, r0, lsl #16
    347c:	002cf852 	eoreq	pc, ip, r2, asr r8	; <UNPREDICTABLE>
    3480:	002cfe08 	eoreq	pc, ip, r8, lsl #28
    3484:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3488:	2cfe9f7f 	ldclcs	15, cr9, [lr], #508	; 0x1fc
    348c:	2d040800 	stccs	8, cr0, [r4, #-0]
    3490:	00010800 	andeq	r0, r1, r0, lsl #16
    3494:	002d0452 	eoreq	r0, sp, r2, asr r4
    3498:	002d1408 	eoreq	r1, sp, r8, lsl #8
    349c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    34a0:	2d149f01 	ldccs	15, cr9, [r4, #-4]
    34a4:	2d1c0800 	ldccs	8, cr0, [ip, #-0]
    34a8:	00090800 	andeq	r0, r9, r0, lsl #16
    34ac:	00910072 	addseq	r0, r1, r2, ror r0
    34b0:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    34b4:	002d1c9f 	mlaeq	sp, pc, ip, r1	; <UNPREDICTABLE>
    34b8:	002d2608 	eoreq	r2, sp, r8, lsl #12
    34bc:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    34c0:	1c009100 	stfned	f1, [r0], {-0}
    34c4:	9f01a023 	svcls	0x0001a023
    34c8:	08002d26 	stmdaeq	r0, {r1, r2, r5, r8, sl, fp, sp}
    34cc:	08002d28 	stmdaeq	r0, {r3, r5, r8, sl, fp, sp}
    34d0:	00720009 	rsbseq	r0, r2, r9
    34d4:	231c0091 	tstcs	ip, #145	; 0x91
    34d8:	009f01a1 	addseq	r0, pc, r1, lsr #3
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    34e4:	c808002d 	stmdagt	r8, {r0, r2, r3, r5}
    34e8:	0108002d 	tsteq	r8, sp, lsr #32
    34ec:	2dd45300 	ldclcs	3, cr5, [r4]
    34f0:	2df40800 	ldclcs	8, cr0, [r4]
    34f4:	00010800 	andeq	r0, r1, r0, lsl #16
    34f8:	00000052 	andeq	r0, r0, r2, asr r0
    34fc:	00000000 	andeq	r0, r0, r0
    3500:	002d7800 	eoreq	r7, sp, r0, lsl #16
    3504:	002dd408 	eoreq	sp, sp, r8, lsl #8
    3508:	54000108 	strpl	r0, [r0], #-264	; 0x108
    350c:	08002dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, sp}
    3510:	08002dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, sp}
    3514:	9f300002 	svcls	0x00300002
    3518:	08002dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp, sp}
    351c:	08002de2 	stmdaeq	r0, {r1, r5, r6, r7, r8, sl, fp, sp}
    3520:	00730009 	rsbseq	r0, r3, r9
    3524:	231c0091 	tstcs	ip, #145	; 0x91
    3528:	e29f01a0 	adds	r0, pc, #160, 2	; 0x28
    352c:	e808002d 	stmda	r8, {r0, r2, r3, r5}
    3530:	0908002d 	stmdbeq	r8, {r0, r2, r3, r5}
    3534:	91007300 	mrsls	r7, LR_irq
    3538:	9f231c00 	svcls	0x00231c00
    353c:	2de89f01 	stclcs	15, cr9, [r8, #4]!
    3540:	2dee0800 	stclcs	8, cr0, [lr]
    3544:	00090800 	andeq	r0, r9, r0, lsl #16
    3548:	00910073 	addseq	r0, r1, r3, ror r0
    354c:	01a0231c 	lsleq	r2, ip, r3
    3550:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3554:	00000000 	andeq	r0, r0, r0
    3558:	002d7a00 	eoreq	r7, sp, r0, lsl #20
    355c:	002d7e08 	eoreq	r7, sp, r8, lsl #28
    3560:	30000208 	andcc	r0, r0, r8, lsl #4
    3564:	002d7e9f 	mlaeq	sp, pc, lr, r7	; <UNPREDICTABLE>
    3568:	002d8808 	eoreq	r8, sp, r8, lsl #16
    356c:	52000108 	andpl	r0, r0, #8, 2
    3570:	08002d88 	stmdaeq	r0, {r3, r7, r8, sl, fp, sp}
    3574:	08002d8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, sl, fp, sp}
    3578:	7f720003 	svcvc	0x00720003
    357c:	002d8e9f 	mlaeq	sp, pc, lr, r8	; <UNPREDICTABLE>
    3580:	002d9408 	eoreq	r9, sp, r8, lsl #8
    3584:	52000108 	andpl	r0, r0, #8, 2
    3588:	08002d94 	stmdaeq	r0, {r2, r4, r7, r8, sl, fp, sp}
    358c:	08002da0 	stmdaeq	r0, {r5, r7, r8, sl, fp, sp}
    3590:	01720003 	cmneq	r2, r3
    3594:	002da09f 	mlaeq	sp, pc, r0, sl	; <UNPREDICTABLE>
    3598:	002da808 	eoreq	sl, sp, r8, lsl #16
    359c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    35a0:	1c009100 	stfned	f1, [r0], {-0}
    35a4:	a89f4123 	ldmge	pc, {r0, r1, r5, r8, lr}	; <UNPREDICTABLE>
    35a8:	b208002d 	andlt	r0, r8, #45	; 0x2d
    35ac:	0808002d 	stmdaeq	r8, {r0, r2, r3, r5}
    35b0:	91007200 	mrsls	r7, R8_usr
    35b4:	40231c00 	eormi	r1, r3, r0, lsl #24
    35b8:	002db29f 	mlaeq	sp, pc, r2, fp	; <UNPREDICTABLE>
    35bc:	002db408 	eoreq	fp, sp, r8, lsl #8
    35c0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    35c4:	1c009100 	stfned	f1, [r0], {-0}
    35c8:	009f4123 	addseq	r4, pc, r3, lsr #2
    35cc:	00000000 	andeq	r0, r0, r0
    35d0:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    35d4:	4408002d 	strmi	r0, [r8], #-45	; 0x2d
    35d8:	0108002e 	tsteq	r8, lr, lsr #32
    35dc:	2e505300 	cdpcs	3, 5, cr5, cr0, cr0, {0}
    35e0:	2e720800 	cdpcs	8, 7, cr0, cr2, cr0, {0}
    35e4:	00010800 	andeq	r0, r1, r0, lsl #16
    35e8:	00000052 	andeq	r0, r0, r2, asr r0
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	002df400 	eoreq	pc, sp, r0, lsl #8
    35f4:	002e5008 	eoreq	r5, lr, r8
    35f8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    35fc:	08002e50 	stmdaeq	r0, {r4, r6, r9, sl, fp, sp}
    3600:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    3604:	9f300002 	svcls	0x00300002
    3608:	08002e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp, sp}
    360c:	08002e60 	stmdaeq	r0, {r5, r6, r9, sl, fp, sp}
    3610:	00730008 	rsbseq	r0, r3, r8
    3614:	231c0091 	tstcs	ip, #145	; 0x91
    3618:	2e609f40 	cdpcs	15, 6, cr9, cr0, cr0, {2}
    361c:	2e660800 	cdpcs	8, 6, cr0, cr6, cr0, {0}
    3620:	00080800 	andeq	r0, r8, r0, lsl #16
    3624:	00910073 	addseq	r0, r1, r3, ror r0
    3628:	9f3f231c 	svcls	0x003f231c
    362c:	08002e66 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, fp, sp}
    3630:	08002e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, sp}
    3634:	00730008 	rsbseq	r0, r3, r8
    3638:	231c0091 	tstcs	ip, #145	; 0x91
    363c:	00009f40 	andeq	r9, r0, r0, asr #30
    3640:	00000000 	andeq	r0, r0, r0
    3644:	2df80000 	ldclcs	0, cr0, [r8]
    3648:	2dfc0800 	ldclcs	8, cr0, [ip]
    364c:	00020800 	andeq	r0, r2, r0, lsl #16
    3650:	2dfc9f30 	ldclcs	15, cr9, [ip, #192]!	; 0xc0
    3654:	2e0a0800 	cdpcs	8, 0, cr0, cr10, cr0, {0}
    3658:	00010800 	andeq	r0, r1, r0, lsl #16
    365c:	002e0a52 	eoreq	r0, lr, r2, asr sl
    3660:	002e1008 	eoreq	r1, lr, r8
    3664:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3668:	2e109f7f 	mrccs	15, 0, r9, cr0, cr15, {3}
    366c:	2e160800 	cdpcs	8, 1, cr0, cr6, cr0, {0}
    3670:	00010800 	andeq	r0, r1, r0, lsl #16
    3674:	002e1652 	eoreq	r1, lr, r2, asr r6
    3678:	002e2208 	eoreq	r2, lr, r8, lsl #4
    367c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3680:	2e229f01 	cdpcs	15, 2, cr9, cr2, cr1, {0}
    3684:	2e2a0800 	cdpcs	8, 2, cr0, cr10, cr0, {0}
    3688:	00090800 	andeq	r0, r9, r0, lsl #16
    368c:	00910072 	addseq	r0, r1, r2, ror r0
    3690:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3694:	002e2a9f 	mlaeq	lr, pc, sl, r2	; <UNPREDICTABLE>
    3698:	002e3408 	eoreq	r3, lr, r8, lsl #8
    369c:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    36a0:	1c009100 	stfned	f1, [r0], {-0}
    36a4:	9f01a023 	svcls	0x0001a023
    36a8:	08002e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, sp}
    36ac:	08002e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp, sp}
    36b0:	00720009 	rsbseq	r0, r2, r9
    36b4:	231c0091 	tstcs	ip, #145	; 0x91
    36b8:	009f01a1 	addseq	r0, pc, r1, lsr #3
    36bc:	00000000 	andeq	r0, r0, r0
    36c0:	72000000 	andvc	r0, r0, #0
    36c4:	be08002e 	cdplt	0, 0, cr0, cr8, cr14, {1}
    36c8:	0108002e 	tsteq	r8, lr, lsr #32
    36cc:	2eca5300 	cdpcs	3, 12, cr5, cr10, cr0, {0}
    36d0:	2eea0800 	cdpcs	8, 14, cr0, cr10, cr0, {0}
    36d4:	00010800 	andeq	r0, r1, r0, lsl #16
    36d8:	00000052 	andeq	r0, r0, r2, asr r0
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	002e7200 	eoreq	r7, lr, r0, lsl #4
    36e4:	002eca08 	eoreq	ip, lr, r8, lsl #20
    36e8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    36ec:	08002eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp, sp}
    36f0:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
    36f4:	9f300002 	svcls	0x00300002
    36f8:	08002ed0 	stmdaeq	r0, {r4, r6, r7, r9, sl, fp, sp}
    36fc:	08002ed8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, fp, sp}
    3700:	00730009 	rsbseq	r0, r3, r9
    3704:	231c0091 	tstcs	ip, #145	; 0x91
    3708:	d89f01a0 	ldmle	pc, {r5, r7, r8}	; <UNPREDICTABLE>
    370c:	de08002e 	cdple	0, 0, cr0, cr8, cr14, {1}
    3710:	0908002e 	stmdbeq	r8, {r1, r2, r3, r5}
    3714:	91007300 	mrsls	r7, LR_irq
    3718:	9f231c00 	svcls	0x00231c00
    371c:	2ede9f01 	cdpcs	15, 13, cr9, cr14, cr1, {0}
    3720:	2ee40800 	cdpcs	8, 14, cr0, cr4, cr0, {0}
    3724:	00090800 	andeq	r0, r9, r0, lsl #16
    3728:	00910073 	addseq	r0, r1, r3, ror r0
    372c:	01a0231c 	lsleq	r2, ip, r3
    3730:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3734:	00000000 	andeq	r0, r0, r0
    3738:	002e7400 	eoreq	r7, lr, r0, lsl #8
    373c:	002e7808 	eoreq	r7, lr, r8, lsl #16
    3740:	30000208 	andcc	r0, r0, r8, lsl #4
    3744:	002e789f 	mlaeq	lr, pc, r8, r7	; <UNPREDICTABLE>
    3748:	002e8208 	eoreq	r8, lr, r8, lsl #4
    374c:	52000108 	andpl	r0, r0, #8, 2
    3750:	08002e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, sp}
    3754:	08002e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, sp}
    3758:	7f720003 	svcvc	0x00720003
    375c:	002e889f 	mlaeq	lr, pc, r8, r8	; <UNPREDICTABLE>
    3760:	002e8e08 	eoreq	r8, lr, r8, lsl #28
    3764:	52000108 	andpl	r0, r0, #8, 2
    3768:	08002e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, sp}
    376c:	08002e9a 	stmdaeq	r0, {r1, r3, r4, r7, r9, sl, fp, sp}
    3770:	01720003 	cmneq	r2, r3
    3774:	002e9a9f 	mlaeq	lr, pc, sl, r9	; <UNPREDICTABLE>
    3778:	002ea208 	eoreq	sl, lr, r8, lsl #4
    377c:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    3780:	1c009100 	stfned	f1, [r0], {-0}
    3784:	a29f4123 	addsge	r4, pc, #-1073741816	; 0xc0000008
    3788:	ac08002e 	stcge	0, cr0, [r8], {46}	; 0x2e
    378c:	0808002e 	stmdaeq	r8, {r1, r2, r3, r5}
    3790:	91007200 	mrsls	r7, R8_usr
    3794:	40231c00 	eormi	r1, r3, r0, lsl #24
    3798:	002eac9f 	mlaeq	lr, pc, ip, sl	; <UNPREDICTABLE>
    379c:	002eae08 	eoreq	sl, lr, r8, lsl #28
    37a0:	72000808 	andvc	r0, r0, #8, 16	; 0x80000
    37a4:	1c009100 	stfned	f1, [r0], {-0}
    37a8:	009f4123 	addseq	r4, pc, r3, lsr #2
    37ac:	00000000 	andeq	r0, r0, r0
    37b0:	ea000000 	b	37b8 <__Stack_Size+0x2fb8>
    37b4:	3a08002e 	bcc	203874 <__Stack_Size+0x203074>
    37b8:	0108002f 	tsteq	r8, pc, lsr #32
    37bc:	2f4a5300 	svccs	0x004a5300
    37c0:	2f6a0800 	svccs	0x006a0800
    37c4:	00010800 	andeq	r0, r1, r0, lsl #16
    37c8:	00000052 	andeq	r0, r0, r2, asr r0
    37cc:	00000000 	andeq	r0, r0, r0
    37d0:	002eea00 	eoreq	lr, lr, r0, lsl #20
    37d4:	002f4a08 	eoreq	r4, pc, r8, lsl #20
    37d8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    37dc:	08002f4a 	stmdaeq	r0, {r1, r3, r6, r8, r9, sl, fp, sp}
    37e0:	08002f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, sp}
    37e4:	9f300002 	svcls	0x00300002
    37e8:	08002f50 	stmdaeq	r0, {r4, r6, r8, r9, sl, fp, sp}
    37ec:	08002f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp, sp}
    37f0:	00730008 	rsbseq	r0, r3, r8
    37f4:	231c0091 	tstcs	ip, #145	; 0x91
    37f8:	2f589f40 	svccs	0x00589f40
    37fc:	2f5e0800 	svccs	0x005e0800
    3800:	00080800 	andeq	r0, r8, r0, lsl #16
    3804:	00910073 	addseq	r0, r1, r3, ror r0
    3808:	9f3f231c 	svcls	0x003f231c
    380c:	08002f5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, fp, sp}
    3810:	08002f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, sp}
    3814:	00730008 	rsbseq	r0, r3, r8
    3818:	231c0091 	tstcs	ip, #145	; 0x91
    381c:	00009f40 	andeq	r9, r0, r0, asr #30
    3820:	00000000 	andeq	r0, r0, r0
    3824:	2eee0000 	cdpcs	0, 14, cr0, cr14, cr0, {0}
    3828:	2ef20800 	cdpcs	8, 15, cr0, cr2, cr0, {0}
    382c:	00020800 	andeq	r0, r2, r0, lsl #16
    3830:	2ef29f30 	mrccs	15, 7, r9, cr2, cr0, {1}
    3834:	2f000800 	svccs	0x00000800
    3838:	00010800 	andeq	r0, r1, r0, lsl #16
    383c:	002f0052 	eoreq	r0, pc, r2, asr r0	; <UNPREDICTABLE>
    3840:	002f0608 	eoreq	r0, pc, r8, lsl #12
    3844:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3848:	2f069f7f 	svccs	0x00069f7f
    384c:	2f0c0800 	svccs	0x000c0800
    3850:	00010800 	andeq	r0, r1, r0, lsl #16
    3854:	002f0c52 	eoreq	r0, pc, r2, asr ip	; <UNPREDICTABLE>
    3858:	002f1808 	eoreq	r1, pc, r8, lsl #16
    385c:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3860:	2f189f01 	svccs	0x00189f01
    3864:	2f200800 	svccs	0x00200800
    3868:	00090800 	andeq	r0, r9, r0, lsl #16
    386c:	00910072 	addseq	r0, r1, r2, ror r0
    3870:	01a1231c 			; <UNDEFINED> instruction: 0x01a1231c
    3874:	002f209f 	mlaeq	pc, pc, r0, r2	; <UNPREDICTABLE>
    3878:	002f2a08 	eoreq	r2, pc, r8, lsl #20
    387c:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3880:	1c009100 	stfned	f1, [r0], {-0}
    3884:	9f01a023 	svcls	0x0001a023
    3888:	08002f2a 	stmdaeq	r0, {r1, r3, r5, r8, r9, sl, fp, sp}
    388c:	08002f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, sp}
    3890:	00720009 	rsbseq	r0, r2, r9
    3894:	231c0091 	tstcs	ip, #145	; 0x91
    3898:	009f01a1 	addseq	r0, pc, r1, lsr #3
    389c:	00000000 	andeq	r0, r0, r0
    38a0:	6a000000 	bvs	38a8 <__Stack_Size+0x30a8>
    38a4:	b408002f 	strlt	r0, [r8], #-47	; 0x2f
    38a8:	0108002f 	tsteq	r8, pc, lsr #32
    38ac:	2fc05300 	svccs	0x00c05300
    38b0:	2fda0800 	svccs	0x00da0800
    38b4:	00010800 	andeq	r0, r1, r0, lsl #16
    38b8:	00000052 	andeq	r0, r0, r2, asr r0
    38bc:	00000000 	andeq	r0, r0, r0
    38c0:	002f6a00 	eoreq	r6, pc, r0, lsl #20
    38c4:	002fc008 	eoreq	ip, pc, r8
    38c8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    38cc:	08002fc0 	stmdaeq	r0, {r6, r7, r8, r9, sl, fp, sp}
    38d0:	08002fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, sp}
    38d4:	9f300002 	svcls	0x00300002
    38d8:	08002fc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, sl, fp, sp}
    38dc:	08002fce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, fp, sp}
    38e0:	00730009 	rsbseq	r0, r3, r9
    38e4:	231c0091 	tstcs	ip, #145	; 0x91
    38e8:	ce9f0180 	fmlgt<illegal precision>	f0, f7, f0
    38ec:	d408002f 	strle	r0, [r8], #-47	; 0x2f
    38f0:	0808002f 	stmdaeq	r8, {r0, r1, r2, r3, r5}
    38f4:	91007300 	mrsls	r7, LR_irq
    38f8:	7f231c00 	svcvc	0x00231c00
    38fc:	002fd49f 	mlaeq	pc, pc, r4, sp	; <UNPREDICTABLE>
    3900:	002fd808 	eoreq	sp, pc, r8, lsl #16
    3904:	73000908 	movwvc	r0, #2312	; 0x908
    3908:	1c009100 	stfned	f1, [r0], {-0}
    390c:	9f018023 	svcls	0x00018023
	...
    3918:	08002f6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, fp, sp}
    391c:	08002f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, sp}
    3920:	9f300002 	svcls	0x00300002
    3924:	08002f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, sp}
    3928:	08002f7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, sl, fp, sp}
    392c:	7a520001 	bvc	1483938 <__Stack_Size+0x1483138>
    3930:	8008002f 	andhi	r0, r8, pc, lsr #32
    3934:	0308002f 	movweq	r0, #32815	; 0x802f
    3938:	9f7f7200 	svcls	0x007f7200
    393c:	08002f80 	stmdaeq	r0, {r7, r8, r9, sl, fp, sp}
    3940:	08002f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, sp}
    3944:	86520001 	ldrbhi	r0, [r2], -r1
    3948:	9208002f 	andls	r0, r8, #47	; 0x2f
    394c:	0308002f 	movweq	r0, #32815	; 0x802f
    3950:	9f017200 	svcls	0x00017200
    3954:	08002f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp, sp}
    3958:	08002f9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, fp, sp}
    395c:	00720008 	rsbseq	r0, r2, r8
    3960:	231c0091 	tstcs	ip, #145	; 0x91
    3964:	2f9a9f61 	svccs	0x009a9f61
    3968:	2fa40800 	svccs	0x00a40800
    396c:	00080800 	andeq	r0, r8, r0, lsl #16
    3970:	00910072 	addseq	r0, r1, r2, ror r0
    3974:	9f60231c 	svcls	0x0060231c
    3978:	08002fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, sp}
    397c:	08002fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp, sp}
    3980:	00720008 	rsbseq	r0, r2, r8
    3984:	231c0091 	tstcs	ip, #145	; 0x91
    3988:	00009f61 	andeq	r9, r0, r1, ror #30
    398c:	00000000 	andeq	r0, r0, r0
    3990:	2fd60000 	svccs	0x00d60000
    3994:	2fdc0800 	svccs	0x00dc0800
    3998:	00020800 	andeq	r0, r2, r0, lsl #16
    399c:	2fdc9f33 	svccs	0x00dc9f33
    39a0:	31340800 	teqcc	r4, r0, lsl #16
    39a4:	00020800 	andeq	r0, r2, r0, lsl #16
    39a8:	00009f34 	andeq	r9, r0, r4, lsr pc
    39ac:	00000000 	andeq	r0, r0, r0
    39b0:	2fec0000 	svccs	0x00ec0000
    39b4:	30120800 	andscc	r0, r2, r0, lsl #16
    39b8:	00010800 	andeq	r0, r1, r0, lsl #16
    39bc:	00301252 	eorseq	r1, r0, r2, asr r2
    39c0:	00301c08 	eorseq	r1, r0, r8, lsl #24
    39c4:	51000108 	tstpl	r0, r8, lsl #2
    39c8:	08003024 	stmdaeq	r0, {r2, r5, ip, sp}
    39cc:	08003042 	stmdaeq	r0, {r1, r6, ip, sp}
    39d0:	00520001 	subseq	r0, r2, r1
    39d4:	00000000 	andeq	r0, r0, r0
    39d8:	ec000000 	stc	0, cr0, [r0], {-0}
    39dc:	fc08002f 	stc2	0, cr0, [r8], {47}	; 0x2f
    39e0:	0108002f 	tsteq	r8, pc, lsr #32
    39e4:	2ffc5300 	svccs	0x00fc5300
    39e8:	30020800 	andcc	r0, r2, r0, lsl #16
    39ec:	00030800 	andeq	r0, r3, r0, lsl #16
    39f0:	029f7f73 	addseq	r7, pc, #460	; 0x1cc
    39f4:	0e080030 	mcreq	0, 0, r0, cr8, cr0, {1}
    39f8:	01080030 	tsteq	r8, r0, lsr r0
    39fc:	30245300 	eorcc	r5, r4, r0, lsl #6
    3a00:	302c0800 	eorcc	r0, ip, r0, lsl #16
    3a04:	00090800 	andeq	r0, r9, r0, lsl #16
    3a08:	00910073 	addseq	r0, r1, r3, ror r0
    3a0c:	0180231c 	orreq	r2, r0, ip, lsl r3
    3a10:	00302c9f 	mlaseq	r0, pc, ip, r2	; <UNPREDICTABLE>
    3a14:	00303208 	eorseq	r3, r0, r8, lsl #4
    3a18:	73000808 	movwvc	r0, #2056	; 0x808
    3a1c:	1c009100 	stfned	f1, [r0], {-0}
    3a20:	329f7f23 	addscc	r7, pc, #35, 30	; 0x8c
    3a24:	3c080030 	stccc	0, cr0, [r8], {48}	; 0x30
    3a28:	09080030 	stmdbeq	r8, {r4, r5}
    3a2c:	91007300 	mrsls	r7, LR_irq
    3a30:	80231c00 	eorhi	r1, r3, r0, lsl #24
    3a34:	00009f01 	andeq	r9, r0, r1, lsl #30
    3a38:	00000000 	andeq	r0, r0, r0
    3a3c:	30420000 	subcc	r0, r2, r0
    3a40:	30920800 	addscc	r0, r2, r0, lsl #16
    3a44:	00010800 	andeq	r0, r1, r0, lsl #16
    3a48:	00309e53 	eorseq	r9, r0, r3, asr lr
    3a4c:	0030c008 	eorseq	ip, r0, r8
    3a50:	52000108 	andpl	r0, r0, #8, 2
	...
    3a5c:	08003042 	stmdaeq	r0, {r1, r6, ip, sp}
    3a60:	0800309e 	stmdaeq	r0, {r1, r2, r3, r4, r7, ip, sp}
    3a64:	9e540001 	cdpls	0, 5, cr0, cr4, cr1, {0}
    3a68:	a4080030 	strge	r0, [r8], #-48	; 0x30
    3a6c:	02080030 	andeq	r0, r8, #48	; 0x30
    3a70:	a49f3000 	ldrge	r3, [pc], #0	; 3a78 <__Stack_Size+0x3278>
    3a74:	ac080030 	stcge	0, cr0, [r8], {48}	; 0x30
    3a78:	08080030 	stmdaeq	r8, {r4, r5}
    3a7c:	91007300 	mrsls	r7, LR_irq
    3a80:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3a84:	0030ac9f 	mlaseq	r0, pc, ip, sl	; <UNPREDICTABLE>
    3a88:	0030b208 	eorseq	fp, r0, r8, lsl #4
    3a8c:	73000808 	movwvc	r0, #2056	; 0x808
    3a90:	1c009100 	stfned	f1, [r0], {-0}
    3a94:	b29f5f23 	addslt	r5, pc, #35, 30	; 0x8c
    3a98:	b8080030 	stmdalt	r8, {r4, r5}
    3a9c:	08080030 	stmdaeq	r8, {r4, r5}
    3aa0:	91007300 	mrsls	r7, LR_irq
    3aa4:	60231c00 	eorvs	r1, r3, r0, lsl #24
    3aa8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3aac:	00000000 	andeq	r0, r0, r0
    3ab0:	00304400 	eorseq	r4, r0, r0, lsl #8
    3ab4:	00304a08 	eorseq	r4, r0, r8, lsl #20
    3ab8:	30000208 	andcc	r0, r0, r8, lsl #4
    3abc:	00304a9f 	mlaseq	r0, pc, sl, r4	; <UNPREDICTABLE>
    3ac0:	00305808 	eorseq	r5, r0, r8, lsl #16
    3ac4:	52000108 	andpl	r0, r0, #8, 2
    3ac8:	08003058 	stmdaeq	r0, {r3, r4, r6, ip, sp}
    3acc:	0800305e 	stmdaeq	r0, {r1, r2, r3, r4, r6, ip, sp}
    3ad0:	7f720003 	svcvc	0x00720003
    3ad4:	00305e9f 	mlaseq	r0, pc, lr, r5	; <UNPREDICTABLE>
    3ad8:	00306408 	eorseq	r6, r0, r8, lsl #8
    3adc:	52000108 	andpl	r0, r0, #8, 2
    3ae0:	08003064 	stmdaeq	r0, {r2, r5, r6, ip, sp}
    3ae4:	08003070 	stmdaeq	r0, {r4, r5, r6, ip, sp}
    3ae8:	01720003 	cmneq	r2, r3
    3aec:	0030709f 	mlaseq	r0, pc, r0, r7	; <UNPREDICTABLE>
    3af0:	00307808 	eorseq	r7, r0, r8, lsl #16
    3af4:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    3af8:	1c009100 	stfned	f1, [r0], {-0}
    3afc:	9f01a123 	svcls	0x0001a123
    3b00:	08003078 	stmdaeq	r0, {r3, r4, r5, r6, ip, sp}
    3b04:	08003082 	stmdaeq	r0, {r1, r7, ip, sp}
    3b08:	00720009 	rsbseq	r0, r2, r9
    3b0c:	231c0091 	tstcs	ip, #145	; 0x91
    3b10:	829f01a0 	addshi	r0, pc, #160, 2	; 0x28
    3b14:	84080030 	strhi	r0, [r8], #-48	; 0x30
    3b18:	09080030 	stmdbeq	r8, {r4, r5}
    3b1c:	91007200 	mrsls	r7, R8_usr
    3b20:	a1231c00 	teqge	r3, r0, lsl #24
    3b24:	00009f01 	andeq	r9, r0, r1, lsl #30
    3b28:	00000000 	andeq	r0, r0, r0
    3b2c:	30c00000 	sbccc	r0, r0, r0
    3b30:	31060800 	tstcc	r6, r0, lsl #16
    3b34:	00010800 	andeq	r0, r1, r0, lsl #16
    3b38:	00311053 	eorseq	r1, r1, r3, asr r0
    3b3c:	00313408 	eorseq	r3, r1, r8, lsl #8
    3b40:	52000108 	andpl	r0, r0, #8, 2
	...
    3b4c:	080030c0 	stmdaeq	r0, {r6, r7, ip, sp}
    3b50:	08003110 	stmdaeq	r0, {r4, r8, ip, sp}
    3b54:	10500001 	subsne	r0, r0, r1
    3b58:	1c080031 	stcne	0, cr0, [r8], {49}	; 0x31
    3b5c:	02080031 	andeq	r0, r8, #49	; 0x31
    3b60:	1c9f3000 	ldcne	0, cr3, [pc], {0}
    3b64:	24080031 	strcs	r0, [r8], #-49	; 0x31
    3b68:	01080031 	tsteq	r8, r1, lsr r0
    3b6c:	31245300 	teqcc	r4, r0, lsl #6
    3b70:	312a0800 	teqcc	sl, r0, lsl #16
    3b74:	00030800 	andeq	r0, r3, r0, lsl #16
    3b78:	2a9f7f73 	bcs	fe7e394c <BootRAM+0xd7540ed>
    3b7c:	34080031 	strcc	r0, [r8], #-49	; 0x31
    3b80:	01080031 	tsteq	r8, r1, lsr r0
    3b84:	00005300 	andeq	r5, r0, r0, lsl #6
    3b88:	00000000 	andeq	r0, r0, r0
    3b8c:	30c20000 	sbccc	r0, r2, r0
    3b90:	30c60800 	sbccc	r0, r6, r0, lsl #16
    3b94:	00020800 	andeq	r0, r2, r0, lsl #16
    3b98:	30c69f30 	sbccc	r9, r6, r0, lsr pc
    3b9c:	30ce0800 	sbccc	r0, lr, r0, lsl #16
    3ba0:	00010800 	andeq	r0, r1, r0, lsl #16
    3ba4:	0030ce52 	eorseq	ip, r0, r2, asr lr
    3ba8:	0030d408 	eorseq	sp, r0, r8, lsl #8
    3bac:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3bb0:	30d49f7f 	sbcscc	r9, r4, pc, ror pc
    3bb4:	30da0800 	sbcscc	r0, sl, r0, lsl #16
    3bb8:	00010800 	andeq	r0, r1, r0, lsl #16
    3bbc:	0030da52 	eorseq	sp, r0, r2, asr sl
    3bc0:	0030e608 	eorseq	lr, r0, r8, lsl #12
    3bc4:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3bc8:	30e69f01 	rsccc	r9, r6, r1, lsl #30
    3bcc:	30ee0800 	rsccc	r0, lr, r0, lsl #16
    3bd0:	00080800 	andeq	r0, r8, r0, lsl #16
    3bd4:	00910072 	addseq	r0, r1, r2, ror r0
    3bd8:	9f61231c 	svcls	0x0061231c
    3bdc:	080030ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, ip, sp}
    3be0:	080030f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, ip, sp}
    3be4:	00720008 	rsbseq	r0, r2, r8
    3be8:	231c0091 	tstcs	ip, #145	; 0x91
    3bec:	30f89f60 	rscscc	r9, r8, r0, ror #30
    3bf0:	30fa0800 	rscscc	r0, sl, r0, lsl #16
    3bf4:	00080800 	andeq	r0, r8, r0, lsl #16
    3bf8:	00910072 	addseq	r0, r1, r2, ror r0
    3bfc:	9f61231c 	svcls	0x0061231c
	...
    3c10:	00500001 	subseq	r0, r0, r1
    3c14:	00000000 	andeq	r0, r0, r0
    3c18:	03000000 	movweq	r0, #0
    3c1c:	9f7c7000 	svcls	0x007c7000
	...
    3c28:	01f30004 	mvnseq	r0, r4
    3c2c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3c3c:	00010000 	andeq	r0, r1, r0
    3c40:	00000051 	andeq	r0, r0, r1, asr r0
    3c44:	00000000 	andeq	r0, r0, r0
    3c48:	52000100 	andpl	r0, r0, #0, 2
	...
    3c54:	00720005 	rsbseq	r0, r2, r5
    3c58:	009f2538 	addseq	r2, pc, r8, lsr r5	; <UNPREDICTABLE>
    3c5c:	00000000 	andeq	r0, r0, r0
    3c60:	07000000 	streq	r0, [r0, -r0]
    3c64:	38007200 	stmdacc	r0, {r9, ip, sp, lr}
    3c68:	9f253825 	svcls	0x00253825
	...
    3c74:	01f3000a 	mvnseq	r0, sl
    3c78:	38254051 	stmdacc	r5!, {r0, r4, r6, lr}
    3c7c:	9f253825 	svcls	0x00253825
	...
    3c90:	9f300002 	svcls	0x00300002
	...
    3c9c:	9f320002 	svcls	0x00320002
	...
    3ca8:	9f330002 	svcls	0x00330002
	...
    3cb4:	9f340002 	svcls	0x00340002
	...
    3cc0:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
    3cc4:	08003172 	stmdaeq	r0, {r1, r4, r5, r6, r8, ip, sp}
    3cc8:	72500001 	subsvc	r0, r0, #1
    3ccc:	b4080031 	strlt	r0, [r8], #-49	; 0x31
    3cd0:	01080032 	tsteq	r8, r2, lsr r0
    3cd4:	32b45400 	adcscc	r5, r4, #0, 8
    3cd8:	32c00800 	sbccc	r0, r0, #0, 16
    3cdc:	00010800 	andeq	r0, r1, r0, lsl #16
    3ce0:	0032c050 	eorseq	ip, r2, r0, asr r0
    3ce4:	0032ce08 	eorseq	ip, r2, r8, lsl #28
    3ce8:	54000108 	strpl	r0, [r0], #-264	; 0x108
    3cec:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
    3cf0:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
    3cf4:	00500001 	subseq	r0, r0, r1
    3cf8:	00000000 	andeq	r0, r0, r0
    3cfc:	34000000 	strcc	r0, [r0], #-0
    3d00:	74080031 	strvc	r0, [r8], #-49	; 0x31
    3d04:	01080031 	tsteq	r8, r1, lsr r0
    3d08:	31745100 	cmncc	r4, r0, lsl #2
    3d0c:	32b40800 	adcscc	r0, r4, #0, 16
    3d10:	00010800 	andeq	r0, r1, r0, lsl #16
    3d14:	0032b457 	eorseq	fp, r2, r7, asr r4
    3d18:	0032c008 	eorseq	ip, r2, r8
    3d1c:	51000108 	tstpl	r0, r8, lsl #2
    3d20:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
    3d24:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
    3d28:	ce570001 	cdpgt	0, 5, cr0, cr7, cr1, {0}
    3d2c:	d4080032 	strle	r0, [r8], #-50	; 0x32
    3d30:	01080032 	tsteq	r8, r2, lsr r0
    3d34:	00005100 	andeq	r5, r0, r0, lsl #2
    3d38:	00000000 	andeq	r0, r0, r0
    3d3c:	31340000 	teqcc	r4, r0
    3d40:	31440800 	cmpcc	r4, r0, lsl #16
    3d44:	00010800 	andeq	r0, r1, r0, lsl #16
    3d48:	00314452 	eorseq	r4, r1, r2, asr r4
    3d4c:	00322c08 	eorseq	r2, r2, r8, lsl #24
    3d50:	59000108 	stmdbpl	r0, {r3, r8}
    3d54:	0800322c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp}
    3d58:	08003240 	stmdaeq	r0, {r6, r9, ip, sp}
    3d5c:	01790003 	cmneq	r9, r3
    3d60:	0032409f 	mlaseq	r2, pc, r0, r4	; <UNPREDICTABLE>
    3d64:	0032b408 	eorseq	fp, r2, r8, lsl #8
    3d68:	f3000408 	vshl.u8	d0, d8, d0
    3d6c:	b49f5201 	ldrlt	r5, [pc], #513	; 3d74 <__Stack_Size+0x3574>
    3d70:	d4080032 	strle	r0, [r8], #-50	; 0x32
    3d74:	01080032 	tsteq	r8, r2, lsr r0
    3d78:	00005900 	andeq	r5, r0, r0, lsl #18
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	31340000 	teqcc	r4, r0
    3d84:	31460800 	cmpcc	r6, r0, lsl #16
    3d88:	00010800 	andeq	r0, r1, r0, lsl #16
    3d8c:	00314653 	eorseq	r4, r1, r3, asr r6
    3d90:	0031ca08 	eorseq	ip, r1, r8, lsl #20
    3d94:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    3d98:	080031ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, ip, sp}
    3d9c:	0800320e 	stmdaeq	r0, {r1, r2, r3, r9, ip, sp}
    3da0:	b4910003 	ldrlt	r0, [r1], #3
    3da4:	00320e7f 	eorseq	r0, r2, pc, ror lr
    3da8:	0032b408 	eorseq	fp, r2, r8, lsl #8
    3dac:	f3000408 	vshl.u8	d0, d8, d0
    3db0:	b49f5301 	ldrlt	r5, [pc], #769	; 3db8 <__Stack_Size+0x35b8>
    3db4:	d4080032 	strle	r0, [r8], #-50	; 0x32
    3db8:	01080032 	tsteq	r8, r2, lsr r0
    3dbc:	00005500 	andeq	r5, r0, r0, lsl #10
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	31700000 	cmncc	r0, r0
    3dc8:	32300800 	eorscc	r0, r0, #0, 16
    3dcc:	00010800 	andeq	r0, r1, r0, lsl #16
    3dd0:	0032c058 	eorseq	ip, r2, r8, asr r0
    3dd4:	0032ce08 	eorseq	ip, r2, r8, lsl #28
    3dd8:	58000108 	stmdapl	r0, {r3, r8}
	...
    3de4:	08003186 	stmdaeq	r0, {r1, r2, r7, r8, ip, sp}
    3de8:	08003238 	stmdaeq	r0, {r3, r4, r5, r9, ip, sp}
    3dec:	c0560001 	subsgt	r0, r6, r1
    3df0:	ce080032 	mcrgt	0, 0, r0, cr8, cr2, {1}
    3df4:	01080032 	tsteq	r8, r2, lsr r0
    3df8:	00005600 	andeq	r5, r0, r0, lsl #12
    3dfc:	00000000 	andeq	r0, r0, r0
    3e00:	31860000 	orrcc	r0, r6, r0
    3e04:	32440800 	subcc	r0, r4, #0, 16
    3e08:	00010800 	andeq	r0, r1, r0, lsl #16
    3e0c:	0032445a 	eorseq	r4, r2, sl, asr r4
    3e10:	00324608 	eorseq	r4, r2, r8, lsl #12
    3e14:	7a000308 	bvc	4a3c <__Stack_Size+0x423c>
    3e18:	32c09f01 	sbccc	r9, r0, #1, 30
    3e1c:	32ce0800 	sbccc	r0, lr, #0, 16
    3e20:	00010800 	andeq	r0, r1, r0, lsl #16
    3e24:	0000005a 	andeq	r0, r0, sl, asr r0
    3e28:	00000000 	andeq	r0, r0, r0
    3e2c:	00318600 	eorseq	r8, r1, r0, lsl #12
    3e30:	0031ca08 	eorseq	ip, r1, r8, lsl #20
    3e34:	30000208 	andcc	r0, r0, r8, lsl #4
    3e38:	0031de9f 	mlaseq	r1, pc, lr, sp	; <UNPREDICTABLE>
    3e3c:	0031ea08 	eorseq	lr, r1, r8, lsl #20
    3e40:	5b000108 	blpl	4268 <__Stack_Size+0x3a68>
    3e44:	080031ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, ip, sp}
    3e48:	08003200 	stmdaeq	r0, {r9, ip, sp}
    3e4c:	00530001 	subseq	r0, r3, r1
    3e50:	0e080032 	mcreq	0, 0, r0, cr8, cr2, {1}
    3e54:	09080032 	stmdbeq	r8, {r1, r4, r5}
    3e58:	32007800 	andcc	r7, r0, #0, 16
    3e5c:	23243225 	teqcs	r4, #1342177282	; 0x50000002
    3e60:	32409f02 	subcc	r9, r0, #2, 30
    3e64:	32440800 	subcc	r0, r4, #0, 16
    3e68:	00030800 	andeq	r0, r3, r0, lsl #16
    3e6c:	449f7f7a 	ldrmi	r7, [pc], #3962	; 3e74 <__Stack_Size+0x3674>
    3e70:	ac080032 	stcge	0, cr0, [r8], {50}	; 0x32
    3e74:	01080032 	tsteq	r8, r2, lsr r0
    3e78:	32ac5a00 	adccc	r5, ip, #0, 20
    3e7c:	32ae0800 	adccc	r0, lr, #0, 16
    3e80:	00030800 	andeq	r0, r3, r0, lsl #16
    3e84:	c09f017a 	addsgt	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    3e88:	c2080032 	andgt	r0, r8, #50	; 0x32
    3e8c:	02080032 	andeq	r0, r8, #50	; 0x32
    3e90:	c29f3000 	addsgt	r3, pc, #0
    3e94:	ce080032 	mcrgt	0, 0, r0, cr8, cr2, {1}
    3e98:	01080032 	tsteq	r8, r2, lsr r0
    3e9c:	00005200 	andeq	r5, r0, r0, lsl #4
    3ea0:	00000000 	andeq	r0, r0, r0
    3ea4:	31420000 	mrscc	r0, (UNDEF: 66)
    3ea8:	31460800 	cmpcc	r6, r0, lsl #16
    3eac:	00010800 	andeq	r0, r1, r0, lsl #16
    3eb0:	00314653 	eorseq	r4, r1, r3, asr r6
    3eb4:	0031ca08 	eorseq	ip, r1, r8, lsl #20
    3eb8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    3ebc:	080031ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, ip, sp}
    3ec0:	0800320e 	stmdaeq	r0, {r1, r2, r3, r9, ip, sp}
    3ec4:	b4910003 	ldrlt	r0, [r1], #3
    3ec8:	00320e7f 	eorseq	r0, r2, pc, ror lr
    3ecc:	0032b408 	eorseq	fp, r2, r8, lsl #8
    3ed0:	f3000408 	vshl.u8	d0, d8, d0
    3ed4:	b49f5301 	ldrlt	r5, [pc], #769	; 3edc <__Stack_Size+0x36dc>
    3ed8:	d4080032 	strle	r0, [r8], #-50	; 0x32
    3edc:	01080032 	tsteq	r8, r2, lsr r0
    3ee0:	00005500 	andeq	r5, r0, r0, lsl #10
    3ee4:	00000000 	andeq	r0, r0, r0
    3ee8:	31420000 	mrscc	r0, (UNDEF: 66)
    3eec:	31460800 	cmpcc	r6, r0, lsl #16
    3ef0:	00020800 	andeq	r0, r2, r0, lsl #16
    3ef4:	31469f4f 	cmpcc	r6, pc, asr #30
    3ef8:	314a0800 	cmpcc	sl, r0, lsl #16
    3efc:	00010800 	andeq	r0, r1, r0, lsl #16
    3f00:	00314a52 	eorseq	r4, r1, r2, asr sl
    3f04:	00314e08 	eorseq	r4, r1, r8, lsl #28
    3f08:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3f0c:	314e9f01 	cmpcc	lr, r1, lsl #30
    3f10:	31600800 	cmncc	r0, r0, lsl #16
    3f14:	00010800 	andeq	r0, r1, r0, lsl #16
    3f18:	0032b452 	eorseq	fp, r2, r2, asr r4
    3f1c:	0032b808 	eorseq	fp, r2, r8, lsl #16
    3f20:	72000308 	andvc	r0, r0, #8, 6	; 0x20000000
    3f24:	32b89f01 	adcscc	r9, r8, #1, 30
    3f28:	32c00800 	sbccc	r0, r0, #0, 16
    3f2c:	00030800 	andeq	r0, r3, r0, lsl #16
    3f30:	ce9ff809 	cdpgt	8, 9, cr15, cr15, cr9, {0}
    3f34:	d4080032 	strle	r0, [r8], #-50	; 0x32
    3f38:	03080032 	movweq	r0, #32818	; 0x8032
    3f3c:	9ff80900 	svcls	0x00f80900
	...
    3f48:	08003154 	stmdaeq	r0, {r2, r4, r6, r8, ip, sp}
    3f4c:	08003156 	stmdaeq	r0, {r1, r2, r4, r6, r8, ip, sp}
    3f50:	00750005 	rsbseq	r0, r5, r5
    3f54:	56220072 			; <UNDEFINED> instruction: 0x56220072
    3f58:	58080031 	stmdapl	r8, {r0, r4, r5}
    3f5c:	05080031 	streq	r0, [r8, #-49]	; 0x31
    3f60:	31007300 	mrscc	r7, LR_irq
    3f64:	32b89f25 	adcscc	r9, r8, #37, 30	; 0x94
    3f68:	32c00800 	sbccc	r0, r0, #0, 16
    3f6c:	00020800 	andeq	r0, r2, r0, lsl #16
    3f70:	32ce7f75 	sbccc	r7, lr, #468	; 0x1d4
    3f74:	32d40800 	sbcscc	r0, r4, #0, 16
    3f78:	00020800 	andeq	r0, r2, r0, lsl #16
    3f7c:	00007f75 	andeq	r7, r0, r5, ror pc
    3f80:	00000000 	andeq	r0, r0, r0
    3f84:	31640000 	cmncc	r4, r0
    3f88:	31820800 	orrcc	r0, r2, r0, lsl #16
    3f8c:	00010800 	andeq	r0, r1, r0, lsl #16
    3f90:	0031825a 	eorseq	r8, r1, sl, asr r2
    3f94:	00322c08 	eorseq	r2, r2, r8, lsl #24
    3f98:	79000508 	stmdbvc	r0, {r3, r8, sl}
    3f9c:	9f243300 	svcls	0x00243300
    3fa0:	0800322c 	stmdaeq	r0, {r2, r3, r5, r9, ip, sp}
    3fa4:	08003240 	stmdaeq	r0, {r6, r9, ip, sp}
    3fa8:	01790005 	cmneq	r9, r5
    3fac:	409f2433 	addsmi	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    3fb0:	b4080032 	strlt	r0, [r8], #-50	; 0x32
    3fb4:	06080032 			; <UNDEFINED> instruction: 0x06080032
    3fb8:	5201f300 	andpl	pc, r1, #0, 6
    3fbc:	c09f2433 	addsgt	r2, pc, r3, lsr r4	; <UNPREDICTABLE>
    3fc0:	ce080032 	mcrgt	0, 0, r0, cr8, cr2, {1}
    3fc4:	05080032 	streq	r0, [r8, #-50]	; 0x32
    3fc8:	33007900 	movwcc	r7, #2304	; 0x900
    3fcc:	00009f24 	andeq	r9, r0, r4, lsr #30
    3fd0:	00000000 	andeq	r0, r0, r0
    3fd4:	31640000 	cmncc	r4, r0
    3fd8:	31760800 	cmncc	r6, r0, lsl #16
    3fdc:	00010800 	andeq	r0, r1, r0, lsl #16
    3fe0:	00000052 	andeq	r0, r0, r2, asr r0
    3fe4:	00000000 	andeq	r0, r0, r0
    3fe8:	00321400 	eorseq	r1, r2, r0, lsl #8
    3fec:	00321a08 	eorseq	r1, r2, r8, lsl #20
    3ff0:	52000108 	andpl	r0, r0, #8, 2
    3ff4:	0800321c 	stmdaeq	r0, {r2, r3, r4, r9, ip, sp}
    3ff8:	08003234 	stmdaeq	r0, {r2, r4, r5, r9, ip, sp}
    3ffc:	00520001 	subseq	r0, r2, r1
    4000:	00000000 	andeq	r0, r0, r0
    4004:	14000000 	strne	r0, [r0], #-0
    4008:	20080032 	andcs	r0, r8, r2, lsr r0
    400c:	01080032 	tsteq	r8, r2, lsr r0
    4010:	32205300 	eorcc	r5, r0, #0, 6
    4014:	32260800 	eorcc	r0, r6, #0, 16
    4018:	00030800 	andeq	r0, r3, r0, lsl #16
    401c:	269f7f73 			; <UNDEFINED> instruction: 0x269f7f73
    4020:	3c080032 	stccc	0, cr0, [r8], {50}	; 0x32
    4024:	01080032 	tsteq	r8, r2, lsr r0
    4028:	00005300 	andeq	r5, r0, r0, lsl #6
    402c:	00000000 	andeq	r0, r0, r0
    4030:	32580000 	subscc	r0, r8, #0
    4034:	32760800 	rsbscc	r0, r6, #0, 16
    4038:	00010800 	andeq	r0, r1, r0, lsl #16
    403c:	00000050 	andeq	r0, r0, r0, asr r0
    4040:	00000000 	andeq	r0, r0, r0
    4044:	00325800 	eorseq	r5, r2, r0, lsl #16
    4048:	0032ae08 	eorseq	sl, r2, r8, lsl #28
    404c:	31000208 	tstcc	r0, r8, lsl #4
    4050:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4054:	00000000 	andeq	r0, r0, r0
    4058:	00325800 	eorseq	r5, r2, r0, lsl #16
    405c:	00325a08 	eorseq	r5, r2, r8, lsl #20
    4060:	30000208 	andcc	r0, r0, r8, lsl #4
    4064:	00325a9f 	mlaseq	r2, pc, sl, r5	; <UNPREDICTABLE>
    4068:	00327008 	eorseq	r7, r2, r8
    406c:	52000108 	andpl	r0, r0, #8, 2
	...
    4078:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
    407c:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    4080:	9f300002 	svcls	0x00300002
    4084:	0800325a 	stmdaeq	r0, {r1, r3, r4, r6, r9, ip, sp}
    4088:	08003264 	stmdaeq	r0, {r2, r5, r6, r9, ip, sp}
    408c:	64530001 	ldrbvs	r0, [r3], #-1
    4090:	6a080032 	bvs	204160 <__Stack_Size+0x203960>
    4094:	03080032 	movweq	r0, #32818	; 0x8032
    4098:	9f7f7300 	svcls	0x007f7300
    409c:	0800326a 	stmdaeq	r0, {r1, r3, r5, r6, r9, ip, sp}
    40a0:	0800326e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip, sp}
    40a4:	00530001 	subseq	r0, r3, r1
    40a8:	00000000 	andeq	r0, r0, r0
    40ac:	74000000 	strvc	r0, [r0], #-0
    40b0:	ae080032 	mcrge	0, 0, r0, cr8, cr2, {1}
    40b4:	01080032 	tsteq	r8, r2, lsr r0
    40b8:	00005400 	andeq	r5, r0, r0, lsl #8
    40bc:	00000000 	andeq	r0, r0, r0
    40c0:	32740000 	rsbscc	r0, r4, #0
    40c4:	32760800 	rsbscc	r0, r6, #0, 16
    40c8:	00020800 	andeq	r0, r2, r0, lsl #16
    40cc:	32769f30 	rsbscc	r9, r6, #48, 30	; 0xc0
    40d0:	327e0800 	rsbscc	r0, lr, #0, 16
    40d4:	00010800 	andeq	r0, r1, r0, lsl #16
    40d8:	00328052 	eorseq	r8, r2, r2, asr r0
    40dc:	00329008 	eorseq	r9, r2, r8
    40e0:	52000108 	andpl	r0, r0, #8, 2
    40e4:	08003290 	stmdaeq	r0, {r4, r7, r9, ip, sp}
    40e8:	08003292 	stmdaeq	r0, {r1, r4, r7, r9, ip, sp}
    40ec:	00720004 	rsbseq	r0, r2, r4
    40f0:	00009f1f 	andeq	r9, r0, pc, lsl pc
    40f4:	00000000 	andeq	r0, r0, r0
    40f8:	32740000 	rsbscc	r0, r4, #0
    40fc:	32760800 	rsbscc	r0, r6, #0, 16
    4100:	00020800 	andeq	r0, r2, r0, lsl #16
    4104:	32769f30 	rsbscc	r9, r6, #48, 30	; 0xc0
    4108:	32860800 	addcc	r0, r6, #0, 16
    410c:	00010800 	andeq	r0, r1, r0, lsl #16
    4110:	00328653 	eorseq	r8, r2, r3, asr r6
    4114:	00328c08 	eorseq	r8, r2, r8, lsl #24
    4118:	73000308 	movwvc	r0, #776	; 0x308
    411c:	328c9f7f 	addcc	r9, ip, #508	; 0x1fc
    4120:	32940800 	addscc	r0, r4, #0, 16
    4124:	00010800 	andeq	r0, r1, r0, lsl #16
    4128:	00000053 	andeq	r0, r0, r3, asr r0
    412c:	00000000 	andeq	r0, r0, r0
    4130:	00328e00 	eorseq	r8, r2, r0, lsl #28
    4134:	00329008 	eorseq	r9, r2, r8
    4138:	52000108 	andpl	r0, r0, #8, 2
    413c:	08003290 	stmdaeq	r0, {r4, r7, r9, ip, sp}
    4140:	08003292 	stmdaeq	r0, {r1, r4, r7, r9, ip, sp}
    4144:	00720004 	rsbseq	r0, r2, r4
    4148:	00009f1f 	andeq	r9, r0, pc, lsl pc
    414c:	00000000 	andeq	r0, r0, r0
    4150:	328e0000 	addcc	r0, lr, #0
    4154:	32ae0800 	adccc	r0, lr, #0, 16
    4158:	00010800 	andeq	r0, r1, r0, lsl #16
    415c:	0000005d 	andeq	r0, r0, sp, asr r0
    4160:	00000000 	andeq	r0, r0, r0
    4164:	00329200 	eorseq	r9, r2, r0, lsl #4
    4168:	0032ae08 	eorseq	sl, r2, r8, lsl #28
    416c:	52000108 	andpl	r0, r0, #8, 2
	...
    4178:	08003292 	stmdaeq	r0, {r1, r4, r7, r9, ip, sp}
    417c:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
    4180:	9f300002 	svcls	0x00300002
    4184:	08003294 	stmdaeq	r0, {r2, r4, r7, r9, ip, sp}
    4188:	080032ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, ip, sp}
    418c:	00530001 	subseq	r0, r3, r1
	...
    419c:	01000000 	mrseq	r0, (UNDEF: 0)
    41a0:	00005000 	andeq	r5, r0, r0
    41a4:	00000000 	andeq	r0, r0, r0
    41a8:	00010000 	andeq	r0, r1, r0
    41ac:	00000051 	andeq	r0, r0, r1, asr r0
    41b0:	00000000 	andeq	r0, r0, r0
    41b4:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    41c8:	00510001 	subseq	r0, r1, r1
    41cc:	00000000 	andeq	r0, r0, r0
    41d0:	01000000 	mrseq	r0, (UNDEF: 0)
    41d4:	00005300 	andeq	r5, r0, r0, lsl #6
    41d8:	00000000 	andeq	r0, r0, r0
    41dc:	00040000 	andeq	r0, r4, r0
    41e0:	9f5101f3 	svcls	0x005101f3
	...
    41f4:	005d0001 	subseq	r0, sp, r1
    41f8:	00000000 	andeq	r0, r0, r0
    41fc:	03000000 	movweq	r0, #0
    4200:	9f607400 	svcls	0x00607400
	...
    4214:	00500001 	subseq	r0, r0, r1
    4218:	00000000 	andeq	r0, r0, r0
    421c:	04000000 	streq	r0, [r0], #-0
    4220:	5001f300 	andpl	pc, r1, r0, lsl #6
    4224:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4228:	00000000 	andeq	r0, r0, r0
    422c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4240:	00510001 	subseq	r0, r1, r1
    4244:	00000000 	andeq	r0, r0, r0
    4248:	04000000 	streq	r0, [r0], #-0
    424c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4250:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4254:	00000000 	andeq	r0, r0, r0
    4258:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    426c:	9f300002 	svcls	0x00300002
	...
    4278:	00520001 	subseq	r0, r2, r1
    427c:	00000000 	andeq	r0, r0, r0
    4280:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4284:	31007200 	mrscc	r7, R8_usr
    4288:	21007225 	tstcs	r0, r5, lsr #4
    428c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4290:	00000000 	andeq	r0, r0, r0
    4294:	30000200 	andcc	r0, r0, r0, lsl #4
    4298:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    429c:	00000000 	andeq	r0, r0, r0
    42a0:	52000100 	andpl	r0, r0, #0, 2
	...
    42b4:	9f300002 	svcls	0x00300002
	...
    42c0:	9f300002 	svcls	0x00300002
	...
    42cc:	00530001 	subseq	r0, r3, r1
    42d0:	00000000 	andeq	r0, r0, r0
    42d4:	03000000 	movweq	r0, #0
    42d8:	9f7f7300 	svcls	0x007f7300
	...
    42e4:	00530001 	subseq	r0, r3, r1
	...
    42f4:	01000000 	mrseq	r0, (UNDEF: 0)
    42f8:	00005100 	andeq	r5, r0, r0, lsl #2
    42fc:	00000000 	andeq	r0, r0, r0
    4300:	00040000 	andeq	r0, r4, r0
    4304:	9f5101f3 	svcls	0x005101f3
	...
    4310:	00510001 	subseq	r0, r1, r1
	...
    4320:	01000000 	mrseq	r0, (UNDEF: 0)
    4324:	00005200 	andeq	r5, r0, r0, lsl #4
    4328:	00000000 	andeq	r0, r0, r0
    432c:	00040000 	andeq	r0, r4, r0
    4330:	9f5201f3 	svcls	0x005201f3
	...
    433c:	00520001 	subseq	r0, r2, r1
	...
    434c:	01000000 	mrseq	r0, (UNDEF: 0)
    4350:	00005300 	andeq	r5, r0, r0, lsl #6
    4354:	00000000 	andeq	r0, r0, r0
    4358:	00040000 	andeq	r0, r4, r0
    435c:	9f5301f3 	svcls	0x005301f3
	...
    4370:	00530001 	subseq	r0, r3, r1
    4374:	00000000 	andeq	r0, r0, r0
    4378:	01000000 	mrseq	r0, (UNDEF: 0)
    437c:	00005600 	andeq	r5, r0, r0, lsl #12
    4380:	00000000 	andeq	r0, r0, r0
    4384:	00010000 	andeq	r0, r1, r0
    4388:	00000056 	andeq	r0, r0, r6, asr r0
	...
    4398:	30000200 	andcc	r0, r0, r0, lsl #4
    439c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43a0:	00000000 	andeq	r0, r0, r0
    43a4:	30000200 	andcc	r0, r0, r0, lsl #4
    43a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	53000100 	movwpl	r0, #256	; 0x100
	...
    43bc:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
    43c0:	080032f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, ip, sp}
    43c4:	f2510001 	vhadd.s16	d16, d1, d1
    43c8:	2c080032 	stccs	0, cr0, [r8], {50}	; 0x32
    43cc:	04080033 	streq	r0, [r8], #-51	; 0x33
    43d0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    43d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    43d8:	00000000 	andeq	r0, r0, r0
    43dc:	0032d400 	eorseq	sp, r2, r0, lsl #8
    43e0:	00331208 	eorseq	r1, r3, r8, lsl #4
    43e4:	52000108 	andpl	r0, r0, #8, 2
    43e8:	08003312 	stmdaeq	r0, {r1, r4, r8, r9, ip, sp}
    43ec:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    43f0:	01f30004 	mvnseq	r0, r4
    43f4:	00009f52 	andeq	r9, r0, r2, asr pc
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	32d80000 	sbcscc	r0, r8, #0
    4400:	32f20800 	rscscc	r0, r2, #0, 16
    4404:	00010800 	andeq	r0, r1, r0, lsl #16
    4408:	0032f251 	eorseq	pc, r2, r1, asr r2	; <UNPREDICTABLE>
    440c:	00332c08 	eorseq	r2, r3, r8, lsl #24
    4410:	f3000408 	vshl.u8	d0, d8, d0
    4414:	009f5101 	addseq	r5, pc, r1, lsl #2
    4418:	00000000 	andeq	r0, r0, r0
    441c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    4420:	dc080032 	stcle	0, cr0, [r8], {50}	; 0x32
    4424:	02080032 	andeq	r0, r8, #50	; 0x32
    4428:	dc9f3000 	ldcle	0, cr3, [pc], {0}
    442c:	f4080032 	vst4.8	{d0-d3}, [r8 :256], r2
    4430:	01080032 	tsteq	r8, r2, lsr r0
    4434:	00005400 	andeq	r5, r0, r0, lsl #8
    4438:	00000000 	andeq	r0, r0, r0
    443c:	32d80000 	sbcscc	r0, r8, #0
    4440:	32dc0800 	sbcscc	r0, ip, #0, 16
    4444:	00020800 	andeq	r0, r2, r0, lsl #16
    4448:	32dc9f30 	sbcscc	r9, ip, #48, 30	; 0xc0
    444c:	32e80800 	rsccc	r0, r8, #0, 16
    4450:	00010800 	andeq	r0, r1, r0, lsl #16
    4454:	0032e853 	eorseq	lr, r2, r3, asr r8
    4458:	0032ee08 	eorseq	lr, r2, r8, lsl #28
    445c:	73000308 	movwvc	r0, #776	; 0x308
    4460:	32ee9f7f 	rsccc	r9, lr, #508	; 0x1fc
    4464:	32f40800 	rscscc	r0, r4, #0, 16
    4468:	00010800 	andeq	r0, r1, r0, lsl #16
    446c:	00000053 	andeq	r0, r0, r3, asr r0
    4470:	00000000 	andeq	r0, r0, r0
    4474:	0032f400 	eorseq	pc, r2, r0, lsl #8
    4478:	0032fc08 	eorseq	pc, r2, r8, lsl #24
    447c:	51000108 	tstpl	r0, r8, lsl #2
    4480:	080032fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, ip, sp}
    4484:	0800330e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip, sp}
    4488:	0e510001 	cdpeq	0, 5, cr0, cr1, cr1, {0}
    448c:	10080033 	andne	r0, r8, r3, lsr r0
    4490:	04080033 	streq	r0, [r8], #-51	; 0x33
    4494:	1f007100 	svcne	0x00007100
    4498:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    449c:	00000000 	andeq	r0, r0, r0
    44a0:	0032f400 	eorseq	pc, r2, r0, lsl #8
    44a4:	00330408 	eorseq	r0, r3, r8, lsl #8
    44a8:	53000108 	movwpl	r0, #264	; 0x108
    44ac:	08003304 	stmdaeq	r0, {r2, r8, r9, ip, sp}
    44b0:	0800330a 	stmdaeq	r0, {r1, r3, r8, r9, ip, sp}
    44b4:	7f730003 	svcvc	0x00730003
    44b8:	00330a9f 	mlaseq	r3, pc, sl, r0	; <UNPREDICTABLE>
    44bc:	00331208 	eorseq	r1, r3, r8, lsl #4
    44c0:	53000108 	movwpl	r0, #264	; 0x108
	...
    44cc:	0800330c 	stmdaeq	r0, {r2, r3, r8, r9, ip, sp}
    44d0:	0800330e 	stmdaeq	r0, {r1, r2, r3, r8, r9, ip, sp}
    44d4:	0e510001 	cdpeq	0, 5, cr0, cr1, cr1, {0}
    44d8:	10080033 	andne	r0, r8, r3, lsr r0
    44dc:	04080033 	streq	r0, [r8], #-51	; 0x33
    44e0:	1f007100 	svcne	0x00007100
    44e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44e8:	00000000 	andeq	r0, r0, r0
    44ec:	00330c00 	eorseq	r0, r3, r0, lsl #24
    44f0:	00332808 	eorseq	r2, r3, r8, lsl #16
    44f4:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    44f8:	08003328 	stmdaeq	r0, {r3, r5, r8, r9, ip, sp}
    44fc:	0800332a 	stmdaeq	r0, {r1, r3, r5, r8, r9, ip, sp}
    4500:	50910003 	addspl	r0, r1, r3
    4504:	00332a9f 	mlaseq	r3, pc, sl, r2	; <UNPREDICTABLE>
    4508:	00332c08 	eorseq	r2, r3, r8, lsl #24
    450c:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    4510:	00009f50 	andeq	r9, r0, r0, asr pc
    4514:	00000000 	andeq	r0, r0, r0
    4518:	33100000 	tstcc	r0, #0
    451c:	33120800 	tstcc	r2, #0, 16
    4520:	00020800 	andeq	r0, r2, r0, lsl #16
    4524:	33129f30 	tstcc	r2, #48, 30	; 0xc0
    4528:	332c0800 	teqcc	ip, #0, 16
    452c:	00010800 	andeq	r0, r1, r0, lsl #16
    4530:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4540:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    454c:	01f30004 	mvnseq	r0, r4
    4550:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4560:	00010000 	andeq	r0, r1, r0
    4564:	00000052 	andeq	r0, r0, r2, asr r0
    4568:	00000000 	andeq	r0, r0, r0
    456c:	f3000400 	vshl.u8	d0, d0, d0
    4570:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    4580:	01000000 	mrseq	r0, (UNDEF: 0)
    4584:	00005200 	andeq	r5, r0, r0, lsl #4
    4588:	00000000 	andeq	r0, r0, r0
    458c:	00040000 	andeq	r0, r4, r0
    4590:	9f5201f3 	svcls	0x005201f3
	...
    45a4:	9f300002 	svcls	0x00300002
	...
    45b0:	00540001 	subseq	r0, r4, r1
	...
    45c0:	02000000 	andeq	r0, r0, #0
    45c4:	009f3000 	addseq	r3, pc, r0
    45c8:	00000000 	andeq	r0, r0, r0
    45cc:	01000000 	mrseq	r0, (UNDEF: 0)
    45d0:	00005300 	andeq	r5, r0, r0, lsl #6
    45d4:	00000000 	andeq	r0, r0, r0
    45d8:	00030000 	andeq	r0, r3, r0
    45dc:	009f7f73 	addseq	r7, pc, r3, ror pc	; <UNPREDICTABLE>
    45e0:	00000000 	andeq	r0, r0, r0
    45e4:	01000000 	mrseq	r0, (UNDEF: 0)
    45e8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    45f8:	00010000 	andeq	r0, r1, r0
    45fc:	00000054 	andeq	r0, r0, r4, asr r0
    4600:	00000000 	andeq	r0, r0, r0
    4604:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4610:	00740004 	rsbseq	r0, r4, r4
    4614:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4624:	00010000 	andeq	r0, r1, r0
    4628:	00000053 	andeq	r0, r0, r3, asr r0
    462c:	00000000 	andeq	r0, r0, r0
    4630:	73000300 	movwvc	r0, #768	; 0x300
    4634:	00009f7f 	andeq	r9, r0, pc, ror pc
    4638:	00000000 	andeq	r0, r0, r0
    463c:	00010000 	andeq	r0, r1, r0
    4640:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4650:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    465c:	00740004 	rsbseq	r0, r4, r4
    4660:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4670:	00010000 	andeq	r0, r1, r0
    4674:	0000005d 	andeq	r0, r0, sp, asr r0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	91000300 	mrsls	r0, LR_irq
    4680:	00009f50 	andeq	r9, r0, r0, asr pc
    4684:	00000000 	andeq	r0, r0, r0
    4688:	00030000 	andeq	r0, r3, r0
    468c:	009f507d 	addseq	r5, pc, sp, ror r0	; <UNPREDICTABLE>
	...
    469c:	01000000 	mrseq	r0, (UNDEF: 0)
    46a0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    46b0:	00020000 	andeq	r0, r2, r0
    46b4:	00009f30 	andeq	r9, r0, r0, lsr pc
    46b8:	00000000 	andeq	r0, r0, r0
    46bc:	00010000 	andeq	r0, r1, r0
    46c0:	00000053 	andeq	r0, r0, r3, asr r0
	...
    46d0:	52000100 	andpl	r0, r0, #0, 2
	...
    46dc:	01f30004 	mvnseq	r0, r4
    46e0:	00009f52 	andeq	r9, r0, r2, asr pc
	...
    46f0:	00020000 	andeq	r0, r2, r0
    46f4:	00009f30 	andeq	r9, r0, r0, lsr pc
    46f8:	00000000 	andeq	r0, r0, r0
    46fc:	00010000 	andeq	r0, r1, r0
    4700:	00000051 	andeq	r0, r0, r1, asr r0
    4704:	00000000 	andeq	r0, r0, r0
    4708:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4714:	00710004 	rsbseq	r0, r1, r4
    4718:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4728:	00020000 	andeq	r0, r2, r0
    472c:	00009f30 	andeq	r9, r0, r0, lsr pc
    4730:	00000000 	andeq	r0, r0, r0
    4734:	00010000 	andeq	r0, r1, r0
    4738:	00000053 	andeq	r0, r0, r3, asr r0
    473c:	00000000 	andeq	r0, r0, r0
    4740:	73000300 	movwvc	r0, #768	; 0x300
    4744:	00009f7f 	andeq	r9, r0, pc, ror pc
    4748:	00000000 	andeq	r0, r0, r0
    474c:	00010000 	andeq	r0, r1, r0
    4750:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4760:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    476c:	00710004 	rsbseq	r0, r1, r4
    4770:	00009f1f 	andeq	r9, r0, pc, lsl pc
	...
    4780:	00010000 	andeq	r0, r1, r0
    4784:	0000005d 	andeq	r0, r0, sp, asr r0
    4788:	00000000 	andeq	r0, r0, r0
    478c:	91000300 	mrsls	r0, LR_irq
    4790:	00009f50 	andeq	r9, r0, r0, asr pc
    4794:	00000000 	andeq	r0, r0, r0
    4798:	00030000 	andeq	r0, r3, r0
    479c:	009f507d 	addseq	r5, pc, sp, ror r0	; <UNPREDICTABLE>
	...
    47ac:	02000000 	andeq	r0, r0, #0
    47b0:	009f3000 	addseq	r3, pc, r0
    47b4:	00000000 	andeq	r0, r0, r0
    47b8:	01000000 	mrseq	r0, (UNDEF: 0)
    47bc:	00005300 	andeq	r5, r0, r0, lsl #6
    47c0:	00000000 	andeq	r0, r0, r0
    47c4:	332c0000 	teqcc	ip, #0
    47c8:	33410800 	movtcc	r0, #6144	; 0x1800
    47cc:	00010800 	andeq	r0, r1, r0, lsl #16
    47d0:	00334150 	eorseq	r4, r3, r0, asr r1
    47d4:	00346a08 	eorseq	r6, r4, r8, lsl #20
    47d8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    47e4:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    47e8:	08003338 	stmdaeq	r0, {r3, r4, r5, r8, r9, ip, sp}
    47ec:	38510001 	ldmdacc	r1, {r0}^
    47f0:	6a080033 	bvs	2048c4 <__Stack_Size+0x2040c4>
    47f4:	01080034 	tsteq	r8, r4, lsr r0
    47f8:	00005800 	andeq	r5, r0, r0, lsl #16
    47fc:	00000000 	andeq	r0, r0, r0
    4800:	332c0000 	teqcc	ip, #0
    4804:	333a0800 	teqcc	sl, #0, 16
    4808:	00010800 	andeq	r0, r1, r0, lsl #16
    480c:	00333a52 	eorseq	r3, r3, r2, asr sl
    4810:	00346a08 	eorseq	r6, r4, r8, lsl #20
    4814:	5a000108 	bpl	4c3c <__Stack_Size+0x443c>
	...
    4820:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
    4824:	08003341 	stmdaeq	r0, {r0, r6, r8, r9, ip, sp}
    4828:	41530001 	cmpmi	r3, r1
    482c:	6a080033 	bvs	204900 <__Stack_Size+0x204100>
    4830:	01080034 	tsteq	r8, r4, lsr r0
    4834:	00005700 	andeq	r5, r0, r0, lsl #14
    4838:	00000000 	andeq	r0, r0, r0
    483c:	335e0000 	cmpcc	lr, #0
    4840:	33620800 	cmncc	r2, #0, 16
    4844:	00030800 	andeq	r0, r3, r0, lsl #16
    4848:	629f7f72 	addsvs	r7, pc, #456	; 0x1c8
    484c:	54080033 	strpl	r0, [r8], #-51	; 0x33
    4850:	01080034 	tsteq	r8, r4, lsr r0
    4854:	34545c00 	ldrbcc	r5, [r4], #-3072	; 0xc00
    4858:	34560800 	ldrbcc	r0, [r6], #-2048	; 0x800
    485c:	00030800 	andeq	r0, r3, r0, lsl #16
    4860:	009f017c 	addseq	r0, pc, ip, ror r1	; <UNPREDICTABLE>
    4864:	00000000 	andeq	r0, r0, r0
    4868:	42000000 	andmi	r0, r0, #0
    486c:	46080033 			; <UNDEFINED> instruction: 0x46080033
    4870:	02080033 	andeq	r0, r8, #51	; 0x33
    4874:	469f4f00 	ldrmi	r4, [pc], r0, lsl #30
    4878:	4a080033 	bmi	20494c <__Stack_Size+0x20414c>
    487c:	01080033 	tsteq	r8, r3, lsr r0
    4880:	334a5200 	movtcc	r5, #41472	; 0xa200
    4884:	334e0800 	movtcc	r0, #59392	; 0xe800
    4888:	00030800 	andeq	r0, r3, r0, lsl #16
    488c:	4e9f0172 	mrcmi	1, 4, r0, cr15, cr2, {3}
    4890:	66080033 			; <UNDEFINED> instruction: 0x66080033
    4894:	01080033 	tsteq	r8, r3, lsr r0
    4898:	345c5200 	ldrbcc	r5, [ip], #-512	; 0x200
    489c:	34600800 	strbtcc	r0, [r0], #-2048	; 0x800
    48a0:	00030800 	andeq	r0, r3, r0, lsl #16
    48a4:	609f0172 	addsvs	r0, pc, r2, ror r1	; <UNPREDICTABLE>
    48a8:	6a080034 	bvs	204980 <__Stack_Size+0x204180>
    48ac:	03080034 	movweq	r0, #32820	; 0x8034
    48b0:	9ff80900 	svcls	0x00f80900
	...
    48bc:	08003354 	stmdaeq	r0, {r2, r4, r6, r8, r9, ip, sp}
    48c0:	08003356 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, ip, sp}
    48c4:	00770005 	rsbseq	r0, r7, r5
    48c8:	56220072 			; <UNDEFINED> instruction: 0x56220072
    48cc:	58080033 	stmdapl	r8, {r0, r1, r4, r5}
    48d0:	05080033 	streq	r0, [r8, #-51]	; 0x33
    48d4:	31007300 	mrscc	r7, LR_irq
    48d8:	34609f25 	strbtcc	r9, [r0], #-3877	; 0xf25
    48dc:	346a0800 	strbtcc	r0, [sl], #-2048	; 0x800
    48e0:	00020800 	andeq	r0, r2, r0, lsl #16
    48e4:	00007f77 	andeq	r7, r0, r7, ror pc
    48e8:	00000000 	andeq	r0, r0, r0
    48ec:	337c0000 	cmncc	ip, #0
    48f0:	34340800 	ldrtcc	r0, [r4], #-2048	; 0x800
    48f4:	00010800 	andeq	r0, r1, r0, lsl #16
    48f8:	00343459 	eorseq	r3, r4, r9, asr r4
    48fc:	00343808 	eorseq	r3, r4, r8, lsl #16
    4900:	79000408 	stmdbvc	r0, {r3, sl}
    4904:	009f1f00 	addseq	r1, pc, r0, lsl #30
    4908:	00000000 	andeq	r0, r0, r0
    490c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4910:	56080033 			; <UNDEFINED> instruction: 0x56080033
    4914:	02080034 	andeq	r0, r8, #52	; 0x34
    4918:	009f3100 	addseq	r3, pc, r0, lsl #2
    491c:	00000000 	andeq	r0, r0, r0
    4920:	7c000000 	stcvc	0, cr0, [r0], {-0}
    4924:	7e080033 	mcrvc	0, 0, r0, cr8, cr3, {1}
    4928:	02080033 	andeq	r0, r8, #51	; 0x33
    492c:	7e9f3000 	cdpvc	0, 9, cr3, cr15, cr0, {0}
    4930:	92080033 	andls	r0, r8, #51	; 0x33
    4934:	01080033 	tsteq	r8, r3, lsr r0
    4938:	00005200 	andeq	r5, r0, r0, lsl #4
    493c:	00000000 	andeq	r0, r0, r0
    4940:	337c0000 	cmncc	ip, #0
    4944:	337e0800 	cmncc	lr, #0, 16
    4948:	00020800 	andeq	r0, r2, r0, lsl #16
    494c:	337e9f30 	cmncc	lr, #48, 30	; 0xc0
    4950:	33880800 	orrcc	r0, r8, #0, 16
    4954:	00010800 	andeq	r0, r1, r0, lsl #16
    4958:	00338853 	eorseq	r8, r3, r3, asr r8
    495c:	00338e08 	eorseq	r8, r3, r8, lsl #28
    4960:	73000308 	movwvc	r0, #776	; 0x308
    4964:	338e9f7f 	orrcc	r9, lr, #508	; 0x1fc
    4968:	33940800 	orrscc	r0, r4, #0, 16
    496c:	00010800 	andeq	r0, r1, r0, lsl #16
    4970:	00000053 	andeq	r0, r0, r3, asr r0
    4974:	00000000 	andeq	r0, r0, r0
    4978:	00339400 	eorseq	r9, r3, r0, lsl #8
    497c:	00339c08 	eorseq	r9, r3, r8, lsl #24
    4980:	52000108 	andpl	r0, r0, #8, 2
    4984:	0800339e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, ip, sp}
    4988:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
    498c:	ac520001 	mrrcge	0, 0, r0, r2, cr1
    4990:	ae080033 	mcrge	0, 0, r0, cr8, cr3, {1}
    4994:	04080033 	streq	r0, [r8], #-51	; 0x33
    4998:	1f007200 	svcne	0x00007200
    499c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49a0:	00000000 	andeq	r0, r0, r0
    49a4:	00339400 	eorseq	r9, r3, r0, lsl #8
    49a8:	0033a208 	eorseq	sl, r3, r8, lsl #4
    49ac:	53000108 	movwpl	r0, #264	; 0x108
    49b0:	080033a2 	stmdaeq	r0, {r1, r5, r7, r8, r9, ip, sp}
    49b4:	080033a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip, sp}
    49b8:	7f730003 	svcvc	0x00730003
    49bc:	0033a89f 	mlaseq	r3, pc, r8, sl	; <UNPREDICTABLE>
    49c0:	0033b008 	eorseq	fp, r3, r8
    49c4:	53000108 	movwpl	r0, #264	; 0x108
	...
    49d0:	080033aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip, sp}
    49d4:	080033ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip, sp}
    49d8:	ac520001 	mrrcge	0, 0, r0, r2, cr1
    49dc:	ae080033 	mcrge	0, 0, r0, cr8, cr3, {1}
    49e0:	04080033 	streq	r0, [r8], #-51	; 0x33
    49e4:	1f007200 	svcne	0x00007200
    49e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    49ec:	00000000 	andeq	r0, r0, r0
    49f0:	0033aa00 	eorseq	sl, r3, r0, lsl #20
    49f4:	00345608 	eorseq	r5, r4, r8, lsl #12
    49f8:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    4a04:	080033ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, ip, sp}
    4a08:	080033c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip, sp}
    4a0c:	00520001 	subseq	r0, r2, r1
    4a10:	00000000 	andeq	r0, r0, r0
    4a14:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    4a18:	b0080033 	andlt	r0, r8, r3, lsr r0
    4a1c:	02080033 	andeq	r0, r8, #51	; 0x33
    4a20:	b09f3000 	addslt	r3, pc, r0
    4a24:	ca080033 	bgt	204af8 <__Stack_Size+0x2042f8>
    4a28:	01080033 	tsteq	r8, r3, lsr r0
    4a2c:	00005300 	andeq	r5, r0, r0, lsl #6
    4a30:	00000000 	andeq	r0, r0, r0
    4a34:	33c20000 	biccc	r0, r2, #0
    4a38:	34560800 	ldrbcc	r0, [r6], #-2048	; 0x800
    4a3c:	00010800 	andeq	r0, r1, r0, lsl #16
    4a40:	00000055 	andeq	r0, r0, r5, asr r0
    4a44:	00000000 	andeq	r0, r0, r0
    4a48:	0033c200 	eorseq	ip, r3, r0, lsl #4
    4a4c:	00345608 	eorseq	r5, r4, r8, lsl #12
    4a50:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
	...
    4a5c:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
    4a60:	08003456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, sp}
    4a64:	005d0001 	subseq	r0, sp, r1
    4a68:	00000000 	andeq	r0, r0, r0
    4a6c:	dc000000 	stcle	0, cr0, [r0], {-0}
    4a70:	de080033 	mcrle	0, 0, r0, cr8, cr3, {1}
    4a74:	02080033 	andeq	r0, r8, #51	; 0x33
    4a78:	de9f3000 	cdple	0, 9, cr3, cr15, cr0, {0}
    4a7c:	ea080033 	b	204b50 <__Stack_Size+0x204350>
    4a80:	01080033 	tsteq	r8, r3, lsr r0
    4a84:	33ea5b00 	mvncc	r5, #0, 22
    4a88:	33f60800 	mvnscc	r0, #0, 16
    4a8c:	00010800 	andeq	r0, r1, r0, lsl #16
    4a90:	0033f653 	eorseq	pc, r3, r3, asr r6	; <UNPREDICTABLE>
    4a94:	00345608 	eorseq	r5, r4, r8, lsl #12
    4a98:	5b000108 	blpl	4ec0 <__Stack_Size+0x46c0>
	...
    4aa4:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
    4aa8:	080033de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, sp}
    4aac:	9f300002 	svcls	0x00300002
    4ab0:	080033de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, ip, sp}
    4ab4:	080033f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, ip, sp}
    4ab8:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
    4abc:	f6080033 			; <UNDEFINED> instruction: 0xf6080033
    4ac0:	03080033 	movweq	r0, #32819	; 0x8033
    4ac4:	9f7f7400 	svcls	0x007f7400
    4ac8:	080033f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, ip, sp}
    4acc:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
    4ad0:	00540001 	subseq	r0, r4, r1
    4ad4:	00000000 	andeq	r0, r0, r0
    4ad8:	fc000000 	stc2	0, cr0, [r0], {-0}
    4adc:	06080033 			; <UNDEFINED> instruction: 0x06080033
    4ae0:	01080034 	tsteq	r8, r4, lsr r0
    4ae4:	34085300 	strcc	r5, [r8], #-768	; 0x300
    4ae8:	34160800 	ldrcc	r0, [r6], #-2048	; 0x800
    4aec:	00010800 	andeq	r0, r1, r0, lsl #16
    4af0:	00341653 	eorseq	r1, r4, r3, asr r6
    4af4:	00341808 	eorseq	r1, r4, r8, lsl #16
    4af8:	73000408 	movwvc	r0, #1032	; 0x408
    4afc:	009f1f00 	addseq	r1, pc, r0, lsl #30
    4b00:	00000000 	andeq	r0, r0, r0
    4b04:	fc000000 	stc2	0, cr0, [r0], {-0}
    4b08:	0c080033 	stceq	0, cr0, [r8], {51}	; 0x33
    4b0c:	01080034 	tsteq	r8, r4, lsr r0
    4b10:	340c5400 	strcc	r5, [ip], #-1024	; 0x400
    4b14:	34120800 	ldrcc	r0, [r2], #-2048	; 0x800
    4b18:	00030800 	andeq	r0, r3, r0, lsl #16
    4b1c:	129f7f74 	addsne	r7, pc, #116, 30	; 0x1d0
    4b20:	56080034 			; <UNDEFINED> instruction: 0x56080034
    4b24:	01080034 	tsteq	r8, r4, lsr r0
    4b28:	00005400 	andeq	r5, r0, r0, lsl #8
    4b2c:	00000000 	andeq	r0, r0, r0
    4b30:	34140000 	ldrcc	r0, [r4], #-0
    4b34:	34160800 	ldrcc	r0, [r6], #-2048	; 0x800
    4b38:	00010800 	andeq	r0, r1, r0, lsl #16
    4b3c:	00341653 	eorseq	r1, r4, r3, asr r6
    4b40:	00341808 	eorseq	r1, r4, r8, lsl #16
    4b44:	73000408 	movwvc	r0, #1032	; 0x408
    4b48:	009f1f00 	addseq	r1, pc, r0, lsl #30
    4b4c:	00000000 	andeq	r0, r0, r0
    4b50:	14000000 	strne	r0, [r0], #-0
    4b54:	56080034 			; <UNDEFINED> instruction: 0x56080034
    4b58:	01080034 	tsteq	r8, r4, lsr r0
    4b5c:	00005d00 	andeq	r5, r0, r0, lsl #26
    4b60:	00000000 	andeq	r0, r0, r0
    4b64:	34140000 	ldrcc	r0, [r4], #-0
    4b68:	34560800 	ldrbcc	r0, [r6], #-2048	; 0x800
    4b6c:	00010800 	andeq	r0, r1, r0, lsl #16
    4b70:	00000056 	andeq	r0, r0, r6, asr r0
    4b74:	00000000 	andeq	r0, r0, r0
    4b78:	00341800 	eorseq	r1, r4, r0, lsl #16
    4b7c:	00343a08 	eorseq	r3, r4, r8, lsl #20
    4b80:	53000108 	movwpl	r0, #264	; 0x108
	...
    4b8c:	08003418 	stmdaeq	r0, {r3, r4, sl, ip, sp}
    4b90:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
    4b94:	9f300002 	svcls	0x00300002
    4b98:	0800341a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp}
    4b9c:	0800343a 	stmdaeq	r0, {r1, r3, r4, r5, sl, ip, sp}
    4ba0:	00520001 	subseq	r0, r2, r1
    4ba4:	00000000 	andeq	r0, r0, r0
    4ba8:	30000000 	andcc	r0, r0, r0
    4bac:	34080034 	strcc	r0, [r8], #-52	; 0x34
    4bb0:	01080034 	tsteq	r8, r4, lsr r0
    4bb4:	34345900 	ldrtcc	r5, [r4], #-2304	; 0x900
    4bb8:	34380800 	ldrtcc	r0, [r8], #-2048	; 0x800
    4bbc:	00040800 	andeq	r0, r4, r0, lsl #16
    4bc0:	9f1f0079 	svcls	0x001f0079
	...
    4bcc:	08003430 	stmdaeq	r0, {r4, r5, sl, ip, sp}
    4bd0:	08003456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, sp}
    4bd4:	005d0001 	subseq	r0, sp, r1
    4bd8:	00000000 	andeq	r0, r0, r0
    4bdc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4be0:	56080034 			; <UNDEFINED> instruction: 0x56080034
    4be4:	01080034 	tsteq	r8, r4, lsr r0
    4be8:	00005900 	andeq	r5, r0, r0, lsl #18
    4bec:	00000000 	andeq	r0, r0, r0
    4bf0:	34380000 	ldrtcc	r0, [r8], #-0
    4bf4:	343a0800 	ldrtcc	r0, [sl], #-2048	; 0x800
    4bf8:	00020800 	andeq	r0, r2, r0, lsl #16
    4bfc:	343a9f30 	ldrtcc	r9, [sl], #-3888	; 0xf30
    4c00:	34560800 	ldrbcc	r0, [r6], #-2048	; 0x800
    4c04:	00010800 	andeq	r0, r1, r0, lsl #16
    4c08:	00000053 	andeq	r0, r0, r3, asr r0
	...
    4c18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4c24:	00560001 	subseq	r0, r6, r1
	...
    4c34:	01000000 	mrseq	r0, (UNDEF: 0)
    4c38:	00005100 	andeq	r5, r0, r0, lsl #2
    4c3c:	00000000 	andeq	r0, r0, r0
    4c40:	00010000 	andeq	r0, r1, r0
    4c44:	00000058 	andeq	r0, r0, r8, asr r0
	...
    4c54:	52000100 	andpl	r0, r0, #0, 2
	...
    4c60:	00570001 	subseq	r0, r7, r1
	...
    4c70:	02000000 	andeq	r0, r0, #0
    4c74:	009f3200 	addseq	r3, pc, r0, lsl #4
    4c78:	00000000 	andeq	r0, r0, r0
    4c7c:	01000000 	mrseq	r0, (UNDEF: 0)
    4c80:	00005500 	andeq	r5, r0, r0, lsl #10
    4c84:	00000000 	andeq	r0, r0, r0
    4c88:	00010000 	andeq	r0, r1, r0
    4c8c:	00000055 	andeq	r0, r0, r5, asr r0
    4c90:	00000000 	andeq	r0, r0, r0
    4c94:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
    4ca8:	9f300002 	svcls	0x00300002
	...
    4cb4:	00540001 	subseq	r0, r4, r1
    4cb8:	00000000 	andeq	r0, r0, r0
    4cbc:	03000000 	movweq	r0, #0
    4cc0:	9f7f7400 	svcls	0x007f7400
	...
    4ccc:	00540001 	subseq	r0, r4, r1
    4cd0:	00000000 	andeq	r0, r0, r0
    4cd4:	03000000 	movweq	r0, #0
    4cd8:	9f7f7500 	svcls	0x007f7500
	...
    4ce4:	00550001 	subseq	r0, r5, r1
    4ce8:	00000000 	andeq	r0, r0, r0
    4cec:	03000000 	movweq	r0, #0
    4cf0:	9f017500 	svcls	0x00017500
	...
    4cfc:	00550001 	subseq	r0, r5, r1
    4d00:	00000000 	andeq	r0, r0, r0
    4d04:	03000000 	movweq	r0, #0
    4d08:	9f017500 	svcls	0x00017500
	...
    4d14:	00540001 	subseq	r0, r4, r1
	...
    4d24:	01000000 	mrseq	r0, (UNDEF: 0)
    4d28:	00005200 	andeq	r5, r0, r0, lsl #4
    4d2c:	00000000 	andeq	r0, r0, r0
    4d30:	00010000 	andeq	r0, r1, r0
    4d34:	00000057 	andeq	r0, r0, r7, asr r0
	...
    4d44:	5d000100 	stfpls	f0, [r0, #-0]
	...
    4d50:	a8910004 	ldmge	r1, {r2}
    4d54:	00009f7f 	andeq	r9, r0, pc, ror pc
    4d58:	00000000 	andeq	r0, r0, r0
    4d5c:	00010000 	andeq	r0, r1, r0
    4d60:	0000005d 	andeq	r0, r0, sp, asr r0
	...
    4d70:	31000200 	mrscc	r0, R8_usr
    4d74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d78:	00000000 	andeq	r0, r0, r0
    4d7c:	30000200 	andcc	r0, r0, r0, lsl #4
    4d80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4d90:	30000200 	andcc	r0, r0, r0, lsl #4
    4d94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4d98:	00000000 	andeq	r0, r0, r0
    4d9c:	31000200 	mrscc	r0, R8_usr
    4da0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4da4:	00000000 	andeq	r0, r0, r0
    4da8:	32000200 	andcc	r0, r0, #0, 4
    4dac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4db0:	00000000 	andeq	r0, r0, r0
    4db4:	33000200 	movwcc	r0, #512	; 0x200
    4db8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4dbc:	00000000 	andeq	r0, r0, r0
    4dc0:	34000200 	strcc	r0, [r0], #-512	; 0x200
    4dc4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4dd4:	52000100 	andpl	r0, r0, #0, 2
	...
    4de0:	01720003 	cmneq	r2, r3
    4de4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4de8:	00000000 	andeq	r0, r0, r0
    4dec:	52000100 	andpl	r0, r0, #0, 2
	...
    4df8:	00550001 	subseq	r0, r5, r1
    4dfc:	00000000 	andeq	r0, r0, r0
    4e00:	03000000 	movweq	r0, #0
    4e04:	9f017500 	svcls	0x00017500
	...
    4e10:	01720003 	cmneq	r2, r3
    4e14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e18:	00000000 	andeq	r0, r0, r0
    4e1c:	09000300 	stmdbeq	r0, {r8, r9}
    4e20:	00009ff8 	strdeq	r9, [r0], -r8
	...
    4e30:	00050000 	andeq	r0, r5, r0
    4e34:	00720077 	rsbseq	r0, r2, r7, ror r0
    4e38:	00000022 	andeq	r0, r0, r2, lsr #32
    4e3c:	00000000 	andeq	r0, r0, r0
    4e40:	73000500 	movwvc	r0, #1280	; 0x500
    4e44:	9f253100 	svcls	0x00253100
	...
    4e50:	7f770002 	svcvc	0x00770002
	...
    4e64:	48910003 	ldmmi	r1, {r0, r1}
    4e68:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e6c:	00000000 	andeq	r0, r0, r0
    4e70:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    4e7c:	70740003 	rsbsvc	r0, r4, r3
    4e80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4e84:	00000000 	andeq	r0, r0, r0
    4e88:	74000300 	strvc	r0, [r0], #-768	; 0x300
    4e8c:	00009f60 	andeq	r9, r0, r0, ror #30
    4e90:	00000000 	andeq	r0, r0, r0
    4e94:	00030000 	andeq	r0, r3, r0
    4e98:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
    4e9c:	00000000 	andeq	r0, r0, r0
    4ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ea4:	00005100 	andeq	r5, r0, r0, lsl #2
    4ea8:	00000000 	andeq	r0, r0, r0
    4eac:	00030000 	andeq	r0, r3, r0
    4eb0:	009f4891 	umullseq	r4, pc, r1, r8	; <UNPREDICTABLE>
	...
    4ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    4ec4:	00005600 	andeq	r5, r0, r0, lsl #12
    4ec8:	00000000 	andeq	r0, r0, r0
    4ecc:	00010000 	andeq	r0, r1, r0
    4ed0:	00000056 	andeq	r0, r0, r6, asr r0
	...
    4ee0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4eec:	00540001 	subseq	r0, r4, r1
    4ef0:	00000000 	andeq	r0, r0, r0
    4ef4:	04000000 	streq	r0, [r0], #-0
    4ef8:	5001f300 	andpl	pc, r1, r0, lsl #6
    4efc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4f0c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4f18:	00520001 	subseq	r0, r2, r1
    4f1c:	00000000 	andeq	r0, r0, r0
    4f20:	01000000 	mrseq	r0, (UNDEF: 0)
    4f24:	00005500 	andeq	r5, r0, r0, lsl #10
    4f28:	00000000 	andeq	r0, r0, r0
    4f2c:	00040000 	andeq	r0, r4, r0
    4f30:	9f5101f3 	svcls	0x005101f3
	...
    4f44:	00500001 	subseq	r0, r0, r1
    4f48:	00000000 	andeq	r0, r0, r0
    4f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    4f50:	00005500 	andeq	r5, r0, r0, lsl #10
    4f54:	00000000 	andeq	r0, r0, r0
    4f58:	00040000 	andeq	r0, r4, r0
    4f5c:	9f5001f3 	svcls	0x005001f3
	...
    4f70:	00510001 	subseq	r0, r1, r1
    4f74:	00000000 	andeq	r0, r0, r0
    4f78:	01000000 	mrseq	r0, (UNDEF: 0)
    4f7c:	00005400 	andeq	r5, r0, r0, lsl #8
    4f80:	00000000 	andeq	r0, r0, r0
    4f84:	00040000 	andeq	r0, r4, r0
    4f88:	9f5101f3 	svcls	0x005101f3
	...
    4f9c:	00520001 	subseq	r0, r2, r1
    4fa0:	00000000 	andeq	r0, r0, r0
    4fa4:	01000000 	mrseq	r0, (UNDEF: 0)
    4fa8:	00005700 	andeq	r5, r0, r0, lsl #14
    4fac:	00000000 	andeq	r0, r0, r0
    4fb0:	00040000 	andeq	r0, r4, r0
    4fb4:	9f5201f3 	svcls	0x005201f3
	...
    4fc8:	00530001 	subseq	r0, r3, r1
    4fcc:	00000000 	andeq	r0, r0, r0
    4fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    4fd4:	00005800 	andeq	r5, r0, r0, lsl #16
    4fd8:	00000000 	andeq	r0, r0, r0
    4fdc:	00040000 	andeq	r0, r4, r0
    4fe0:	9f5301f3 	svcls	0x005301f3
	...
    4ff4:	00520001 	subseq	r0, r2, r1
    4ff8:	00000000 	andeq	r0, r0, r0
    4ffc:	01000000 	mrseq	r0, (UNDEF: 0)
    5000:	00005700 	andeq	r5, r0, r0, lsl #14
    5004:	00000000 	andeq	r0, r0, r0
    5008:	00040000 	andeq	r0, r4, r0
    500c:	9f5201f3 	svcls	0x005201f3
	...
    5020:	00510001 	subseq	r0, r1, r1
    5024:	00000000 	andeq	r0, r0, r0
    5028:	01000000 	mrseq	r0, (UNDEF: 0)
    502c:	00005400 	andeq	r5, r0, r0, lsl #8
    5030:	00000000 	andeq	r0, r0, r0
    5034:	00040000 	andeq	r0, r4, r0
    5038:	9f5101f3 	svcls	0x005101f3
	...
    504c:	00580001 	subseq	r0, r8, r1
    5050:	00000000 	andeq	r0, r0, r0
    5054:	04000000 	streq	r0, [r0], #-0
    5058:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    505c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    506c:	54000100 	strpl	r0, [r0], #-256	; 0x100
	...
    5078:	01f30004 	mvnseq	r0, r4
    507c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    508c:	00010000 	andeq	r0, r1, r0
    5090:	00000055 	andeq	r0, r0, r5, asr r0
    5094:	00000000 	andeq	r0, r0, r0
    5098:	f3000400 	vshl.u8	d0, d0, d0
    509c:	009f5001 	addseq	r5, pc, r1
    50a0:	00000000 	andeq	r0, r0, r0
    50a4:	c4000000 	strgt	r0, [r0], #-0
    50a8:	d0080034 	andle	r0, r8, r4, lsr r0
    50ac:	01080034 	tsteq	r8, r4, lsr r0
    50b0:	34d05000 	ldrbcc	r5, [r0], #0
    50b4:	34da0800 	ldrbcc	r0, [sl], #2048	; 0x800
    50b8:	00010800 	andeq	r0, r1, r0, lsl #16
    50bc:	0034da52 	eorseq	sp, r4, r2, asr sl
    50c0:	0034dc08 	eorseq	sp, r4, r8, lsl #24
    50c4:	53000108 	movwpl	r0, #264	; 0x108
    50c8:	080034dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, sl, ip, sp}
    50cc:	080034e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, ip, sp}
    50d0:	e4540001 	ldrb	r0, [r4], #-1
    50d4:	ec080034 	stc	0, cr0, [r8], {52}	; 0x34
    50d8:	01080034 	tsteq	r8, r4, lsr r0
    50dc:	34ec5000 	strbtcc	r5, [ip], #0
    50e0:	54100800 	ldrpl	r0, [r0], #-2048	; 0x800
    50e4:	00020800 	andeq	r0, r2, r0, lsl #16
    50e8:	54105491 	ldrpl	r5, [r0], #-1169	; 0x491
    50ec:	54280800 	strtpl	r0, [r8], #-2048	; 0x800
    50f0:	00020800 	andeq	r0, r2, r0, lsl #16
    50f4:	0000547d 	andeq	r5, r0, sp, ror r4
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	34c40000 	strbcc	r0, [r4], #0
    5100:	3c040800 	stccc	8, cr0, [r4], {-0}
    5104:	00010800 	andeq	r0, r1, r0, lsl #16
    5108:	003c0451 	eorseq	r0, ip, r1, asr r4
    510c:	00542808 	subseq	r2, r4, r8, lsl #16
    5110:	f3000408 	vshl.u8	d0, d8, d0
    5114:	009f5101 	addseq	r5, pc, r1, lsl #2
    5118:	00000000 	andeq	r0, r0, r0
    511c:	40000000 	andmi	r0, r0, r0
    5120:	4808003c 	stmdami	r8, {r2, r3, r4, r5}
    5124:	0108003c 	tsteq	r8, ip, lsr r0
    5128:	3c7a5a00 	ldclcc	10, cr5, [sl], #-0
    512c:	3cb20800 	ldccc	8, cr0, [r2]
    5130:	00010800 	andeq	r0, r1, r0, lsl #16
    5134:	003ce25c 	eorseq	lr, ip, ip, asr r2
    5138:	003d3208 	eorseq	r3, sp, r8, lsl #4
    513c:	50000108 	andpl	r0, r0, r8, lsl #2
    5140:	08003d5a 	stmdaeq	r0, {r1, r3, r4, r6, r8, sl, fp, ip, sp}
    5144:	08003da6 	stmdaeq	r0, {r1, r2, r5, r7, r8, sl, fp, ip, sp}
    5148:	d0520001 	subsle	r0, r2, r1
    514c:	2408003d 	strcs	r0, [r8], #-61	; 0x3d
    5150:	0108003e 	tsteq	r8, lr, lsr r0
    5154:	3e405300 	cdpcc	3, 4, cr5, cr0, cr0, {0}
    5158:	3eaa0800 	cdpcc	8, 10, cr0, cr10, cr0, {0}
    515c:	00010800 	andeq	r0, r1, r0, lsl #16
    5160:	003eb450 	eorseq	fp, lr, r0, asr r4
    5164:	003efe08 	eorseq	pc, lr, r8, lsl #28
    5168:	5c000108 	stfpls	f0, [r0], {8}
    516c:	08003f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip, sp}
    5170:	08003f7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    5174:	b0560001 	subslt	r0, r6, r1
    5178:	e408003f 	str	r0, [r8], #-63	; 0x3f
    517c:	0108003f 	tsteq	r8, pc, lsr r0
    5180:	403a5700 	eorsmi	r5, sl, r0, lsl #14
    5184:	40880800 	addmi	r0, r8, r0, lsl #16
    5188:	00010800 	andeq	r0, r1, r0, lsl #16
    518c:	0040ba59 	subeq	fp, r0, r9, asr sl
    5190:	00410208 	subeq	r0, r1, r8, lsl #4
    5194:	58000108 	stmdapl	r0, {r3, r8}
    5198:	08004144 	stmdaeq	r0, {r2, r6, r8, lr}
    519c:	08004166 	stmdaeq	r0, {r1, r2, r5, r6, r8, lr}
    51a0:	b2570001 	subslt	r0, r7, #1
    51a4:	c8080041 	stmdagt	r8, {r0, r6}
    51a8:	01080041 	tsteq	r8, r1, asr #32
    51ac:	42225800 	eormi	r5, r2, #0, 16
    51b0:	424c0800 	submi	r0, ip, #0, 16
    51b4:	00010800 	andeq	r0, r1, r0, lsl #16
    51b8:	00429a57 	subeq	r9, r2, r7, asr sl
    51bc:	0042ba08 	subeq	fp, r2, r8, lsl #20
    51c0:	50000108 	andpl	r0, r0, r8, lsl #2
    51c4:	0800430a 	stmdaeq	r0, {r1, r3, r8, r9, lr}
    51c8:	0800432a 	stmdaeq	r0, {r1, r3, r5, r8, r9, lr}
    51cc:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
    51d0:	98080043 	stmdals	r8, {r0, r1, r6}
    51d4:	01080043 	tsteq	r8, r3, asr #32
    51d8:	43e65300 	mvnmi	r5, #0, 6
    51dc:	440a0800 	strmi	r0, [sl], #-2048	; 0x800
    51e0:	00010800 	andeq	r0, r1, r0, lsl #16
    51e4:	00447e52 	subeq	r7, r4, r2, asr lr
    51e8:	0044aa08 	subeq	sl, r4, r8, lsl #20
    51ec:	53000108 	movwpl	r0, #264	; 0x108
    51f0:	080044f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, sl, lr}
    51f4:	08004512 	stmdaeq	r0, {r1, r4, r8, sl, lr}
    51f8:	68520001 	ldmdavs	r2, {r0}^
    51fc:	7c080045 	stcvc	0, cr0, [r8], {69}	; 0x45
    5200:	01080045 	tsteq	r8, r5, asr #32
    5204:	45d85300 	ldrbmi	r5, [r8, #768]	; 0x300
    5208:	46020800 	strmi	r0, [r2], -r0, lsl #16
    520c:	00010800 	andeq	r0, r1, r0, lsl #16
    5210:	00465259 	subeq	r5, r6, r9, asr r2
    5214:	00468008 	subeq	r8, r6, r8
    5218:	5c000108 	stfpls	f0, [r0], {8}
    521c:	080046ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, lr}
    5220:	080046f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, lr}
    5224:	46580001 	ldrbmi	r0, [r8], -r1
    5228:	7a080047 	bvc	20534c <__Stack_Size+0x204b4c>
    522c:	01080047 	tsteq	r8, r7, asr #32
    5230:	47c25a00 	strbmi	r5, [r2, r0, lsl #20]
    5234:	47e40800 	strbmi	r0, [r4, r0, lsl #16]!
    5238:	00010800 	andeq	r0, r1, r0, lsl #16
    523c:	0048305c 	subeq	r3, r8, ip, asr r0
    5240:	00485608 	subeq	r5, r8, r8, lsl #12
    5244:	5a000108 	bpl	566c <__Stack_Size+0x4e6c>
    5248:	080048d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, lr}
    524c:	080048f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, fp, lr}
    5250:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    5254:	6c080049 	stcvs	0, cr0, [r8], {73}	; 0x49
    5258:	01080049 	tsteq	r8, r9, asr #32
    525c:	49c05100 	stmibmi	r0, {r8, ip, lr}^
    5260:	49e00800 	stmibmi	r0!, {fp}^
    5264:	00010800 	andeq	r0, r1, r0, lsl #16
    5268:	004a3057 	subeq	r3, sl, r7, asr r0
    526c:	004a5008 	subeq	r5, sl, r8
    5270:	53000108 	movwpl	r0, #264	; 0x108
    5274:	08004aa6 	stmdaeq	r0, {r1, r2, r5, r7, r9, fp, lr}
    5278:	08004abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp, lr}
    527c:	18570001 	ldmdane	r7, {r0}^
    5280:	3808004b 	stmdacc	r8, {r0, r1, r3, r6}
    5284:	0108004b 	tsteq	r8, fp, asr #32
    5288:	4b925600 	blmi	fe49aa90 <BootRAM+0xd40b231>
    528c:	4bb60800 	blmi	fed87294 <BootRAM+0xdcf7a35>
    5290:	00010800 	andeq	r0, r1, r0, lsl #16
    5294:	004c0c59 	subeq	r0, ip, r9, asr ip
    5298:	004c2c08 	subeq	r2, ip, r8, lsl #24
    529c:	58000108 	stmdapl	r0, {r3, r8}
    52a0:	08004c68 	stmdaeq	r0, {r3, r5, r6, sl, fp, lr}
    52a4:	08004ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp, lr}
    52a8:	10580001 	subsne	r0, r8, r1
    52ac:	5208004d 	andpl	r0, r8, #77	; 0x4d
    52b0:	0108004d 	tsteq	r8, sp, asr #32
    52b4:	4d865400 	cfstrsmi	mvf5, [r6]
    52b8:	4dda0800 	ldclmi	8, cr0, [sl]
    52bc:	00010800 	andeq	r0, r1, r0, lsl #16
    52c0:	004e0457 	subeq	r0, lr, r7, asr r4
    52c4:	004e4c08 	subeq	r4, lr, r8, lsl #24
    52c8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    52cc:	08004e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, lr}
    52d0:	08004ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp, lr}
    52d4:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    52d8:	4008004e 	andmi	r0, r8, lr, asr #32
    52dc:	0108004f 	tsteq	r8, pc, asr #32
    52e0:	4f905000 	svcmi	0x00905000
    52e4:	4fb00800 	svcmi	0x00b00800
    52e8:	00010800 	andeq	r0, r1, r0, lsl #16
    52ec:	00500a56 	subseq	r0, r0, r6, asr sl
    52f0:	00502808 	subseq	r2, r0, r8, lsl #16
    52f4:	5c000108 	stfpls	f0, [r0], {8}
    52f8:	080050a2 	stmdaeq	r0, {r1, r5, r7, ip, lr}
    52fc:	080050c2 	stmdaeq	r0, {r1, r6, r7, ip, lr}
    5300:	5a500001 	bpl	140530c <__Stack_Size+0x1404b0c>
    5304:	7e080051 	mcrvc	0, 0, r0, cr8, cr1, {2}
    5308:	01080051 	qaddeq	r0, r1, r8
    530c:	517e5800 	cmnpl	lr, r0, lsl #16
    5310:	518e0800 	orrpl	r0, lr, r0, lsl #16
    5314:	00060800 	andeq	r0, r6, r0, lsl #16
    5318:	0079007a 	rsbseq	r0, r9, sl, ror r0
    531c:	518e9f22 	orrpl	r9, lr, r2, lsr #30
    5320:	51c20800 	bicpl	r0, r2, r0, lsl #16
    5324:	002a0800 	eoreq	r0, sl, r0, lsl #16
    5328:	14450074 	strbne	r0, [r5], #-116	; 0x74
    532c:	1f172414 	svcne	0x00172414
    5330:	21252023 	teqcs	r5, r3, lsr #32
    5334:	14360074 	ldrtne	r0, [r6], #-116	; 0x74
    5338:	20231f14 	eorcs	r1, r3, r4, lsl pc
    533c:	21251724 	teqcs	r5, r4, lsr #14
    5340:	37007427 	strcc	r7, [r0, -r7, lsr #8]
    5344:	17241414 			; <UNDEFINED> instruction: 0x17241414
    5348:	2520231f 	strcs	r2, [r0, #-799]!	; 0x31f
    534c:	007a2721 	rsbseq	r2, sl, r1, lsr #14
    5350:	51e49f22 	mvnpl	r9, r2, lsr #30
    5354:	52460800 	subpl	r0, r6, #0, 16
    5358:	00010800 	andeq	r0, r1, r0, lsl #16
    535c:	0052745a 	subseq	r7, r2, sl, asr r4
    5360:	00528008 	subseq	r8, r2, r8
    5364:	51000108 	tstpl	r0, r8, lsl #2
    5368:	080052dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip, lr}
    536c:	080052f0 	stmdaeq	r0, {r4, r5, r6, r7, r9, ip, lr}
    5370:	50540001 	subspl	r0, r4, r1
    5374:	80080053 	andhi	r0, r8, r3, asr r0
    5378:	01080053 	qaddeq	r0, r3, r8
    537c:	53d85600 	bicspl	r5, r8, #0, 12
    5380:	53ea0800 	mvnpl	r0, #0, 16
    5384:	00010800 	andeq	r0, r1, r0, lsl #16
    5388:	00000057 	andeq	r0, r0, r7, asr r0
    538c:	00000000 	andeq	r0, r0, r0
    5390:	003c4000 	eorseq	r4, ip, r0
    5394:	003c7a08 	eorseq	r7, ip, r8, lsl #20
    5398:	76003808 	strvc	r3, [r0], -r8, lsl #16
    539c:	21007b00 	tstcs	r0, r0, lsl #22
    53a0:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    53a4:	7b00761a 	blvc	22c14 <__Stack_Size+0x22414>
    53a8:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    53ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    53b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    53b4:	76212517 			; <UNDEFINED> instruction: 0x76212517
    53b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    53bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    53c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    53c4:	14460076 	strbne	r0, [r6], #-118	; 0x76
    53c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    53cc:	21251724 	teqcs	r5, r4, lsr #14
    53d0:	7a9f2227 	bvc	fe7cdc74 <BootRAM+0xd73e415>
    53d4:	e208003c 	and	r0, r8, #60	; 0x3c
    53d8:	3608003c 			; <UNDEFINED> instruction: 0x3608003c
    53dc:	76007700 	strvc	r7, [r0], -r0, lsl #14
    53e0:	007b2100 	rsbseq	r2, fp, r0, lsl #2
    53e4:	7600771a 			; <UNDEFINED> instruction: 0x7600771a
    53e8:	77211a00 	strvc	r1, [r1, -r0, lsl #20]!
    53ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    53f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    53f4:	77212517 			; <UNDEFINED> instruction: 0x77212517
    53f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    53fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5400:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5404:	14460077 	strbne	r0, [r6], #-119	; 0x77
    5408:	20231f14 	eorcs	r1, r3, r4, lsl pc
    540c:	21251724 	teqcs	r5, r4, lsr #14
    5410:	e29f2227 	adds	r2, pc, #1879048194	; 0x70000002
    5414:	5a08003c 	bpl	20550c <__Stack_Size+0x204d0c>
    5418:	3608003d 			; <UNDEFINED> instruction: 0x3608003d
    541c:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    5420:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5424:	7700751a 	smladvc	r0, sl, r5, r7
    5428:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    542c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5430:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5434:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5438:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    543c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5440:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5444:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5448:	20231f14 	eorcs	r1, r3, r4, lsl pc
    544c:	21251724 	teqcs	r5, r4, lsr #14
    5450:	5a9f2227 	bpl	fe7cdcf4 <BootRAM+0xd73e495>
    5454:	d008003d 	andle	r0, r8, sp, lsr r0
    5458:	3608003d 			; <UNDEFINED> instruction: 0x3608003d
    545c:	75007800 	strvc	r7, [r0, #-2048]	; 0x800
    5460:	00772100 	rsbseq	r2, r7, r0, lsl #2
    5464:	7500781a 	strvc	r7, [r0, #-2074]	; 0x81a
    5468:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    546c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5470:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5474:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5478:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    547c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5480:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5484:	14460078 	strbne	r0, [r6], #-120	; 0x78
    5488:	20231f14 	eorcs	r1, r3, r4, lsl pc
    548c:	21251724 	teqcs	r5, r4, lsr #14
    5490:	d09f2227 	addsle	r2, pc, r7, lsr #4
    5494:	4008003d 	andmi	r0, r8, sp, lsr r0
    5498:	3608003e 			; <UNDEFINED> instruction: 0x3608003e
    549c:	78007a00 	stmdavc	r0, {r9, fp, ip, sp, lr}
    54a0:	00752100 	rsbseq	r2, r5, r0, lsl #2
    54a4:	78007a1a 	stmdavc	r0, {r1, r3, r4, r9, fp, ip, sp, lr}
    54a8:	7a211a00 	bvc	84bcb0 <__Stack_Size+0x84b4b0>
    54ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    54b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    54b4:	7a212517 	bvc	84e918 <__Stack_Size+0x84e118>
    54b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    54bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    54c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    54c4:	1446007a 	strbne	r0, [r6], #-122	; 0x7a
    54c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    54cc:	21251724 	teqcs	r5, r4, lsr #14
    54d0:	409f2227 	addsmi	r2, pc, r7, lsr #4
    54d4:	b408003e 	strlt	r0, [r8], #-62	; 0x3e
    54d8:	3608003e 			; <UNDEFINED> instruction: 0x3608003e
    54dc:	7a007100 	bvc	218e4 <__Stack_Size+0x210e4>
    54e0:	00782100 	rsbseq	r2, r8, r0, lsl #2
    54e4:	7a00711a 	bvc	21954 <__Stack_Size+0x21154>
    54e8:	71211a00 	teqvc	r1, r0, lsl #20
    54ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    54f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    54f4:	71212517 	teqvc	r1, r7, lsl r5
    54f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    54fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5500:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5504:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5508:	20231f14 	eorcs	r1, r3, r4, lsl pc
    550c:	21251724 	teqcs	r5, r4, lsr #14
    5510:	b49f2227 	ldrlt	r2, [pc], #551	; 5518 <__Stack_Size+0x4d18>
    5514:	2c08003e 	stccs	0, cr0, [r8], {62}	; 0x3e
    5518:	3608003f 			; <UNDEFINED> instruction: 0x3608003f
    551c:	71007400 	tstvc	r0, r0, lsl #8
    5520:	007a2100 	rsbseq	r2, sl, r0, lsl #2
    5524:	7100741a 	tstvc	r0, sl, lsl r4
    5528:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    552c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5530:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5534:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    5538:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    553c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5540:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5544:	14460074 	strbne	r0, [r6], #-116	; 0x74
    5548:	20231f14 	eorcs	r1, r3, r4, lsl pc
    554c:	21251724 	teqcs	r5, r4, lsr #14
    5550:	2c9f2227 	lfmcs	f2, 4, [pc], {39}	; 0x27
    5554:	b008003f 	andlt	r0, r8, pc, lsr r0
    5558:	3608003f 			; <UNDEFINED> instruction: 0x3608003f
    555c:	74007000 	strvc	r7, [r0], #-0
    5560:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5564:	7400701a 	strvc	r7, [r0], #-26
    5568:	70211a00 	eorvc	r1, r1, r0, lsl #20
    556c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5570:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5574:	70212517 	eorvc	r2, r1, r7, lsl r5
    5578:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    557c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5580:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5584:	14460070 	strbne	r0, [r6], #-112	; 0x70
    5588:	20231f14 	eorcs	r1, r3, r4, lsl pc
    558c:	21251724 	teqcs	r5, r4, lsr #14
    5590:	b09f2227 	addslt	r2, pc, r7, lsr #4
    5594:	3a08003f 	bcc	205698 <__Stack_Size+0x204e98>
    5598:	36080040 	strcc	r0, [r8], -r0, asr #32
    559c:	70007200 	andvc	r7, r0, r0, lsl #4
    55a0:	00742100 	rsbseq	r2, r4, r0, lsl #2
    55a4:	7000721a 	andvc	r7, r0, sl, lsl r2
    55a8:	72211a00 	eorvc	r1, r1, #0, 20
    55ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    55b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    55b4:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    55b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    55bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    55c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    55c4:	14460072 	strbne	r0, [r6], #-114	; 0x72
    55c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    55cc:	21251724 	teqcs	r5, r4, lsr #14
    55d0:	3a9f2227 	bcc	fe7cde74 <BootRAM+0xd73e615>
    55d4:	ba080040 	blt	2056dc <__Stack_Size+0x204edc>
    55d8:	36080040 	strcc	r0, [r8], -r0, asr #32
    55dc:	72007300 	andvc	r7, r0, #0, 6
    55e0:	00702100 	rsbseq	r2, r0, r0, lsl #2
    55e4:	7200731a 	andvc	r7, r0, #1744830464	; 0x68000000
    55e8:	73211a00 	teqvc	r1, #0, 20
    55ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    55f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    55f4:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    55f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    55fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5600:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5604:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5608:	20231f14 	eorcs	r1, r3, r4, lsl pc
    560c:	21251724 	teqcs	r5, r4, lsr #14
    5610:	ba9f2227 	blt	fe7cdeb4 <BootRAM+0xd73e655>
    5614:	44080040 	strmi	r0, [r8], #-64	; 0x40
    5618:	36080041 	strcc	r0, [r8], -r1, asr #32
    561c:	73007c00 	movwvc	r7, #3072	; 0xc00
    5620:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5624:	73007c1a 	movwvc	r7, #3098	; 0xc1a
    5628:	7c211a00 	stcvc	10, cr1, [r1], #-0
    562c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5630:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5634:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5638:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    563c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5640:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5644:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5648:	20231f14 	eorcs	r1, r3, r4, lsl pc
    564c:	21251724 	teqcs	r5, r4, lsr #14
    5650:	449f2227 	ldrmi	r2, [pc], #551	; 5658 <__Stack_Size+0x4e58>
    5654:	b2080041 	andlt	r0, r8, #65	; 0x41
    5658:	36080041 	strcc	r0, [r8], -r1, asr #32
    565c:	7c007600 	stcvc	6, cr7, [r0], {-0}
    5660:	00732100 	rsbseq	r2, r3, r0, lsl #2
    5664:	7c00761a 	stcvc	6, cr7, [r0], {26}
    5668:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    566c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5670:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5674:	76212517 			; <UNDEFINED> instruction: 0x76212517
    5678:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    567c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5680:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5684:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5688:	20231f14 	eorcs	r1, r3, r4, lsl pc
    568c:	21251724 	teqcs	r5, r4, lsr #14
    5690:	b29f2227 	addslt	r2, pc, #1879048194	; 0x70000002
    5694:	22080041 	andcs	r0, r8, #65	; 0x41
    5698:	36080042 	strcc	r0, [r8], -r2, asr #32
    569c:	76007a00 	strvc	r7, [r0], -r0, lsl #20
    56a0:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    56a4:	76007a1a 			; <UNDEFINED> instruction: 0x76007a1a
    56a8:	7a211a00 	bvc	84beb0 <__Stack_Size+0x84b6b0>
    56ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    56b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    56b4:	7a212517 	bvc	84eb18 <__Stack_Size+0x84e318>
    56b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    56bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    56c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    56c4:	1446007a 	strbne	r0, [r6], #-122	; 0x7a
    56c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    56cc:	21251724 	teqcs	r5, r4, lsr #14
    56d0:	229f2227 	addscs	r2, pc, #1879048194	; 0x70000002
    56d4:	9a080042 	bls	2057e4 <__Stack_Size+0x204fe4>
    56d8:	36080042 	strcc	r0, [r8], -r2, asr #32
    56dc:	7a007100 	bvc	21ae4 <__Stack_Size+0x212e4>
    56e0:	00762100 	rsbseq	r2, r6, r0, lsl #2
    56e4:	7a00711a 	bvc	21b54 <__Stack_Size+0x21354>
    56e8:	71211a00 	teqvc	r1, r0, lsl #20
    56ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    56f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    56f4:	71212517 	teqvc	r1, r7, lsl r5
    56f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    56fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5700:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5704:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5708:	20231f14 	eorcs	r1, r3, r4, lsl pc
    570c:	21251724 	teqcs	r5, r4, lsr #14
    5710:	9a9f2227 	bls	fe7cdfb4 <BootRAM+0xd73e755>
    5714:	0a080042 	beq	205824 <__Stack_Size+0x205024>
    5718:	36080043 	strcc	r0, [r8], -r3, asr #32
    571c:	71007900 	tstvc	r0, r0, lsl #18
    5720:	007a2100 	rsbseq	r2, sl, r0, lsl #2
    5724:	7100791a 	tstvc	r0, sl, lsl r9
    5728:	79211a00 	stmdbvc	r1!, {r9, fp, ip}
    572c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5730:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5734:	79212517 	stmdbvc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5738:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    573c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5740:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5744:	14460079 	strbne	r0, [r6], #-121	; 0x79
    5748:	20231f14 	eorcs	r1, r3, r4, lsl pc
    574c:	21251724 	teqcs	r5, r4, lsr #14
    5750:	0a9f2227 	beq	fe7cdff4 <BootRAM+0xd73e795>
    5754:	7c080043 	stcvc	0, cr0, [r8], {67}	; 0x43
    5758:	36080043 	strcc	r0, [r8], -r3, asr #32
    575c:	79007c00 	stmdbvc	r0, {sl, fp, ip, sp, lr}
    5760:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5764:	79007c1a 	stmdbvc	r0, {r1, r3, r4, sl, fp, ip, sp, lr}
    5768:	7c211a00 	stcvc	10, cr1, [r1], #-0
    576c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5770:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5774:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5778:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    577c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5780:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5784:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5788:	20231f14 	eorcs	r1, r3, r4, lsl pc
    578c:	21251724 	teqcs	r5, r4, lsr #14
    5790:	7c9f2227 	lfmvc	f2, 4, [pc], {39}	; 0x27
    5794:	e6080043 	str	r0, [r8], -r3, asr #32
    5798:	36080043 	strcc	r0, [r8], -r3, asr #32
    579c:	7c007000 	stcvc	0, cr7, [r0], {-0}
    57a0:	00792100 	rsbseq	r2, r9, r0, lsl #2
    57a4:	7c00701a 	stcvc	0, cr7, [r0], {26}
    57a8:	70211a00 	eorvc	r1, r1, r0, lsl #20
    57ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    57b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    57b4:	70212517 	eorvc	r2, r1, r7, lsl r5
    57b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    57bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    57c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    57c4:	14460070 	strbne	r0, [r6], #-112	; 0x70
    57c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    57cc:	21251724 	teqcs	r5, r4, lsr #14
    57d0:	e69f2227 	ldr	r2, [pc], r7, lsr #4
    57d4:	7e080043 	cdpvc	0, 0, cr0, cr8, cr3, {2}
    57d8:	36080044 	strcc	r0, [r8], -r4, asr #32
    57dc:	70007600 	andvc	r7, r0, r0, lsl #12
    57e0:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    57e4:	7000761a 	andvc	r7, r0, sl, lsl r6
    57e8:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    57ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    57f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    57f4:	76212517 			; <UNDEFINED> instruction: 0x76212517
    57f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    57fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5800:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5804:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5808:	20231f14 	eorcs	r1, r3, r4, lsl pc
    580c:	21251724 	teqcs	r5, r4, lsr #14
    5810:	7e9f2227 	cdpvc	2, 9, cr2, cr15, cr7, {1}
    5814:	f2080044 	vhadd.s8	q0, q4, q2
    5818:	36080044 	strcc	r0, [r8], -r4, asr #32
    581c:	76007700 	strvc	r7, [r0], -r0, lsl #14
    5820:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5824:	7600771a 			; <UNDEFINED> instruction: 0x7600771a
    5828:	77211a00 	strvc	r1, [r1, -r0, lsl #20]!
    582c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5830:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5834:	77212517 			; <UNDEFINED> instruction: 0x77212517
    5838:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    583c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5840:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5844:	14460077 	strbne	r0, [r6], #-119	; 0x77
    5848:	20231f14 	eorcs	r1, r3, r4, lsl pc
    584c:	21251724 	teqcs	r5, r4, lsr #14
    5850:	f29f2227 	vsubl.s16	q1, d15, d23
    5854:	68080044 	stmdavs	r8, {r2, r6}
    5858:	36080045 	strcc	r0, [r8], -r5, asr #32
    585c:	77007500 	strvc	r7, [r0, -r0, lsl #10]
    5860:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5864:	7700751a 	smladvc	r0, sl, r5, r7
    5868:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    586c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5870:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5874:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5878:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    587c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5880:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5884:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5888:	20231f14 	eorcs	r1, r3, r4, lsl pc
    588c:	21251724 	teqcs	r5, r4, lsr #14
    5890:	689f2227 	ldmvs	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5894:	d8080045 	stmdale	r8, {r0, r2, r6}
    5898:	36080045 	strcc	r0, [r8], -r5, asr #32
    589c:	75007400 	strvc	r7, [r0, #-1024]	; 0x400
    58a0:	00772100 	rsbseq	r2, r7, r0, lsl #2
    58a4:	7500741a 	strvc	r7, [r0, #-1050]	; 0x41a
    58a8:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    58ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    58b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58b4:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    58b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    58bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    58c4:	14460074 	strbne	r0, [r6], #-116	; 0x74
    58c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    58cc:	21251724 	teqcs	r5, r4, lsr #14
    58d0:	d89f2227 	ldmle	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    58d4:	52080045 	andpl	r0, r8, #69	; 0x45
    58d8:	36080046 	strcc	r0, [r8], -r6, asr #32
    58dc:	74007100 	strvc	r7, [r0], #-256	; 0x100
    58e0:	00752100 	rsbseq	r2, r5, r0, lsl #2
    58e4:	7400711a 	strvc	r7, [r0], #-282	; 0x11a
    58e8:	71211a00 	teqvc	r1, r0, lsl #20
    58ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    58f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    58f4:	71212517 	teqvc	r1, r7, lsl r5
    58f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    58fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5900:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5904:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5908:	20231f14 	eorcs	r1, r3, r4, lsl pc
    590c:	21251724 	teqcs	r5, r4, lsr #14
    5910:	529f2227 	addspl	r2, pc, #1879048194	; 0x70000002
    5914:	ae080046 	cdpge	0, 0, cr0, cr8, cr6, {2}
    5918:	36080046 	strcc	r0, [r8], -r6, asr #32
    591c:	71007200 	mrsvc	r7, R8_usr
    5920:	00742100 	rsbseq	r2, r4, r0, lsl #2
    5924:	7100721a 	tstvc	r0, sl, lsl r2
    5928:	72211a00 	eorvc	r1, r1, #0, 20
    592c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5930:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5934:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    5938:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    593c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5940:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5944:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5948:	20231f14 	eorcs	r1, r3, r4, lsl pc
    594c:	21251724 	teqcs	r5, r4, lsr #14
    5950:	ae9f2227 	cdpge	2, 9, cr2, cr15, cr7, {1}
    5954:	46080046 	strmi	r0, [r8], -r6, asr #32
    5958:	36080047 	strcc	r0, [r8], -r7, asr #32
    595c:	72007300 	andvc	r7, r0, #0, 6
    5960:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5964:	7200731a 	andvc	r7, r0, #1744830464	; 0x68000000
    5968:	73211a00 	teqvc	r1, #0, 20
    596c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5970:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5974:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5978:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    597c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5980:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5984:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5988:	20231f14 	eorcs	r1, r3, r4, lsl pc
    598c:	21251724 	teqcs	r5, r4, lsr #14
    5990:	469f2227 	ldrmi	r2, [pc], r7, lsr #4
    5994:	c2080047 	andgt	r0, r8, #71	; 0x47
    5998:	36080047 	strcc	r0, [r8], -r7, asr #32
    599c:	73007000 	movwvc	r7, #0
    59a0:	00722100 	rsbseq	r2, r2, r0, lsl #2
    59a4:	7300701a 	movwvc	r7, #26
    59a8:	70211a00 	eorvc	r1, r1, r0, lsl #20
    59ac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    59b0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59b4:	70212517 	eorvc	r2, r1, r7, lsl r5
    59b8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    59bc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59c0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    59c4:	14460070 	strbne	r0, [r6], #-112	; 0x70
    59c8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    59cc:	21251724 	teqcs	r5, r4, lsr #14
    59d0:	c29f2227 	addsgt	r2, pc, #1879048194	; 0x70000002
    59d4:	30080047 	andcc	r0, r8, r7, asr #32
    59d8:	36080048 	strcc	r0, [r8], -r8, asr #32
    59dc:	70007600 	andvc	r7, r0, r0, lsl #12
    59e0:	00732100 	rsbseq	r2, r3, r0, lsl #2
    59e4:	7000761a 	andvc	r7, r0, sl, lsl r6
    59e8:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    59ec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    59f0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    59f4:	76212517 			; <UNDEFINED> instruction: 0x76212517
    59f8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    59fc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a00:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a04:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5a08:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a0c:	21251724 	teqcs	r5, r4, lsr #14
    5a10:	309f2227 	addscc	r2, pc, r7, lsr #4
    5a14:	d4080048 	strle	r0, [r8], #-72	; 0x48
    5a18:	36080048 	strcc	r0, [r8], -r8, asr #32
    5a1c:	76007800 	strvc	r7, [r0], -r0, lsl #16
    5a20:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5a24:	7600781a 			; <UNDEFINED> instruction: 0x7600781a
    5a28:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    5a2c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5a30:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a34:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5a38:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5a3c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a40:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a44:	14460078 	strbne	r0, [r6], #-120	; 0x78
    5a48:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a4c:	21251724 	teqcs	r5, r4, lsr #14
    5a50:	d49f2227 	ldrle	r2, [pc], #551	; 5a58 <__Stack_Size+0x5258>
    5a54:	4c080048 	stcmi	0, cr0, [r8], {72}	; 0x48
    5a58:	36080049 	strcc	r0, [r8], -r9, asr #32
    5a5c:	78007c00 	stmdavc	r0, {sl, fp, ip, sp, lr}
    5a60:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5a64:	78007c1a 	stmdavc	r0, {r1, r3, r4, sl, fp, ip, sp, lr}
    5a68:	7c211a00 	stcvc	10, cr1, [r1], #-0
    5a6c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5a70:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a74:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5a78:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5a7c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5a80:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5a84:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5a88:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5a8c:	21251724 	teqcs	r5, r4, lsr #14
    5a90:	4c9f2227 	lfmmi	f2, 4, [pc], {39}	; 0x27
    5a94:	c0080049 	andgt	r0, r8, r9, asr #32
    5a98:	36080049 	strcc	r0, [r8], -r9, asr #32
    5a9c:	7c007500 	cfstr32vc	mvfx7, [r0], {-0}
    5aa0:	00782100 	rsbseq	r2, r8, r0, lsl #2
    5aa4:	7c00751a 	cfstr32vc	mvfx7, [r0], {26}
    5aa8:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    5aac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5ab0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ab4:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5ab8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5abc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ac0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5ac4:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5ac8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5acc:	21251724 	teqcs	r5, r4, lsr #14
    5ad0:	c09f2227 	addsgt	r2, pc, r7, lsr #4
    5ad4:	30080049 	andcc	r0, r8, r9, asr #32
    5ad8:	3608004a 	strcc	r0, [r8], -sl, asr #32
    5adc:	75007400 	strvc	r7, [r0, #-1024]	; 0x400
    5ae0:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    5ae4:	7500741a 	strvc	r7, [r0, #-1050]	; 0x41a
    5ae8:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    5aec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5af0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5af4:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    5af8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5afc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b00:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b04:	14460074 	strbne	r0, [r6], #-116	; 0x74
    5b08:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b0c:	21251724 	teqcs	r5, r4, lsr #14
    5b10:	309f2227 	addscc	r2, pc, r7, lsr #4
    5b14:	a608004a 	strge	r0, [r8], -sl, asr #32
    5b18:	3608004a 	strcc	r0, [r8], -sl, asr #32
    5b1c:	74007200 	strvc	r7, [r0], #-512	; 0x200
    5b20:	00752100 	rsbseq	r2, r5, r0, lsl #2
    5b24:	7400721a 	strvc	r7, [r0], #-538	; 0x21a
    5b28:	72211a00 	eorvc	r1, r1, #0, 20
    5b2c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5b30:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b34:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    5b38:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5b3c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b40:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b44:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5b48:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b4c:	21251724 	teqcs	r5, r4, lsr #14
    5b50:	a69f2227 	ldrge	r2, [pc], r7, lsr #4
    5b54:	1808004a 	stmdane	r8, {r1, r3, r6}
    5b58:	3608004b 	strcc	r0, [r8], -fp, asr #32
    5b5c:	72007100 	andvc	r7, r0, #0, 2
    5b60:	00742100 	rsbseq	r2, r4, r0, lsl #2
    5b64:	7200711a 	andvc	r7, r0, #-2147483642	; 0x80000006
    5b68:	71211a00 	teqvc	r1, r0, lsl #20
    5b6c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5b70:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b74:	71212517 	teqvc	r1, r7, lsl r5
    5b78:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5b7c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5b80:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5b84:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5b88:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5b8c:	21251724 	teqcs	r5, r4, lsr #14
    5b90:	189f2227 	ldmne	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5b94:	9208004b 	andls	r0, r8, #75	; 0x4b
    5b98:	3608004b 	strcc	r0, [r8], -fp, asr #32
    5b9c:	71007300 	mrsvc	r7, LR_irq
    5ba0:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5ba4:	7100731a 	tstvc	r0, sl, lsl r3
    5ba8:	73211a00 	teqvc	r1, #0, 20
    5bac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5bb0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bb4:	73212517 	teqvc	r1, #96468992	; 0x5c00000
    5bb8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5bbc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bc0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5bc4:	14460073 	strbne	r0, [r6], #-115	; 0x73
    5bc8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5bcc:	21251724 	teqcs	r5, r4, lsr #14
    5bd0:	929f2227 	addsls	r2, pc, #1879048194	; 0x70000002
    5bd4:	0c08004b 	stceq	0, cr0, [r8], {75}	; 0x4b
    5bd8:	3608004c 	strcc	r0, [r8], -ip, asr #32
    5bdc:	73007000 	movwvc	r7, #0
    5be0:	00712100 	rsbseq	r2, r1, r0, lsl #2
    5be4:	7300701a 	movwvc	r7, #26
    5be8:	70211a00 	eorvc	r1, r1, r0, lsl #20
    5bec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5bf0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5bf4:	70212517 	eorvc	r2, r1, r7, lsl r5
    5bf8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5bfc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c00:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c04:	14460070 	strbne	r0, [r6], #-112	; 0x70
    5c08:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c0c:	21251724 	teqcs	r5, r4, lsr #14
    5c10:	0c9f2227 	lfmeq	f2, 4, [pc], {39}	; 0x27
    5c14:	6808004c 	stmdavs	r8, {r2, r3, r6}
    5c18:	3608004c 	strcc	r0, [r8], -ip, asr #32
    5c1c:	70007600 	andvc	r7, r0, r0, lsl #12
    5c20:	00732100 	rsbseq	r2, r3, r0, lsl #2
    5c24:	7000761a 	andvc	r7, r0, sl, lsl r6
    5c28:	76211a00 	strtvc	r1, [r1], -r0, lsl #20
    5c2c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5c30:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c34:	76212517 			; <UNDEFINED> instruction: 0x76212517
    5c38:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5c3c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c40:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c44:	14460076 	strbne	r0, [r6], #-118	; 0x76
    5c48:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c4c:	21251724 	teqcs	r5, r4, lsr #14
    5c50:	689f2227 	ldmvs	pc, {r0, r1, r2, r5, r9, sp}	; <UNPREDICTABLE>
    5c54:	1008004c 	andne	r0, r8, ip, asr #32
    5c58:	3608004d 	strcc	r0, [r8], -sp, asr #32
    5c5c:	76007c00 	strvc	r7, [r0], -r0, lsl #24
    5c60:	00702100 	rsbseq	r2, r0, r0, lsl #2
    5c64:	76007c1a 			; <UNDEFINED> instruction: 0x76007c1a
    5c68:	7c211a00 	stcvc	10, cr1, [r1], #-0
    5c6c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5c70:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c74:	7c212517 	cfstr32vc	mvfx2, [r1], #-92	; 0xffffffa4
    5c78:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5c7c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5c80:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5c84:	1446007c 	strbne	r0, [r6], #-124	; 0x7c
    5c88:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5c8c:	21251724 	teqcs	r5, r4, lsr #14
    5c90:	109f2227 	addsne	r2, pc, r7, lsr #4
    5c94:	8608004d 	strhi	r0, [r8], -sp, asr #32
    5c98:	3608004d 	strcc	r0, [r8], -sp, asr #32
    5c9c:	7c007500 	cfstr32vc	mvfx7, [r0], {-0}
    5ca0:	00762100 	rsbseq	r2, r6, r0, lsl #2
    5ca4:	7c00751a 	cfstr32vc	mvfx7, [r0], {26}
    5ca8:	75211a00 	strvc	r1, [r1, #-2560]!	; 0xa00
    5cac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5cb0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cb4:	75212517 	strvc	r2, [r1, #-1303]!	; 0x517
    5cb8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5cbc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cc0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5cc4:	14460075 	strbne	r0, [r6], #-117	; 0x75
    5cc8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5ccc:	21251724 	teqcs	r5, r4, lsr #14
    5cd0:	869f2227 	ldrhi	r2, [pc], r7, lsr #4
    5cd4:	0408004d 	streq	r0, [r8], #-77	; 0x4d
    5cd8:	3608004e 	strcc	r0, [r8], -lr, asr #32
    5cdc:	75007800 	strvc	r7, [r0, #-2048]	; 0x800
    5ce0:	007c2100 	rsbseq	r2, ip, r0, lsl #2
    5ce4:	7500781a 	strvc	r7, [r0, #-2074]	; 0x81a
    5ce8:	78211a00 	stmdavc	r1!, {r9, fp, ip}
    5cec:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5cf0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5cf4:	78212517 	stmdavc	r1!, {r0, r1, r2, r4, r8, sl, sp}
    5cf8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5cfc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d00:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d04:	14460078 	strbne	r0, [r6], #-120	; 0x78
    5d08:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d0c:	21251724 	teqcs	r5, r4, lsr #14
    5d10:	049f2227 	ldreq	r2, [pc], #551	; 5d18 <__Stack_Size+0x5518>
    5d14:	8208004e 	andhi	r0, r8, #78	; 0x4e
    5d18:	3608004e 	strcc	r0, [r8], -lr, asr #32
    5d1c:	78007200 	stmdavc	r0, {r9, ip, sp, lr}
    5d20:	00752100 	rsbseq	r2, r5, r0, lsl #2
    5d24:	7800721a 	stmdavc	r0, {r1, r3, r4, r9, ip, sp, lr}
    5d28:	72211a00 	eorvc	r1, r1, #0, 20
    5d2c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5d30:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d34:	72212517 	eorvc	r2, r1, #96468992	; 0x5c00000
    5d38:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5d3c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d40:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d44:	14460072 	strbne	r0, [r6], #-114	; 0x72
    5d48:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d4c:	21251724 	teqcs	r5, r4, lsr #14
    5d50:	829f2227 	addshi	r2, pc, #1879048194	; 0x70000002
    5d54:	fe08004e 	cdp2	0, 0, cr0, cr8, cr14, {2}
    5d58:	3608004e 	strcc	r0, [r8], -lr, asr #32
    5d5c:	72007100 	andvc	r7, r0, #0, 2
    5d60:	00782100 	rsbseq	r2, r8, r0, lsl #2
    5d64:	7200711a 	andvc	r7, r0, #-2147483642	; 0x80000006
    5d68:	71211a00 	teqvc	r1, r0, lsl #20
    5d6c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5d70:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d74:	71212517 	teqvc	r1, r7, lsl r5
    5d78:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5d7c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5d80:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5d84:	14460071 	strbne	r0, [r6], #-113	; 0x71
    5d88:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5d8c:	21251724 	teqcs	r5, r4, lsr #14
    5d90:	fe9f2227 	cdp2	2, 9, cr2, cr15, cr7, {1}
    5d94:	9008004e 	andls	r0, r8, lr, asr #32
    5d98:	3608004f 	strcc	r0, [r8], -pc, asr #32
    5d9c:	71007400 	tstvc	r0, r0, lsl #8
    5da0:	00722100 	rsbseq	r2, r2, r0, lsl #2
    5da4:	7100741a 	tstvc	r0, sl, lsl r4
    5da8:	74211a00 	strtvc	r1, [r1], #-2560	; 0xa00
    5dac:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    5db0:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5db4:	74212517 	strtvc	r2, [r1], #-1303	; 0x517
    5db8:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    5dbc:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5dc0:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5dc4:	14460074 	strbne	r0, [r6], #-116	; 0x74
    5dc8:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5dcc:	21251724 	teqcs	r5, r4, lsr #14
    5dd0:	909f2227 	addsls	r2, pc, r7, lsr #4
    5dd4:	0a08004f 	beq	205f18 <__Stack_Size+0x205718>
    5dd8:	40080050 	andmi	r0, r8, r0, asr r0
    5ddc:	7f949100 	svcvc	0x00949100
    5de0:	21007406 	tstcs	r0, r6, lsl #8
    5de4:	911a0071 	tstls	sl, r1, ror r0
    5de8:	74067f94 	strvc	r7, [r6], #-3988	; 0xf94
    5dec:	91211a00 	teqls	r1, r0, lsl #20
    5df0:	3d067f94 	stccc	15, cr7, [r6, #-592]	; 0xfffffdb0
    5df4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5df8:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5dfc:	7f949121 	svcvc	0x00949121
    5e00:	14143206 	ldrne	r3, [r4], #-518	; 0x206
    5e04:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e08:	27212517 			; <UNDEFINED> instruction: 0x27212517
    5e0c:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    5e10:	1f141446 	svcne	0x00141446
    5e14:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5e18:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5e1c:	00500a9f 			; <UNDEFINED> instruction: 0x00500a9f
    5e20:	0050a208 	subseq	sl, r0, r8, lsl #4
    5e24:	91004408 	tstls	r0, r8, lsl #8
    5e28:	91067f98 			; <UNDEFINED> instruction: 0x91067f98
    5e2c:	21067f94 			; <UNDEFINED> instruction: 0x21067f94
    5e30:	911a0074 	tstls	sl, r4, ror r0
    5e34:	91067f98 			; <UNDEFINED> instruction: 0x91067f98
    5e38:	1a067f94 	bne	1a5c90 <__Stack_Size+0x1a5490>
    5e3c:	7f989121 	svcvc	0x00989121
    5e40:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5e44:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e48:	91212517 	teqls	r1, r7, lsl r5
    5e4c:	32067f98 	andcc	r7, r6, #152, 30	; 0x260
    5e50:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5e54:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5e58:	98912721 	ldmls	r1, {r0, r5, r8, r9, sl, sp}
    5e5c:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5e60:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5e64:	21251724 	teqcs	r5, r4, lsr #14
    5e68:	a29f2227 	addsge	r2, pc, #1879048194	; 0x70000002
    5e6c:	5a080050 	bpl	205fb4 <__Stack_Size+0x2057b4>
    5e70:	46080051 			; <UNDEFINED> instruction: 0x46080051
    5e74:	7fa49100 	svcvc	0x00a49100
    5e78:	7f989106 	svcvc	0x00989106
    5e7c:	94912106 	ldrls	r2, [r1], #262	; 0x106
    5e80:	911a067f 	tstls	sl, pc, ror r6
    5e84:	91067fa4 	smlatbls	r6, r4, pc, r7	; <UNPREDICTABLE>
    5e88:	1a067f98 	bne	1a5cf0 <__Stack_Size+0x1a54f0>
    5e8c:	7fa49121 	svcvc	0x00a49121
    5e90:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5e94:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5e98:	91212517 	teqls	r1, r7, lsl r5
    5e9c:	32067fa4 	andcc	r7, r6, #164, 30	; 0x290
    5ea0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ea4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ea8:	a4912721 	ldrge	r2, [r1], #1825	; 0x721
    5eac:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5eb0:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5eb4:	21251724 	teqcs	r5, r4, lsr #14
    5eb8:	5a9f2227 	bpl	fe7ce75c <BootRAM+0xd73eefd>
    5ebc:	e4080051 	str	r0, [r8], #-81	; 0x51
    5ec0:	46080051 			; <UNDEFINED> instruction: 0x46080051
    5ec4:	7fa89100 	svcvc	0x00a89100
    5ec8:	7fa49106 	svcvc	0x00a49106
    5ecc:	98912106 	ldmls	r1, {r1, r2, r8, sp}
    5ed0:	911a067f 	tstls	sl, pc, ror r6
    5ed4:	91067fa8 	smlatbls	r6, r8, pc, r7	; <UNPREDICTABLE>
    5ed8:	1a067fa4 	bne	1a5d70 <__Stack_Size+0x1a5570>
    5edc:	7fa89121 	svcvc	0x00a89121
    5ee0:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5ee4:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5ee8:	91212517 	teqls	r1, r7, lsl r5
    5eec:	32067fa8 	andcc	r7, r6, #168, 30	; 0x2a0
    5ef0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5ef4:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5ef8:	a8912721 	ldmge	r1, {r0, r5, r8, r9, sl, sp}
    5efc:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5f00:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5f04:	21251724 	teqcs	r5, r4, lsr #14
    5f08:	e49f2227 	ldr	r2, [pc], #551	; 5f10 <__Stack_Size+0x5710>
    5f0c:	74080051 	strvc	r0, [r8], #-81	; 0x51
    5f10:	46080052 			; <UNDEFINED> instruction: 0x46080052
    5f14:	7f949100 	svcvc	0x00949100
    5f18:	7fa89106 	svcvc	0x00a89106
    5f1c:	a4912106 	ldrge	r2, [r1], #262	; 0x106
    5f20:	911a067f 	tstls	sl, pc, ror r6
    5f24:	91067f94 			; <UNDEFINED> instruction: 0x91067f94
    5f28:	1a067fa8 	bne	1a5dd0 <__Stack_Size+0x1a55d0>
    5f2c:	7f949121 	svcvc	0x00949121
    5f30:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5f34:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f38:	91212517 	teqls	r1, r7, lsl r5
    5f3c:	32067f94 	andcc	r7, r6, #148, 30	; 0x250
    5f40:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f44:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f48:	94912721 	ldrls	r2, [r1], #1825	; 0x721
    5f4c:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5f50:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5f54:	21251724 	teqcs	r5, r4, lsr #14
    5f58:	749f2227 	ldrvc	r2, [pc], #551	; 5f60 <__Stack_Size+0x5760>
    5f5c:	dc080052 	stcle	0, cr0, [r8], {82}	; 0x52
    5f60:	46080052 			; <UNDEFINED> instruction: 0x46080052
    5f64:	7fb09100 	svcvc	0x00b09100
    5f68:	7f949106 	svcvc	0x00949106
    5f6c:	a8912106 	ldmge	r1, {r1, r2, r8, sp}
    5f70:	911a067f 	tstls	sl, pc, ror r6
    5f74:	91067fb0 			; <UNDEFINED> instruction: 0x91067fb0
    5f78:	1a067f94 	bne	1a5dd0 <__Stack_Size+0x1a55d0>
    5f7c:	7fb09121 	svcvc	0x00b09121
    5f80:	14143d06 	ldrne	r3, [r4], #-3334	; 0xd06
    5f84:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    5f88:	91212517 	teqls	r1, r7, lsl r5
    5f8c:	32067fb0 	andcc	r7, r6, #176, 30	; 0x2c0
    5f90:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5f94:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5f98:	b0912721 	addslt	r2, r1, r1, lsr #14
    5f9c:	1446067f 	strbne	r0, [r6], #-1663	; 0x67f
    5fa0:	20231f14 	eorcs	r1, r3, r4, lsl pc
    5fa4:	21251724 	teqcs	r5, r4, lsr #14
    5fa8:	dc9f2227 	lfmle	f2, 4, [pc], {39}	; 0x27
    5fac:	50080052 	andpl	r0, r8, r2, asr r0
    5fb0:	3c080053 	stccc	0, cr0, [r8], {83}	; 0x53
    5fb4:	91007300 	mrsls	r7, LR_irq
    5fb8:	21067fb0 			; <UNDEFINED> instruction: 0x21067fb0
    5fbc:	067f9491 			; <UNDEFINED> instruction: 0x067f9491
    5fc0:	9100731a 	tstls	r0, sl, lsl r3
    5fc4:	1a067fb0 	bne	1a5e8c <__Stack_Size+0x1a568c>
    5fc8:	3d007321 	stccc	3, cr7, [r0, #-132]	; 0xffffff7c
    5fcc:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5fd0:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5fd4:	32007321 	andcc	r7, r0, #-2080374784	; 0x84000000
    5fd8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    5fdc:	25172420 	ldrcs	r2, [r7, #-1056]	; 0x420
    5fe0:	00732721 	rsbseq	r2, r3, r1, lsr #14
    5fe4:	1f141446 	svcne	0x00141446
    5fe8:	17242023 	strne	r2, [r4, -r3, lsr #32]!
    5fec:	22272125 	eorcs	r2, r7, #1073741833	; 0x40000009
    5ff0:	0053509f 			; <UNDEFINED> instruction: 0x0053509f
    5ff4:	0053cc08 	subseq	ip, r3, r8, lsl #24
    5ff8:	71003808 	tstvc	r0, r8, lsl #16
    5ffc:	21007300 	mrscs	r7, LR_irq
    6000:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    6004:	7300711a 	movwvc	r7, #282	; 0x11a
    6008:	71211a00 	teqvc	r1, r0, lsl #20
    600c:	14143d00 	ldrne	r3, [r4], #-3328	; 0xd00
    6010:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6014:	71212517 	teqvc	r1, r7, lsl r5
    6018:	14143200 	ldrne	r3, [r4], #-512	; 0x200
    601c:	2420231f 	strtcs	r2, [r0], #-799	; 0x31f
    6020:	27212517 			; <UNDEFINED> instruction: 0x27212517
    6024:	14460071 	strbne	r0, [r6], #-113	; 0x71
    6028:	20231f14 	eorcs	r1, r3, r4, lsl pc
    602c:	21251724 	teqcs	r5, r4, lsr #14
    6030:	009f2227 	addseq	r2, pc, r7, lsr #4
    6034:	00000000 	andeq	r0, r0, r0
    6038:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    603c:	94080035 	strls	r0, [r8], #-53	; 0x35
    6040:	06080035 			; <UNDEFINED> instruction: 0x06080035
    6044:	04935900 	ldreq	r5, [r3], #2304	; 0x900
    6048:	9401fc93 	strls	pc, [r1], #-3219	; 0xc93
    604c:	98080035 	stmdals	r8, {r0, r2, r4, r5}
    6050:	09080035 	stmdbeq	r8, {r0, r2, r4, r5}
    6054:	04935900 	ldreq	r5, [r3], #2304	; 0x900
    6058:	93049354 	movwls	r9, #17236	; 0x4354
    605c:	359801f8 	ldrcc	r0, [r8, #504]	; 0x1f8
    6060:	35a80800 	strcc	r0, [r8, #2048]!	; 0x800
    6064:	000b0800 	andeq	r0, fp, r0, lsl #16
    6068:	91049359 	tstls	r4, r9, asr r3
    606c:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    6070:	a801f893 	stmdage	r1, {r0, r1, r4, r7, fp, ip, sp, lr, pc}
    6074:	fe080035 	mcr2	0, 0, r0, cr8, cr5, {1}
    6078:	0c080035 	stceq	0, cr0, [r8], {53}	; 0x35
    607c:	935c9100 	cmpls	ip, #0, 2
    6080:	7fa49104 	svcvc	0x00a49104
    6084:	f8930493 			; <UNDEFINED> instruction: 0xf8930493
    6088:	0035fe01 	eorseq	pc, r5, r1, lsl #28
    608c:	00361c08 	eorseq	r1, r6, r8, lsl #24
    6090:	91000f08 	tstls	r0, r8, lsl #30
    6094:	9104935c 	tstls	r4, ip, asr r3
    6098:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    609c:	93049354 	movwls	r9, #17236	; 0x4354
    60a0:	361c01f4 			; <UNDEFINED> instruction: 0x361c01f4
    60a4:	36220800 	strtcc	r0, [r2], -r0, lsl #16
    60a8:	000f0800 	andeq	r0, pc, r0, lsl #16
    60ac:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    60b0:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    60b4:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    60b8:	2201f493 	andcs	pc, r1, #-1828716544	; 0x93000000
    60bc:	6a080036 	bvs	20619c <__Stack_Size+0x20599c>
    60c0:	11080036 	tstne	r8, r6, lsr r0
    60c4:	935c9100 	cmpls	ip, #0, 2
    60c8:	7fa49104 	svcvc	0x00a49104
    60cc:	a8910493 	ldmge	r1, {r0, r1, r4, r7, sl}
    60d0:	9304937f 	movwls	r9, #17279	; 0x437f
    60d4:	366a01f4 			; <UNDEFINED> instruction: 0x366a01f4
    60d8:	367a0800 	ldrbtcc	r0, [sl], -r0, lsl #16
    60dc:	00140800 	andseq	r0, r4, r0, lsl #16
    60e0:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    60e4:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    60e8:	7fa89104 	svcvc	0x00a89104
    60ec:	93540493 	cmpls	r4, #-1828716544	; 0x93000000
    60f0:	01f09304 	mvnseq	r9, r4, lsl #6
    60f4:	0800367a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, sl, ip, sp}
    60f8:	08003684 	stmdaeq	r0, {r2, r7, r9, sl, ip, sp}
    60fc:	5c910014 	ldcpl	0, cr0, [r1], {20}
    6100:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6104:	9104937f 	tstls	r4, pc, ror r3
    6108:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    610c:	93049353 	movwls	r9, #17235	; 0x4353
    6110:	368401f0 			; <UNDEFINED> instruction: 0x368401f0
    6114:	36ea0800 	strbtcc	r0, [sl], r0, lsl #16
    6118:	00160800 	andseq	r0, r6, r0, lsl #16
    611c:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6120:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6124:	7fa89104 	svcvc	0x00a89104
    6128:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    612c:	9304937f 	movwls	r9, #17279	; 0x437f
    6130:	36ea01f0 			; <UNDEFINED> instruction: 0x36ea01f0
    6134:	36f40800 	ldrbtcc	r0, [r4], r0, lsl #16
    6138:	00190800 	andseq	r0, r9, r0, lsl #16
    613c:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6140:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6144:	7fa89104 	svcvc	0x00a89104
    6148:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    614c:	5804937f 	stmdapl	r4, {r0, r1, r2, r3, r4, r5, r6, r8, r9, ip, pc}
    6150:	ec930493 	cfldrs	mvf0, [r3], {147}	; 0x93
    6154:	0036f401 	eorseq	pc, r6, r1, lsl #8
    6158:	00377e08 	eorseq	r7, r7, r8, lsl #28
    615c:	91001b08 	tstls	r0, r8, lsl #22
    6160:	9104935c 	tstls	r4, ip, asr r3
    6164:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    6168:	937fa891 	cmnls	pc, #9502720	; 0x910000
    616c:	7fac9104 	svcvc	0x00ac9104
    6170:	b0910493 	umullslt	r0, r1, r3, r4
    6174:	9304937f 	movwls	r9, #17279	; 0x437f
    6178:	377e01ec 	ldrbcc	r0, [lr, -ip, ror #3]!
    617c:	37fa0800 	ldrbcc	r0, [sl, r0, lsl #16]!
    6180:	00200800 	eoreq	r0, r0, r0, lsl #16
    6184:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6188:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    618c:	7fa89104 	svcvc	0x00a89104
    6190:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    6194:	9104937f 	tstls	r4, pc, ror r3
    6198:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    619c:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    61a0:	01e89304 	mvneq	r9, r4, lsl #6
    61a4:	080037fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    61a8:	080037fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, ip, sp}
    61ac:	5c910023 	ldcpl	0, cr0, [r1], {35}	; 0x23
    61b0:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    61b4:	9104937f 	tstls	r4, pc, ror r3
    61b8:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    61bc:	937fac91 	cmnls	pc, #37120	; 0x9100
    61c0:	7fb09104 	svcvc	0x00b09104
    61c4:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    61c8:	5b04937f 	blpl	12afcc <__Stack_Size+0x12a7cc>
    61cc:	e4930493 	ldr	r0, [r3], #1171	; 0x493
    61d0:	0037fe01 	eorseq	pc, r7, r1, lsl #28
    61d4:	00387a08 	eorseq	r7, r8, r8, lsl #20
    61d8:	91002508 	tstls	r0, r8, lsl #10
    61dc:	9104935c 	tstls	r4, ip, asr r3
    61e0:	04937fa4 	ldreq	r7, [r3], #4004	; 0xfa4
    61e4:	937fa891 	cmnls	pc, #9502720	; 0x910000
    61e8:	7fac9104 	svcvc	0x00ac9104
    61ec:	b0910493 	umullslt	r0, r1, r3, r4
    61f0:	9104937f 	tstls	r4, pc, ror r3
    61f4:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    61f8:	937fb891 	cmnls	pc, #9502720	; 0x910000
    61fc:	01e49304 	mvneq	r9, r4, lsl #6
    6200:	0800387a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp, ip, sp}
    6204:	0800389a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, sp}
    6208:	5c910028 	ldcpl	0, cr0, [r1], {40}	; 0x28
    620c:	a4910493 	ldrge	r0, [r1], #1171	; 0x493
    6210:	9104937f 	tstls	r4, pc, ror r3
    6214:	04937fa8 	ldreq	r7, [r3], #4008	; 0xfa8
    6218:	937fac91 	cmnls	pc, #37120	; 0x9100
    621c:	7fb09104 	svcvc	0x00b09104
    6220:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    6224:	9104937f 	tstls	r4, pc, ror r3
    6228:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    622c:	9304935b 	movwls	r9, #17243	; 0x435b
    6230:	389a01e0 	ldmcc	sl, {r5, r6, r7, r8}
    6234:	3d760800 	ldclcc	8, cr0, [r6, #-0]
    6238:	002a0800 	eoreq	r0, sl, r0, lsl #16
    623c:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6240:	937fa491 	cmnls	pc, #-1862270976	; 0x91000000
    6244:	7fa89104 	svcvc	0x00a89104
    6248:	ac910493 	cfldrsge	mvf0, [r1], {147}	; 0x93
    624c:	9104937f 	tstls	r4, pc, ror r3
    6250:	04937fb0 	ldreq	r7, [r3], #4016	; 0xfb0
    6254:	937fb491 	cmnls	pc, #-1862270976	; 0x91000000
    6258:	7fb89104 	svcvc	0x00b89104
    625c:	bc910493 	cfldrslt	mvf0, [r1], {147}	; 0x93
    6260:	9304937f 	movwls	r9, #17279	; 0x437f
    6264:	3d7601e0 	ldfcce	f0, [r6, #-896]!	; 0xfffffc80
    6268:	3dde0800 	ldclcc	8, cr0, [lr]
    626c:	00590800 	subseq	r0, r9, r0, lsl #16
    6270:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6274:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6278:	08019404 	stmdaeq	r1, {r2, sl, ip, pc}
    627c:	24481aff 	strbcs	r1, [r8], #-2815	; 0xaff
    6280:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6284:	08019405 	stmdaeq	r1, {r0, r2, sl, ip, pc}
    6288:	24401aff 	strbcs	r1, [r0], #-2815	; 0xaff
    628c:	5101f321 	tstpl	r1, r1, lsr #6
    6290:	01940623 	orrseq	r0, r4, r3, lsr #12
    6294:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6298:	01f32124 	mvnseq	r2, r4, lsr #2
    629c:	94072351 	strls	r2, [r7], #-849	; 0x351
    62a0:	1aff0801 	bne	fffc82ac <BootRAM+0xef38a4d>
    62a4:	04939f21 	ldreq	r9, [r3], #3873	; 0xf21
    62a8:	937fa891 	cmnls	pc, #9502720	; 0x910000
    62ac:	7fac9104 	svcvc	0x00ac9104
    62b0:	b0910493 	umullslt	r0, r1, r3, r4
    62b4:	9104937f 	tstls	r4, pc, ror r3
    62b8:	04937fb4 	ldreq	r7, [r3], #4020	; 0xfb4
    62bc:	937fb891 	cmnls	pc, #9502720	; 0x910000
    62c0:	7fbc9104 	svcvc	0x00bc9104
    62c4:	e0930493 	umulls	r0, r3, r3, r4
    62c8:	003dde01 	eorseq	sp, sp, r1, lsl #28
    62cc:	003e5a08 	eorseq	r5, lr, r8, lsl #20
    62d0:	91008808 	tstls	r0, r8, lsl #16
    62d4:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    62d8:	04235101 	strteq	r5, [r3], #-257	; 0x101
    62dc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    62e0:	f324481a 	vceq.i32	d4, d4, d10
    62e4:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    62e8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    62ec:	2124401a 	teqcs	r4, sl, lsl r0
    62f0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    62f4:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    62f8:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    62fc:	5101f321 	tstpl	r1, r1, lsr #6
    6300:	01940723 	orrseq	r0, r4, r3, lsr #14
    6304:	211aff08 	tstcs	sl, r8, lsl #30
    6308:	f304939f 	vcge.u8	d9, d20, d15
    630c:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    6310:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6314:	f324481a 	vceq.i32	d4, d4, d10
    6318:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    631c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6320:	2124401a 	teqcs	r4, sl, lsl r0
    6324:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6328:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    632c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6330:	5101f321 	tstpl	r1, r1, lsr #6
    6334:	01940b23 	orrseq	r0, r4, r3, lsr #22
    6338:	211aff08 	tstcs	sl, r8, lsl #30
    633c:	9104939f 			; <UNDEFINED> instruction: 0x9104939f
    6340:	04937fac 	ldreq	r7, [r3], #4012	; 0xfac
    6344:	937fb091 	cmnls	pc, #145	; 0x91
    6348:	7fb49104 	svcvc	0x00b49104
    634c:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6350:	9104937f 	tstls	r4, pc, ror r3
    6354:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    6358:	5a01e093 	bpl	7e5ac <__Stack_Size+0x7ddac>
    635c:	a608003e 			; <UNDEFINED> instruction: 0xa608003e
    6360:	b708003e 	smladxlt	r8, lr, r0, r0
    6364:	935c9100 	cmpls	ip, #0, 2
    6368:	5101f304 	tstpl	r1, r4, lsl #6
    636c:	01940423 	orrseq	r0, r4, r3, lsr #8
    6370:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6374:	5101f324 	tstpl	r1, r4, lsr #6
    6378:	01940523 	orrseq	r0, r4, r3, lsr #10
    637c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6380:	01f32124 	mvnseq	r2, r4, lsr #2
    6384:	94062351 	strls	r2, [r6], #-849	; 0x351
    6388:	1aff0801 	bne	fffc8394 <BootRAM+0xef38b35>
    638c:	f3212438 	vqshl.u32	d2, d24, d1
    6390:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6394:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6398:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    639c:	5101f304 	tstpl	r1, r4, lsl #6
    63a0:	01940823 	orrseq	r0, r4, r3, lsr #16
    63a4:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    63a8:	5101f324 	tstpl	r1, r4, lsr #6
    63ac:	01940923 	orrseq	r0, r4, r3, lsr #18
    63b0:	401aff08 	andsmi	pc, sl, r8, lsl #30
    63b4:	01f32124 	mvnseq	r2, r4, lsr #2
    63b8:	940a2351 	strls	r2, [sl], #-849	; 0x351
    63bc:	1aff0801 	bne	fffc83c8 <BootRAM+0xef38b69>
    63c0:	f3212438 	vqshl.u32	d2, d24, d1
    63c4:	0b235101 	bleq	8da7d0 <__Stack_Size+0x8d9fd0>
    63c8:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    63cc:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    63d0:	5101f304 	tstpl	r1, r4, lsl #6
    63d4:	01940c23 	orrseq	r0, r4, r3, lsr #24
    63d8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    63dc:	5101f324 	tstpl	r1, r4, lsr #6
    63e0:	01940d23 	orrseq	r0, r4, r3, lsr #26
    63e4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    63e8:	01f32124 	mvnseq	r2, r4, lsr #2
    63ec:	940e2351 	strls	r2, [lr], #-849	; 0x351
    63f0:	1aff0801 	bne	fffc83fc <BootRAM+0xef38b9d>
    63f4:	f3212438 	vqshl.u32	d2, d24, d1
    63f8:	0f235101 	svceq	0x00235101
    63fc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6400:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6404:	7fb09104 	svcvc	0x00b09104
    6408:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    640c:	9104937f 	tstls	r4, pc, ror r3
    6410:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6414:	937fbc91 	cmnls	pc, #37120	; 0x9100
    6418:	01e09304 	mvneq	r9, r4, lsl #6
    641c:	08003ea6 	stmdaeq	r0, {r1, r2, r5, r7, r9, sl, fp, ip, sp}
    6420:	08003f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    6424:	5c9100e6 	ldcpl	0, cr0, [r1], {230}	; 0xe6
    6428:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    642c:	94042351 	strls	r2, [r4], #-849	; 0x351
    6430:	1aff0801 	bne	fffc843c <BootRAM+0xef38bdd>
    6434:	01f32448 	mvnseq	r2, r8, asr #8
    6438:	94052351 	strls	r2, [r5], #-849	; 0x351
    643c:	1aff0801 	bne	fffc8448 <BootRAM+0xef38be9>
    6440:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6444:	06235101 	strteq	r5, [r3], -r1, lsl #2
    6448:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    644c:	2124381a 	teqcs	r4, sl, lsl r8
    6450:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6454:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    6458:	9f211aff 	svcls	0x00211aff
    645c:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6460:	94082351 	strls	r2, [r8], #-849	; 0x351
    6464:	1aff0801 	bne	fffc8470 <BootRAM+0xef38c11>
    6468:	01f32448 	mvnseq	r2, r8, asr #8
    646c:	94092351 	strls	r2, [r9], #-849	; 0x351
    6470:	1aff0801 	bne	fffc847c <BootRAM+0xef38c1d>
    6474:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6478:	0a235101 	beq	8da884 <__Stack_Size+0x8da084>
    647c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6480:	2124381a 	teqcs	r4, sl, lsl r8
    6484:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6488:	0801940b 	stmdaeq	r1, {r0, r1, r3, sl, ip, pc}
    648c:	9f211aff 	svcls	0x00211aff
    6490:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6494:	940c2351 	strls	r2, [ip], #-849	; 0x351
    6498:	1aff0801 	bne	fffc84a4 <BootRAM+0xef38c45>
    649c:	01f32448 	mvnseq	r2, r8, asr #8
    64a0:	940d2351 	strls	r2, [sp], #-849	; 0x351
    64a4:	1aff0801 	bne	fffc84b0 <BootRAM+0xef38c51>
    64a8:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    64ac:	0e235101 	sufeqs	f5, f3, f1
    64b0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    64b4:	2124381a 	teqcs	r4, sl, lsl r8
    64b8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    64bc:	0801940f 	stmdaeq	r1, {r0, r1, r2, r3, sl, ip, pc}
    64c0:	9f211aff 	svcls	0x00211aff
    64c4:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    64c8:	94102351 	ldrls	r2, [r0], #-849	; 0x351
    64cc:	1aff0801 	bne	fffc84d8 <BootRAM+0xef38c79>
    64d0:	01f32448 	mvnseq	r2, r8, asr #8
    64d4:	94112351 	ldrls	r2, [r1], #-849	; 0x351
    64d8:	1aff0801 	bne	fffc84e4 <BootRAM+0xef38c85>
    64dc:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    64e0:	12235101 	eorne	r5, r3, #1073741824	; 0x40000000
    64e4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    64e8:	2124381a 	teqcs	r4, sl, lsl r8
    64ec:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    64f0:	08019413 	stmdaeq	r1, {r0, r1, r4, sl, ip, pc}
    64f4:	9f211aff 	svcls	0x00211aff
    64f8:	b4910493 	ldrlt	r0, [r1], #1171	; 0x493
    64fc:	9104937f 	tstls	r4, pc, ror r3
    6500:	04937fb8 	ldreq	r7, [r3], #4024	; 0xfb8
    6504:	937fbc91 	cmnls	pc, #37120	; 0x9100
    6508:	01e09304 	mvneq	r9, r4, lsl #6
    650c:	08003f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, sp}
    6510:	08003ff2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp}
    6514:	5c910115 	ldfpls	f0, [r1], {21}
    6518:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    651c:	94042351 	strls	r2, [r4], #-849	; 0x351
    6520:	1aff0801 	bne	fffc852c <BootRAM+0xef38ccd>
    6524:	01f32448 	mvnseq	r2, r8, asr #8
    6528:	94052351 	strls	r2, [r5], #-849	; 0x351
    652c:	1aff0801 	bne	fffc8538 <BootRAM+0xef38cd9>
    6530:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6534:	06235101 	strteq	r5, [r3], -r1, lsl #2
    6538:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    653c:	2124381a 	teqcs	r4, sl, lsl r8
    6540:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6544:	08019407 	stmdaeq	r1, {r0, r1, r2, sl, ip, pc}
    6548:	9f211aff 	svcls	0x00211aff
    654c:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6550:	94082351 	strls	r2, [r8], #-849	; 0x351
    6554:	1aff0801 	bne	fffc8560 <BootRAM+0xef38d01>
    6558:	01f32448 	mvnseq	r2, r8, asr #8
    655c:	94092351 	strls	r2, [r9], #-849	; 0x351
    6560:	1aff0801 	bne	fffc856c <BootRAM+0xef38d0d>
    6564:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6568:	0a235101 	beq	8da974 <__Stack_Size+0x8da174>
    656c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6570:	2124381a 	teqcs	r4, sl, lsl r8
    6574:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6578:	0801940b 	stmdaeq	r1, {r0, r1, r3, sl, ip, pc}
    657c:	9f211aff 	svcls	0x00211aff
    6580:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    6584:	940c2351 	strls	r2, [ip], #-849	; 0x351
    6588:	1aff0801 	bne	fffc8594 <BootRAM+0xef38d35>
    658c:	01f32448 	mvnseq	r2, r8, asr #8
    6590:	940d2351 	strls	r2, [sp], #-849	; 0x351
    6594:	1aff0801 	bne	fffc85a0 <BootRAM+0xef38d41>
    6598:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    659c:	0e235101 	sufeqs	f5, f3, f1
    65a0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    65a4:	2124381a 	teqcs	r4, sl, lsl r8
    65a8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    65ac:	0801940f 	stmdaeq	r1, {r0, r1, r2, r3, sl, ip, pc}
    65b0:	9f211aff 	svcls	0x00211aff
    65b4:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    65b8:	94102351 	ldrls	r2, [r0], #-849	; 0x351
    65bc:	1aff0801 	bne	fffc85c8 <BootRAM+0xef38d69>
    65c0:	01f32448 	mvnseq	r2, r8, asr #8
    65c4:	94112351 	ldrls	r2, [r1], #-849	; 0x351
    65c8:	1aff0801 	bne	fffc85d4 <BootRAM+0xef38d75>
    65cc:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    65d0:	12235101 	eorne	r5, r3, #1073741824	; 0x40000000
    65d4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    65d8:	2124381a 	teqcs	r4, sl, lsl r8
    65dc:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    65e0:	08019413 	stmdaeq	r1, {r0, r1, r4, sl, ip, pc}
    65e4:	9f211aff 	svcls	0x00211aff
    65e8:	01f30493 			; <UNDEFINED> instruction: 0x01f30493
    65ec:	94142351 	ldrls	r2, [r4], #-849	; 0x351
    65f0:	1aff0801 	bne	fffc85fc <BootRAM+0xef38d9d>
    65f4:	01f32448 	mvnseq	r2, r8, asr #8
    65f8:	94152351 	ldrls	r2, [r5], #-849	; 0x351
    65fc:	1aff0801 	bne	fffc8608 <BootRAM+0xef38da9>
    6600:	f3212440 	vshl.u32	q1, q0, <illegal reg q0.5>
    6604:	16235101 	strtne	r5, [r3], -r1, lsl #2
    6608:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    660c:	2124381a 	teqcs	r4, sl, lsl r8
    6610:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6614:	08019417 	stmdaeq	r1, {r0, r1, r2, r4, sl, ip, pc}
    6618:	9f211aff 	svcls	0x00211aff
    661c:	b8910493 	ldmlt	r1, {r0, r1, r4, r7, sl}
    6620:	9104937f 	tstls	r4, pc, ror r3
    6624:	04937fbc 	ldreq	r7, [r3], #4028	; 0xfbc
    6628:	f201e093 	vqadd.s8	d14, d17, d3
    662c:	7608003f 			; <UNDEFINED> instruction: 0x7608003f
    6630:	44080040 	strmi	r0, [r8], #-64	; 0x40
    6634:	935c9101 	cmpls	ip, #1073741824	; 0x40000000
    6638:	5101f304 	tstpl	r1, r4, lsl #6
    663c:	01940423 	orrseq	r0, r4, r3, lsr #8
    6640:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6644:	5101f324 	tstpl	r1, r4, lsr #6
    6648:	01940523 	orrseq	r0, r4, r3, lsr #10
    664c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6650:	01f32124 	mvnseq	r2, r4, lsr #2
    6654:	94062351 	strls	r2, [r6], #-849	; 0x351
    6658:	1aff0801 	bne	fffc8664 <BootRAM+0xef38e05>
    665c:	f3212438 	vqshl.u32	d2, d24, d1
    6660:	07235101 	streq	r5, [r3, -r1, lsl #2]!
    6664:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6668:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    666c:	5101f304 	tstpl	r1, r4, lsl #6
    6670:	01940823 	orrseq	r0, r4, r3, lsr #16
    6674:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6678:	5101f324 	tstpl	r1, r4, lsr #6
    667c:	01940923 	orrseq	r0, r4, r3, lsr #18
    6680:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6684:	01f32124 	mvnseq	r2, r4, lsr #2
    6688:	940a2351 	strls	r2, [sl], #-849	; 0x351
    668c:	1aff0801 	bne	fffc8698 <BootRAM+0xef38e39>
    6690:	f3212438 	vqshl.u32	d2, d24, d1
    6694:	0b235101 	bleq	8daaa0 <__Stack_Size+0x8da2a0>
    6698:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    669c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    66a0:	5101f304 	tstpl	r1, r4, lsl #6
    66a4:	01940c23 	orrseq	r0, r4, r3, lsr #24
    66a8:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    66ac:	5101f324 	tstpl	r1, r4, lsr #6
    66b0:	01940d23 	orrseq	r0, r4, r3, lsr #26
    66b4:	401aff08 	andsmi	pc, sl, r8, lsl #30
    66b8:	01f32124 	mvnseq	r2, r4, lsr #2
    66bc:	940e2351 	strls	r2, [lr], #-849	; 0x351
    66c0:	1aff0801 	bne	fffc86cc <BootRAM+0xef38e6d>
    66c4:	f3212438 	vqshl.u32	d2, d24, d1
    66c8:	0f235101 	svceq	0x00235101
    66cc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    66d0:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    66d4:	5101f304 	tstpl	r1, r4, lsl #6
    66d8:	01941023 	orrseq	r1, r4, r3, lsr #32
    66dc:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    66e0:	5101f324 	tstpl	r1, r4, lsr #6
    66e4:	01941123 	orrseq	r1, r4, r3, lsr #2
    66e8:	401aff08 	andsmi	pc, sl, r8, lsl #30
    66ec:	01f32124 	mvnseq	r2, r4, lsr #2
    66f0:	94122351 	ldrls	r2, [r2], #-849	; 0x351
    66f4:	1aff0801 	bne	fffc8700 <BootRAM+0xef38ea1>
    66f8:	f3212438 	vqshl.u32	d2, d24, d1
    66fc:	13235101 	teqne	r3, #1073741824	; 0x40000000
    6700:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6704:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6708:	5101f304 	tstpl	r1, r4, lsl #6
    670c:	01941423 	orrseq	r1, r4, r3, lsr #8
    6710:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6714:	5101f324 	tstpl	r1, r4, lsr #6
    6718:	01941523 	orrseq	r1, r4, r3, lsr #10
    671c:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6720:	01f32124 	mvnseq	r2, r4, lsr #2
    6724:	94162351 	ldrls	r2, [r6], #-849	; 0x351
    6728:	1aff0801 	bne	fffc8734 <BootRAM+0xef38ed5>
    672c:	f3212438 	vqshl.u32	d2, d24, d1
    6730:	17235101 	strne	r5, [r3, -r1, lsl #2]!
    6734:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6738:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    673c:	5101f304 	tstpl	r1, r4, lsl #6
    6740:	01941823 	orrseq	r1, r4, r3, lsr #16
    6744:	481aff08 	ldmdami	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    6748:	5101f324 	tstpl	r1, r4, lsr #6
    674c:	01941923 	orrseq	r1, r4, r3, lsr #18
    6750:	401aff08 	andsmi	pc, sl, r8, lsl #30
    6754:	01f32124 	mvnseq	r2, r4, lsr #2
    6758:	941a2351 	ldrls	r2, [sl], #-849	; 0x351
    675c:	1aff0801 	bne	fffc8768 <BootRAM+0xef38f09>
    6760:	f3212438 	vqshl.u32	d2, d24, d1
    6764:	1b235101 	blne	8dab70 <__Stack_Size+0x8da370>
    6768:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    676c:	939f211a 	orrsls	r2, pc, #-2147483642	; 0x80000006
    6770:	7fbc9104 	svcvc	0x00bc9104
    6774:	e0930493 	umulls	r0, r3, r3, r4
    6778:	00407601 	subeq	r7, r0, r1, lsl #12
    677c:	0053ee08 	subseq	lr, r3, r8, lsl #28
    6780:	91017308 	tstls	r1, r8, lsl #6
    6784:	f304935c 	vcge.u8	<illegal reg q4.5>, q2, q6
    6788:	04235101 	strteq	r5, [r3], #-257	; 0x101
    678c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6790:	f324481a 	vceq.i32	d4, d4, d10
    6794:	05235101 	streq	r5, [r3, #-257]!	; 0x101
    6798:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    679c:	2124401a 	teqcs	r4, sl, lsl r0
    67a0:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    67a4:	08019406 	stmdaeq	r1, {r1, r2, sl, ip, pc}
    67a8:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    67ac:	5101f321 	tstpl	r1, r1, lsr #6
    67b0:	01940723 	orrseq	r0, r4, r3, lsr #14
    67b4:	211aff08 	tstcs	sl, r8, lsl #30
    67b8:	f304939f 	vcge.u8	d9, d20, d15
    67bc:	08235101 	stmdaeq	r3!, {r0, r8, ip, lr}
    67c0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67c4:	f324481a 	vceq.i32	d4, d4, d10
    67c8:	09235101 	stmdbeq	r3!, {r0, r8, ip, lr}
    67cc:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67d0:	2124401a 	teqcs	r4, sl, lsl r0
    67d4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    67d8:	0801940a 	stmdaeq	r1, {r1, r3, sl, ip, pc}
    67dc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    67e0:	5101f321 	tstpl	r1, r1, lsr #6
    67e4:	01940b23 	orrseq	r0, r4, r3, lsr #22
    67e8:	211aff08 	tstcs	sl, r8, lsl #30
    67ec:	f304939f 	vcge.u8	d9, d20, d15
    67f0:	0c235101 	stfeqs	f5, [r3], #-4
    67f4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    67f8:	f324481a 	vceq.i32	d4, d4, d10
    67fc:	0d235101 	stfeqs	f5, [r3, #-4]!
    6800:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6804:	2124401a 	teqcs	r4, sl, lsl r0
    6808:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    680c:	0801940e 	stmdaeq	r1, {r1, r2, r3, sl, ip, pc}
    6810:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6814:	5101f321 	tstpl	r1, r1, lsr #6
    6818:	01940f23 	orrseq	r0, r4, r3, lsr #30
    681c:	211aff08 	tstcs	sl, r8, lsl #30
    6820:	f304939f 	vcge.u8	d9, d20, d15
    6824:	10235101 	eorne	r5, r3, r1, lsl #2
    6828:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    682c:	f324481a 	vceq.i32	d4, d4, d10
    6830:	11235101 	teqne	r3, r1, lsl #2
    6834:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6838:	2124401a 	teqcs	r4, sl, lsl r0
    683c:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6840:	08019412 	stmdaeq	r1, {r1, r4, sl, ip, pc}
    6844:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    6848:	5101f321 	tstpl	r1, r1, lsr #6
    684c:	01941323 	orrseq	r1, r4, r3, lsr #6
    6850:	211aff08 	tstcs	sl, r8, lsl #30
    6854:	f304939f 	vcge.u8	d9, d20, d15
    6858:	14235101 	strtne	r5, [r3], #-257	; 0x101
    685c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6860:	f324481a 	vceq.i32	d4, d4, d10
    6864:	15235101 	strne	r5, [r3, #-257]!	; 0x101
    6868:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    686c:	2124401a 	teqcs	r4, sl, lsl r0
    6870:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    6874:	08019416 	stmdaeq	r1, {r1, r2, r4, sl, ip, pc}
    6878:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    687c:	5101f321 	tstpl	r1, r1, lsr #6
    6880:	01941723 	orrseq	r1, r4, r3, lsr #14
    6884:	211aff08 	tstcs	sl, r8, lsl #30
    6888:	f304939f 	vcge.u8	d9, d20, d15
    688c:	18235101 	stmdane	r3!, {r0, r8, ip, lr}
    6890:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    6894:	f324481a 	vceq.i32	d4, d4, d10
    6898:	19235101 	stmdbne	r3!, {r0, r8, ip, lr}
    689c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68a0:	2124401a 	teqcs	r4, sl, lsl r0
    68a4:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68a8:	0801941a 	stmdaeq	r1, {r1, r3, r4, sl, ip, pc}
    68ac:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    68b0:	5101f321 	tstpl	r1, r1, lsr #6
    68b4:	01941b23 	orrseq	r1, r4, r3, lsr #22
    68b8:	211aff08 	tstcs	sl, r8, lsl #30
    68bc:	f304939f 	vcge.u8	d9, d20, d15
    68c0:	1c235101 	stfnes	f5, [r3], #-4
    68c4:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68c8:	f324481a 	vceq.i32	d4, d4, d10
    68cc:	1d235101 	stfnes	f5, [r3, #-4]!
    68d0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    68d4:	2124401a 	teqcs	r4, sl, lsl r0
    68d8:	235101f3 	cmpcs	r1, #-1073741764	; 0xc000003c
    68dc:	0801941e 	stmdaeq	r1, {r1, r2, r3, r4, sl, ip, pc}
    68e0:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    68e4:	5101f321 	tstpl	r1, r1, lsr #6
    68e8:	01941f23 	orrseq	r1, r4, r3, lsr #30
    68ec:	211aff08 	tstcs	sl, r8, lsl #30
    68f0:	9304939f 	movwls	r9, #17311	; 0x439f
    68f4:	53ee01e0 	mvnpl	r0, #224, 2	; 0x38
    68f8:	54100800 	ldrpl	r0, [r0], #-2048	; 0x800
    68fc:	00070800 	andeq	r0, r7, r0, lsl #16
    6900:	04935c91 	ldreq	r5, [r3], #3217	; 0xc91
    6904:	1001fc93 	mulne	r1, r3, ip
    6908:	28080054 	stmdacs	r8, {r2, r4, r6}
    690c:	07080054 	smlsdeq	r8, r4, r0, r0
    6910:	935c7d00 	cmpls	ip, #0, 26
    6914:	01fc9304 	mvnseq	r9, r4, lsl #6
	...
    6920:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    6924:	08003c44 	stmdaeq	r0, {r2, r6, sl, fp, ip, sp}
    6928:	ac540001 	mrrcge	0, 0, r0, r4, cr1
    692c:	f408003c 	vst4.8	{d0-d3}, [r8 :256], ip
    6930:	0108003f 	tsteq	r8, pc, lsr r0
    6934:	40805500 	addmi	r5, r0, r0, lsl #10
    6938:	423e0800 	eorsmi	r0, lr, #0, 16
    693c:	00010800 	andeq	r0, r1, r0, lsl #16
    6940:	00423e5c 	subeq	r3, r2, ip, asr lr
    6944:	0043a808 	subeq	sl, r3, r8, lsl #16
    6948:	54000108 	strpl	r0, [r0], #-264	; 0x108
    694c:	08004404 	stmdaeq	r0, {r2, sl, lr}
    6950:	08004788 	stmdaeq	r0, {r3, r7, r8, r9, sl, lr}
    6954:	dc570001 	mrrcle	0, 0, r0, r7, cr1
    6958:	4c080047 	stcmi	0, cr0, [r8], {71}	; 0x47
    695c:	0108004b 	tsteq	r8, fp, asr #32
    6960:	4bb25800 	blmi	fec9c968 <BootRAM+0xdc0d109>
    6964:	4f500800 	svcmi	0x00500800
    6968:	00010800 	andeq	r0, r1, r0, lsl #16
    696c:	004faa56 	subeq	sl, pc, r6, asr sl	; <UNPREDICTABLE>
    6970:	004fbc08 	subeq	fp, pc, r8, lsl #24
    6974:	59000108 	stmdbpl	r0, {r3, r8}
    6978:	08004fbc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, sl, fp, lr}
    697c:	08004fe6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, r9, sl, fp, lr}
    6980:	e65a0001 	ldrb	r0, [sl], -r1
    6984:	1e08004f 	cdpne	0, 0, cr0, cr8, cr15, {2}
    6988:	03080052 	movweq	r0, #32850	; 0x8052
    698c:	7f989100 	svcvc	0x00989100
    6990:	0800521e 	stmdaeq	r0, {r1, r2, r3, r4, r9, ip, lr}
    6994:	08005396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip, lr}
    6998:	00520001 	subseq	r0, r2, r1
    699c:	00000000 	andeq	r0, r0, r0
    69a0:	42000000 	andmi	r0, r0, #0
    69a4:	8c08003c 	stchi	0, cr0, [r8], {60}	; 0x3c
    69a8:	0108003f 	tsteq	r8, pc, lsr r0
    69ac:	3fe05700 	svccc	0x00e05700
    69b0:	43400800 	movtmi	r0, #2048	; 0x800
    69b4:	00010800 	andeq	r0, r1, r0, lsl #16
    69b8:	00439453 	subeq	r9, r3, r3, asr r4
    69bc:	00470808 	subeq	r0, r7, r8, lsl #16
    69c0:	56000108 	strpl	r0, [r0], -r8, lsl #2
    69c4:	08004774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, lr}
    69c8:	08004adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp, lr}
    69cc:	34560001 	ldrbcc	r0, [r6], #-1
    69d0:	ce08004b 	cdpgt	0, 0, cr0, cr8, cr11, {2}
    69d4:	0108004e 	tsteq	r8, lr, asr #32
    69d8:	4f3c5000 	svcmi	0x003c5000
    69dc:	51740800 	cmnpl	r4, r0, lsl #16
    69e0:	00030800 	andeq	r0, r3, r0, lsl #16
    69e4:	747f9491 	ldrbtvc	r9, [pc], #-1169	; 69ec <__Stack_Size+0x61ec>
    69e8:	22080051 	andcs	r0, r8, #81	; 0x51
    69ec:	01080053 	qaddeq	r0, r3, r8
    69f0:	53805c00 	orrpl	r5, r0, #0, 24
    69f4:	53e20800 	mvnpl	r0, #0, 16
    69f8:	00010800 	andeq	r0, r1, r0, lsl #16
    69fc:	00000054 	andeq	r0, r0, r4, asr r0
    6a00:	00000000 	andeq	r0, r0, r0
    6a04:	003c4000 	eorseq	r4, ip, r0
    6a08:	003f0e08 	eorseq	r0, pc, r8, lsl #28
    6a0c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    6a10:	08003f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, sp}
    6a14:	080042cc 	stmdaeq	r0, {r2, r3, r6, r7, r9, lr}
    6a18:	22520001 	subscs	r0, r2, #1
    6a1c:	9a080043 	bls	206b30 <__Stack_Size+0x206330>
    6a20:	01080046 	tsteq	r8, r6, asr #32
    6a24:	46ee5000 	strbtmi	r5, [lr], r0
    6a28:	4a660800 	bmi	1988a30 <__Stack_Size+0x1988230>
    6a2c:	00010800 	andeq	r0, r1, r0, lsl #16
    6a30:	004ab850 	subeq	fp, sl, r0, asr r8
    6a34:	004e5a08 	subeq	r5, lr, r8, lsl #20
    6a38:	53000108 	movwpl	r0, #264	; 0x108
    6a3c:	08004eba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r9, sl, fp, lr}
    6a40:	08005290 	stmdaeq	r0, {r4, r7, r9, ip, lr}
    6a44:	ee540001 	cdp	0, 5, cr0, cr4, cr1, {0}
    6a48:	da080052 	ble	206b98 <__Stack_Size+0x206398>
    6a4c:	01080053 	qaddeq	r0, r3, r8
    6a50:	00005100 	andeq	r5, r0, r0, lsl #2
    6a54:	00000000 	andeq	r0, r0, r0
    6a58:	3c400000 	marcc	acc0, r0, r0
    6a5c:	3e920800 	cdpcc	8, 9, cr0, cr2, cr0, {0}
    6a60:	00010800 	andeq	r0, r1, r0, lsl #16
    6a64:	003ef65b 	eorseq	pc, lr, fp, asr r6	; <UNPREDICTABLE>
    6a68:	00425c08 	subeq	r5, r2, r8, lsl #24
    6a6c:	50000108 	andpl	r0, r0, r8, lsl #2
    6a70:	080042b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r9, lr}
    6a74:	08004612 	stmdaeq	r0, {r1, r4, r9, sl, lr}
    6a78:	785c0001 	ldmdavc	ip, {r0}^
    6a7c:	f8080046 			; <UNDEFINED> instruction: 0xf8080046
    6a80:	01080049 	tsteq	r8, r9, asr #32
    6a84:	4a4c5300 	bmi	131b68c <__Stack_Size+0x131ae8c>
    6a88:	4dd40800 	ldclmi	8, cr0, [r4]
    6a8c:	00010800 	andeq	r0, r1, r0, lsl #16
    6a90:	004e4851 	subeq	r4, lr, r1, asr r8
    6a94:	00522808 	subseq	r2, r2, r8, lsl #16
    6a98:	51000108 	tstpl	r0, r8, lsl #2
    6a9c:	0800527e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, ip, lr}
    6aa0:	080053cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, ip, lr}
    6aa4:	00530001 	subseq	r0, r3, r1
    6aa8:	00000000 	andeq	r0, r0, r0
    6aac:	40000000 	andmi	r0, r0, r0
    6ab0:	a808003c 	stmdage	r8, {r2, r3, r4, r5}
    6ab4:	0308003c 	movweq	r0, #32828	; 0x803c
    6ab8:	7f949100 	svcvc	0x00949100
    6abc:	08003ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, ip, sp}
    6ac0:	08003e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp, ip, sp}
    6ac4:	9c540001 	mrrcls	0, 0, r0, r4, cr1
    6ac8:	ec08003e 	stc	0, cr0, [r8], {62}	; 0x3e
    6acc:	01080041 	tsteq	r8, r1, asr #32
    6ad0:	42465400 	submi	r5, r6, #0, 8
    6ad4:	459c0800 	ldrmi	r0, [ip, #2048]	; 0x800
    6ad8:	00010800 	andeq	r0, r1, r0, lsl #16
    6adc:	0045fa59 	subeq	pc, r5, r9, asr sl	; <UNPREDICTABLE>
    6ae0:	00499c08 	subeq	r9, r9, r8, lsl #24
    6ae4:	52000108 	andpl	r0, r0, #8, 2
    6ae8:	080049dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp, lr}
    6aec:	08004d60 	stmdaeq	r0, {r5, r6, r8, sl, fp, lr}
    6af0:	cc520001 	mrrcgt	0, 0, r0, r2, cr1
    6af4:	8808004d 	stmdahi	r8, {r0, r2, r3, r6}
    6af8:	01080051 	qaddeq	r0, r1, r8
    6afc:	521e5200 	andspl	r5, lr, #0, 4
    6b00:	52380800 	eorspl	r0, r8, #0, 16
    6b04:	00010800 	andeq	r0, r1, r0, lsl #16
    6b08:	00523853 	subseq	r3, r2, r3, asr r8
    6b0c:	0053d808 	subseq	sp, r3, r8, lsl #16
    6b10:	91000308 	tstls	r0, r8, lsl #6
    6b14:	53d87fb0 	bicspl	r7, r8, #176, 30	; 0x2c0
    6b18:	53ea0800 	mvnpl	r0, #0, 16
    6b1c:	00080800 	andeq	r0, r8, r0, lsl #16
    6b20:	067fb091 			; <UNDEFINED> instruction: 0x067fb091
    6b24:	9f220077 	svcls	0x00220077
	...
    6b30:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    6b34:	08003db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp, ip, sp}
    6b38:	20530001 	subscs	r0, r3, r1
    6b3c:	7608003e 			; <UNDEFINED> instruction: 0x7608003e
    6b40:	01080041 	tsteq	r8, r1, asr #32
    6b44:	41c25100 	bicmi	r5, r2, r0, lsl #2
    6b48:	45280800 	strmi	r0, [r8, #-2048]!	; 0x800
    6b4c:	00010800 	andeq	r0, r1, r0, lsl #16
    6b50:	00457851 	subeq	r7, r5, r1, asr r8
    6b54:	00490808 	subeq	r0, r9, r8, lsl #16
    6b58:	51000108 	tstpl	r0, r8, lsl #2
    6b5c:	08004966 	stmdaeq	r0, {r1, r2, r5, r6, r8, fp, lr}
    6b60:	08004cde 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, fp, lr}
    6b64:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
    6b68:	0c08004d 	stceq	0, cr0, [r8], {77}	; 0x4d
    6b6c:	01080051 	qaddeq	r0, r1, r8
    6b70:	51765800 	cmnpl	r6, r0, lsl #16
    6b74:	519a0800 	orrspl	r0, sl, r0, lsl #16
    6b78:	00010800 	andeq	r0, r1, r0, lsl #16
    6b7c:	00519a5b 	subseq	r9, r1, fp, asr sl
    6b80:	0051a408 	subseq	sl, r1, r8, lsl #8
    6b84:	52000108 	andpl	r0, r0, #8, 2
    6b88:	080051a4 	stmdaeq	r0, {r2, r5, r7, r8, ip, lr}
    6b8c:	08005380 	stmdaeq	r0, {r7, r8, r9, ip, lr}
    6b90:	94910003 	ldrls	r0, [r1], #3
    6b94:	0053807f 	subseq	r8, r3, pc, ror r0
    6b98:	0053e808 	subseq	lr, r3, r8, lsl #16
    6b9c:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    6ba8:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    6bac:	08003d44 	stmdaeq	r0, {r2, r6, r8, sl, fp, ip, sp}
    6bb0:	a0520001 	subsge	r0, r2, r1
    6bb4:	fe08003d 	mcr2	0, 0, r0, cr8, cr13, {1}
    6bb8:	01080040 	tsteq	r8, r0, asr #32
    6bbc:	41625a00 	cmnmi	r2, r0, lsl #20
    6bc0:	44bc0800 	ldrtmi	r0, [ip], #2048	; 0x800
    6bc4:	00010800 	andeq	r0, r1, r0, lsl #16
    6bc8:	00450e5a 	subeq	r0, r5, sl, asr lr
    6bcc:	00489a08 	subeq	r9, r8, r8, lsl #20
    6bd0:	54000108 	strpl	r0, [r0], #-264	; 0x108
    6bd4:	080048f0 	stmdaeq	r0, {r4, r5, r6, r7, fp, lr}
    6bd8:	08004c34 	stmdaeq	r0, {r2, r4, r5, sl, fp, lr}
    6bdc:	d6550001 	ldrble	r0, [r5], -r1
    6be0:	5a08004c 	bpl	206d18 <__Stack_Size+0x206518>
    6be4:	01080050 	qaddeq	r0, r0, r8
    6be8:	50ba5500 	adcspl	r5, sl, r0, lsl #10
    6bec:	51200800 	teqpl	r0, r0, lsl #16
    6bf0:	00010800 	andeq	r0, r1, r0, lsl #16
    6bf4:	0051205a 	subseq	r2, r1, sl, asr r0
    6bf8:	00513208 	subseq	r3, r1, r8, lsl #4
    6bfc:	50000108 	andpl	r0, r0, r8, lsl #2
    6c00:	08005132 	stmdaeq	r0, {r1, r4, r5, r8, ip, lr}
    6c04:	080052e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r9, ip, lr}
    6c08:	a8910003 	ldmge	r1, {r0, r1}
    6c0c:	0052e67f 	subseq	lr, r2, pc, ror r6
    6c10:	0053d408 	subseq	sp, r3, r8, lsl #8
    6c14:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    6c20:	08003c40 	stmdaeq	r0, {r6, sl, fp, ip, sp}
    6c24:	08003cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, sp}
    6c28:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    6c2c:	9608003d 			; <UNDEFINED> instruction: 0x9608003d
    6c30:	01080040 	tsteq	r8, r0, asr #32
    6c34:	40fc5800 	rscsmi	r5, ip, r0, lsl #16
    6c38:	42b40800 	adcsmi	r0, r4, #0, 16
    6c3c:	00010800 	andeq	r0, r1, r0, lsl #16
    6c40:	0042b456 	subeq	fp, r2, r6, asr r4
    6c44:	00444e08 	subeq	r4, r4, r8, lsl #28
    6c48:	5b000108 	blpl	7070 <__Stack_Size+0x6870>
    6c4c:	080044a4 	stmdaeq	r0, {r2, r5, r7, sl, lr}
    6c50:	08004802 	stmdaeq	r0, {r1, fp, lr}
    6c54:	50550001 	subspl	r0, r5, r1
    6c58:	d6080048 	strle	r0, [r8], -r8, asr #32
    6c5c:	0108004b 	tsteq	r8, fp, asr #32
    6c60:	4c265c00 	stcmi	12, cr5, [r6], #-0
    6c64:	4fc00800 	svcmi	0x00c00800
    6c68:	00010800 	andeq	r0, r1, r0, lsl #16
    6c6c:	0050205c 	subseq	r2, r0, ip, asr r0
    6c70:	00507e08 	subseq	r7, r0, r8, lsl #28
    6c74:	50000108 	andpl	r0, r0, r8, lsl #2
    6c78:	0800507e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, ip, lr}
    6c7c:	0800508a 	stmdaeq	r0, {r1, r3, r7, ip, lr}
    6c80:	8a5b0001 	bhi	16c6c8c <__Stack_Size+0x16c648c>
    6c84:	7a080050 	bvc	206dcc <__Stack_Size+0x2065cc>
    6c88:	03080052 	movweq	r0, #32850	; 0x8052
    6c8c:	7fa49100 	svcvc	0x00a49100
    6c90:	0800527a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r9, ip, lr}
    6c94:	080053c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, ip, lr}
    6c98:	00500001 	subseq	r0, r0, r1
    6c9c:	00000000 	andeq	r0, r0, r0
    6ca0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6ca4:	4a080054 	bmi	206dfc <__Stack_Size+0x2065fc>
    6ca8:	01080054 	qaddeq	r0, r4, r8
    6cac:	544a5000 	strbpl	r5, [sl], #-0
    6cb0:	547a0800 	ldrbtpl	r0, [sl], #-2048	; 0x800
    6cb4:	00010800 	andeq	r0, r1, r0, lsl #16
    6cb8:	00547a56 	subseq	r7, r4, r6, asr sl
    6cbc:	00548208 	subseq	r8, r4, r8, lsl #4
    6cc0:	50000108 	andpl	r0, r0, r8, lsl #2
    6cc4:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
    6cc8:	08005490 	stmdaeq	r0, {r4, r7, sl, ip, lr}
    6ccc:	90560001 	subsls	r0, r6, r1
    6cd0:	94080054 	strls	r0, [r8], #-84	; 0x54
    6cd4:	04080054 	streq	r0, [r8], #-84	; 0x54
    6cd8:	5001f300 	andpl	pc, r1, r0, lsl #6
    6cdc:	0054949f 			; <UNDEFINED> instruction: 0x0054949f
    6ce0:	00549808 	subseq	r9, r4, r8, lsl #16
    6ce4:	50000108 	andpl	r0, r0, r8, lsl #2
    6ce8:	08005498 	stmdaeq	r0, {r3, r4, r7, sl, ip, lr}
    6cec:	080054b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, ip, lr}
    6cf0:	00560001 	subseq	r0, r6, r1
    6cf4:	00000000 	andeq	r0, r0, r0
    6cf8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    6cfc:	4a080054 	bmi	206e54 <__Stack_Size+0x206654>
    6d00:	01080054 	qaddeq	r0, r4, r8
    6d04:	544a5100 	strbpl	r5, [sl], #-256	; 0x100
    6d08:	547a0800 	ldrbtpl	r0, [sl], #-2048	; 0x800
    6d0c:	00040800 	andeq	r0, r4, r0, lsl #16
    6d10:	9f5101f3 	svcls	0x005101f3
    6d14:	0800547a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, lr}
    6d18:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
    6d1c:	82510001 	subshi	r0, r1, #1
    6d20:	94080054 	strls	r0, [r8], #-84	; 0x54
    6d24:	04080054 	streq	r0, [r8], #-84	; 0x54
    6d28:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6d2c:	0054949f 			; <UNDEFINED> instruction: 0x0054949f
    6d30:	00549a08 	subseq	r9, r4, r8, lsl #20
    6d34:	51000108 	tstpl	r0, r8, lsl #2
    6d38:	0800549a 	stmdaeq	r0, {r1, r3, r4, r7, sl, ip, lr}
    6d3c:	080054b0 	stmdaeq	r0, {r4, r5, r7, sl, ip, lr}
    6d40:	b0580001 	subslt	r0, r8, r1
    6d44:	b6080054 			; <UNDEFINED> instruction: 0xb6080054
    6d48:	04080054 	streq	r0, [r8], #-84	; 0x54
    6d4c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    6d50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6d54:	00000000 	andeq	r0, r0, r0
    6d58:	00542800 	subseq	r2, r4, r0, lsl #16
    6d5c:	00543808 	subseq	r3, r4, r8, lsl #16
    6d60:	52000108 	andpl	r0, r0, #8, 2
    6d64:	08005438 	stmdaeq	r0, {r3, r4, r5, sl, ip, lr}
    6d68:	0800544a 	stmdaeq	r0, {r1, r3, r6, sl, ip, lr}
    6d6c:	4a570001 	bmi	15c6d78 <__Stack_Size+0x15c6578>
    6d70:	7a080054 	bvc	206ec8 <__Stack_Size+0x2066c8>
    6d74:	04080054 	streq	r0, [r8], #-84	; 0x54
    6d78:	5201f300 	andpl	pc, r1, #0, 6
    6d7c:	00547a9f 			; <UNDEFINED> instruction: 0x00547a9f
    6d80:	00548208 	subseq	r8, r4, r8, lsl #4
    6d84:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6d88:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
    6d8c:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    6d90:	01f30004 	mvnseq	r0, r4
    6d94:	54949f52 	ldrpl	r9, [r4], #3922	; 0xf52
    6d98:	54ae0800 	strtpl	r0, [lr], #2048	; 0x800
    6d9c:	00010800 	andeq	r0, r1, r0, lsl #16
    6da0:	0054ae57 	subseq	sl, r4, r7, asr lr
    6da4:	0054b608 	subseq	fp, r4, r8, lsl #12
    6da8:	f3000408 	vshl.u8	d0, d8, d0
    6dac:	009f5201 	addseq	r5, pc, r1, lsl #4
    6db0:	00000000 	andeq	r0, r0, r0
    6db4:	34000000 	strcc	r0, [r0], #-0
    6db8:	38080054 	stmdacc	r8, {r2, r4, r6}
    6dbc:	01080054 	qaddeq	r0, r4, r8
    6dc0:	54385200 	ldrtpl	r5, [r8], #-512	; 0x200
    6dc4:	54520800 	ldrbpl	r0, [r2], #-2048	; 0x800
    6dc8:	00010800 	andeq	r0, r1, r0, lsl #16
    6dcc:	00545257 	subseq	r5, r4, r7, asr r2
    6dd0:	00545608 	subseq	r5, r4, r8, lsl #12
    6dd4:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6dd8:	08005456 	stmdaeq	r0, {r1, r2, r4, r6, sl, ip, lr}
    6ddc:	0800545c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, lr}
    6de0:	c0750004 	rsbsgt	r0, r5, r4
    6de4:	545c9f00 	ldrbpl	r9, [ip], #-3840	; 0xf00
    6de8:	54740800 	ldrbtpl	r0, [r4], #-2048	; 0x800
    6dec:	00010800 	andeq	r0, r1, r0, lsl #16
    6df0:	00547a55 	subseq	r7, r4, r5, asr sl
    6df4:	00548208 	subseq	r8, r4, r8, lsl #4
    6df8:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    6dfc:	08005494 	stmdaeq	r0, {r2, r4, r7, sl, ip, lr}
    6e00:	080054b2 	stmdaeq	r0, {r1, r4, r5, r7, sl, ip, lr}
    6e04:	00570001 	subseq	r0, r7, r1
    6e08:	00000000 	andeq	r0, r0, r0
    6e0c:	34000000 	strcc	r0, [r0], #-0
    6e10:	4a080054 	bmi	206f68 <__Stack_Size+0x206768>
    6e14:	01080054 	qaddeq	r0, r4, r8
    6e18:	544a5100 	strbpl	r5, [sl], #-256	; 0x100
    6e1c:	54520800 	ldrbpl	r0, [r2], #-2048	; 0x800
    6e20:	00010800 	andeq	r0, r1, r0, lsl #16
    6e24:	00545258 	subseq	r5, r4, r8, asr r2
    6e28:	00547408 	subseq	r7, r4, r8, lsl #8
    6e2c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    6e30:	0800547a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, lr}
    6e34:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
    6e38:	94510001 	ldrbls	r0, [r1], #-1
    6e3c:	9a080054 	bls	206f94 <__Stack_Size+0x206794>
    6e40:	01080054 	qaddeq	r0, r4, r8
    6e44:	549a5100 	ldrpl	r5, [sl], #256	; 0x100
    6e48:	54b20800 	ldrtpl	r0, [r2], #2048	; 0x800
    6e4c:	00010800 	andeq	r0, r1, r0, lsl #16
    6e50:	00000058 	andeq	r0, r0, r8, asr r0
    6e54:	00000000 	andeq	r0, r0, r0
    6e58:	00543400 	subseq	r3, r4, r0, lsl #8
    6e5c:	00544a08 	subseq	r4, r4, r8, lsl #20
    6e60:	50000108 	andpl	r0, r0, r8, lsl #2
    6e64:	0800544a 	stmdaeq	r0, {r1, r3, r6, sl, ip, lr}
    6e68:	08005476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, lr}
    6e6c:	7a560001 	bvc	1586e78 <__Stack_Size+0x1586678>
    6e70:	82080054 	andhi	r0, r8, #84	; 0x54
    6e74:	01080054 	qaddeq	r0, r4, r8
    6e78:	54825000 	strpl	r5, [r2], #0
    6e7c:	54900800 	ldrpl	r0, [r0], #2048	; 0x800
    6e80:	00010800 	andeq	r0, r1, r0, lsl #16
    6e84:	00549056 	subseq	r9, r4, r6, asr r0
    6e88:	00549408 	subseq	r9, r4, r8, lsl #8
    6e8c:	f3000408 	vshl.u8	d0, d8, d0
    6e90:	949f5001 	ldrls	r5, [pc], #1	; 6e98 <__Stack_Size+0x6698>
    6e94:	98080054 	stmdals	r8, {r2, r4, r6}
    6e98:	01080054 	qaddeq	r0, r4, r8
    6e9c:	54985000 	ldrpl	r5, [r8], #0
    6ea0:	54b60800 	ldrtpl	r0, [r6], #2048	; 0x800
    6ea4:	00010800 	andeq	r0, r1, r0, lsl #16
    6ea8:	00000056 	andeq	r0, r0, r6, asr r0
    6eac:	00000000 	andeq	r0, r0, r0
    6eb0:	00544000 	subseq	r4, r4, r0
    6eb4:	00544a08 	subseq	r4, r4, r8, lsl #20
    6eb8:	53000108 	movwpl	r0, #264	; 0x108
    6ebc:	0800544a 	stmdaeq	r0, {r1, r3, r6, sl, ip, lr}
    6ec0:	08005476 	stmdaeq	r0, {r1, r2, r4, r5, r6, sl, ip, lr}
    6ec4:	9f300002 	svcls	0x00300002
    6ec8:	0800547a 	stmdaeq	r0, {r1, r3, r4, r5, r6, sl, ip, lr}
    6ecc:	08005482 	stmdaeq	r0, {r1, r7, sl, ip, lr}
    6ed0:	94530001 	ldrbls	r0, [r3], #-1
    6ed4:	a1080054 	qaddge	r0, r4, r8
    6ed8:	01080054 	qaddeq	r0, r4, r8
    6edc:	54b05300 	ldrtpl	r5, [r0], #768	; 0x300
    6ee0:	54b60800 	ldrtpl	r0, [r6], #2048	; 0x800
    6ee4:	00020800 	andeq	r0, r2, r0, lsl #16
    6ee8:	00009f30 	andeq	r9, r0, r0, lsr pc
    6eec:	00000000 	andeq	r0, r0, r0
    6ef0:	54400000 	strbpl	r0, [r0], #-0
    6ef4:	544a0800 	strbpl	r0, [sl], #-2048	; 0x800
    6ef8:	00060800 	andeq	r0, r6, r0, lsl #16
    6efc:	00734008 	rsbseq	r4, r3, r8
    6f00:	547a9f1c 	ldrbtpl	r9, [sl], #-3868	; 0xf1c
    6f04:	54820800 	strpl	r0, [r2], #2048	; 0x800
    6f08:	00060800 	andeq	r0, r6, r0, lsl #16
    6f0c:	00734008 	rsbseq	r4, r3, r8
    6f10:	54949f1c 	ldrpl	r9, [r4], #3868	; 0xf1c
    6f14:	54a10800 	strtpl	r0, [r1], #2048	; 0x800
    6f18:	00060800 	andeq	r0, r6, r0, lsl #16
    6f1c:	00734008 	rsbseq	r4, r3, r8
    6f20:	00009f1c 	andeq	r9, r0, ip, lsl pc
    6f24:	00000000 	andeq	r0, r0, r0
    6f28:	54b80000 	ldrtpl	r0, [r8], #0
    6f2c:	54e00800 	strbtpl	r0, [r0], #2048	; 0x800
    6f30:	00010800 	andeq	r0, r1, r0, lsl #16
    6f34:	0054e050 	subseq	lr, r4, r0, asr r0
    6f38:	0056d008 	subseq	sp, r6, r8
    6f3c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    6f48:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
    6f4c:	08005538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, lr}
    6f50:	38510001 	ldmdacc	r1, {r0}^
    6f54:	1a080055 	bne	2070b0 <__Stack_Size+0x2068b0>
    6f58:	01080056 	qaddeq	r0, r6, r8
    6f5c:	561a5500 	ldrpl	r5, [sl], -r0, lsl #10
    6f60:	56240800 	strtpl	r0, [r4], -r0, lsl #16
    6f64:	00010800 	andeq	r0, r1, r0, lsl #16
    6f68:	00562451 	subseq	r2, r6, r1, asr r4
    6f6c:	00566c08 	subseq	r6, r6, r8, lsl #24
    6f70:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    6f74:	0800566c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, lr}
    6f78:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    6f7c:	72510001 	subsvc	r0, r1, #1
    6f80:	d0080056 	andle	r0, r8, r6, asr r0
    6f84:	01080056 	qaddeq	r0, r6, r8
    6f88:	00005500 	andeq	r5, r0, r0, lsl #10
    6f8c:	00000000 	andeq	r0, r0, r0
    6f90:	54e60000 	strbtpl	r0, [r6], #0
    6f94:	55380800 	ldrpl	r0, [r8, #-2048]!	; 0x800
    6f98:	00010800 	andeq	r0, r1, r0, lsl #16
    6f9c:	00561a56 	subseq	r1, r6, r6, asr sl
    6fa0:	00564608 	subseq	r4, r6, r8, lsl #12
    6fa4:	56000108 	strpl	r0, [r0], -r8, lsl #2
    6fa8:	0800566c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, lr}
    6fac:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    6fb0:	b8560001 	ldmdalt	r6, {r0}^
    6fb4:	bc080056 	stclt	0, cr0, [r8], {86}	; 0x56
    6fb8:	01080056 	qaddeq	r0, r6, r8
    6fbc:	00005600 	andeq	r5, r0, r0, lsl #12
    6fc0:	00000000 	andeq	r0, r0, r0
    6fc4:	54e60000 	strbtpl	r0, [r6], #0
    6fc8:	55380800 	ldrpl	r0, [r8, #-2048]!	; 0x800
    6fcc:	00010800 	andeq	r0, r1, r0, lsl #16
    6fd0:	00561a58 	subseq	r1, r6, r8, asr sl
    6fd4:	00563608 	subseq	r3, r6, r8, lsl #12
    6fd8:	58000108 	stmdapl	r0, {r3, r8}
    6fdc:	0800566c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, lr}
    6fe0:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    6fe4:	00580001 	subseq	r0, r8, r1
    6fe8:	00000000 	andeq	r0, r0, r0
    6fec:	e6000000 	str	r0, [r0], -r0
    6ff0:	38080054 	stmdacc	r8, {r2, r4, r6}
    6ff4:	01080055 	qaddeq	r0, r5, r8
    6ff8:	561a5000 	ldrpl	r5, [sl], -r0
    6ffc:	56220800 	strtpl	r0, [r2], -r0, lsl #16
    7000:	00010800 	andeq	r0, r1, r0, lsl #16
    7004:	00566c50 	subseq	r6, r6, r0, asr ip
    7008:	00567208 	subseq	r7, r6, r8, lsl #4
    700c:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    7018:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
    701c:	08005538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, lr}
    7020:	1a520001 	bne	148702c <__Stack_Size+0x148682c>
    7024:	28080056 	stmdacs	r8, {r1, r2, r4, r6}
    7028:	01080056 	qaddeq	r0, r6, r8
    702c:	566c5200 	strbtpl	r5, [ip], -r0, lsl #4
    7030:	56720800 	ldrbtpl	r0, [r2], -r0, lsl #16
    7034:	00010800 	andeq	r0, r1, r0, lsl #16
    7038:	00000052 	andeq	r0, r0, r2, asr r0
    703c:	00000000 	andeq	r0, r0, r0
    7040:	0054e600 	subseq	lr, r4, r0, lsl #12
    7044:	00553808 	subseq	r3, r5, r8, lsl #16
    7048:	58000108 	stmdapl	r0, {r3, r8}
    704c:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    7050:	08005636 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, ip, lr}
    7054:	3c580001 	mrrccc	0, 0, r0, r8, cr1
    7058:	46080056 			; <UNDEFINED> instruction: 0x46080056
    705c:	01080056 	qaddeq	r0, r6, r8
    7060:	56465800 	strbpl	r5, [r6], -r0, lsl #16
    7064:	564a0800 	strbpl	r0, [sl], -r0, lsl #16
    7068:	00010800 	andeq	r0, r1, r0, lsl #16
    706c:	00564a57 	subseq	r4, r6, r7, asr sl
    7070:	00565008 	subseq	r5, r6, r8
    7074:	77000408 	strvc	r0, [r0, -r8, lsl #8]
    7078:	509f00c0 	addspl	r0, pc, r0, asr #1
    707c:	6c080056 	stcvs	0, cr0, [r8], {86}	; 0x56
    7080:	01080056 	qaddeq	r0, r6, r8
    7084:	566c5700 	strbtpl	r5, [ip], -r0, lsl #14
    7088:	56720800 	ldrbtpl	r0, [r2], -r0, lsl #16
    708c:	00010800 	andeq	r0, r1, r0, lsl #16
    7090:	0056b858 	subseq	fp, r6, r8, asr r8
    7094:	0056be08 	subseq	fp, r6, r8, lsl #28
    7098:	58000108 	stmdapl	r0, {r3, r8}
	...
    70a4:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
    70a8:	08005538 	stmdaeq	r0, {r3, r4, r5, r8, sl, ip, lr}
    70ac:	c4030006 	strgt	r0, [r3], #-6
    70b0:	9f200002 	svcls	0x00200002
    70b4:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    70b8:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    70bc:	c4030006 	strgt	r0, [r3], #-6
    70c0:	9f200002 	svcls	0x00200002
    70c4:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    70c8:	08005646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, lr}
    70cc:	46590001 	ldrbmi	r0, [r9], -r1
    70d0:	6a080056 	bvs	207230 <__Stack_Size+0x206a30>
    70d4:	01080056 	qaddeq	r0, r6, r8
    70d8:	566c5600 	strbtpl	r5, [ip], -r0, lsl #12
    70dc:	56720800 	ldrbtpl	r0, [r2], -r0, lsl #16
    70e0:	00060800 	andeq	r0, r6, r0, lsl #16
    70e4:	0002c403 	andeq	ip, r2, r3, lsl #8
    70e8:	56b89f20 	ldrtpl	r9, [r8], r0, lsr #30
    70ec:	56be0800 	ldrtpl	r0, [lr], r0, lsl #16
    70f0:	00010800 	andeq	r0, r1, r0, lsl #16
    70f4:	00000059 	andeq	r0, r0, r9, asr r0
    70f8:	00000000 	andeq	r0, r0, r0
    70fc:	0054e600 	subseq	lr, r4, r0, lsl #12
    7100:	00553808 	subseq	r3, r5, r8, lsl #16
    7104:	56000108 	strpl	r0, [r0], -r8, lsl #2
    7108:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    710c:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    7110:	3c560001 	mrrccc	0, 0, r0, r6, cr1
    7114:	6c080056 	stcvs	0, cr0, [r8], {86}	; 0x56
    7118:	02080056 	andeq	r0, r8, #86	; 0x56
    711c:	6c9f3000 	ldcvs	0, cr3, [pc], {0}
    7120:	72080056 	andvc	r0, r8, #86	; 0x56
    7124:	01080056 	qaddeq	r0, r6, r8
    7128:	56b85600 	ldrtpl	r5, [r8], r0, lsl #12
    712c:	56be0800 	ldrtpl	r0, [lr], r0, lsl #16
    7130:	00020800 	andeq	r0, r2, r0, lsl #16
    7134:	00009f30 	andeq	r9, r0, r0, lsr pc
    7138:	00000000 	andeq	r0, r0, r0
    713c:	54e60000 	strbtpl	r0, [r6], #0
    7140:	552e0800 	strpl	r0, [lr, #-2048]!	; 0x800
    7144:	00060800 	andeq	r0, r6, r0, lsl #16
    7148:	00764008 	rsbseq	r4, r6, r8
    714c:	552e9f1c 	strpl	r9, [lr, #-3868]!	; 0xf1c
    7150:	55380800 	ldrpl	r0, [r8, #-2048]!	; 0x800
    7154:	00010800 	andeq	r0, r1, r0, lsl #16
    7158:	00561a57 	subseq	r1, r6, r7, asr sl
    715c:	00563c08 	subseq	r3, r6, r8, lsl #24
    7160:	57000108 	strpl	r0, [r0, -r8, lsl #2]
    7164:	0800563c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sl, ip, lr}
    7168:	08005646 	stmdaeq	r0, {r1, r2, r6, r9, sl, ip, lr}
    716c:	40080006 	andmi	r0, r8, r6
    7170:	9f1c0076 	svcls	0x001c0076
    7174:	0800566c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, ip, lr}
    7178:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    717c:	40080006 	andmi	r0, r8, r6
    7180:	9f1c0076 	svcls	0x001c0076
    7184:	080056b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, lr}
    7188:	080056bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, ip, lr}
    718c:	40080006 	andmi	r0, r8, r6
    7190:	9f1c0076 	svcls	0x001c0076
	...
    719c:	08005546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, lr}
    71a0:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
    71a4:	9f380002 	svcls	0x00380002
    71a8:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    71ac:	080056b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, lr}
    71b0:	9f380002 	svcls	0x00380002
    71b4:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
    71b8:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
    71bc:	9f380002 	svcls	0x00380002
	...
    71c8:	08005546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, lr}
    71cc:	08005616 	stmdaeq	r0, {r1, r2, r4, r9, sl, ip, lr}
    71d0:	165d0001 	ldrbne	r0, [sp], -r1
    71d4:	1a080056 	bne	207334 <__Stack_Size+0x206b34>
    71d8:	03080056 	movweq	r0, #32854	; 0x8056
    71dc:	9f509100 	svcls	0x00509100
    71e0:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    71e4:	080056b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, lr}
    71e8:	be5d0001 	cdplt	0, 5, cr0, cr13, cr1, {0}
    71ec:	d0080056 	andle	r0, r8, r6, asr r0
    71f0:	01080056 	qaddeq	r0, r6, r8
    71f4:	00005d00 	andeq	r5, r0, r0, lsl #26
    71f8:	00000000 	andeq	r0, r0, r0
    71fc:	55460000 	strbpl	r0, [r6, #-0]
    7200:	561a0800 	ldrpl	r0, [sl], -r0, lsl #16
    7204:	00010800 	andeq	r0, r1, r0, lsl #16
    7208:	00567254 	subseq	r7, r6, r4, asr r2
    720c:	0056b808 	subseq	fp, r6, r8, lsl #16
    7210:	54000108 	strpl	r0, [r0], #-264	; 0x108
    7214:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
    7218:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
    721c:	00540001 	subseq	r0, r4, r1
    7220:	00000000 	andeq	r0, r0, r0
    7224:	46000000 	strmi	r0, [r0], -r0
    7228:	72080055 	andvc	r0, r8, #85	; 0x55
    722c:	02080055 	andeq	r0, r8, #85	; 0x55
    7230:	729f3800 	addsvc	r3, pc, #0, 16
    7234:	92080056 	andls	r0, r8, #86	; 0x56
    7238:	02080056 	andeq	r0, r8, #86	; 0x56
    723c:	929f3800 	addsls	r3, pc, #0, 16
    7240:	9c080056 	stcls	0, cr0, [r8], {86}	; 0x56
    7244:	01080056 	qaddeq	r0, r6, r8
    7248:	569c5600 	ldrpl	r5, [ip], r0, lsl #12
    724c:	56a20800 	strtpl	r0, [r2], r0, lsl #16
    7250:	00040800 	andeq	r0, r4, r0, lsl #16
    7254:	9f00c076 	svcls	0x0000c076
    7258:	080056a2 	stmdaeq	r0, {r1, r5, r7, r9, sl, ip, lr}
    725c:	080056ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r9, sl, ip, lr}
    7260:	be560001 	cdplt	0, 5, cr0, cr6, cr1, {0}
    7264:	d0080056 	andle	r0, r8, r6, asr r0
    7268:	01080056 	qaddeq	r0, r6, r8
    726c:	00005600 	andeq	r5, r0, r0, lsl #12
    7270:	00000000 	andeq	r0, r0, r0
    7274:	55460000 	strbpl	r0, [r6, #-0]
    7278:	55720800 	ldrbpl	r0, [r2, #-2048]!	; 0x800
    727c:	00010800 	andeq	r0, r1, r0, lsl #16
    7280:	0056725d 	subseq	r7, r6, sp, asr r2
    7284:	00569208 	subseq	r9, r6, r8, lsl #4
    7288:	5d000108 	stfpls	f0, [r0, #-32]	; 0xffffffe0
    728c:	08005692 	stmdaeq	r0, {r1, r4, r7, r9, sl, ip, lr}
    7290:	08005698 	stmdaeq	r0, {r3, r4, r7, r9, sl, ip, lr}
    7294:	98590001 	ldmdals	r9, {r0}^
    7298:	b8080056 	stmdalt	r8, {r1, r2, r4, r6}
    729c:	01080056 	qaddeq	r0, r6, r8
    72a0:	56be5700 	ldrtpl	r5, [lr], r0, lsl #14
    72a4:	56d00800 	ldrbpl	r0, [r0], r0, lsl #16
    72a8:	00010800 	andeq	r0, r1, r0, lsl #16
    72ac:	00000059 	andeq	r0, r0, r9, asr r0
    72b0:	00000000 	andeq	r0, r0, r0
    72b4:	00555400 	subseq	r5, r5, r0, lsl #8
    72b8:	00557208 	subseq	r7, r5, r8, lsl #4
    72bc:	58000108 	stmdapl	r0, {r3, r8}
    72c0:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
    72c4:	08005692 	stmdaeq	r0, {r1, r4, r7, r9, sl, ip, lr}
    72c8:	92580001 	subsls	r0, r8, #1
    72cc:	b8080056 	stmdalt	r8, {r1, r2, r4, r6}
    72d0:	02080056 	andeq	r0, r8, #86	; 0x56
    72d4:	be9f3000 	cdplt	0, 9, cr3, cr15, cr0, {0}
    72d8:	d0080056 	andle	r0, r8, r6, asr r0
    72dc:	02080056 	andeq	r0, r8, #86	; 0x56
    72e0:	009f3000 	addseq	r3, pc, r0
    72e4:	00000000 	andeq	r0, r0, r0
    72e8:	54000000 	strpl	r0, [r0], #-0
    72ec:	72080055 	andvc	r0, r8, #85	; 0x55
    72f0:	06080055 			; <UNDEFINED> instruction: 0x06080055
    72f4:	78400800 	stmdavc	r0, {fp}^
    72f8:	729f1c00 	addsvc	r1, pc, #0, 24
    72fc:	b6080056 			; <UNDEFINED> instruction: 0xb6080056
    7300:	06080056 			; <UNDEFINED> instruction: 0x06080056
    7304:	78400800 	stmdavc	r0, {fp}^
    7308:	b69f1c00 	ldrlt	r1, [pc], r0, lsl #24
    730c:	b8080056 	stmdalt	r8, {r1, r2, r4, r6}
    7310:	06080056 			; <UNDEFINED> instruction: 0x06080056
    7314:	76480800 	strbvc	r0, [r8], -r0, lsl #16
    7318:	be9f1c00 	cdplt	12, 9, cr1, cr15, cr0, {0}
    731c:	c8080056 	stmdagt	r8, {r1, r2, r4, r6}
    7320:	06080056 			; <UNDEFINED> instruction: 0x06080056
    7324:	78400800 	stmdavc	r0, {fp}^
    7328:	c89f1c00 	ldmgt	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    732c:	d0080056 	andle	r0, r8, r6, asr r0
    7330:	05080056 	streq	r0, [r8, #-86]	; 0x56
    7334:	00763800 	rsbseq	r3, r6, r0, lsl #16
    7338:	00009f1c 	andeq	r9, r0, ip, lsl pc
    733c:	00000000 	andeq	r0, r0, r0
    7340:	56d00000 	ldrbpl	r0, [r0], r0
    7344:	56e00800 	strbtpl	r0, [r0], r0, lsl #16
    7348:	00010800 	andeq	r0, r1, r0, lsl #16
    734c:	0056e050 	subseq	lr, r6, r0, asr r0
    7350:	005b5e08 	subseq	r5, fp, r8, lsl #28
    7354:	91000308 	tstls	r0, r8, lsl #6
    7358:	5b5e7e9c 	blpl	17a6dd0 <__Stack_Size+0x17a65d0>
    735c:	5b640800 	blpl	1909364 <__Stack_Size+0x1908b64>
    7360:	00030800 	andeq	r0, r3, r0, lsl #16
    7364:	007e9c7d 	rsbseq	r9, lr, sp, ror ip
    7368:	00000000 	andeq	r0, r0, r0
    736c:	d0000000 	andle	r0, r0, r0
    7370:	e0080056 	and	r0, r8, r6, asr r0
    7374:	01080056 	qaddeq	r0, r6, r8
    7378:	56e05100 	strbtpl	r5, [r0], r0, lsl #2
    737c:	57a40800 	strpl	r0, [r4, r0, lsl #16]!
    7380:	00010800 	andeq	r0, r1, r0, lsl #16
    7384:	00000054 	andeq	r0, r0, r4, asr r0
    7388:	00000000 	andeq	r0, r0, r0
    738c:	0057d000 	subseq	sp, r7, r0
    7390:	0057f808 	subseq	pc, r7, r8, lsl #16
    7394:	50000608 	andpl	r0, r0, r8, lsl #12
    7398:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    739c:	0057f804 	subseq	pc, r7, r4, lsl #16
    73a0:	00580e08 	subseq	r0, r8, r8, lsl #28
    73a4:	71000208 	tstvc	r0, r8, lsl #4
    73a8:	00580e00 	subseq	r0, r8, r0, lsl #28
    73ac:	00582c08 	subseq	r2, r8, r8, lsl #24
    73b0:	75000208 	strvc	r0, [r0, #-520]	; 0x208
    73b4:	00582c00 	subseq	r2, r8, r0, lsl #24
    73b8:	00585e08 	subseq	r5, r8, r8, lsl #28
    73bc:	50000608 	andpl	r0, r0, r8, lsl #12
    73c0:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    73c4:	00585e04 	subseq	r5, r8, r4, lsl #28
    73c8:	005a8e08 	subseq	r8, sl, r8, lsl #28
    73cc:	5a000608 	bpl	8bf4 <__Stack_Size+0x83f4>
    73d0:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    73d4:	005a8e04 	subseq	r8, sl, r4, lsl #28
    73d8:	005aa008 	subseq	sl, sl, r8
    73dc:	50000608 	andpl	r0, r0, r8, lsl #12
    73e0:	93510493 	cmpls	r1, #-1828716544	; 0x93000000
    73e4:	00000004 	andeq	r0, r0, r4
    73e8:	00000000 	andeq	r0, r0, r0
    73ec:	0057d000 	subseq	sp, r7, r0
    73f0:	00582c08 	subseq	r2, r8, r8, lsl #24
    73f4:	91000308 	tstls	r0, r8, lsl #6
    73f8:	582c7d80 	stmdapl	ip!, {r7, r8, sl, fp, ip, sp, lr}
    73fc:	585c0800 	ldmdapl	ip, {fp}^
    7400:	00060800 	andeq	r0, r6, r0, lsl #16
    7404:	5b04935a 	blpl	12c174 <__Stack_Size+0x12b974>
    7408:	585c0493 	ldmdapl	ip, {r0, r1, r4, r7, sl}^
    740c:	5a880800 	bpl	fe209414 <BootRAM+0xd179bb5>
    7410:	00030800 	andeq	r0, r3, r0, lsl #16
    7414:	887d8091 	ldmdahi	sp!, {r0, r4, r7, pc}^
    7418:	a808005a 	stmdage	r8, {r1, r3, r4, r6}
    741c:	0608005a 			; <UNDEFINED> instruction: 0x0608005a
    7420:	04935a00 	ldreq	r5, [r3], #2560	; 0xa00
    7424:	0004935b 	andeq	r9, r4, fp, asr r3
    7428:	00000000 	andeq	r0, r0, r0
    742c:	d0000000 	andle	r0, r0, r0
    7430:	2c080057 	stccs	0, cr0, [r8], {87}	; 0x57
    7434:	03080058 	movweq	r0, #32856	; 0x8058
    7438:	7d889100 	stfvcd	f1, [r8]
    743c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7440:	08005858 	stmdaeq	r0, {r3, r4, r6, fp, ip, lr}
    7444:	80910003 	addshi	r0, r1, r3
    7448:	00585e7d 	subseq	r5, r8, sp, ror lr
    744c:	005a8808 	subseq	r8, sl, r8, lsl #16
    7450:	91000308 	tstls	r0, r8, lsl #6
    7454:	5a887d88 	bpl	fe226a7c <BootRAM+0xd19721d>
    7458:	5b5e0800 	blpl	1789460 <__Stack_Size+0x1788c60>
    745c:	00030800 	andeq	r0, r3, r0, lsl #16
    7460:	5e7d8091 	mrcpl	0, 3, r8, cr13, cr1, {4}
    7464:	6408005b 	strvs	r0, [r8], #-91	; 0x5b
    7468:	0308005b 	movweq	r0, #32859	; 0x805b
    746c:	7d807d00 	stcvc	13, cr7, [r0]
	...
    7478:	080057dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
    747c:	080057ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, lr}
    7480:	93560006 	cmpls	r6, #6
    7484:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    7488:	080057ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, lr}
    748c:	0800580e 	stmdaeq	r0, {r1, r2, r3, fp, ip, lr}
    7490:	18710002 	ldmdane	r1!, {r1}^
    7494:	0800580e 	stmdaeq	r0, {r1, r2, r3, fp, ip, lr}
    7498:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    749c:	18750002 	ldmdane	r5!, {r1}^
    74a0:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    74a4:	0800584c 	stmdaeq	r0, {r2, r3, r6, fp, ip, lr}
    74a8:	88910003 	ldmhi	r1, {r0, r1}
    74ac:	00585e7d 	subseq	r5, r8, sp, ror lr
    74b0:	005a8808 	subseq	r8, sl, r8, lsl #16
    74b4:	91000308 	tstls	r0, r8, lsl #6
    74b8:	5a887df8 	bpl	fe226ca0 <BootRAM+0xd197441>
    74bc:	5b5e0800 	blpl	17894c4 <__Stack_Size+0x1788cc4>
    74c0:	00030800 	andeq	r0, r3, r0, lsl #16
    74c4:	5e7d8891 	mrcpl	8, 3, r8, cr13, cr1, {4}
    74c8:	6408005b 	strvs	r0, [r8], #-91	; 0x5b
    74cc:	0308005b 	movweq	r0, #32859	; 0x805b
    74d0:	7d887d00 	stcvc	13, cr7, [r8]
	...
    74dc:	08005814 	stmdaeq	r0, {r2, r4, fp, ip, lr}
    74e0:	0800581a 	stmdaeq	r0, {r1, r3, r4, fp, ip, lr}
    74e4:	935a0006 	cmpls	sl, #6
    74e8:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    74ec:	0800581a 	stmdaeq	r0, {r1, r3, r4, fp, ip, lr}
    74f0:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    74f4:	20750002 	rsbscs	r0, r5, r2
    74f8:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    74fc:	08005854 	stmdaeq	r0, {r2, r4, r6, fp, ip, lr}
    7500:	93520006 	cmpls	r2, #6
    7504:	04935304 	ldreq	r5, [r3], #772	; 0x304
    7508:	0800585e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip, lr}
    750c:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    7510:	93580006 	cmpls	r8, #6
    7514:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    7518:	08005a88 	stmdaeq	r0, {r3, r7, r9, fp, ip, lr}
    751c:	08005a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp, ip, lr}
    7520:	93520006 	cmpls	r2, #6
    7524:	04935304 	ldreq	r5, [r3], #772	; 0x304
	...
    7530:	08005814 	stmdaeq	r0, {r2, r4, fp, ip, lr}
    7534:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7538:	28750002 	ldmdacs	r5!, {r1}^
    753c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7540:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    7544:	93580006 	cmpls	r8, #6
    7548:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    754c:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    7550:	08005a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, ip, lr}
    7554:	a0910003 	addsge	r0, r1, r3
    7558:	005a7e7d 	subseq	r7, sl, sp, ror lr
    755c:	005aa408 	subseq	sl, sl, r8, lsl #8
    7560:	58000608 	stmdapl	r0, {r3, r9, sl}
    7564:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    7568:	00000004 	andeq	r0, r0, r4
    756c:	00000000 	andeq	r0, r0, r0
    7570:	00581400 	subseq	r1, r8, r0, lsl #8
    7574:	00582c08 	subseq	r2, r8, r8, lsl #24
    7578:	75000208 	strvc	r0, [r0, #-520]	; 0x208
    757c:	00582c30 	subseq	r2, r8, r0, lsr ip
    7580:	00585008 	subseq	r5, r8, r8
    7584:	91000308 	tstls	r0, r8, lsl #6
    7588:	585e7da0 	ldmdapl	lr, {r5, r7, r8, sl, fp, ip, sp, lr}^
    758c:	5a7e0800 	bpl	1f89594 <__Stack_Size+0x1f88d94>
    7590:	00030800 	andeq	r0, r3, r0, lsl #16
    7594:	7e7d9891 	mrcvc	8, 3, r9, cr13, cr1, {4}
    7598:	5e08005a 	mcrpl	0, 0, r0, cr8, cr10, {2}
    759c:	0308005b 	movweq	r0, #32859	; 0x805b
    75a0:	7da09100 	stfvcd	f1, [r0]
    75a4:	08005b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip, lr}
    75a8:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    75ac:	a07d0003 	rsbsge	r0, sp, r3
    75b0:	0000007d 	andeq	r0, r0, sp, ror r0
    75b4:	00000000 	andeq	r0, r0, r0
    75b8:	00581400 	subseq	r1, r8, r0, lsl #8
    75bc:	00582c08 	subseq	r2, r8, r8, lsl #24
    75c0:	54000608 	strpl	r0, [r0], #-1544	; 0x608
    75c4:	93550493 	cmpls	r5, #-1828716544	; 0x93000000
    75c8:	00582c04 	subseq	r2, r8, r4, lsl #24
    75cc:	00584808 	subseq	r4, r8, r8, lsl #16
    75d0:	91000308 	tstls	r0, r8, lsl #6
    75d4:	585e7d98 	ldmdapl	lr, {r3, r4, r7, r8, sl, fp, ip, sp, lr}^
    75d8:	5a7e0800 	bpl	1f895e0 <__Stack_Size+0x1f88de0>
    75dc:	00030800 	andeq	r0, r3, r0, lsl #16
    75e0:	7e7e8091 	mrcvc	0, 3, r8, cr14, cr1, {4}
    75e4:	5e08005a 	mcrpl	0, 0, r0, cr8, cr10, {2}
    75e8:	0308005b 	movweq	r0, #32859	; 0x805b
    75ec:	7d989100 	ldfvcd	f1, [r8]
    75f0:	08005b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, ip, lr}
    75f4:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    75f8:	987d0003 	ldmdals	sp!, {r0, r1}^
    75fc:	0000007d 	andeq	r0, r0, sp, ror r0
    7600:	00000000 	andeq	r0, r0, r0
    7604:	0056d000 	subseq	sp, r6, r0
    7608:	0056e008 	subseq	lr, r6, r8
    760c:	30000208 	andcc	r0, r0, r8, lsl #4
    7610:	0058149f 			; <UNDEFINED> instruction: 0x0058149f
    7614:	00582c08 	subseq	r2, r8, r8, lsl #24
    7618:	30000208 	andcc	r0, r0, r8, lsl #4
    761c:	00582c9f 			; <UNDEFINED> instruction: 0x00582c9f
    7620:	00588008 	subseq	r8, r8, r8
    7624:	5c000108 	stfpls	f0, [r0], {8}
    7628:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
    762c:	08005a8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, fp, ip, lr}
    7630:	7f7c0003 	svcvc	0x007c0003
    7634:	005a8e9f 			; <UNDEFINED> instruction: 0x005a8e9f
    7638:	005b1808 	subseq	r1, fp, r8, lsl #16
    763c:	5c000108 	stfpls	f0, [r0], {8}
	...
    7648:	080056e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, lr}
    764c:	080056ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r9, sl, ip, lr}
    7650:	01740003 	cmneq	r4, r3
    7654:	0056ee9f 			; <UNDEFINED> instruction: 0x0056ee9f
    7658:	0056fe08 	subseq	pc, r6, r8, lsl #28
    765c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7660:	56fe9f02 	ldrbtpl	r9, [lr], r2, lsl #30
    7664:	571c0800 	ldrpl	r0, [ip, -r0, lsl #16]
    7668:	00030800 	andeq	r0, r3, r0, lsl #16
    766c:	1c9f0374 	ldcne	3, cr0, [pc], {116}	; 0x74
    7670:	3a080057 	bcc	2077d4 <__Stack_Size+0x206fd4>
    7674:	03080057 	movweq	r0, #32855	; 0x8057
    7678:	9f047400 	svcls	0x00047400
    767c:	0800573a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, ip, lr}
    7680:	08005754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip, lr}
    7684:	05740003 	ldrbeq	r0, [r4, #-3]!
    7688:	0057549f 			; <UNDEFINED> instruction: 0x0057549f
    768c:	00576c08 	subseq	r6, r7, r8, lsl #24
    7690:	74000308 	strvc	r0, [r0], #-776	; 0x308
    7694:	576c9f06 	strbpl	r9, [ip, -r6, lsl #30]!
    7698:	57800800 	strpl	r0, [r0, r0, lsl #16]
    769c:	00030800 	andeq	r0, r3, r0, lsl #16
    76a0:	809f0774 	addshi	r0, pc, r4, ror r7	; <UNPREDICTABLE>
    76a4:	86080057 			; <UNDEFINED> instruction: 0x86080057
    76a8:	03080057 	movweq	r0, #32855	; 0x8057
    76ac:	9f087400 	svcls	0x00087400
    76b0:	08005786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, lr}
    76b4:	080057a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, ip, lr}
    76b8:	00540001 	subseq	r0, r4, r1
    76bc:	00000000 	andeq	r0, r0, r0
    76c0:	e0000000 	and	r0, r0, r0
    76c4:	ee080056 	mcr	0, 0, r0, cr8, cr6, {2}
    76c8:	09080056 	stmdbeq	r8, {r1, r2, r4, r6}
    76cc:	94007400 	strls	r7, [r0], #-1024	; 0x400
    76d0:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    76d4:	56ee9f25 	strbtpl	r9, [lr], r5, lsr #30
    76d8:	56fe0800 	ldrbtpl	r0, [lr], r0, lsl #16
    76dc:	00100800 	andseq	r0, r0, r0, lsl #16
    76e0:	01940174 	orrseq	r0, r4, r4, ror r1
    76e4:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    76e8:	f67d9091 			; <UNDEFINED> instruction: 0xf67d9091
    76ec:	9f212508 	svcls	0x00212508
    76f0:	080056fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr}
    76f4:	0800571c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip, lr}
    76f8:	0274000d 	rsbseq	r0, r4, #13
    76fc:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7700:	06f525f7 			; <UNDEFINED> instruction: 0x06f525f7
    7704:	1c9f2125 	ldfnes	f2, [pc], {37}	; 0x25
    7708:	3a080057 	bcc	20786c <__Stack_Size+0x20706c>
    770c:	10080057 	andne	r0, r8, r7, asr r0
    7710:	94037400 	strls	r7, [r3], #-1024	; 0x400
    7714:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    7718:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    771c:	212508f6 	strdcs	r0, [r5, -r6]!
    7720:	00573a9f 			; <UNDEFINED> instruction: 0x00573a9f
    7724:	00575408 	subseq	r5, r7, r8, lsl #8
    7728:	74001008 	strvc	r1, [r0], #-8
    772c:	f7019404 			; <UNDEFINED> instruction: 0xf7019404
    7730:	9125f72c 	msrls	SP_abt, ip
    7734:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    7738:	549f2125 	ldrpl	r2, [pc], #293	; 7740 <__Stack_Size+0x6f40>
    773c:	6c080057 	stcvs	0, cr0, [r8], {87}	; 0x57
    7740:	0d080057 	stceq	0, cr0, [r8, #-348]	; 0xfffffea4
    7744:	94057400 	strls	r7, [r5], #-1024	; 0x400
    7748:	f72cf701 			; <UNDEFINED> instruction: 0xf72cf701
    774c:	250af525 	strcs	pc, [sl, #-1317]	; 0x525
    7750:	576c9f21 	strbpl	r9, [ip, -r1, lsr #30]!
    7754:	57800800 	strpl	r0, [r0, r0, lsl #16]
    7758:	000d0800 	andeq	r0, sp, r0, lsl #16
    775c:	01940674 	orrseq	r0, r4, r4, ror r6
    7760:	25f72cf7 	ldrbcs	r2, [r7, #3319]!	; 0xcf7
    7764:	212508f5 	strdcs	r0, [r5, -r5]!
    7768:	0057809f 			; <UNDEFINED> instruction: 0x0057809f
    776c:	00578608 	subseq	r8, r7, r8, lsl #12
    7770:	74000d08 	strvc	r0, [r0], #-3336	; 0xd08
    7774:	f7019407 			; <UNDEFINED> instruction: 0xf7019407
    7778:	f525f72c 			; <UNDEFINED> instruction: 0xf525f72c
    777c:	9f212502 	svcls	0x00212502
    7780:	08005786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, lr}
    7784:	0800579a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, sl, ip, lr}
    7788:	7f74000d 	svcvc	0x0074000d
    778c:	2cf70194 	ldfcse	f0, [r7], #592	; 0x250
    7790:	02f525f7 	rscseq	r2, r5, #1035993088	; 0x3dc00000
    7794:	009f2125 	addseq	r2, pc, r5, lsr #2
    7798:	00000000 	andeq	r0, r0, r0
    779c:	ea000000 	b	77a4 <__Stack_Size+0x6fa4>
    77a0:	44080058 	strmi	r0, [r8], #-88	; 0x58
    77a4:	0308005a 	movweq	r0, #32858	; 0x805a
    77a8:	7f807500 	svcvc	0x00807500
	...
    77b4:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    77b8:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    77bc:	93500006 	cmpls	r0, #6
    77c0:	04935104 	ldreq	r5, [r3], #260	; 0x104
    77c4:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    77c8:	08005956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, ip, lr}
    77cc:	9091000c 	addsls	r0, r1, ip
    77d0:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    77d4:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    77d8:	59561ca0 	ldmdbpl	r6, {r5, r7, sl, fp, ip}^
    77dc:	599e0800 	ldmibpl	lr, {fp}
    77e0:	000c0800 	andeq	r0, ip, r0, lsl #16
    77e4:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    77e8:	00772433 	rsbseq	r2, r7, r3, lsr r4
    77ec:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    77f0:	0800599e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip, lr}
    77f4:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    77f8:	9091000c 	addsls	r0, r1, ip
    77fc:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7800:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7804:	00001ca0 	andeq	r1, r0, r0, lsr #25
    7808:	00000000 	andeq	r0, r0, r0
    780c:	58ea0000 	stmiapl	sl!, {}^	; <UNPREDICTABLE>
    7810:	599a0800 	ldmibpl	sl, {fp}
    7814:	00060800 	andeq	r0, r6, r0, lsl #16
    7818:	53049352 	movwpl	r9, #17234	; 0x4352
    781c:	599a0493 	ldmibpl	sl, {r0, r1, r4, r7, sl}
    7820:	599e0800 	ldmibpl	lr, {fp}
    7824:	000c0800 	andeq	r0, ip, r0, lsl #16
    7828:	1a3f0d7c 	bne	fcae20 <__Stack_Size+0xfca620>
    782c:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7830:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7834:	0800599e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip, lr}
    7838:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    783c:	0d7c000c 	ldcleq	0, cr0, [ip, #-48]!	; 0xffffffd0
    7840:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7844:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7848:	00001ca0 	andeq	r1, r0, r0, lsr #25
    784c:	00000000 	andeq	r0, r0, r0
    7850:	58ea0000 	stmiapl	sl!, {}^	; <UNPREDICTABLE>
    7854:	595a0800 	ldmdbpl	sl, {fp}^
    7858:	000c0800 	andeq	r0, ip, r0, lsl #16
    785c:	1a3f087c 	bne	fc9a54 <__Stack_Size+0xfc9254>
    7860:	00912433 	addseq	r2, r1, r3, lsr r4
    7864:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
    7868:	0800595a 	stmdaeq	r0, {r1, r3, r4, r6, r8, fp, ip, lr}
    786c:	0800595e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
    7870:	0074000a 	rsbseq	r0, r4, sl
    7874:	00912433 	addseq	r2, r1, r3, lsr r4
    7878:	1ca80822 	stcne	8, cr0, [r8], #136	; 0x88
    787c:	0800595e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
    7880:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    7884:	087c000c 	ldmdaeq	ip!, {r2, r3}^
    7888:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    788c:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7890:	00001ca8 	andeq	r1, r0, r8, lsr #25
    7894:	00000000 	andeq	r0, r0, r0
    7898:	58ea0000 	stmiapl	sl!, {}^	; <UNPREDICTABLE>
    789c:	58fc0800 	ldmpl	ip!, {fp}^
    78a0:	00280800 	eoreq	r0, r8, r0, lsl #16
    78a4:	312500f5 	strdcc	r0, [r5, -r5]!
    78a8:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    78ac:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    78b0:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    78b4:	f7372500 			; <UNDEFINED> instruction: 0xf7372500
    78b8:	f5272525 			; <UNDEFINED> instruction: 0xf5272525
    78bc:	f7382500 			; <UNDEFINED> instruction: 0xf7382500
    78c0:	1f141425 	svcne	0x00141425
    78c4:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    78c8:	9f272125 	svcls	0x00272125
    78cc:	080058fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, fp, ip, lr}
    78d0:	08005956 	stmdaeq	r0, {r1, r2, r4, r6, r8, fp, ip, lr}
    78d4:	9091004c 	addsls	r0, r1, ip, asr #32
    78d8:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    78dc:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    78e0:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    78e4:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    78e8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    78ec:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    78f0:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    78f4:	91243306 	teqls	r4, r6, lsl #6
    78f8:	a0082200 	andge	r2, r8, r0, lsl #4
    78fc:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7900:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    7904:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    7908:	91243306 	teqls	r4, r6, lsl #6
    790c:	a0082200 	andge	r2, r8, r0, lsl #4
    7910:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7914:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    7918:	40231f14 	eormi	r1, r3, r4, lsl pc
    791c:	21251724 	teqcs	r5, r4, lsr #14
    7920:	59569f27 	ldmdbpl	r6, {r0, r1, r2, r5, r8, r9, sl, fp, ip, pc}^
    7924:	599e0800 	ldmibpl	lr, {fp}
    7928:	004c0800 	subeq	r0, ip, r0, lsl #16
    792c:	067d9091 			; <UNDEFINED> instruction: 0x067d9091
    7930:	00772433 	rsbseq	r2, r7, r3, lsr r4
    7934:	1c800822 	stcne	8, cr0, [r0], {34}	; 0x22
    7938:	312508f6 	strdcc	r0, [r5, -r6]!
    793c:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7940:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7944:	91212517 	teqls	r1, r7, lsl r5
    7948:	33067d90 	movwcc	r7, #28048	; 0x6d90
    794c:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7950:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7954:	f7372508 			; <UNDEFINED> instruction: 0xf7372508
    7958:	91272525 	teqls	r7, r5, lsr #10
    795c:	33067d90 	movwcc	r7, #28048	; 0x6d90
    7960:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7964:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7968:	f7382508 			; <UNDEFINED> instruction: 0xf7382508
    796c:	1f141425 	svcne	0x00141425
    7970:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7974:	9f272125 	svcls	0x00272125
    7978:	0800599e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip, lr}
    797c:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    7980:	9091004c 	addsls	r0, r1, ip, asr #32
    7984:	2433067d 	ldrtcs	r0, [r3], #-1661	; 0x67d
    7988:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    798c:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    7990:	25f73125 	ldrbcs	r3, [r7, #293]!	; 0x125
    7994:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7998:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    799c:	7d909121 	ldfvcd	f1, [r0, #132]	; 0x84
    79a0:	91243306 	teqls	r4, r6, lsl #6
    79a4:	a0082200 	andge	r2, r8, r0, lsl #4
    79a8:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    79ac:	2525f737 	strcs	pc, [r5, #-1847]!	; 0x737
    79b0:	7d909127 	ldfvcd	f1, [r0, #156]	; 0x9c
    79b4:	91243306 	teqls	r4, r6, lsl #6
    79b8:	a0082200 	andge	r2, r8, r0, lsl #4
    79bc:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    79c0:	1425f738 	strtne	pc, [r5], #-1848	; 0x738
    79c4:	40231f14 	eormi	r1, r3, r4, lsl pc
    79c8:	21251724 	teqcs	r5, r4, lsr #14
    79cc:	00009f27 	andeq	r9, r0, r7, lsr #30
    79d0:	00000000 	andeq	r0, r0, r0
    79d4:	58ea0000 	stmiapl	sl!, {}^	; <UNPREDICTABLE>
    79d8:	599a0800 	ldmibpl	sl, {fp}
    79dc:	00290800 	eoreq	r0, r9, r0, lsl #16
    79e0:	432502f5 	teqmi	r5, #1342177295	; 0x5000000f
    79e4:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    79e8:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    79ec:	f5212517 			; <UNDEFINED> instruction: 0xf5212517
    79f0:	f7362502 			; <UNDEFINED> instruction: 0xf7362502
    79f4:	f5272525 			; <UNDEFINED> instruction: 0xf5272525
    79f8:	3d082502 	cfstr32cc	mvfx2, [r8, #-8]
    79fc:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7a00:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7a04:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7a08:	00599a9f 			; <UNDEFINED> instruction: 0x00599a9f
    7a0c:	00599e08 	subseq	r9, r9, r8, lsl #28
    7a10:	7c004d08 	stcvc	13, cr4, [r0], {8}
    7a14:	331a3f0d 	tstcc	sl, #13, 30	; 0x34
    7a18:	22007724 	andcs	r7, r0, #36, 14	; 0x900000
    7a1c:	f61c8008 			; <UNDEFINED> instruction: 0xf61c8008
    7a20:	f7432508 			; <UNDEFINED> instruction: 0xf7432508
    7a24:	1f141425 	svcne	0x00141425
    7a28:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7a2c:	0d7c2125 	ldfeqe	f2, [ip, #-148]!	; 0xffffff6c
    7a30:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7a34:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7a38:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    7a3c:	25f73625 	ldrbcs	r3, [r7, #1573]!	; 0x625
    7a40:	0d7c2725 	ldcleq	7, cr2, [ip, #-148]!	; 0xffffff6c
    7a44:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7a48:	08220077 	stmdaeq	r2!, {r0, r1, r2, r4, r5, r6}
    7a4c:	08f61c80 	ldmeq	r6!, {r7, sl, fp, ip}^
    7a50:	f73d0825 			; <UNDEFINED> instruction: 0xf73d0825
    7a54:	1f141425 	svcne	0x00141425
    7a58:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7a5c:	9f272125 	svcls	0x00272125
    7a60:	0800599e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, fp, ip, lr}
    7a64:	08005a44 	stmdaeq	r0, {r2, r6, r9, fp, ip, lr}
    7a68:	0d7c004d 	ldcleq	0, cr0, [ip, #-308]!	; 0xfffffecc
    7a6c:	24331a3f 	ldrtcs	r1, [r3], #-2623	; 0xa3f
    7a70:	08220091 	stmdaeq	r2!, {r0, r4, r7}
    7a74:	08f61ca0 	ldmeq	r6!, {r5, r7, sl, fp, ip}^
    7a78:	25f74325 	ldrbcs	r4, [r7, #805]!	; 0x325
    7a7c:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7a80:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7a84:	3f0d7c21 	svccc	0x000d7c21
    7a88:	9124331a 	teqls	r4, sl, lsl r3
    7a8c:	a0082200 	andge	r2, r8, r0, lsl #4
    7a90:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7a94:	2525f736 	strcs	pc, [r5, #-1846]!	; 0x736
    7a98:	3f0d7c27 	svccc	0x000d7c27
    7a9c:	9124331a 	teqls	r4, sl, lsl r3
    7aa0:	a0082200 	andge	r2, r8, r0, lsl #4
    7aa4:	2508f61c 	strcs	pc, [r8, #-1564]	; 0x61c
    7aa8:	25f73d08 	ldrbcs	r3, [r7, #3336]!	; 0xd08
    7aac:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ab0:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7ab4:	009f2721 	addseq	r2, pc, r1, lsr #14
    7ab8:	00000000 	andeq	r0, r0, r0
    7abc:	2c000000 	stccs	0, cr0, [r0], {-0}
    7ac0:	5c080058 	stcpl	0, cr0, [r8], {88}	; 0x58
    7ac4:	32080058 	andcc	r0, r8, #88	; 0x58
    7ac8:	250af500 	strcs	pc, [sl, #-1280]	; 0x500
    7acc:	25f72208 	ldrbcs	r2, [r7, #520]!	; 0x208
    7ad0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7ad4:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7ad8:	250af521 	strcs	pc, [sl, #-1313]	; 0x521
    7adc:	1425f74c 	strtne	pc, [r5], #-1868	; 0x74c
    7ae0:	40231f14 	eormi	r1, r3, r4, lsl pc
    7ae4:	21251724 	teqcs	r5, r4, lsr #14
    7ae8:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    7aec:	25f72708 	ldrbcs	r2, [r7, #1800]!	; 0x708
    7af0:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7af4:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7af8:	5c9f2721 	ldcpl	7, cr2, [pc], {33}	; 0x21
    7afc:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7b00:	3b080058 	blcc	207c68 <__Stack_Size+0x207468>
    7b04:	7d809100 	stfvcd	f1, [r0]
    7b08:	082508f6 	stmdaeq	r5!, {r1, r2, r4, r5, r6, r7, fp}
    7b0c:	1425f722 	strtne	pc, [r5], #-1826	; 0x722
    7b10:	40231f14 	eormi	r1, r3, r4, lsl pc
    7b14:	21251724 	teqcs	r5, r4, lsr #14
    7b18:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    7b1c:	f74c2508 			; <UNDEFINED> instruction: 0xf74c2508
    7b20:	1f141425 	svcne	0x00141425
    7b24:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7b28:	91272125 	teqls	r7, r5, lsr #2
    7b2c:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7b30:	f7270825 			; <UNDEFINED> instruction: 0xf7270825
    7b34:	1f141425 	svcne	0x00141425
    7b38:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7b3c:	9f272125 	svcls	0x00272125
    7b40:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    7b44:	08005aa8 	stmdaeq	r0, {r3, r5, r7, r9, fp, ip, lr}
    7b48:	0af50032 	beq	ffd47c18 <BootRAM+0xecb83b9>
    7b4c:	f7220825 			; <UNDEFINED> instruction: 0xf7220825
    7b50:	1f141425 	svcne	0x00141425
    7b54:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7b58:	0af52125 	beq	ffd4fff4 <BootRAM+0xecc0795>
    7b5c:	25f74c25 	ldrbcs	r4, [r7, #3109]!	; 0xc25
    7b60:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7b64:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7b68:	0af52721 	beq	ffd517f4 <BootRAM+0xecc1f95>
    7b6c:	f7270825 			; <UNDEFINED> instruction: 0xf7270825
    7b70:	1f141425 	svcne	0x00141425
    7b74:	17244023 	strne	r4, [r4, -r3, lsr #32]!
    7b78:	9f272125 	svcls	0x00272125
	...
    7b84:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7b88:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    7b8c:	08f50031 	ldmeq	r5!, {r0, r4, r5}^
    7b90:	25f74225 	ldrbcs	r4, [r7, #549]!	; 0x225
    7b94:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7b98:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7b9c:	2508f521 	strcs	pc, [r8, #-1313]	; 0x521
    7ba0:	1425f73e 	strtne	pc, [r5], #-1854	; 0x73e
    7ba4:	40231f14 	eormi	r1, r3, r4, lsl pc
    7ba8:	21251724 	teqcs	r5, r4, lsr #14
    7bac:	2508f527 	strcs	pc, [r8, #-1319]	; 0x527
    7bb0:	25f72908 	ldrbcs	r2, [r7, #2312]!	; 0x908
    7bb4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7bb8:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7bbc:	529f2721 	addspl	r2, pc, #8650752	; 0x840000
    7bc0:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7bc4:	3a080058 	bcc	207d2c <__Stack_Size+0x20752c>
    7bc8:	7da09100 	stfvcd	f1, [r0]
    7bcc:	422508f6 	eormi	r0, r5, #16121856	; 0xf60000
    7bd0:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7bd4:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7bd8:	91212517 	teqls	r1, r7, lsl r5
    7bdc:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    7be0:	25f73e25 	ldrbcs	r3, [r7, #3621]!	; 0xe25
    7be4:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7be8:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7bec:	a0912721 	addsge	r2, r1, r1, lsr #14
    7bf0:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7bf4:	25f72908 	ldrbcs	r2, [r7, #2312]!	; 0x908
    7bf8:	231f1414 	tstcs	pc, #20, 8	; 0x14000000
    7bfc:	25172440 	ldrcs	r2, [r7, #-1088]	; 0x440
    7c00:	ea9f2721 	b	fe7d188c <BootRAM+0xd74202d>
    7c04:	a4080058 	strge	r0, [r8], #-88	; 0x58
    7c08:	3108005a 	qaddcc	r0, sl, r8
    7c0c:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
    7c10:	1425f742 	strtne	pc, [r5], #-1858	; 0x742
    7c14:	40231f14 	eormi	r1, r3, r4, lsl pc
    7c18:	21251724 	teqcs	r5, r4, lsr #14
    7c1c:	3e2508f5 	mcrcc	8, 1, r0, cr5, cr5, {7}
    7c20:	141425f7 	ldrne	r2, [r4], #-1527	; 0x5f7
    7c24:	2440231f 	strbcs	r2, [r0], #-799	; 0x31f
    7c28:	27212517 			; <UNDEFINED> instruction: 0x27212517
    7c2c:	082508f5 	stmdaeq	r5!, {r0, r2, r4, r5, r6, r7, fp}
    7c30:	1425f729 	strtne	pc, [r5], #-1833	; 0x729
    7c34:	40231f14 	eormi	r1, r3, r4, lsl pc
    7c38:	21251724 	teqcs	r5, r4, lsr #14
    7c3c:	00009f27 	andeq	r9, r0, r7, lsr #30
    7c40:	00000000 	andeq	r0, r0, r0
    7c44:	582c0000 	stmdapl	ip!, {}	; <UNPREDICTABLE>
    7c48:	58480800 	stmdapl	r8, {fp}^
    7c4c:	00170800 	andseq	r0, r7, r0, lsl #16
    7c50:	202508f5 	strdcs	r0, [r5], -r5	; <UNPREDICTABLE>
    7c54:	f67d9891 			; <UNDEFINED> instruction: 0xf67d9891
    7c58:	911a2508 	tstls	sl, r8, lsl #10
    7c5c:	08f67da0 	ldmeq	r6!, {r5, r7, r8, sl, fp, ip, sp, lr}^
    7c60:	2508f525 	strcs	pc, [r8, #-1317]	; 0x525
    7c64:	ea9f271a 	b	fe7d18d4 <BootRAM+0xd742075>
    7c68:	a4080058 	strge	r0, [r8], #-88	; 0x58
    7c6c:	1708005a 	smlsdne	r8, sl, r0, r0
    7c70:	2508f500 	strcs	pc, [r8, #-1280]	; 0x500
    7c74:	7d989120 	ldfvcd	f1, [r8, #128]	; 0x80
    7c78:	1a2508f6 	bne	94a058 <__Stack_Size+0x949858>
    7c7c:	f67da091 			; <UNDEFINED> instruction: 0xf67da091
    7c80:	08f52508 	ldmeq	r5!, {r3, r8, sl, sp}^
    7c84:	9f271a25 	svcls	0x00271a25
	...
    7c90:	08005a74 	stmdaeq	r0, {r2, r4, r5, r6, r9, fp, ip, lr}
    7c94:	08005a8a 	stmdaeq	r0, {r1, r3, r7, r9, fp, ip, lr}
    7c98:	93500006 	cmpls	r0, #6
    7c9c:	04935104 	ldreq	r5, [r3], #260	; 0x104
	...
    7ca8:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7cac:	0800584c 	stmdaeq	r0, {r2, r3, r6, fp, ip, lr}
    7cb0:	88910020 	ldmhi	r1, {r5}
    7cb4:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7cb8:	f67d8091 			; <UNDEFINED> instruction: 0xf67d8091
    7cbc:	f5272508 			; <UNDEFINED> instruction: 0xf5272508
    7cc0:	911a250a 	tstls	sl, sl, lsl #10
    7cc4:	08f67d88 	ldmeq	r6!, {r3, r7, r8, sl, fp, ip, sp, lr}^
    7cc8:	7d809125 	stfvcd	f1, [r0, #148]	; 0x94
    7ccc:	1a2508f6 	bne	94a0ac <__Stack_Size+0x9498ac>
    7cd0:	5a749f27 	bpl	1d2f974 <__Stack_Size+0x1d2f174>
    7cd4:	5aa80800 	bpl	fea09cdc <BootRAM+0xd97a47d>
    7cd8:	00200800 	eoreq	r0, r0, r0, lsl #16
    7cdc:	f67d8891 			; <UNDEFINED> instruction: 0xf67d8891
    7ce0:	80912508 	addshi	r2, r1, r8, lsl #10
    7ce4:	2508f67d 	strcs	pc, [r8, #-1661]	; 0x67d
    7ce8:	250af527 	strcs	pc, [sl, #-1319]	; 0x527
    7cec:	7d88911a 	stfvcd	f1, [r8, #104]	; 0x68
    7cf0:	912508f6 	strdls	r0, [r5, -r6]!
    7cf4:	08f67d80 	ldmeq	r6!, {r7, r8, sl, fp, ip, sp, lr}^
    7cf8:	9f271a25 	svcls	0x00271a25
	...
    7d04:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7d08:	08005830 	stmdaeq	r0, {r4, r5, fp, ip, lr}
    7d0c:	93540006 	cmpls	r4, #6
    7d10:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    7d14:	08005a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, ip, lr}
    7d18:	08005a98 	stmdaeq	r0, {r3, r4, r7, r9, fp, ip, lr}
    7d1c:	93540006 	cmpls	r4, #6
    7d20:	04935504 	ldreq	r5, [r3], #1284	; 0x504
	...
    7d2c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7d30:	0800585e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip, lr}
    7d34:	9f420002 	svcls	0x00420002
    7d38:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    7d3c:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    7d40:	9f420002 	svcls	0x00420002
	...
    7d4c:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7d50:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    7d54:	93580006 	cmpls	r8, #6
    7d58:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    7d5c:	08005852 	stmdaeq	r0, {r1, r4, r6, fp, ip, lr}
    7d60:	0800585e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip, lr}
    7d64:	a0910003 	addsge	r0, r1, r3
    7d68:	0058ea7d 	subseq	lr, r8, sp, ror sl
    7d6c:	005aa408 	subseq	sl, sl, r8, lsl #8
    7d70:	58000608 	stmdapl	r0, {r3, r9, sl}
    7d74:	93590493 	cmpls	r9, #-1828716544	; 0x93000000
    7d78:	00000004 	andeq	r0, r0, r4
    7d7c:	00000000 	andeq	r0, r0, r0
    7d80:	00582c00 	subseq	r2, r8, r0, lsl #24
    7d84:	00585e08 	subseq	r5, r8, r8, lsl #28
    7d88:	3e000208 	cdpcc	2, 0, cr0, cr0, cr8, {0}
    7d8c:	0058ea9f 			; <UNDEFINED> instruction: 0x0058ea9f
    7d90:	005b6408 	subseq	r6, fp, r8, lsl #8
    7d94:	3e000208 	cdpcc	2, 0, cr0, cr0, cr8, {0}
    7d98:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7d9c:	00000000 	andeq	r0, r0, r0
    7da0:	00582c00 	subseq	r2, r8, r0, lsl #24
    7da4:	00585e08 	subseq	r5, r8, r8, lsl #28
    7da8:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7dac:	58ea9f29 	stmiapl	sl!, {r0, r3, r5, r8, r9, sl, fp, ip, pc}^
    7db0:	5b640800 	blpl	1909db8 <__Stack_Size+0x19095b8>
    7db4:	00030800 	andeq	r0, r3, r0, lsl #16
    7db8:	009f2908 	addseq	r2, pc, r8, lsl #18
    7dbc:	00000000 	andeq	r0, r0, r0
    7dc0:	2c000000 	stccs	0, cr0, [r0], {-0}
    7dc4:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7dc8:	02080058 	andeq	r0, r8, #88	; 0x58
    7dcc:	ea9f3100 	b	fe7d41d4 <BootRAM+0xd744975>
    7dd0:	64080058 	strvs	r0, [r8], #-88	; 0x58
    7dd4:	0208005b 	andeq	r0, r8, #91	; 0x5b
    7dd8:	009f3100 	addseq	r3, pc, r0, lsl #2
    7ddc:	00000000 	andeq	r0, r0, r0
    7de0:	2c000000 	stccs	0, cr0, [r0], {-0}
    7de4:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7de8:	02080058 	andeq	r0, r8, #88	; 0x58
    7dec:	ea9f3800 	b	fe7d5df4 <BootRAM+0xd746595>
    7df0:	64080058 	strvs	r0, [r8], #-88	; 0x58
    7df4:	0208005b 	andeq	r0, r8, #91	; 0x5b
    7df8:	009f3800 	addseq	r3, pc, r0, lsl #16
    7dfc:	00000000 	andeq	r0, r0, r0
    7e00:	2c000000 	stccs	0, cr0, [r0], {-0}
    7e04:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7e08:	02080058 	andeq	r0, r8, #88	; 0x58
    7e0c:	ea9f4300 	b	fe7d8a14 <BootRAM+0xd7491b5>
    7e10:	64080058 	strvs	r0, [r8], #-88	; 0x58
    7e14:	0208005b 	andeq	r0, r8, #91	; 0x5b
    7e18:	009f4300 	addseq	r4, pc, r0, lsl #6
    7e1c:	00000000 	andeq	r0, r0, r0
    7e20:	2c000000 	stccs	0, cr0, [r0], {-0}
    7e24:	5e080058 	mcrpl	0, 0, r0, cr8, cr8, {2}
    7e28:	03080058 	movweq	r0, #32856	; 0x8058
    7e2c:	9f220800 	svcls	0x00220800
    7e30:	080058ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp, ip, lr}
    7e34:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    7e38:	22080003 	andcs	r0, r8, #3
    7e3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    7e40:	00000000 	andeq	r0, r0, r0
    7e44:	00582c00 	subseq	r2, r8, r0, lsl #24
    7e48:	00585c08 	subseq	r5, r8, r8, lsl #24
    7e4c:	5a000608 	bpl	9674 <__Stack_Size+0x8e74>
    7e50:	935b0493 	cmpls	fp, #-1828716544	; 0x93000000
    7e54:	00585c04 	subseq	r5, r8, r4, lsl #24
    7e58:	00585e08 	subseq	r5, r8, r8, lsl #28
    7e5c:	91000308 	tstls	r0, r8, lsl #6
    7e60:	58ea7d80 	stmiapl	sl!, {r7, r8, sl, fp, ip, sp, lr}^
    7e64:	5aa80800 	bpl	fea09e6c <BootRAM+0xd97a60d>
    7e68:	00060800 	andeq	r0, r6, r0, lsl #16
    7e6c:	5b04935a 	blpl	12cbdc <__Stack_Size+0x12c3dc>
    7e70:	00000493 	muleq	r0, r3, r4
    7e74:	00000000 	andeq	r0, r0, r0
    7e78:	582c0000 	stmdapl	ip!, {}	; <UNPREDICTABLE>
    7e7c:	585e0800 	ldmdapl	lr, {fp}^
    7e80:	00020800 	andeq	r0, r2, r0, lsl #16
    7e84:	58ea9f4c 	stmiapl	sl!, {r2, r3, r6, r8, r9, sl, fp, ip, pc}^
    7e88:	5b640800 	blpl	1909e90 <__Stack_Size+0x1909690>
    7e8c:	00020800 	andeq	r0, r2, r0, lsl #16
    7e90:	00009f4c 	andeq	r9, r0, ip, asr #30
    7e94:	00000000 	andeq	r0, r0, r0
    7e98:	582c0000 	stmdapl	ip!, {}	; <UNPREDICTABLE>
    7e9c:	585e0800 	ldmdapl	lr, {fp}^
    7ea0:	00030800 	andeq	r0, r3, r0, lsl #16
    7ea4:	ea9f3d08 	b	fe7d72cc <BootRAM+0xd747a6d>
    7ea8:	64080058 	strvs	r0, [r8], #-88	; 0x58
    7eac:	0308005b 	movweq	r0, #32859	; 0x805b
    7eb0:	9f3d0800 	svcls	0x003d0800
	...
    7ebc:	0800582c 	stmdaeq	r0, {r2, r3, r5, fp, ip, lr}
    7ec0:	0800585e 	stmdaeq	r0, {r1, r2, r3, r4, r6, fp, ip, lr}
    7ec4:	27080003 	strcs	r0, [r8, -r3]
    7ec8:	0058ea9f 			; <UNDEFINED> instruction: 0x0058ea9f
    7ecc:	005b6408 	subseq	r6, fp, r8, lsl #8
    7ed0:	08000308 	stmdaeq	r0, {r3, r8, r9}
    7ed4:	00009f27 	andeq	r9, r0, r7, lsr #30
    7ed8:	00000000 	andeq	r0, r0, r0
    7edc:	5b640000 	blpl	1907ee4 <__Stack_Size+0x19076e4>
    7ee0:	5b740800 	blpl	1d09ee8 <__Stack_Size+0x1d096e8>
    7ee4:	00010800 	andeq	r0, r1, r0, lsl #16
    7ee8:	005b7450 	subseq	r7, fp, r0, asr r4
    7eec:	005bec08 	subseq	lr, fp, r8, lsl #24
    7ef0:	5a000108 	bpl	8318 <__Stack_Size+0x7b18>
	...
    7efc:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
    7f00:	08005b78 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, fp, ip, lr}
    7f04:	78510001 	ldmdavc	r1, {r0}^
    7f08:	ec08005b 	stc	0, cr0, [r8], {91}	; 0x5b
    7f0c:	0108005b 	qaddeq	r0, fp, r8
    7f10:	00005700 	andeq	r5, r0, r0, lsl #14
    7f14:	00000000 	andeq	r0, r0, r0
    7f18:	5b640000 	blpl	1907f20 <__Stack_Size+0x1907720>
    7f1c:	5b760800 	blpl	1d89f24 <__Stack_Size+0x1d89724>
    7f20:	00010800 	andeq	r0, r1, r0, lsl #16
    7f24:	005b7652 	subseq	r7, fp, r2, asr r6
    7f28:	005b8a08 	subseq	r8, fp, r8, lsl #20
    7f2c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    7f30:	08005b8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, fp, ip, lr}
    7f34:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    7f38:	01f30004 	mvnseq	r0, r4
    7f3c:	5bc09f52 	blpl	ff02fc8c <BootRAM+0xdfa042d>
    7f40:	5bec0800 	blpl	ffb09f48 <BootRAM+0xea7a6e9>
    7f44:	00010800 	andeq	r0, r1, r0, lsl #16
    7f48:	00000054 	andeq	r0, r0, r4, asr r0
    7f4c:	00000000 	andeq	r0, r0, r0
    7f50:	005b7c00 	subseq	r7, fp, r0, lsl #24
    7f54:	005b8008 	subseq	r8, fp, r8
    7f58:	74000608 	strvc	r0, [r0], #-1544	; 0x608
    7f5c:	1a7f0800 	bne	1fc9f64 <__Stack_Size+0x1fc9764>
    7f60:	005b809f 			; <UNDEFINED> instruction: 0x005b809f
    7f64:	005b8c08 	subseq	r8, fp, r8, lsl #24
    7f68:	56000108 	strpl	r0, [r0], -r8, lsl #2
    7f6c:	08005b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp, ip, lr}
    7f70:	08005bc0 	stmdaeq	r0, {r6, r7, r8, r9, fp, ip, lr}
    7f74:	01f30007 	mvnseq	r0, r7
    7f78:	1a7f0852 	bne	1fca0c8 <__Stack_Size+0x1fc98c8>
    7f7c:	005bc09f 			; <UNDEFINED> instruction: 0x005bc09f
    7f80:	005bec08 	subseq	lr, fp, r8, lsl #24
    7f84:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    7f90:	08005b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, lr}
    7f94:	08005b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, ip, lr}
    7f98:	00720007 	rsbseq	r0, r2, r7
    7f9c:	25f733f7 	ldrbcs	r3, [r7, #1015]!	; 0x3f7
    7fa0:	005ba69f 			; <UNDEFINED> instruction: 0x005ba69f
    7fa4:	005bc008 	subseq	ip, fp, r8
    7fa8:	9e000a08 	vmlals.f32	s0, s0, s16
    7fac:	00000008 	andeq	r0, r0, r8
	...
    7fbc:	005b8800 	subseq	r8, fp, r0, lsl #16
    7fc0:	005b8e08 	subseq	r8, fp, r8, lsl #28
    7fc4:	91000308 	tstls	r0, r8, lsl #6
    7fc8:	5b8e9f5e 	blpl	fe3afd48 <BootRAM+0xd3204e9>
    7fcc:	5ba20800 	blpl	fe889fd4 <BootRAM+0xd7fa775>
    7fd0:	00030800 	andeq	r0, r3, r0, lsl #16
    7fd4:	a29f5c91 	addsge	r5, pc, #37120	; 0x9100
    7fd8:	a608005b 			; <UNDEFINED> instruction: 0xa608005b
    7fdc:	0308005b 	movweq	r0, #32859	; 0x805b
    7fe0:	9f5b9100 	svcls	0x005b9100
    7fe4:	08005ba6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, fp, ip, lr}
    7fe8:	08005baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp, ip, lr}
    7fec:	5a910003 	bpl	fe448000 <BootRAM+0xd3b87a1>
    7ff0:	005baa9f 			; <UNDEFINED> instruction: 0x005baa9f
    7ff4:	005bae08 	subseq	sl, fp, r8, lsl #28
    7ff8:	91000308 	tstls	r0, r8, lsl #6
    7ffc:	5bae9f59 	blpl	febafd68 <BootRAM+0xdb20509>
    8000:	5bb20800 	blpl	fec8a008 <BootRAM+0xdbfa7a9>
    8004:	00030800 	andeq	r0, r3, r0, lsl #16
    8008:	b29f5891 	addslt	r5, pc, #9502720	; 0x910000
    800c:	c008005b 	andgt	r0, r8, fp, asr r0
    8010:	0308005b 	movweq	r0, #32859	; 0x805b
    8014:	9f579100 	svcls	0x00579100
	...
    8020:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
    8024:	08005c06 	stmdaeq	r0, {r1, r2, sl, fp, ip, lr}
    8028:	06500001 	ldrbeq	r0, [r0], -r1
    802c:	8208005c 	andhi	r0, r8, #92	; 0x5c
    8030:	0208005e 	andeq	r0, r8, #94	; 0x5e
    8034:	00409100 	subeq	r9, r0, r0, lsl #2
    8038:	00000000 	andeq	r0, r0, r0
    803c:	ec000000 	stc	0, cr0, [r0], {-0}
    8040:	fe08005b 	mcr2	0, 0, r0, cr8, cr11, {2}
    8044:	0108005b 	qaddeq	r0, fp, r8
    8048:	5bfe5100 	blpl	fff9c450 <BootRAM+0xef0cbf1>
    804c:	5c3c0800 	ldcpl	8, cr0, [ip], #-0
    8050:	00030800 	andeq	r0, r3, r0, lsl #16
    8054:	3c7fac91 	ldclcc	12, cr10, [pc], #-580	; 7e18 <__Stack_Size+0x7618>
    8058:	d208005c 	andle	r0, r8, #92	; 0x5c
    805c:	0108005c 	qaddeq	r0, ip, r8
    8060:	5cf85100 	ldfple	f5, [r8]
    8064:	5dd40800 	ldclpl	8, cr0, [r4]
    8068:	00030800 	andeq	r0, r3, r0, lsl #16
    806c:	d47fac91 	ldrbtle	sl, [pc], #-3217	; 8074 <__Stack_Size+0x7874>
    8070:	da08005d 	ble	2081ec <__Stack_Size+0x2079ec>
    8074:	0108005d 	qaddeq	r0, sp, r8
    8078:	00005400 	andeq	r5, r0, r0, lsl #8
    807c:	00000000 	andeq	r0, r0, r0
    8080:	5bec0000 	blpl	ffb08088 <BootRAM+0xea78829>
    8084:	5c0a0800 	stcpl	8, cr0, [sl], {-0}
    8088:	00010800 	andeq	r0, r1, r0, lsl #16
    808c:	005c0a52 	subseq	r0, ip, r2, asr sl
    8090:	005c0e08 	subseq	r0, ip, r8, lsl #28
    8094:	f3000408 	vshl.u8	d0, d8, d0
    8098:	009f5201 	addseq	r5, pc, r1, lsl #4
    809c:	00000000 	andeq	r0, r0, r0
    80a0:	ec000000 	stc	0, cr0, [r0], {-0}
    80a4:	0c08005b 	stceq	0, cr0, [r8], {91}	; 0x5b
    80a8:	0108005c 	qaddeq	r0, ip, r8
    80ac:	5c0c5300 	stcpl	3, cr5, [ip], {-0}
    80b0:	5c120800 	ldcpl	8, cr0, [r2], {-0}
    80b4:	00010800 	andeq	r0, r1, r0, lsl #16
    80b8:	005c1251 	subseq	r1, ip, r1, asr r2
    80bc:	005c3c08 	subseq	r3, ip, r8, lsl #24
    80c0:	91000308 	tstls	r0, r8, lsl #6
    80c4:	5cf87fa4 	ldclpl	15, cr7, [r8], #656	; 0x290
    80c8:	5d0c0800 	stcpl	8, cr0, [ip, #-0]
    80cc:	00010800 	andeq	r0, r1, r0, lsl #16
    80d0:	005d0c51 	subseq	r0, sp, r1, asr ip
    80d4:	005dba08 	subseq	fp, sp, r8, lsl #20
    80d8:	91000308 	tstls	r0, r8, lsl #6
    80dc:	5dba7fa4 	ldcpl	15, cr7, [sl, #656]!	; 0x290
    80e0:	5dc80800 	stclpl	8, cr0, [r8]
    80e4:	001b0800 	andseq	r0, fp, r0, lsl #16
    80e8:	01f38008 	mvnseq	r8, r8
    80ec:	40121c52 	andsmi	r1, r2, r2, asr ip
    80f0:	f322244b 	vshl.u32	q1, <illegal reg q5.5>, q1
    80f4:	14165301 	ldrne	r5, [r6], #-769	; 0x301
    80f8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    80fc:	0001282d 	andeq	r2, r1, sp, lsr #16
    8100:	c89f1316 	ldmgt	pc, {r1, r2, r4, r8, r9, ip}	; <UNPREDICTABLE>
    8104:	da08005d 	ble	208280 <__Stack_Size+0x207a80>
    8108:	0308005d 	movweq	r0, #32861	; 0x805d
    810c:	7fa49100 	svcvc	0x00a49100
	...
    8118:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
    811c:	08005dc7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, fp, ip, lr}
    8120:	c75c0001 	ldrbgt	r0, [ip, -r1]
    8124:	d808005d 	stmdale	r8, {r0, r2, r3, r4, r6}
    8128:	0708005d 	smlsdeq	r8, sp, r0, r0
    812c:	7fa89100 	svcvc	0x00a89100
    8130:	9f012306 	svcls	0x00012306
	...
    813c:	08005c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip, lr}
    8140:	08005c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, ip, lr}
    8144:	93520006 	cmpls	r2, #6
    8148:	04935304 	ldreq	r5, [r3], #772	; 0x304
    814c:	08005c4e 	stmdaeq	r0, {r1, r2, r3, r6, sl, fp, ip, lr}
    8150:	08005c56 	stmdaeq	r0, {r1, r2, r4, r6, sl, fp, ip, lr}
    8154:	b8910004 	ldmlt	r1, {r2}
    8158:	5c56067f 	mrrcpl	6, 7, r0, r6, cr15
    815c:	5c780800 	ldclpl	8, cr0, [r8], #-0
    8160:	00060800 	andeq	r0, r6, r0, lsl #16
    8164:	53049352 	movwpl	r9, #17234	; 0x4352
    8168:	5c780493 	cfldrdpl	mvd0, [r8], #-588	; 0xfffffdb4
    816c:	5c7e0800 	ldclpl	8, cr0, [lr], #-0
    8170:	00060800 	andeq	r0, r6, r0, lsl #16
    8174:	5b04935a 	blpl	12cee4 <__Stack_Size+0x12c6e4>
    8178:	5c7e0493 	cfldrdpl	mvd0, [lr], #-588	; 0xfffffdb4
    817c:	5c840800 	stcpl	8, cr0, [r4], {0}
    8180:	00060800 	andeq	r0, r6, r0, lsl #16
    8184:	55049354 	strpl	r9, [r4, #-852]	; 0x354
    8188:	5c840493 	cfstrspl	mvf0, [r4], {147}	; 0x93
    818c:	5c900800 	ldcpl	8, cr0, [r0], {0}
    8190:	00060800 	andeq	r0, r6, r0, lsl #16
    8194:	57049356 	smlsdpl	r4, r6, r3, r9
    8198:	5c900493 	cfldrspl	mvf0, [r0], {147}	; 0x93
    819c:	5cb40800 	ldcpl	8, cr0, [r4]
    81a0:	00060800 	andeq	r0, r6, r0, lsl #16
    81a4:	59049358 	stmdbpl	r4, {r3, r4, r6, r8, r9, ip, pc}
    81a8:	00000493 	muleq	r0, r3, r4
    81ac:	00000000 	andeq	r0, r0, r0
    81b0:	5c460000 	marpl	acc0, r0, r6
    81b4:	5c560800 	mrrcpl	8, 0, r0, r6, cr0
    81b8:	00030800 	andeq	r0, r3, r0, lsl #16
    81bc:	569f0671 			; <UNDEFINED> instruction: 0x569f0671
    81c0:	7808005c 	stmdavc	r8, {r2, r3, r4, r6}
    81c4:	0308005c 	movweq	r0, #32860	; 0x805c
    81c8:	9f057100 	svcls	0x00057100
    81cc:	08005c78 	stmdaeq	r0, {r3, r4, r5, r6, sl, fp, ip, lr}
    81d0:	08005c7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, sl, fp, ip, lr}
    81d4:	03710003 	cmneq	r1, #3
    81d8:	005c7e9f 			; <UNDEFINED> instruction: 0x005c7e9f
    81dc:	005c8408 	subseq	r8, ip, r8, lsl #8
    81e0:	71000308 	tstvc	r0, r8, lsl #6
    81e4:	5c849f02 	stcpl	15, cr9, [r4], {2}
    81e8:	5c900800 	ldcpl	8, cr0, [r0], {0}
    81ec:	00030800 	andeq	r0, r3, r0, lsl #16
    81f0:	909f0171 	addsls	r0, pc, r1, ror r1	; <UNPREDICTABLE>
    81f4:	b408005c 	strlt	r0, [r8], #-92	; 0x5c
    81f8:	0108005c 	qaddeq	r0, ip, r8
    81fc:	5cb45100 	ldfpls	f5, [r4]
    8200:	5cc60800 	stclpl	8, cr0, [r6], {0}
    8204:	00030800 	andeq	r0, r3, r0, lsl #16
    8208:	c69f7f71 			; <UNDEFINED> instruction: 0xc69f7f71
    820c:	d208005c 	andle	r0, r8, #92	; 0x5c
    8210:	0308005c 	movweq	r0, #32860	; 0x805c
    8214:	9f777100 	svcls	0x00777100
	...
    8220:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
    8224:	08005dc7 	stmdaeq	r0, {r0, r1, r2, r6, r7, r8, sl, fp, ip, lr}
    8228:	00520001 	subseq	r0, r2, r1
    822c:	00000000 	andeq	r0, r0, r0
    8230:	c4000000 	strgt	r0, [r0], #-0
    8234:	da08005d 	ble	2083b0 <__Stack_Size+0x207bb0>
    8238:	0308005d 	movweq	r0, #32861	; 0x805d
    823c:	9f479100 	svcls	0x00479100
	...
    8248:	08005dea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, fp, ip, lr}
    824c:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    8250:	93500006 	cmpls	r0, #6
    8254:	04935104 	ldreq	r5, [r3], #260	; 0x104
    8258:	08005dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
    825c:	08005e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, lr}
    8260:	935a0006 	cmpls	sl, #6
    8264:	04935b04 	ldreq	r5, [r3], #2820	; 0xb04
    8268:	08005e04 	stmdaeq	r0, {r2, r9, sl, fp, ip, lr}
    826c:	08005e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, lr}
    8270:	93580006 	cmpls	r8, #6
    8274:	04935904 	ldreq	r5, [r3], #2308	; 0x904
    8278:	08005e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, lr}
    827c:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
    8280:	93560006 	cmpls	r6, #6
    8284:	04935704 	ldreq	r5, [r3], #1796	; 0x704
    8288:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
    828c:	08005e20 	stmdaeq	r0, {r5, r9, sl, fp, ip, lr}
    8290:	93540006 	cmpls	r4, #6
    8294:	04935504 	ldreq	r5, [r3], #1284	; 0x504
    8298:	08005e20 	stmdaeq	r0, {r5, r9, sl, fp, ip, lr}
    829c:	08005e4e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sl, fp, ip, lr}
    82a0:	93500006 	cmpls	r0, #6
    82a4:	04935104 	ldreq	r5, [r3], #260	; 0x104
    82a8:	08005e58 	stmdaeq	r0, {r3, r4, r6, r9, sl, fp, ip, lr}
    82ac:	08005e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip, lr}
    82b0:	8891000b 	ldmhi	r1, {r0, r1, r3}
    82b4:	2508f67f 	strcs	pc, [r8, #-1663]	; 0x67f
    82b8:	2525f738 	strcs	pc, [r5, #-1848]!	; 0x738
    82bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    82c0:	00000000 	andeq	r0, r0, r0
    82c4:	005dea00 	subseq	lr, sp, r0, lsl #20
    82c8:	005dfc08 	subseq	pc, sp, r8, lsl #24
    82cc:	91000308 	tstls	r0, r8, lsl #6
    82d0:	5dfc9f4e 	ldclpl	15, cr9, [ip, #312]!	; 0x138
    82d4:	5e040800 	cdppl	8, 0, cr0, cr4, cr0, {0}
    82d8:	00030800 	andeq	r0, r3, r0, lsl #16
    82dc:	049f4d91 	ldreq	r4, [pc], #3473	; 82e4 <__Stack_Size+0x7ae4>
    82e0:	1008005e 	andne	r0, r8, lr, asr r0
    82e4:	0308005e 	movweq	r0, #32862	; 0x805e
    82e8:	9f4c9100 	svcls	0x004c9100
    82ec:	08005e10 	stmdaeq	r0, {r4, r9, sl, fp, ip, lr}
    82f0:	08005e18 	stmdaeq	r0, {r3, r4, r9, sl, fp, ip, lr}
    82f4:	4b910003 	blmi	fe448308 <BootRAM+0xd3b8aa9>
    82f8:	005e189f 			; <UNDEFINED> instruction: 0x005e189f
    82fc:	005e2008 	subseq	r2, lr, r8
    8300:	91000308 	tstls	r0, r8, lsl #6
    8304:	5e209f4a 	cdppl	15, 2, cr9, cr0, cr10, {2}
    8308:	5e580800 	cdppl	8, 5, cr0, cr8, cr0, {0}
    830c:	00030800 	andeq	r0, r3, r0, lsl #16
    8310:	589f4991 	ldmpl	pc, {r0, r4, r7, r8, fp, lr}	; <UNPREDICTABLE>
    8314:	8208005e 	andhi	r0, r8, #94	; 0x5e
    8318:	0308005e 	movweq	r0, #32862	; 0x805e
    831c:	9f479100 	svcls	0x00479100
	...
    8330:	00500001 	subseq	r0, r0, r1
    8334:	00000000 	andeq	r0, r0, r0
    8338:	04000000 	streq	r0, [r0], #-0
    833c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8340:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8344:	00000000 	andeq	r0, r0, r0
    8348:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    835c:	00500001 	subseq	r0, r0, r1
    8360:	00000000 	andeq	r0, r0, r0
    8364:	01000000 	mrseq	r0, (UNDEF: 0)
    8368:	00005700 	andeq	r5, r0, r0, lsl #14
    836c:	00000000 	andeq	r0, r0, r0
    8370:	00010000 	andeq	r0, r1, r0
    8374:	00000050 	andeq	r0, r0, r0, asr r0
    8378:	00000000 	andeq	r0, r0, r0
    837c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    8388:	00500001 	subseq	r0, r0, r1
    838c:	00000000 	andeq	r0, r0, r0
    8390:	01000000 	mrseq	r0, (UNDEF: 0)
    8394:	00005700 	andeq	r5, r0, r0, lsl #14
    8398:	00000000 	andeq	r0, r0, r0
    839c:	00010000 	andeq	r0, r1, r0
    83a0:	00000050 	andeq	r0, r0, r0, asr r0
    83a4:	00000000 	andeq	r0, r0, r0
    83a8:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    83b4:	00500001 	subseq	r0, r0, r1
    83b8:	00000000 	andeq	r0, r0, r0
    83bc:	01000000 	mrseq	r0, (UNDEF: 0)
    83c0:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    83d0:	00010000 	andeq	r0, r1, r0
    83d4:	00000051 	andeq	r0, r0, r1, asr r0
    83d8:	00000000 	andeq	r0, r0, r0
    83dc:	5a000100 	bpl	87e4 <__Stack_Size+0x7fe4>
	...
    83e8:	00510001 	subseq	r0, r1, r1
    83ec:	00000000 	andeq	r0, r0, r0
    83f0:	01000000 	mrseq	r0, (UNDEF: 0)
    83f4:	00005a00 	andeq	r5, r0, r0, lsl #20
    83f8:	00000000 	andeq	r0, r0, r0
    83fc:	00010000 	andeq	r0, r1, r0
    8400:	00000051 	andeq	r0, r0, r1, asr r0
    8404:	00000000 	andeq	r0, r0, r0
    8408:	5a000100 	bpl	8810 <__Stack_Size+0x8010>
	...
    8414:	00510001 	subseq	r0, r1, r1
    8418:	00000000 	andeq	r0, r0, r0
    841c:	01000000 	mrseq	r0, (UNDEF: 0)
    8420:	00005a00 	andeq	r5, r0, r0, lsl #20
    8424:	00000000 	andeq	r0, r0, r0
    8428:	00010000 	andeq	r0, r1, r0
    842c:	00000051 	andeq	r0, r0, r1, asr r0
	...
    843c:	52000100 	andpl	r0, r0, #0, 2
	...
    8448:	00560001 	subseq	r0, r6, r1
	...
    8458:	01000000 	mrseq	r0, (UNDEF: 0)
    845c:	00005300 	andeq	r5, r0, r0, lsl #6
    8460:	00000000 	andeq	r0, r0, r0
    8464:	00010000 	andeq	r0, r1, r0
    8468:	00000055 	andeq	r0, r0, r5, asr r0
	...
    8478:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8484:	00580001 	subseq	r0, r8, r1
    8488:	00000000 	andeq	r0, r0, r0
    848c:	01000000 	mrseq	r0, (UNDEF: 0)
    8490:	00005b00 	andeq	r5, r0, r0, lsl #22
    8494:	00000000 	andeq	r0, r0, r0
    8498:	00010000 	andeq	r0, r1, r0
    849c:	00000050 	andeq	r0, r0, r0, asr r0
    84a0:	00000000 	andeq	r0, r0, r0
    84a4:	5b000100 	blpl	88ac <__Stack_Size+0x80ac>
	...
    84b0:	005b0001 	subseq	r0, fp, r1
    84b4:	00000000 	andeq	r0, r0, r0
    84b8:	01000000 	mrseq	r0, (UNDEF: 0)
    84bc:	00005900 	andeq	r5, r0, r0, lsl #18
    84c0:	00000000 	andeq	r0, r0, r0
    84c4:	00010000 	andeq	r0, r1, r0
    84c8:	00000050 	andeq	r0, r0, r0, asr r0
    84cc:	00000000 	andeq	r0, r0, r0
    84d0:	59000100 	stmdbpl	r0, {r8}
	...
    84dc:	00540001 	subseq	r0, r4, r1
    84e0:	00000000 	andeq	r0, r0, r0
    84e4:	01000000 	mrseq	r0, (UNDEF: 0)
    84e8:	00005000 	andeq	r5, r0, r0
    84ec:	00000000 	andeq	r0, r0, r0
    84f0:	00010000 	andeq	r0, r1, r0
    84f4:	00000054 	andeq	r0, r0, r4, asr r0
    84f8:	00000000 	andeq	r0, r0, r0
    84fc:	58000100 	stmdapl	r0, {r8}
	...
    8508:	00500001 	subseq	r0, r0, r1
    850c:	00000000 	andeq	r0, r0, r0
    8510:	01000000 	mrseq	r0, (UNDEF: 0)
    8514:	00005700 	andeq	r5, r0, r0, lsl #14
	...
    8524:	00010000 	andeq	r0, r1, r0
    8528:	00000052 	andeq	r0, r0, r2, asr r0
    852c:	00000000 	andeq	r0, r0, r0
    8530:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    853c:	00540001 	subseq	r0, r4, r1
    8540:	00000000 	andeq	r0, r0, r0
    8544:	01000000 	mrseq	r0, (UNDEF: 0)
    8548:	00005600 	andeq	r5, r0, r0, lsl #12
    854c:	00000000 	andeq	r0, r0, r0
    8550:	00010000 	andeq	r0, r1, r0
    8554:	00000054 	andeq	r0, r0, r4, asr r0
    8558:	00000000 	andeq	r0, r0, r0
    855c:	58000100 	stmdapl	r0, {r8}
	...
    8568:	00560001 	subseq	r0, r6, r1
    856c:	00000000 	andeq	r0, r0, r0
    8570:	01000000 	mrseq	r0, (UNDEF: 0)
    8574:	00005800 	andeq	r5, r0, r0, lsl #16
    8578:	00000000 	andeq	r0, r0, r0
    857c:	00010000 	andeq	r0, r1, r0
    8580:	00000059 	andeq	r0, r0, r9, asr r0
    8584:	00000000 	andeq	r0, r0, r0
    8588:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    8594:	00590001 	subseq	r0, r9, r1
    8598:	00000000 	andeq	r0, r0, r0
    859c:	01000000 	mrseq	r0, (UNDEF: 0)
    85a0:	00005400 	andeq	r5, r0, r0, lsl #8
    85a4:	00000000 	andeq	r0, r0, r0
    85a8:	00010000 	andeq	r0, r1, r0
    85ac:	00000056 	andeq	r0, r0, r6, asr r0
    85b0:	00000000 	andeq	r0, r0, r0
    85b4:	005e9000 	subseq	r9, lr, r0
    85b8:	005e9808 	subseq	r9, lr, r8, lsl #16
    85bc:	50000108 	andpl	r0, r0, r8, lsl #2
    85c0:	08005e98 	stmdaeq	r0, {r3, r4, r7, r9, sl, fp, ip, lr}
    85c4:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
    85c8:	01f30004 	mvnseq	r0, r4
    85cc:	00009f50 	andeq	r9, r0, r0, asr pc
    85d0:	00000000 	andeq	r0, r0, r0
    85d4:	5ea00000 	cdppl	0, 10, cr0, cr0, cr0, {0}
    85d8:	5ec40800 	cdppl	8, 12, cr0, cr4, cr0, {0}
    85dc:	00010800 	andeq	r0, r1, r0, lsl #16
    85e0:	005ec450 	subseq	ip, lr, r0, asr r4
    85e4:	005ef408 	subseq	pc, lr, r8, lsl #8
    85e8:	f3000408 	vshl.u8	d0, d8, d0
    85ec:	f49f5001 			; <UNDEFINED> instruction: 0xf49f5001
    85f0:	f608005e 			; <UNDEFINED> instruction: 0xf608005e
    85f4:	0108005e 	qaddeq	r0, lr, r8
    85f8:	5ef65000 	cdppl	0, 15, cr5, cr6, cr0, {0}
    85fc:	5f6e0800 	svcpl	0x006e0800
    8600:	00040800 	andeq	r0, r4, r0, lsl #16
    8604:	9f5001f3 	svcls	0x005001f3
    8608:	08005f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    860c:	08005f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip, lr}
    8610:	70500001 	subsvc	r0, r0, r1
    8614:	7608005f 			; <UNDEFINED> instruction: 0x7608005f
    8618:	0408005f 	streq	r0, [r8], #-95	; 0x5f
    861c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8620:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8624:	00000000 	andeq	r0, r0, r0
    8628:	005ea000 	subseq	sl, lr, r0
    862c:	005ec408 	subseq	ip, lr, r8, lsl #8
    8630:	51000108 	tstpl	r0, r8, lsl #2
    8634:	08005ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, lr}
    8638:	08005ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    863c:	01f30004 	mvnseq	r0, r4
    8640:	5ef49f51 	mrcpl	15, 7, r9, cr4, cr1, {2}
    8644:	5ef60800 	cdppl	8, 15, cr0, cr6, cr0, {0}
    8648:	00010800 	andeq	r0, r1, r0, lsl #16
    864c:	005ef651 	subseq	pc, lr, r1, asr r6	; <UNPREDICTABLE>
    8650:	005f6e08 	subseq	r6, pc, r8, lsl #28
    8654:	f3000408 	vshl.u8	d0, d8, d0
    8658:	6e9f5101 	fmlvse	f5, f7, f1
    865c:	7008005f 	andvc	r0, r8, pc, asr r0
    8660:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8664:	5f705100 	svcpl	0x00705100
    8668:	5f760800 	svcpl	0x00760800
    866c:	00040800 	andeq	r0, r4, r0, lsl #16
    8670:	9f5101f3 	svcls	0x005101f3
	...
    867c:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
    8680:	08005ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, lr}
    8684:	c4520001 	ldrbgt	r0, [r2], #-1
    8688:	f408005e 	vst4.16	{d0-d3}, [r8 :64], lr
    868c:	0108005e 	qaddeq	r0, lr, r8
    8690:	5ef45800 	cdppl	8, 15, cr5, cr4, cr0, {0}
    8694:	5ef60800 	cdppl	8, 15, cr0, cr6, cr0, {0}
    8698:	00010800 	andeq	r0, r1, r0, lsl #16
    869c:	005ef652 	subseq	pc, lr, r2, asr r6	; <UNPREDICTABLE>
    86a0:	005f6e08 	subseq	r6, pc, r8, lsl #28
    86a4:	58000108 	stmdapl	r0, {r3, r8}
    86a8:	08005f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    86ac:	08005f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip, lr}
    86b0:	70520001 	subsvc	r0, r2, r1
    86b4:	7608005f 			; <UNDEFINED> instruction: 0x7608005f
    86b8:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    86bc:	00005800 	andeq	r5, r0, r0, lsl #16
    86c0:	00000000 	andeq	r0, r0, r0
    86c4:	5ea00000 	cdppl	0, 10, cr0, cr0, cr0, {0}
    86c8:	5eaa0800 	cdppl	8, 10, cr0, cr10, cr0, {0}
    86cc:	00010800 	andeq	r0, r1, r0, lsl #16
    86d0:	005eaa53 	subseq	sl, lr, r3, asr sl
    86d4:	005f7608 	subseq	r7, pc, r8, lsl #12
    86d8:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    86e4:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
    86e8:	08005ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, lr}
    86ec:	c4500001 	ldrbgt	r0, [r0], #-1
    86f0:	e408005e 	str	r0, [r8], #-94	; 0x5e
    86f4:	0108005e 	qaddeq	r0, lr, r8
    86f8:	5ee45500 	cdppl	5, 14, cr5, cr4, cr0, {0}
    86fc:	5ef40800 	cdppl	8, 15, cr0, cr4, cr0, {0}
    8700:	00010800 	andeq	r0, r1, r0, lsl #16
    8704:	005ef457 	subseq	pc, lr, r7, asr r4	; <UNPREDICTABLE>
    8708:	005ef608 	subseq	pc, lr, r8, lsl #12
    870c:	50000108 	andpl	r0, r0, r8, lsl #2
    8710:	08005ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8714:	08005f0a 	stmdaeq	r0, {r1, r3, r8, r9, sl, fp, ip, lr}
    8718:	0a550001 	beq	1548724 <__Stack_Size+0x1547f24>
    871c:	3a08005f 	bcc	2088a0 <__Stack_Size+0x2080a0>
    8720:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8724:	5f3a5a00 	svcpl	0x003a5a00
    8728:	5f6e0800 	svcpl	0x006e0800
    872c:	00010800 	andeq	r0, r1, r0, lsl #16
    8730:	005f6e55 	subseq	r6, pc, r5, asr lr	; <UNPREDICTABLE>
    8734:	005f7008 	subseq	r7, pc, r8
    8738:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    8744:	08005eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp, ip, lr}
    8748:	08005ec4 	stmdaeq	r0, {r2, r6, r7, r9, sl, fp, ip, lr}
    874c:	c4520001 	ldrbgt	r0, [r2], #-1
    8750:	e408005e 	str	r0, [r8], #-94	; 0x5e
    8754:	0108005e 	qaddeq	r0, lr, r8
    8758:	5ef45900 	cdppl	9, 15, cr5, cr4, cr0, {0}
    875c:	5ef60800 	cdppl	8, 15, cr0, cr6, cr0, {0}
    8760:	00010800 	andeq	r0, r1, r0, lsl #16
    8764:	005ef652 	subseq	pc, lr, r2, asr r6	; <UNPREDICTABLE>
    8768:	005f0e08 	subseq	r0, pc, r8, lsl #28
    876c:	53000108 	movwpl	r0, #264	; 0x108
    8770:	08005f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, ip, lr}
    8774:	08005f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    8778:	3a570001 	bcc	15c8784 <__Stack_Size+0x15c7f84>
    877c:	4608005f 			; <UNDEFINED> instruction: 0x4608005f
    8780:	0308005f 	movweq	r0, #32863	; 0x805f
    8784:	9f017700 	svcls	0x00017700
    8788:	08005f46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, ip, lr}
    878c:	08005f5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
    8790:	02770003 	rsbseq	r0, r7, #3
    8794:	005f5e9f 			; <UNDEFINED> instruction: 0x005f5e9f
    8798:	005f6008 	subseq	r6, pc, r8
    879c:	59000108 	stmdbpl	r0, {r3, r8}
    87a0:	08005f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip, lr}
    87a4:	08005f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    87a8:	02770003 	rsbseq	r0, r7, #3
    87ac:	005f6a9f 			; <UNDEFINED> instruction: 0x005f6a9f
    87b0:	005f6e08 	subseq	r6, pc, r8, lsl #28
    87b4:	59000108 	stmdbpl	r0, {r3, r8}
    87b8:	08005f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
    87bc:	08005f70 	stmdaeq	r0, {r4, r5, r6, r8, r9, sl, fp, ip, lr}
    87c0:	00520001 	subseq	r0, r2, r1
    87c4:	00000000 	andeq	r0, r0, r0
    87c8:	b4000000 	strlt	r0, [r0], #-0
    87cc:	c408005e 	strgt	r0, [r8], #-94	; 0x5e
    87d0:	0208005e 	andeq	r0, r8, #94	; 0x5e
    87d4:	c4017400 	strgt	r7, [r1], #-1024	; 0x400
    87d8:	d608005e 			; <UNDEFINED> instruction: 0xd608005e
    87dc:	0108005e 	qaddeq	r0, lr, r8
    87e0:	5ee45600 	cdppl	6, 14, cr5, cr4, cr0, {0}
    87e4:	5eec0800 	cdppl	8, 14, cr0, cr12, cr0, {0}
    87e8:	00050800 	andeq	r0, r5, r0, lsl #16
    87ec:	25320076 	ldrcs	r0, [r2, #-118]!	; 0x76
    87f0:	005eee9f 			; <UNDEFINED> instruction: 0x005eee9f
    87f4:	005ef408 	subseq	pc, lr, r8, lsl #8
    87f8:	56000108 	strpl	r0, [r0], -r8, lsl #2
    87fc:	08005ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8800:	08005ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    8804:	01740002 	cmneq	r4, r2
    8808:	08005ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp, ip, lr}
    880c:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
    8810:	0c560001 	mrrceq	0, 0, r0, r6, cr1
    8814:	1e08005f 	mcrne	0, 0, r0, cr8, cr15, {2}
    8818:	0808005f 	stmdaeq	r8, {r0, r1, r2, r3, r4, r6}
    881c:	34007500 	strcc	r7, [r0], #-1280	; 0x500
    8820:	21007625 	tstcs	r0, r5, lsr #12
    8824:	005f229f 			; <UNDEFINED> instruction: 0x005f229f
    8828:	005f3a08 	subseq	r3, pc, r8, lsl #20
    882c:	56000108 	strpl	r0, [r0], -r8, lsl #2
    8830:	08005f3a 	stmdaeq	r0, {r1, r3, r4, r5, r8, r9, sl, fp, ip, lr}
    8834:	08005f46 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl, fp, ip, lr}
    8838:	00790008 	rsbseq	r0, r9, r8
    883c:	00762536 	rsbseq	r2, r6, r6, lsr r5
    8840:	5f469f21 	svcpl	0x00469f21
    8844:	5f6e0800 	svcpl	0x006e0800
    8848:	00010800 	andeq	r0, r1, r0, lsl #16
    884c:	005f6e56 	subseq	r6, pc, r6, asr lr	; <UNPREDICTABLE>
    8850:	005f7008 	subseq	r7, pc, r8
    8854:	74000208 	strvc	r0, [r0], #-520	; 0x208
    8858:	00000001 	andeq	r0, r0, r1
    885c:	00000000 	andeq	r0, r0, r0
    8860:	005ee400 	subseq	lr, lr, r0, lsl #8
    8864:	005eec08 	subseq	lr, lr, r8, lsl #24
    8868:	56000108 	strpl	r0, [r0], -r8, lsl #2
    886c:	08005f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip, lr}
    8870:	08005f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, lr}
    8874:	7f7a0002 	svcvc	0x007a0002
    8878:	08005f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip, lr}
    887c:	08005f22 	stmdaeq	r0, {r1, r5, r8, r9, sl, fp, ip, lr}
    8880:	3a550001 	bcc	154888c <__Stack_Size+0x154808c>
    8884:	4108005f 	qaddmi	r0, pc, r8	; <UNPREDICTABLE>
    8888:	0208005f 	andeq	r0, r8, #95	; 0x5f
    888c:	41007a00 	tstmi	r0, r0, lsl #20
    8890:	5e08005f 	mcrpl	0, 0, r0, cr8, cr15, {2}
    8894:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8898:	5f605900 	svcpl	0x00605900
    889c:	5f6a0800 	svcpl	0x006a0800
    88a0:	00010800 	andeq	r0, r1, r0, lsl #16
    88a4:	00000059 	andeq	r0, r0, r9, asr r0
    88a8:	00000000 	andeq	r0, r0, r0
    88ac:	005f7600 	subseq	r7, pc, r0, lsl #12
    88b0:	005f8608 	subseq	r8, pc, r8, lsl #12
    88b4:	50000108 	andpl	r0, r0, r8, lsl #2
    88b8:	08005f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp, ip, lr}
    88bc:	08005f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, lr}
    88c0:	96540001 	ldrbls	r0, [r4], -r1
    88c4:	9808005f 	stmdals	r8, {r0, r1, r2, r3, r4, r6}
    88c8:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    88cc:	5f985000 	svcpl	0x00985000
    88d0:	5fa80800 	svcpl	0x00a80800
    88d4:	00010800 	andeq	r0, r1, r0, lsl #16
    88d8:	005fa854 	subseq	sl, pc, r4, asr r8	; <UNPREDICTABLE>
    88dc:	005faa08 	subseq	sl, pc, r8, lsl #20
    88e0:	50000108 	andpl	r0, r0, r8, lsl #2
    88e4:	08005faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    88e8:	08005fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    88ec:	00540001 	subseq	r0, r4, r1
    88f0:	00000000 	andeq	r0, r0, r0
    88f4:	76000000 	strvc	r0, [r0], -r0
    88f8:	8908005f 	stmdbhi	r8, {r0, r1, r2, r3, r4, r6}
    88fc:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8900:	5f895100 	svcpl	0x00895100
    8904:	5f960800 	svcpl	0x00960800
    8908:	00040800 	andeq	r0, r4, r0, lsl #16
    890c:	9f5101f3 	svcls	0x005101f3
    8910:	08005f96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, sl, fp, ip, lr}
    8914:	08005f9b 	stmdaeq	r0, {r0, r1, r3, r4, r7, r8, r9, sl, fp, ip, lr}
    8918:	9b510001 	blls	1448924 <__Stack_Size+0x1448124>
    891c:	a808005f 	stmdage	r8, {r0, r1, r2, r3, r4, r6}
    8920:	0408005f 	streq	r0, [r8], #-95	; 0x5f
    8924:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8928:	005fa89f 			; <UNDEFINED> instruction: 0x005fa89f
    892c:	005faa08 	subseq	sl, pc, r8, lsl #20
    8930:	51000108 	tstpl	r0, r8, lsl #2
    8934:	08005faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    8938:	08005fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    893c:	01f30004 	mvnseq	r0, r4
    8940:	00009f51 	andeq	r9, r0, r1, asr pc
    8944:	00000000 	andeq	r0, r0, r0
    8948:	5f760000 	svcpl	0x00760000
    894c:	5f840800 	svcpl	0x00840800
    8950:	00010800 	andeq	r0, r1, r0, lsl #16
    8954:	005f8450 	subseq	r8, pc, r0, asr r4	; <UNPREDICTABLE>
    8958:	005f8608 	subseq	r8, pc, r8, lsl #12
    895c:	70000308 	andvc	r0, r0, r8, lsl #6
    8960:	5f869f01 	svcpl	0x00869f01
    8964:	5f920800 	svcpl	0x00920800
    8968:	00030800 	andeq	r0, r3, r0, lsl #16
    896c:	929f0174 	addsls	r0, pc, #116, 2
    8970:	9608005f 			; <UNDEFINED> instruction: 0x9608005f
    8974:	0108005f 	qaddeq	r0, pc, r8	; <UNPREDICTABLE>
    8978:	5f965300 	svcpl	0x00965300
    897c:	5f980800 	svcpl	0x00980800
    8980:	00030800 	andeq	r0, r3, r0, lsl #16
    8984:	989f0170 	ldmls	pc, {r4, r5, r6, r8}	; <UNPREDICTABLE>
    8988:	a008005f 	andge	r0, r8, pc, asr r0
    898c:	0308005f 	movweq	r0, #32863	; 0x805f
    8990:	9f017400 	svcls	0x00017400
    8994:	08005fa0 	stmdaeq	r0, {r5, r7, r8, r9, sl, fp, ip, lr}
    8998:	08005fa4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, fp, ip, lr}
    899c:	02740003 	rsbseq	r0, r4, #3
    89a0:	005fa49f 			; <UNDEFINED> instruction: 0x005fa49f
    89a4:	005fa808 	subseq	sl, pc, r8, lsl #16
    89a8:	53000108 	movwpl	r0, #264	; 0x108
    89ac:	08005fa8 	stmdaeq	r0, {r3, r5, r7, r8, r9, sl, fp, ip, lr}
    89b0:	08005faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp, ip, lr}
    89b4:	aa500001 	bge	14089c0 <__Stack_Size+0x14081c0>
    89b8:	b208005f 	andlt	r0, r8, #95	; 0x5f
    89bc:	0308005f 	movweq	r0, #32863	; 0x805f
    89c0:	9f017300 	svcls	0x00017300
    89c4:	08005fb2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    89c8:	08005fb4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
    89cc:	b4500001 	ldrblt	r0, [r0], #-1
    89d0:	b608005f 			; <UNDEFINED> instruction: 0xb608005f
    89d4:	0308005f 	movweq	r0, #32863	; 0x805f
    89d8:	9f017300 	svcls	0x00017300
	...
    89e4:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    89e8:	0800600c 	stmdaeq	r0, {r2, r3, sp, lr}
    89ec:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    89f0:	a2080060 	andge	r0, r8, #96	; 0x60
    89f4:	01080061 	tsteq	r8, r1, rrx
    89f8:	61a25700 			; <UNDEFINED> instruction: 0x61a25700
    89fc:	61d80800 	bicsvs	r0, r8, r0, lsl #16
    8a00:	00040800 	andeq	r0, r4, r0, lsl #16
    8a04:	9f5001f3 	svcls	0x005001f3
	...
    8a10:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8a14:	08006008 	stmdaeq	r0, {r3, sp, lr}
    8a18:	08510001 	ldmdaeq	r1, {r0}^
    8a1c:	a2080060 	andge	r0, r8, #96	; 0x60
    8a20:	03080061 	movweq	r0, #32865	; 0x8061
    8a24:	7c949100 	ldfvcd	f1, [r4], {0}
    8a28:	080061a2 	stmdaeq	r0, {r1, r5, r7, r8, sp, lr}
    8a2c:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    8a30:	947d0003 	ldrbtls	r0, [sp], #-3
    8a34:	0000007c 	andeq	r0, r0, ip, ror r0
    8a38:	00000000 	andeq	r0, r0, r0
    8a3c:	005ffc00 	subseq	pc, pc, r0, lsl #24
    8a40:	00600e08 	rsbeq	r0, r0, r8, lsl #28
    8a44:	52000108 	andpl	r0, r0, #8, 2
    8a48:	0800600e 	stmdaeq	r0, {r1, r2, r3, sp, lr}
    8a4c:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    8a50:	01f30004 	mvnseq	r0, r4
    8a54:	00009f52 	andeq	r9, r0, r2, asr pc
    8a58:	00000000 	andeq	r0, r0, r0
    8a5c:	60280000 	eorvs	r0, r8, r0
    8a60:	61a20800 			; <UNDEFINED> instruction: 0x61a20800
    8a64:	00040800 	andeq	r0, r4, r0, lsl #16
    8a68:	9f7f8091 	svcls	0x007f8091
    8a6c:	080061a2 	stmdaeq	r0, {r1, r5, r7, r8, sp, lr}
    8a70:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
    8a74:	807d0004 	rsbshi	r0, sp, r4
    8a78:	00009f7f 	andeq	r9, r0, pc, ror pc
    8a7c:	00000000 	andeq	r0, r0, r0
    8a80:	60020000 	andvs	r0, r2, r0
    8a84:	600c0800 	andvs	r0, ip, r0, lsl #16
    8a88:	00030800 	andeq	r0, r3, r0, lsl #16
    8a8c:	0c7f8091 	ldcleq	0, cr8, [pc], #-580	; 8850 <__Stack_Size+0x8050>
    8a90:	11080060 	tstne	r8, r0, rrx
    8a94:	02080060 	andeq	r0, r8, #96	; 0x60
    8a98:	11007000 	mrsne	r7, (UNDEF: 0)
    8a9c:	1a080060 	bne	208c24 <__Stack_Size+0x208424>
    8aa0:	03080060 	movweq	r0, #32864	; 0x8060
    8aa4:	7f809100 	svcvc	0x00809100
    8aa8:	0800601a 	stmdaeq	r0, {r1, r3, r4, sp, lr}
    8aac:	0800601d 	stmdaeq	r0, {r0, r2, r3, r4, sp, lr}
    8ab0:	00700002 	rsbseq	r0, r0, r2
    8ab4:	0800601d 	stmdaeq	r0, {r0, r2, r3, r4, sp, lr}
    8ab8:	080061a2 	stmdaeq	r0, {r1, r5, r7, r8, sp, lr}
    8abc:	80910003 	addshi	r0, r1, r3
    8ac0:	0061a27f 	rsbeq	sl, r1, pc, ror r2
    8ac4:	0061d808 	rsbeq	sp, r1, r8, lsl #16
    8ac8:	7d000308 	stcvc	3, cr0, [r0, #-32]	; 0xffffffe0
    8acc:	00007f80 	andeq	r7, r0, r0, lsl #31
    8ad0:	00000000 	andeq	r0, r0, r0
    8ad4:	607c0000 	rsbsvs	r0, ip, r0
    8ad8:	619c0800 	orrsvs	r0, ip, r0, lsl #16
    8adc:	00020800 	andeq	r0, r2, r0, lsl #16
    8ae0:	00009f31 	andeq	r9, r0, r1, lsr pc
    8ae4:	00000000 	andeq	r0, r0, r0
    8ae8:	607c0000 	rsbsvs	r0, ip, r0
    8aec:	619c0800 	orrsvs	r0, ip, r0, lsl #16
    8af0:	00020800 	andeq	r0, r2, r0, lsl #16
    8af4:	00009f30 	andeq	r9, r0, r0, lsr pc
    8af8:	00000000 	andeq	r0, r0, r0
    8afc:	607c0000 	rsbsvs	r0, ip, r0
    8b00:	609a0800 	addsvs	r0, sl, r0, lsl #16
    8b04:	00030800 	andeq	r0, r3, r0, lsl #16
    8b08:	9a9f8408 	bls	fe7e9b30 <BootRAM+0xd75a2d1>
    8b0c:	ca080060 	bgt	208c94 <__Stack_Size+0x208494>
    8b10:	01080060 	tsteq	r8, r0, rrx
    8b14:	00005400 	andeq	r5, r0, r0, lsl #8
    8b18:	00000000 	andeq	r0, r0, r0
    8b1c:	608e0000 	addvs	r0, lr, r0
    8b20:	60cc0800 	sbcvs	r0, ip, r0, lsl #16
    8b24:	00010800 	andeq	r0, r1, r0, lsl #16
    8b28:	00000055 	andeq	r0, r0, r5, asr r0
	...
    8b38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8b44:	01f30004 	mvnseq	r0, r4
    8b48:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8b58:	00010000 	andeq	r0, r1, r0
    8b5c:	00000050 	andeq	r0, r0, r0, asr r0
    8b60:	00000000 	andeq	r0, r0, r0
    8b64:	f3000400 	vshl.u8	d0, d0, d0
    8b68:	009f5001 	addseq	r5, pc, r1
	...
    8b78:	01000000 	mrseq	r0, (UNDEF: 0)
    8b7c:	00005000 	andeq	r5, r0, r0
    8b80:	00000000 	andeq	r0, r0, r0
    8b84:	00040000 	andeq	r0, r4, r0
    8b88:	9f5001f3 	svcls	0x005001f3
	...
    8b9c:	00510001 	subseq	r0, r1, r1
    8ba0:	00000000 	andeq	r0, r0, r0
    8ba4:	04000000 	streq	r0, [r0], #-0
    8ba8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8bac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8bbc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8bc8:	01f30004 	mvnseq	r0, r4
    8bcc:	00009f50 	andeq	r9, r0, r0, asr pc
    8bd0:	00000000 	andeq	r0, r0, r0
    8bd4:	61d80000 	bicsvs	r0, r8, r0
    8bd8:	61da0800 	bicsvs	r0, sl, r0, lsl #16
    8bdc:	00010800 	andeq	r0, r1, r0, lsl #16
    8be0:	0061da50 	rsbeq	sp, r1, r0, asr sl
    8be4:	00620208 	rsbeq	r0, r2, r8, lsl #4
    8be8:	f3000408 	vshl.u8	d0, d8, d0
    8bec:	009f5001 	addseq	r5, pc, r1
	...
    8bfc:	01000000 	mrseq	r0, (UNDEF: 0)
    8c00:	00005000 	andeq	r5, r0, r0
    8c04:	00000000 	andeq	r0, r0, r0
    8c08:	00040000 	andeq	r0, r4, r0
    8c0c:	9f5001f3 	svcls	0x005001f3
	...
    8c20:	00500001 	subseq	r0, r0, r1
    8c24:	00000000 	andeq	r0, r0, r0
    8c28:	04000000 	streq	r0, [r0], #-0
    8c2c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8c30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8c40:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8c4c:	01f30004 	mvnseq	r0, r4
    8c50:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8c60:	00010000 	andeq	r0, r1, r0
    8c64:	00000050 	andeq	r0, r0, r0, asr r0
    8c68:	00000000 	andeq	r0, r0, r0
    8c6c:	f3000400 	vshl.u8	d0, d0, d0
    8c70:	009f5001 	addseq	r5, pc, r1
	...
    8c80:	01000000 	mrseq	r0, (UNDEF: 0)
    8c84:	00005000 	andeq	r5, r0, r0
    8c88:	00000000 	andeq	r0, r0, r0
    8c8c:	00040000 	andeq	r0, r4, r0
    8c90:	9f5001f3 	svcls	0x005001f3
	...
    8ca4:	00730006 	rsbseq	r0, r3, r6
    8ca8:	9f273008 	svcls	0x00273008
	...
    8cb4:	00730009 	rsbseq	r0, r3, r9
    8cb8:	08273008 	stmdaeq	r7!, {r3, ip, sp}
    8cbc:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    8cc0:	00000000 	andeq	r0, r0, r0
    8cc4:	02000000 	andeq	r0, r0, #0
    8cc8:	04080062 	streq	r0, [r8], #-98	; 0x62
    8ccc:	01080062 	tsteq	r8, r2, rrx
    8cd0:	62045000 	andvs	r5, r4, #0
    8cd4:	62200800 	eorvs	r0, r0, #0, 16
    8cd8:	00040800 	andeq	r0, r4, r0, lsl #16
    8cdc:	9f5001f3 	svcls	0x005001f3
	...
    8ce8:	08006218 	stmdaeq	r0, {r3, r4, r9, sp, lr}
    8cec:	0800621c 	stmdaeq	r0, {r2, r3, r4, r9, sp, lr}
    8cf0:	00730007 	rsbseq	r0, r3, r7
    8cf4:	2730000a 	ldrcs	r0, [r0, -sl]!
    8cf8:	00621c9f 	mlseq	r2, pc, ip, r1	; <UNPREDICTABLE>
    8cfc:	00622008 	rsbeq	r2, r2, r8
    8d00:	73000b08 	movwvc	r0, #2824	; 0xb08
    8d04:	30000a00 	andcc	r0, r0, r0, lsl #20
    8d08:	30000a27 	andcc	r0, r0, r7, lsr #20
    8d0c:	00009f27 	andeq	r9, r0, r7, lsr #30
	...
    8d1c:	00010000 	andeq	r0, r1, r0
    8d20:	00000050 	andeq	r0, r0, r0, asr r0
    8d24:	00000000 	andeq	r0, r0, r0
    8d28:	f3000400 	vshl.u8	d0, d0, d0
    8d2c:	009f5001 	addseq	r5, pc, r1
	...
    8d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    8d40:	00005000 	andeq	r5, r0, r0
    8d44:	00000000 	andeq	r0, r0, r0
    8d48:	00040000 	andeq	r0, r4, r0
    8d4c:	9f5001f3 	svcls	0x005001f3
	...
    8d58:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
    8d5c:	08006222 	stmdaeq	r0, {r1, r5, r9, sp, lr}
    8d60:	22500001 	subscs	r0, r0, #1
    8d64:	3c080062 	stccc	0, cr0, [r8], {98}	; 0x62
    8d68:	04080062 	streq	r0, [r8], #-98	; 0x62
    8d6c:	5001f300 	andpl	pc, r1, r0, lsl #6
    8d70:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8d80:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8d8c:	01f30004 	mvnseq	r0, r4
    8d90:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8da0:	00010000 	andeq	r0, r1, r0
    8da4:	00000050 	andeq	r0, r0, r0, asr r0
    8da8:	00000000 	andeq	r0, r0, r0
    8dac:	f3000400 	vshl.u8	d0, d0, d0
    8db0:	009f5001 	addseq	r5, pc, r1
	...
    8dc0:	01000000 	mrseq	r0, (UNDEF: 0)
    8dc4:	00005000 	andeq	r5, r0, r0
    8dc8:	00000000 	andeq	r0, r0, r0
    8dcc:	00040000 	andeq	r0, r4, r0
    8dd0:	9f5001f3 	svcls	0x005001f3
	...
    8de4:	00500001 	subseq	r0, r0, r1
    8de8:	00000000 	andeq	r0, r0, r0
    8dec:	04000000 	streq	r0, [r0], #-0
    8df0:	5001f300 	andpl	pc, r1, r0, lsl #6
    8df4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8e04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8e10:	01f30004 	mvnseq	r0, r4
    8e14:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8e24:	00010000 	andeq	r0, r1, r0
    8e28:	00000050 	andeq	r0, r0, r0, asr r0
    8e2c:	00000000 	andeq	r0, r0, r0
    8e30:	f3000400 	vshl.u8	d0, d0, d0
    8e34:	009f5001 	addseq	r5, pc, r1
	...
    8e44:	01000000 	mrseq	r0, (UNDEF: 0)
    8e48:	00005000 	andeq	r5, r0, r0
    8e4c:	00000000 	andeq	r0, r0, r0
    8e50:	00040000 	andeq	r0, r4, r0
    8e54:	9f5001f3 	svcls	0x005001f3
	...
    8e68:	00500001 	subseq	r0, r0, r1
    8e6c:	00000000 	andeq	r0, r0, r0
    8e70:	04000000 	streq	r0, [r0], #-0
    8e74:	5001f300 	andpl	pc, r1, r0, lsl #6
    8e78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8e88:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8e94:	01f30004 	mvnseq	r0, r4
    8e98:	00009f50 	andeq	r9, r0, r0, asr pc
    8e9c:	00000000 	andeq	r0, r0, r0
    8ea0:	623c0000 	eorsvs	r0, ip, #0
    8ea4:	623e0800 	eorsvs	r0, lr, #0, 16
    8ea8:	00010800 	andeq	r0, r1, r0, lsl #16
    8eac:	00623e50 	rsbeq	r3, r2, r0, asr lr
    8eb0:	00625c08 	rsbeq	r5, r2, r8, lsl #24
    8eb4:	f3000408 	vshl.u8	d0, d8, d0
    8eb8:	009f5001 	addseq	r5, pc, r1
    8ebc:	00000000 	andeq	r0, r0, r0
    8ec0:	5c000000 	stcpl	0, cr0, [r0], {-0}
    8ec4:	5e080062 	cdppl	0, 0, cr0, cr8, cr2, {3}
    8ec8:	01080062 	tsteq	r8, r2, rrx
    8ecc:	625e5000 	subsvs	r5, lr, #0
    8ed0:	627c0800 	rsbsvs	r0, ip, #0, 16
    8ed4:	00040800 	andeq	r0, r4, r0, lsl #16
    8ed8:	9f5001f3 	svcls	0x005001f3
	...
    8eec:	00500001 	subseq	r0, r0, r1
    8ef0:	00000000 	andeq	r0, r0, r0
    8ef4:	04000000 	streq	r0, [r0], #-0
    8ef8:	5001f300 	andpl	pc, r1, r0, lsl #6
    8efc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8f0c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    8f18:	01f30004 	mvnseq	r0, r4
    8f1c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    8f2c:	00010000 	andeq	r0, r1, r0
    8f30:	00000050 	andeq	r0, r0, r0, asr r0
    8f34:	00000000 	andeq	r0, r0, r0
    8f38:	f3000400 	vshl.u8	d0, d0, d0
    8f3c:	009f5001 	addseq	r5, pc, r1
	...
    8f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    8f50:	00005000 	andeq	r5, r0, r0
    8f54:	00000000 	andeq	r0, r0, r0
    8f58:	00040000 	andeq	r0, r4, r0
    8f5c:	9f5001f3 	svcls	0x005001f3
	...
    8f70:	00510001 	subseq	r0, r1, r1
    8f74:	00000000 	andeq	r0, r0, r0
    8f78:	04000000 	streq	r0, [r0], #-0
    8f7c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    8f80:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    8f90:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    8f9c:	01f30004 	mvnseq	r0, r4
    8fa0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    8fb0:	00010000 	andeq	r0, r1, r0
    8fb4:	00000051 	andeq	r0, r0, r1, asr r0
    8fb8:	00000000 	andeq	r0, r0, r0
    8fbc:	f3000400 	vshl.u8	d0, d0, d0
    8fc0:	009f5101 	addseq	r5, pc, r1, lsl #2
    8fc4:	00000000 	andeq	r0, r0, r0
    8fc8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    8fcc:	86080062 	strhi	r0, [r8], -r2, rrx
    8fd0:	01080062 	tsteq	r8, r2, rrx
    8fd4:	62865000 	addvs	r5, r6, #0
    8fd8:	62980800 	addsvs	r0, r8, #0, 16
    8fdc:	00040800 	andeq	r0, r4, r0, lsl #16
    8fe0:	9f5001f3 	svcls	0x005001f3
	...
    8fec:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
    8ff0:	080062a2 	stmdaeq	r0, {r1, r5, r7, r9, sp, lr}
    8ff4:	a2500001 	subsge	r0, r0, #1
    8ff8:	b4080062 	strlt	r0, [r8], #-98	; 0x62
    8ffc:	04080062 	streq	r0, [r8], #-98	; 0x62
    9000:	5001f300 	andpl	pc, r1, r0, lsl #6
    9004:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9008:	00000000 	andeq	r0, r0, r0
    900c:	0062b400 	rsbeq	fp, r2, r0, lsl #8
    9010:	0062be08 	rsbeq	fp, r2, r8, lsl #28
    9014:	50000108 	andpl	r0, r0, r8, lsl #2
    9018:	080062be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sp, lr}
    901c:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
    9020:	01f30004 	mvnseq	r0, r4
    9024:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9034:	00010000 	andeq	r0, r1, r0
    9038:	00000051 	andeq	r0, r0, r1, asr r0
    903c:	00000000 	andeq	r0, r0, r0
    9040:	f3000400 	vshl.u8	d0, d0, d0
    9044:	009f5101 	addseq	r5, pc, r1, lsl #2
    9048:	00000000 	andeq	r0, r0, r0
    904c:	01000000 	mrseq	r0, (UNDEF: 0)
    9050:	00005100 	andeq	r5, r0, r0, lsl #2
    9054:	00000000 	andeq	r0, r0, r0
    9058:	00040000 	andeq	r0, r4, r0
    905c:	9f5101f3 	svcls	0x005101f3
	...
    9070:	00530001 	subseq	r0, r3, r1
    9074:	00000000 	andeq	r0, r0, r0
    9078:	01000000 	mrseq	r0, (UNDEF: 0)
    907c:	00005300 	andeq	r5, r0, r0, lsl #6
    9080:	00000000 	andeq	r0, r0, r0
    9084:	00010000 	andeq	r0, r1, r0
    9088:	00000053 	andeq	r0, r0, r3, asr r0
    908c:	00000000 	andeq	r0, r0, r0
    9090:	0062d000 	rsbeq	sp, r2, r0
    9094:	0062dc08 	rsbeq	sp, r2, r8, lsl #24
    9098:	50000108 	andpl	r0, r0, r8, lsl #2
    909c:	080062dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sp, lr}
    90a0:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
    90a4:	01f30004 	mvnseq	r0, r4
    90a8:	00009f50 	andeq	r9, r0, r0, asr pc
    90ac:	00000000 	andeq	r0, r0, r0
    90b0:	62d00000 	sbcsvs	r0, r0, #0
    90b4:	62fe0800 	rscsvs	r0, lr, #0, 16
    90b8:	00010800 	andeq	r0, r1, r0, lsl #16
    90bc:	0062fe51 	rsbeq	pc, r2, r1, asr lr	; <UNPREDICTABLE>
    90c0:	00631008 	rsbeq	r1, r3, r8
    90c4:	f3000408 	vshl.u8	d0, d8, d0
    90c8:	009f5101 	addseq	r5, pc, r1, lsl #2
    90cc:	00000000 	andeq	r0, r0, r0
    90d0:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    90d4:	f0080062 			; <UNDEFINED> instruction: 0xf0080062
    90d8:	01080062 	tsteq	r8, r2, rrx
    90dc:	62f05300 	rscsvs	r5, r0, #0, 6
    90e0:	62f20800 	rscsvs	r0, r2, #0, 16
    90e4:	00050800 	andeq	r0, r5, r0, lsl #16
    90e8:	25350071 	ldrcs	r0, [r5, #-113]!	; 0x71
    90ec:	0062f29f 	mlseq	r2, pc, r2, pc	; <UNPREDICTABLE>
    90f0:	0062f408 	rsbeq	pc, r2, r8, lsl #8
    90f4:	53000108 	movwpl	r0, #264	; 0x108
    90f8:	080062fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sp, lr}
    90fc:	08006304 	stmdaeq	r0, {r2, r8, r9, sp, lr}
    9100:	00530001 	subseq	r0, r3, r1
	...
    9110:	01000000 	mrseq	r0, (UNDEF: 0)
    9114:	00005000 	andeq	r5, r0, r0
    9118:	00000000 	andeq	r0, r0, r0
    911c:	00040000 	andeq	r0, r4, r0
    9120:	9f5001f3 	svcls	0x005001f3
	...
    9134:	00500001 	subseq	r0, r0, r1
    9138:	00000000 	andeq	r0, r0, r0
    913c:	04000000 	streq	r0, [r0], #-0
    9140:	5001f300 	andpl	pc, r1, r0, lsl #6
    9144:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9154:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9160:	01f30004 	mvnseq	r0, r4
    9164:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9174:	00010000 	andeq	r0, r1, r0
    9178:	00000051 	andeq	r0, r0, r1, asr r0
    917c:	00000000 	andeq	r0, r0, r0
    9180:	f3000400 	vshl.u8	d0, d0, d0
    9184:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    9194:	01000000 	mrseq	r0, (UNDEF: 0)
    9198:	00005200 	andeq	r5, r0, r0, lsl #4
    919c:	00000000 	andeq	r0, r0, r0
    91a0:	00040000 	andeq	r0, r4, r0
    91a4:	9f5201f3 	svcls	0x005201f3
	...
    91b8:	00500001 	subseq	r0, r0, r1
    91bc:	00000000 	andeq	r0, r0, r0
    91c0:	04000000 	streq	r0, [r0], #-0
    91c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    91c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    91d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    91e4:	01f30004 	mvnseq	r0, r4
    91e8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    91f8:	00010000 	andeq	r0, r1, r0
    91fc:	00000050 	andeq	r0, r0, r0, asr r0
    9200:	00000000 	andeq	r0, r0, r0
    9204:	f3000400 	vshl.u8	d0, d0, d0
    9208:	009f5001 	addseq	r5, pc, r1
	...
    9218:	01000000 	mrseq	r0, (UNDEF: 0)
    921c:	00005100 	andeq	r5, r0, r0, lsl #2
    9220:	00000000 	andeq	r0, r0, r0
    9224:	00040000 	andeq	r0, r4, r0
    9228:	9f5101f3 	svcls	0x005101f3
	...
    923c:	00500001 	subseq	r0, r0, r1
    9240:	00000000 	andeq	r0, r0, r0
    9244:	04000000 	streq	r0, [r0], #-0
    9248:	5001f300 	andpl	pc, r1, r0, lsl #6
    924c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    925c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9268:	01f30004 	mvnseq	r0, r4
    926c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    927c:	00010000 	andeq	r0, r1, r0
    9280:	00000050 	andeq	r0, r0, r0, asr r0
    9284:	00000000 	andeq	r0, r0, r0
    9288:	f3000400 	vshl.u8	d0, d0, d0
    928c:	009f5001 	addseq	r5, pc, r1
    9290:	00000000 	andeq	r0, r0, r0
    9294:	01000000 	mrseq	r0, (UNDEF: 0)
    9298:	00005000 	andeq	r5, r0, r0
    929c:	00000000 	andeq	r0, r0, r0
    92a0:	00040000 	andeq	r0, r4, r0
    92a4:	9f5001f3 	svcls	0x005001f3
	...
    92b0:	00500001 	subseq	r0, r0, r1
	...
    92c0:	01000000 	mrseq	r0, (UNDEF: 0)
    92c4:	00005100 	andeq	r5, r0, r0, lsl #2
    92c8:	00000000 	andeq	r0, r0, r0
    92cc:	00040000 	andeq	r0, r4, r0
    92d0:	9f5101f3 	svcls	0x005101f3
	...
    92dc:	00510001 	subseq	r0, r1, r1
    92e0:	00000000 	andeq	r0, r0, r0
    92e4:	04000000 	streq	r0, [r0], #-0
    92e8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    92ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    92f0:	00000000 	andeq	r0, r0, r0
    92f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    9308:	00520001 	subseq	r0, r2, r1
    930c:	00000000 	andeq	r0, r0, r0
    9310:	04000000 	streq	r0, [r0], #-0
    9314:	5201f300 	andpl	pc, r1, #0, 6
    9318:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    931c:	00000000 	andeq	r0, r0, r0
    9320:	52000100 	andpl	r0, r0, #0, 2
	...
    9334:	00510001 	subseq	r0, r1, r1
    9338:	00000000 	andeq	r0, r0, r0
    933c:	01000000 	mrseq	r0, (UNDEF: 0)
    9340:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    9350:	00010000 	andeq	r0, r1, r0
    9354:	00000053 	andeq	r0, r0, r3, asr r0
    9358:	00000000 	andeq	r0, r0, r0
    935c:	72000500 	andvc	r0, r0, #0, 10
    9360:	9f253500 	svcls	0x00253500
	...
    936c:	00530001 	subseq	r0, r3, r1
    9370:	00000000 	andeq	r0, r0, r0
    9374:	01000000 	mrseq	r0, (UNDEF: 0)
    9378:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9388:	00010000 	andeq	r0, r1, r0
    938c:	00000053 	andeq	r0, r0, r3, asr r0
    9390:	00000000 	andeq	r0, r0, r0
    9394:	53000100 	movwpl	r0, #256	; 0x100
	...
    93a8:	00510001 	subseq	r0, r1, r1
    93ac:	00000000 	andeq	r0, r0, r0
    93b0:	05000000 	streq	r0, [r0, #-0]
    93b4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    93b8:	00009f25 	andeq	r9, r0, r5, lsr #30
    93bc:	00000000 	andeq	r0, r0, r0
    93c0:	00010000 	andeq	r0, r1, r0
    93c4:	00000051 	andeq	r0, r0, r1, asr r0
    93c8:	00000000 	andeq	r0, r0, r0
    93cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    93e0:	00500001 	subseq	r0, r0, r1
    93e4:	00000000 	andeq	r0, r0, r0
    93e8:	04000000 	streq	r0, [r0], #-0
    93ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    93f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    93f4:	00000000 	andeq	r0, r0, r0
    93f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9404:	01f30004 	mvnseq	r0, r4
    9408:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    9418:	00010000 	andeq	r0, r1, r0
    941c:	00000051 	andeq	r0, r0, r1, asr r0
    9420:	00000000 	andeq	r0, r0, r0
    9424:	f3000400 	vshl.u8	d0, d0, d0
    9428:	009f5101 	addseq	r5, pc, r1, lsl #2
    942c:	00000000 	andeq	r0, r0, r0
    9430:	01000000 	mrseq	r0, (UNDEF: 0)
    9434:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    9444:	00010000 	andeq	r0, r1, r0
    9448:	00000052 	andeq	r0, r0, r2, asr r0
    944c:	00000000 	andeq	r0, r0, r0
    9450:	f3000400 	vshl.u8	d0, d0, d0
    9454:	009f5201 	addseq	r5, pc, r1, lsl #4
    9458:	00000000 	andeq	r0, r0, r0
    945c:	01000000 	mrseq	r0, (UNDEF: 0)
    9460:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    9470:	00010000 	andeq	r0, r1, r0
    9474:	00000051 	andeq	r0, r0, r1, asr r0
	...
    9484:	53000100 	movwpl	r0, #256	; 0x100
	...
    9490:	00720005 	rsbseq	r0, r2, r5
    9494:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    9498:	00000000 	andeq	r0, r0, r0
    949c:	01000000 	mrseq	r0, (UNDEF: 0)
    94a0:	00005300 	andeq	r5, r0, r0, lsl #6
    94a4:	00000000 	andeq	r0, r0, r0
    94a8:	00010000 	andeq	r0, r1, r0
    94ac:	00000053 	andeq	r0, r0, r3, asr r0
	...
    94bc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    94c8:	01f30004 	mvnseq	r0, r4
    94cc:	00009f50 	andeq	r9, r0, r0, asr pc
    94d0:	00000000 	andeq	r0, r0, r0
    94d4:	00010000 	andeq	r0, r1, r0
    94d8:	00000050 	andeq	r0, r0, r0, asr r0
    94dc:	00000000 	andeq	r0, r0, r0
    94e0:	f3000400 	vshl.u8	d0, d0, d0
    94e4:	009f5001 	addseq	r5, pc, r1
	...
    94f4:	01000000 	mrseq	r0, (UNDEF: 0)
    94f8:	00005100 	andeq	r5, r0, r0, lsl #2
    94fc:	00000000 	andeq	r0, r0, r0
    9500:	00040000 	andeq	r0, r4, r0
    9504:	9f5101f3 	svcls	0x005101f3
	...
    9510:	00510001 	subseq	r0, r1, r1
	...
    9520:	01000000 	mrseq	r0, (UNDEF: 0)
    9524:	00005200 	andeq	r5, r0, r0, lsl #4
    9528:	00000000 	andeq	r0, r0, r0
    952c:	00040000 	andeq	r0, r4, r0
    9530:	9f5201f3 	svcls	0x005201f3
	...
    953c:	00520001 	subseq	r0, r2, r1
	...
    954c:	01000000 	mrseq	r0, (UNDEF: 0)
    9550:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    9560:	00010000 	andeq	r0, r1, r0
    9564:	00000053 	andeq	r0, r0, r3, asr r0
    9568:	00000000 	andeq	r0, r0, r0
    956c:	72000500 	andvc	r0, r0, #0, 10
    9570:	9f253500 	svcls	0x00253500
	...
    957c:	00530001 	subseq	r0, r3, r1
    9580:	00000000 	andeq	r0, r0, r0
    9584:	01000000 	mrseq	r0, (UNDEF: 0)
    9588:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9598:	00010000 	andeq	r0, r1, r0
    959c:	00000050 	andeq	r0, r0, r0, asr r0
    95a0:	00000000 	andeq	r0, r0, r0
    95a4:	f3000400 	vshl.u8	d0, d0, d0
    95a8:	009f5001 	addseq	r5, pc, r1
	...
    95b8:	01000000 	mrseq	r0, (UNDEF: 0)
    95bc:	00005000 	andeq	r5, r0, r0
    95c0:	00000000 	andeq	r0, r0, r0
    95c4:	00040000 	andeq	r0, r4, r0
    95c8:	9f5001f3 	svcls	0x005001f3
	...
    95dc:	00500001 	subseq	r0, r0, r1
    95e0:	00000000 	andeq	r0, r0, r0
    95e4:	04000000 	streq	r0, [r0], #-0
    95e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    95ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    95fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    9608:	01f30004 	mvnseq	r0, r4
    960c:	00009f50 	andeq	r9, r0, r0, asr pc
    9610:	00000000 	andeq	r0, r0, r0
    9614:	00010000 	andeq	r0, r1, r0
    9618:	00000050 	andeq	r0, r0, r0, asr r0
    961c:	00000000 	andeq	r0, r0, r0
    9620:	f3000400 	vshl.u8	d0, d0, d0
    9624:	009f5001 	addseq	r5, pc, r1
	...
    9634:	01000000 	mrseq	r0, (UNDEF: 0)
    9638:	00005000 	andeq	r5, r0, r0
    963c:	00000000 	andeq	r0, r0, r0
    9640:	00040000 	andeq	r0, r4, r0
    9644:	9f5001f3 	svcls	0x005001f3
	...
    9658:	0070000e 	rsbseq	r0, r0, lr
    965c:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    9660:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    9664:	9f211aff 	svcls	0x00211aff
	...
    9670:	01f3000f 	mvnseq	r0, pc
    9674:	1aff0850 	bne	fffcb7bc <BootRAM+0xef3bf5d>
    9678:	00712438 	rsbseq	r2, r1, r8, lsr r4
    967c:	211aff08 	tstcs	sl, r8, lsl #30
    9680:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    9690:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    969c:	01f30004 	mvnseq	r0, r4
    96a0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    96b0:	00010000 	andeq	r0, r1, r0
    96b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    96c4:	70000d00 	andvc	r0, r0, r0, lsl #26
    96c8:	70253800 	eorvc	r3, r5, r0, lsl #16
    96cc:	1aff0800 	bne	fffcb6d4 <BootRAM+0xef3be75>
    96d0:	9f212438 	svcls	0x00212438
	...
    96dc:	08006312 	stmdaeq	r0, {r1, r4, r8, r9, sp, lr}
    96e0:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
    96e4:	9f300002 	svcls	0x00300002
    96e8:	08006378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, sp, lr}
    96ec:	0800637c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, sp, lr}
    96f0:	00730007 	rsbseq	r0, r3, r7
    96f4:	1affff0a 	bne	9324 <__Stack_Size+0x8b24>
    96f8:	00638c9f 	mlseq	r3, pc, ip, r8	; <UNPREDICTABLE>
    96fc:	00639608 	rsbeq	r9, r3, r8, lsl #12
    9700:	73000708 	movwvc	r0, #1800	; 0x708
    9704:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    9708:	63a09f1a 	movvs	r9, #26, 30	; 0x68
    970c:	63aa0800 			; <UNDEFINED> instruction: 0x63aa0800
    9710:	00070800 	andeq	r0, r7, r0, lsl #16
    9714:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    9718:	f69f1aff 			; <UNDEFINED> instruction: 0xf69f1aff
    971c:	02080063 	andeq	r0, r8, #99	; 0x63
    9720:	02080064 	andeq	r0, r8, #100	; 0x64
    9724:	029f3000 	addseq	r3, pc, #0
    9728:	42080064 	andmi	r0, r8, #100	; 0x64
    972c:	07080064 	streq	r0, [r8, -r4, rrx]
    9730:	0a007500 	beq	26b38 <__Stack_Size+0x26338>
    9734:	9f1affff 	svcls	0x001affff
    9738:	08006442 	stmdaeq	r0, {r1, r6, sl, sp, lr}
    973c:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
    9740:	9f300002 	svcls	0x00300002
	...
    974c:	08006358 	stmdaeq	r0, {r3, r4, r6, r8, r9, sp, lr}
    9750:	0800635c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sp, lr}
    9754:	00720007 	rsbseq	r0, r2, r7
    9758:	2720000a 	strcs	r0, [r0, -sl]!
    975c:	00635c9f 	mlseq	r3, pc, ip, r5	; <UNPREDICTABLE>
    9760:	00636008 	rsbeq	r6, r3, r8
    9764:	72000b08 	andvc	r0, r0, #8, 22	; 0x2000
    9768:	20000a00 	andcs	r0, r0, r0, lsl #20
    976c:	20000a27 	andcs	r0, r0, r7, lsr #20
    9770:	63609f27 	cmnvs	r0, #39, 30	; 0x9c
    9774:	63700800 	cmnvs	r0, #0, 16
    9778:	000c0800 	andeq	r0, ip, r0, lsl #16
    977c:	0a060074 	beq	189954 <__Stack_Size+0x189154>
    9780:	0a272000 	beq	9d1788 <__Stack_Size+0x9d0f88>
    9784:	9f272000 	svcls	0x00272000
	...
    9790:	0800636a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sp, lr}
    9794:	0800636e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    9798:	00720006 	rsbseq	r0, r2, r6
    979c:	9f272008 	svcls	0x00272008
    97a0:	0800636e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sp, lr}
    97a4:	0800637e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sp, lr}
    97a8:	00720009 	rsbseq	r0, r2, r9
    97ac:	08272008 	stmdaeq	r7!, {r3, sp}
    97b0:	7e9f2720 	cdpvc	7, 9, cr2, cr15, cr0, {1}
    97b4:	86080063 	strhi	r0, [r8], -r3, rrx
    97b8:	0a080063 	beq	20994c <__Stack_Size+0x20914c>
    97bc:	06007400 	streq	r7, [r0], -r0, lsl #8
    97c0:	08272008 	stmdaeq	r7!, {r3, sp}
    97c4:	8c9f2720 	ldchi	7, cr2, [pc], {32}
    97c8:	8e080063 	cdphi	0, 0, cr0, cr8, cr3, {3}
    97cc:	09080063 	stmdbeq	r8, {r0, r1, r5, r6}
    97d0:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    97d4:	20082720 	andcs	r2, r8, r0, lsr #14
    97d8:	638e9f27 	orrvs	r9, lr, #39, 30	; 0x9c
    97dc:	639a0800 	orrsvs	r0, sl, #0, 16
    97e0:	000a0800 	andeq	r0, sl, r0, lsl #16
    97e4:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    97e8:	20082720 	andcs	r2, r8, r0, lsr #14
    97ec:	63a09f27 	movvs	r9, #39, 30	; 0x9c
    97f0:	63ae0800 			; <UNDEFINED> instruction: 0x63ae0800
    97f4:	000a0800 	andeq	r0, sl, r0, lsl #16
    97f8:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    97fc:	20082720 	andcs	r2, r8, r0, lsr #14
    9800:	00009f27 	andeq	r9, r0, r7, lsr #30
    9804:	00000000 	andeq	r0, r0, r0
    9808:	63c00000 	bicvs	r0, r0, #0
    980c:	63d60800 	bicsvs	r0, r6, #0, 16
    9810:	00010800 	andeq	r0, r1, r0, lsl #16
    9814:	0063d653 	rsbeq	sp, r3, r3, asr r6
    9818:	0063f408 	rsbeq	pc, r3, r8, lsl #8
    981c:	72000408 	andvc	r0, r0, #8, 8	; 0x8000000
    9820:	009f0600 	addseq	r0, pc, r0, lsl #12
    9824:	00000000 	andeq	r0, r0, r0
    9828:	e2000000 	and	r0, r0, #0
    982c:	f6080063 			; <UNDEFINED> instruction: 0xf6080063
    9830:	01080063 	tsteq	r8, r3, rrx
    9834:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    9844:	00020000 	andeq	r0, r2, r0
    9848:	00009f30 	andeq	r9, r0, r0, lsr pc
    984c:	00000000 	andeq	r0, r0, r0
    9850:	00070000 	andeq	r0, r7, r0
    9854:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    9858:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    985c:	00000000 	andeq	r0, r0, r0
    9860:	07000000 	streq	r0, [r0, -r0]
    9864:	0a007100 	beq	25c6c <__Stack_Size+0x2546c>
    9868:	9f1affff 	svcls	0x001affff
	...
    9874:	9f300002 	svcls	0x00300002
	...
    9880:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
    9884:	080064b1 	stmdaeq	r0, {r0, r4, r5, r7, sl, sp, lr}
    9888:	b1500001 	cmplt	r0, r1
    988c:	c0080064 	andgt	r0, r8, r4, rrx
    9890:	04080064 	streq	r0, [r8], #-100	; 0x64
    9894:	5001f300 	andpl	pc, r1, r0, lsl #6
    9898:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    989c:	00000000 	andeq	r0, r0, r0
    98a0:	0064c000 	rsbeq	ip, r4, r0
    98a4:	0064d508 	rsbeq	sp, r4, r8, lsl #10
    98a8:	50000108 	andpl	r0, r0, r8, lsl #2
    98ac:	080064d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, sl, sp, lr}
    98b0:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
    98b4:	01f30004 	mvnseq	r0, r4
    98b8:	00009f50 	andeq	r9, r0, r0, asr pc
    98bc:	00000000 	andeq	r0, r0, r0
    98c0:	64e40000 	strbtvs	r0, [r4], #0
    98c4:	64f80800 	ldrbtvs	r0, [r8], #2048	; 0x800
    98c8:	00010800 	andeq	r0, r1, r0, lsl #16
    98cc:	0064f850 	rsbeq	pc, r4, r0, asr r8	; <UNPREDICTABLE>
    98d0:	00657408 	rsbeq	r7, r5, r8, lsl #8
    98d4:	f3000408 	vshl.u8	d0, d8, d0
    98d8:	009f5001 	addseq	r5, pc, r1
    98dc:	00000000 	andeq	r0, r0, r0
    98e0:	06000000 	streq	r0, [r0], -r0
    98e4:	08080065 	stmdaeq	r8, {r0, r2, r5, r6}
    98e8:	02080065 	andeq	r0, r8, #101	; 0x65
    98ec:	00097100 	andeq	r7, r9, r0, lsl #2
    98f0:	00000000 	andeq	r0, r0, r0
    98f4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    98f8:	30080065 	andcc	r0, r8, r5, rrx
    98fc:	01080065 	tsteq	r8, r5, rrx
    9900:	65305200 	ldrvs	r5, [r0, #-512]!	; 0x200
    9904:	654a0800 	strbvs	r0, [sl, #-2048]	; 0x800
    9908:	00050800 	andeq	r0, r5, r0, lsl #16
    990c:	1a3f0071 	bne	fc9ad8 <__Stack_Size+0xfc92d8>
    9910:	00654e9f 	mlseq	r5, pc, lr, r4	; <UNPREDICTABLE>
    9914:	00655808 	rsbeq	r5, r5, r8, lsl #16
    9918:	71000508 	tstvc	r0, r8, lsl #10
    991c:	9f1a3f00 	svcls	0x001a3f00
	...
    9928:	0800657c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, sl, sp, lr}
    992c:	08006602 	stmdaeq	r0, {r1, r9, sl, sp, lr}
    9930:	10740003 	rsbsne	r0, r4, r3
    9934:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9938:	00000000 	andeq	r0, r0, r0
    993c:	00658000 	rsbeq	r8, r5, r0
    9940:	0065aa08 	rsbeq	sl, r5, r8, lsl #20
    9944:	53000108 	movwpl	r0, #264	; 0x108
    9948:	080065aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, sl, sp, lr}
    994c:	080065b0 	stmdaeq	r0, {r4, r5, r7, r8, sl, sp, lr}
    9950:	10740009 	rsbsne	r0, r4, r9
    9954:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9958:	b09f1aff 			; <UNDEFINED> instruction: 0xb09f1aff
    995c:	c4080065 	strgt	r0, [r8], #-101	; 0x65
    9960:	01080065 	tsteq	r8, r5, rrx
    9964:	65c45300 	strbvs	r5, [r4, #768]	; 0x300
    9968:	65c50800 	strbvs	r0, [r5, #2048]	; 0x800
    996c:	00090800 	andeq	r0, r9, r0, lsl #16
    9970:	02941074 	addseq	r1, r4, #116	; 0x74
    9974:	1affff0a 	bne	95a4 <__Stack_Size+0x8da4>
    9978:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    997c:	00000000 	andeq	r0, r0, r0
    9980:	00658200 	rsbeq	r8, r5, r0, lsl #4
    9984:	0065a408 	rsbeq	sl, r5, r8, lsl #8
    9988:	76000608 	strvc	r0, [r0], -r8, lsl #12
    998c:	1aff0800 	bne	fffcb994 <BootRAM+0xef3c135>
    9990:	0065a49f 	mlseq	r5, pc, r4, sl	; <UNPREDICTABLE>
    9994:	0065a808 	rsbeq	sl, r5, r8, lsl #16
    9998:	34000208 	strcc	r0, [r0], #-520	; 0x208
    999c:	0065a89f 	mlseq	r5, pc, r8, sl	; <UNPREDICTABLE>
    99a0:	0065b008 	rsbeq	fp, r5, r8
    99a4:	37000208 	strcc	r0, [r0, -r8, lsl #4]
    99a8:	0065b09f 	mlseq	r5, pc, r0, fp	; <UNPREDICTABLE>
    99ac:	0065ba08 	rsbeq	fp, r5, r8, lsl #20
    99b0:	76000608 	strvc	r0, [r0], -r8, lsl #12
    99b4:	1aff0800 	bne	fffcb9bc <BootRAM+0xef3c15d>
    99b8:	0065ba9f 	mlseq	r5, pc, sl, fp	; <UNPREDICTABLE>
    99bc:	00660208 	rsbeq	r0, r6, r8, lsl #4
    99c0:	56000108 	strpl	r0, [r0], -r8, lsl #2
	...
    99cc:	080065c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, sp, lr}
    99d0:	080065ca 	stmdaeq	r0, {r1, r3, r6, r7, r8, sl, sp, lr}
    99d4:	ca500001 	bgt	14099e0 <__Stack_Size+0x14091e0>
    99d8:	f8080065 			; <UNDEFINED> instruction: 0xf8080065
    99dc:	01080065 	tsteq	r8, r5, rrx
    99e0:	00005900 	andeq	r5, r0, r0, lsl #18
    99e4:	00000000 	andeq	r0, r0, r0
    99e8:	65b20000 	ldrvs	r0, [r2, #0]!
    99ec:	65ba0800 	ldrvs	r0, [sl, #2048]!	; 0x800
    99f0:	00010800 	andeq	r0, r1, r0, lsl #16
    99f4:	0065ba55 	rsbeq	fp, r5, r5, asr sl
    99f8:	0065c008 	rsbeq	ip, r5, r8
    99fc:	75001608 	strvc	r1, [r0, #-1544]	; 0x608
    9a00:	4b401200 	blmi	100e208 <__Stack_Size+0x100da08>
    9a04:	00732224 	rsbseq	r2, r3, r4, lsr #4
    9a08:	4b401416 	blmi	100ea68 <__Stack_Size+0x100e268>
    9a0c:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    9a10:	13160001 	tstne	r6, #1
    9a14:	0065c09f 	mlseq	r5, pc, r0, ip	; <UNPREDICTABLE>
    9a18:	0065ee08 	rsbeq	lr, r5, r8, lsl #28
    9a1c:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
    9a28:	08006666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, sp, lr}
    9a2c:	0800667d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, sp, lr}
    9a30:	8c500001 	mrrchi	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    9a34:	8e080066 	cdphi	0, 0, cr0, cr8, cr6, {3}
    9a38:	01080066 	tsteq	r8, r6, rrx
    9a3c:	00005000 	andeq	r5, r0, r0
    9a40:	00000000 	andeq	r0, r0, r0
    9a44:	66a40000 	strtvs	r0, [r4], r0
    9a48:	66a80800 	strtvs	r0, [r8], r0, lsl #16
    9a4c:	00060800 	andeq	r0, r6, r0, lsl #16
    9a50:	7f080070 	svcvc	0x00080070
    9a54:	66a89f1a 	ssatvs	r9, #9, sl, lsl #30
    9a58:	66cc0800 	strbvs	r0, [ip], r0, lsl #16
    9a5c:	00010800 	andeq	r0, r1, r0, lsl #16
    9a60:	0066cc50 	rsbeq	ip, r6, r0, asr ip
    9a64:	0066f208 	rsbeq	pc, r6, r8, lsl #4
    9a68:	73000b08 	movwvc	r0, #2824	; 0xb08
    9a6c:	08019400 	stmdaeq	r1, {sl, ip, pc}
    9a70:	ff081a7f 			; <UNDEFINED> instruction: 0xff081a7f
    9a74:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9a78:	00000000 	andeq	r0, r0, r0
    9a7c:	66e40000 	strbtvs	r0, [r4], r0
    9a80:	67110800 	ldrvs	r0, [r1, -r0, lsl #16]
    9a84:	00010800 	andeq	r0, r1, r0, lsl #16
    9a88:	00671c51 	rsbeq	r1, r7, r1, asr ip
    9a8c:	00672e08 	rsbeq	r2, r7, r8, lsl #28
    9a90:	51000108 	tstpl	r0, r8, lsl #2
    9a94:	08006734 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, sp, lr}
    9a98:	08006737 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, sl, sp, lr}
    9a9c:	00510001 	subseq	r0, r1, r1
    9aa0:	00000000 	andeq	r0, r0, r0
    9aa4:	cc000000 	stcgt	0, cr0, [r0], {-0}
    9aa8:	0e080066 	cdpeq	0, 0, cr0, cr8, cr6, {3}
    9aac:	01080067 	tsteq	r8, r7, rrx
    9ab0:	671c5000 	ldrvs	r5, [ip, -r0]
    9ab4:	67310800 	ldrvs	r0, [r1, -r0, lsl #16]!
    9ab8:	00010800 	andeq	r0, r1, r0, lsl #16
    9abc:	00673450 	rsbeq	r3, r7, r0, asr r4
    9ac0:	00673708 	rsbeq	r3, r7, r8, lsl #14
    9ac4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    9ad0:	080066c6 	stmdaeq	r0, {r1, r2, r6, r7, r9, sl, sp, lr}
    9ad4:	080066fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
    9ad8:	00720006 	rsbseq	r0, r2, r6
    9adc:	9f1aff08 	svcls	0x001aff08
	...
    9ae8:	08006744 	stmdaeq	r0, {r2, r6, r8, r9, sl, sp, lr}
    9aec:	08006748 	stmdaeq	r0, {r3, r6, r8, r9, sl, sp, lr}
    9af0:	00730007 	rsbseq	r0, r3, r7
    9af4:	2730000a 	ldrcs	r0, [r0, -sl]!
    9af8:	0067489f 	mlseq	r7, pc, r8, r4	; <UNPREDICTABLE>
    9afc:	00674a08 	rsbeq	r4, r7, r8, lsl #20
    9b00:	73000b08 	movwvc	r0, #2824	; 0xb08
    9b04:	30000a00 	andcc	r0, r0, r0, lsl #20
    9b08:	30000a27 	andcc	r0, r0, r7, lsr #20
    9b0c:	00009f27 	andeq	r9, r0, r7, lsr #30
    9b10:	00000000 	andeq	r0, r0, r0
    9b14:	67780000 	ldrbvs	r0, [r8, -r0]!
    9b18:	67b20800 	ldrvs	r0, [r2, r0, lsl #16]!
    9b1c:	00060800 	andeq	r0, r6, r0, lsl #16
    9b20:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    9b24:	67e09f1a 			; <UNDEFINED> instruction: 0x67e09f1a
    9b28:	67f00800 	ldrbvs	r0, [r0, r0, lsl #16]!
    9b2c:	00060800 	andeq	r0, r6, r0, lsl #16
    9b30:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    9b34:	00009f1a 	andeq	r9, r0, sl, lsl pc
    9b38:	00000000 	andeq	r0, r0, r0
    9b3c:	677c0000 	ldrbvs	r0, [ip, -r0]!
    9b40:	679c0800 	ldrvs	r0, [ip, r0, lsl #16]
    9b44:	00010800 	andeq	r0, r1, r0, lsl #16
    9b48:	00679c54 	rsbeq	r9, r7, r4, asr ip
    9b4c:	0067b208 	rsbeq	fp, r7, r8, lsl #4
    9b50:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    9b54:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    9b58:	67e09f1a 			; <UNDEFINED> instruction: 0x67e09f1a
    9b5c:	67f00800 	ldrbvs	r0, [r0, r0, lsl #16]!
    9b60:	00070800 	andeq	r0, r7, r0, lsl #16
    9b64:	7f0b0072 	svcvc	0x000b0072
    9b68:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    9b6c:	00000000 	andeq	r0, r0, r0
    9b70:	92000000 	andls	r0, r0, #0
    9b74:	db080067 	blle	209d18 <__Stack_Size+0x209518>
    9b78:	01080067 	tsteq	r8, r7, rrx
    9b7c:	67e05000 	strbvs	r5, [r0, r0]!
    9b80:	67e20800 	strbvs	r0, [r2, r0, lsl #16]!
    9b84:	00010800 	andeq	r0, r1, r0, lsl #16
    9b88:	00000050 	andeq	r0, r0, r0, asr r0
    9b8c:	00000000 	andeq	r0, r0, r0
    9b90:	0067be00 	rsbeq	fp, r7, r0, lsl #28
    9b94:	0067c208 	rsbeq	ip, r7, r8, lsl #4
    9b98:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
    9b9c:	9f274000 	svcls	0x00274000
    9ba0:	080067c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, sl, sp, lr}
    9ba4:	080067c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp, lr}
    9ba8:	00720007 	rsbseq	r0, r2, r7
    9bac:	27402740 	strbcs	r2, [r0, -r0, asr #14]
    9bb0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9bb4:	00000000 	andeq	r0, r0, r0
    9bb8:	0067ce00 	rsbeq	ip, r7, r0, lsl #28
    9bbc:	0067d208 	rsbeq	sp, r7, r8, lsl #4
    9bc0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    9bc4:	10000a00 	andne	r0, r0, r0, lsl #20
    9bc8:	00009f27 	andeq	r9, r0, r7, lsr #30
    9bcc:	00000000 	andeq	r0, r0, r0
    9bd0:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
    9bd4:	68260800 	stmdavs	r6!, {fp}
    9bd8:	00010800 	andeq	r0, r1, r0, lsl #16
    9bdc:	00682650 	rsbeq	r2, r8, r0, asr r6
    9be0:	00683008 	rsbeq	r3, r8, r8
    9be4:	f3000408 	vshl.u8	d0, d8, d0
    9be8:	009f5001 	addseq	r5, pc, r1
    9bec:	00000000 	andeq	r0, r0, r0
    9bf0:	14000000 	strne	r0, [r0], #-0
    9bf4:	1e080068 	cdpne	0, 0, cr0, cr8, cr8, {3}
    9bf8:	01080068 	tsteq	r8, r8, rrx
    9bfc:	681e5100 	ldmdavs	lr, {r8, ip, lr}
    9c00:	68240800 	stmdavs	r4!, {fp}
    9c04:	00040800 	andeq	r0, r4, r0, lsl #16
    9c08:	9f5101f3 	svcls	0x005101f3
    9c0c:	08006824 	stmdaeq	r0, {r2, r5, fp, sp, lr}
    9c10:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
    9c14:	00510001 	subseq	r0, r1, r1
    9c18:	00000000 	andeq	r0, r0, r0
    9c1c:	1a000000 	bne	9c24 <__Stack_Size+0x9424>
    9c20:	20080068 	andcs	r0, r8, r8, rrx
    9c24:	01080068 	tsteq	r8, r8, rrx
    9c28:	68205300 	stmdavs	r0!, {r8, r9, ip, lr}
    9c2c:	68240800 	stmdavs	r4!, {fp}
    9c30:	00090800 	andeq	r0, r9, r0, lsl #16
    9c34:	02941272 	addseq	r1, r4, #536870919	; 0x20000007
    9c38:	1affff0a 	bne	9868 <__Stack_Size+0x9068>
    9c3c:	0068249f 	mlseq	r8, pc, r4, r2	; <UNPREDICTABLE>
    9c40:	00683008 	rsbeq	r3, r8, r8
    9c44:	53000108 	movwpl	r0, #264	; 0x108
	...
    9c50:	08006882 	stmdaeq	r0, {r1, r7, fp, sp, lr}
    9c54:	0800688c 	stmdaeq	r0, {r2, r3, r7, fp, sp, lr}
    9c58:	00720011 	rsbseq	r0, r2, r1, lsl r0
    9c5c:	1affff0a 	bne	988c <__Stack_Size+0x908c>
    9c60:	80232431 	eorhi	r2, r3, r1, lsr r4
    9c64:	048081c0 	streq	r8, [r0], #448	; 0x1c0
    9c68:	0004939f 	muleq	r4, pc, r3	; <UNPREDICTABLE>
    9c6c:	00000000 	andeq	r0, r0, r0
    9c70:	b6000000 	strlt	r0, [r0], -r0
    9c74:	c6080068 	strgt	r0, [r8], -r8, rrx
    9c78:	02080068 	andeq	r0, r8, #104	; 0x68
    9c7c:	c69f3200 	ldrgt	r3, [pc], r0, lsl #4
    9c80:	c8080068 	stmdagt	r8, {r3, r5, r6}
    9c84:	01080068 	tsteq	r8, r8, rrx
    9c88:	68c85000 	stmiavs	r8, {ip, lr}^
    9c8c:	68d40800 	ldmvs	r4, {fp}^
    9c90:	00020800 	andeq	r0, r2, r0, lsl #16
    9c94:	68d89f32 	ldmvs	r8, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    9c98:	68f60800 	ldmvs	r6!, {fp}^
    9c9c:	00020800 	andeq	r0, r2, r0, lsl #16
    9ca0:	69009f32 	stmdbvs	r0, {r1, r4, r5, r8, r9, sl, fp, ip, pc}
    9ca4:	69060800 	stmdbvs	r6, {fp}
    9ca8:	00010800 	andeq	r0, r1, r0, lsl #16
    9cac:	00690650 	rsbeq	r0, r9, r0, asr r6
    9cb0:	00691608 	rsbeq	r1, r9, r8, lsl #12
    9cb4:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    9cb8:	0069169f 	mlseq	r9, pc, r6, r1	; <UNPREDICTABLE>
    9cbc:	00691808 	rsbeq	r1, r9, r8, lsl #16
    9cc0:	50000108 	andpl	r0, r0, r8, lsl #2
    9cc4:	08006918 	stmdaeq	r0, {r3, r4, r8, fp, sp, lr}
    9cc8:	08006932 	stmdaeq	r0, {r1, r4, r5, r8, fp, sp, lr}
    9ccc:	9f320002 	svcls	0x00320002
    9cd0:	08006932 	stmdaeq	r0, {r1, r4, r5, r8, fp, sp, lr}
    9cd4:	08006934 	stmdaeq	r0, {r2, r4, r5, r8, fp, sp, lr}
    9cd8:	34500001 	ldrbcc	r0, [r0], #-1
    9cdc:	40080069 	andmi	r0, r8, r9, rrx
    9ce0:	02080069 	andeq	r0, r8, #105	; 0x69
    9ce4:	409f3200 	addsmi	r3, pc, r0, lsl #4
    9ce8:	42080069 	andmi	r0, r8, #105	; 0x69
    9cec:	01080069 	tsteq	r8, r9, rrx
    9cf0:	69425000 	stmdbvs	r2, {ip, lr}^
    9cf4:	69520800 	ldmdbvs	r2, {fp}^
    9cf8:	00020800 	andeq	r0, r2, r0, lsl #16
    9cfc:	69529f32 	ldmdbvs	r2, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
    9d00:	695a0800 	ldmdbvs	sl, {fp}^
    9d04:	00010800 	andeq	r0, r1, r0, lsl #16
    9d08:	00697250 	rsbeq	r7, r9, r0, asr r2
    9d0c:	00697408 	rsbeq	r7, r9, r8, lsl #8
    9d10:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    9d1c:	080068b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, sp, lr}
    9d20:	0800697a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, sp, lr}
    9d24:	00540001 	subseq	r0, r4, r1
    9d28:	00000000 	andeq	r0, r0, r0
    9d2c:	5a000000 	bpl	9d34 <__Stack_Size+0x9534>
    9d30:	72080069 	andvc	r0, r8, #105	; 0x69
    9d34:	02080069 	andeq	r0, r8, #105	; 0x69
    9d38:	749f3600 	ldrvc	r3, [pc], #1536	; 9d40 <__Stack_Size+0x9540>
    9d3c:	7a080069 	bvc	209ee8 <__Stack_Size+0x2096e8>
    9d40:	01080069 	tsteq	r8, r9, rrx
    9d44:	00005300 	andeq	r5, r0, r0, lsl #6
    9d48:	00000000 	andeq	r0, r0, r0
    9d4c:	697a0000 	ldmdbvs	sl!, {}^	; <UNPREDICTABLE>
    9d50:	69900800 	ldmibvs	r0, {fp}
    9d54:	00020800 	andeq	r0, r2, r0, lsl #16
    9d58:	69909f30 	ldmibvs	r0, {r4, r5, r8, r9, sl, fp, ip, pc}
    9d5c:	69920800 	ldmibvs	r2, {fp}
    9d60:	00010800 	andeq	r0, r1, r0, lsl #16
    9d64:	00699253 	rsbeq	r9, r9, r3, asr r2
    9d68:	00699a08 	rsbeq	r9, r9, r8, lsl #20
    9d6c:	30000208 	andcc	r0, r0, r8, lsl #4
    9d70:	00699a9f 	mlseq	r9, pc, sl, r9	; <UNPREDICTABLE>
    9d74:	00699c08 	rsbeq	r9, r9, r8, lsl #24
    9d78:	53000108 	movwpl	r0, #264	; 0x108
    9d7c:	0800699c 	stmdaeq	r0, {r2, r3, r4, r7, r8, fp, sp, lr}
    9d80:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    9d84:	9f300002 	svcls	0x00300002
    9d88:	080069a4 	stmdaeq	r0, {r2, r5, r7, r8, fp, sp, lr}
    9d8c:	080069a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, fp, sp, lr}
    9d90:	a6530001 	ldrbge	r0, [r3], -r1
    9d94:	ae080069 	cdpge	0, 0, cr0, cr8, cr9, {3}
    9d98:	02080069 	andeq	r0, r8, #105	; 0x69
    9d9c:	ae9f3000 	cdpge	0, 9, cr3, cr15, cr0, {0}
    9da0:	b0080069 	andlt	r0, r8, r9, rrx
    9da4:	01080069 	tsteq	r8, r9, rrx
    9da8:	69b05300 	ldmibvs	r0!, {r8, r9, ip, lr}
    9dac:	6a6c0800 	bvs	1b0bdb4 <__Stack_Size+0x1b0b5b4>
    9db0:	00020800 	andeq	r0, r2, r0, lsl #16
    9db4:	6a6c9f30 	bvs	1b31a7c <__Stack_Size+0x1b3127c>
    9db8:	6a790800 	bvs	1e4bdc0 <__Stack_Size+0x1e4b5c0>
    9dbc:	00010800 	andeq	r0, r1, r0, lsl #16
    9dc0:	006b2c53 	rsbeq	r2, fp, r3, asr ip
    9dc4:	006b3608 	rsbeq	r3, fp, r8, lsl #12
    9dc8:	30000208 	andcc	r0, r0, r8, lsl #4
    9dcc:	006b369f 	mlseq	fp, pc, r6, r3	; <UNPREDICTABLE>
    9dd0:	006b4c08 	rsbeq	r4, fp, r8, lsl #24
    9dd4:	03000608 	movweq	r0, #1544	; 0x608
    9dd8:	080064c1 	stmdaeq	r0, {r0, r6, r7, sl, sp, lr}
    9ddc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    9de0:	00000000 	andeq	r0, r0, r0
    9de4:	006a7a00 	rsbeq	r7, sl, r0, lsl #20
    9de8:	006a7e08 	rsbeq	r7, sl, r8, lsl #28
    9dec:	30000208 	andcc	r0, r0, r8, lsl #4
    9df0:	006a8a9f 	mlseq	sl, pc, sl, r8	; <UNPREDICTABLE>
    9df4:	006aa008 	rsbeq	sl, sl, r8
    9df8:	50000108 	andpl	r0, r0, r8, lsl #2
    9dfc:	08006aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp, sp, lr}
    9e00:	08006aac 	stmdaeq	r0, {r2, r3, r5, r7, r9, fp, sp, lr}
    9e04:	b0500001 	subslt	r0, r0, r1
    9e08:	be08006a 	cdplt	0, 0, cr0, cr8, cr10, {3}
    9e0c:	0108006a 	tsteq	r8, sl, rrx
    9e10:	6b185000 	blvs	61de18 <__Stack_Size+0x61d618>
    9e14:	6b240800 	blvs	90be1c <__Stack_Size+0x90b61c>
    9e18:	00010800 	andeq	r0, r1, r0, lsl #16
    9e1c:	00000050 	andeq	r0, r0, r0, asr r0
    9e20:	00000000 	andeq	r0, r0, r0
    9e24:	00697a00 	rsbeq	r7, r9, r0, lsl #20
    9e28:	006a7208 	rsbeq	r7, sl, r8, lsl #4
    9e2c:	54000108 	strpl	r0, [r0], #-264	; 0x108
    9e30:	08006a7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, fp, sp, lr}
    9e34:	08006a94 	stmdaeq	r0, {r2, r4, r7, r9, fp, sp, lr}
    9e38:	2c540001 	mrrccs	0, 0, r0, r4, cr1
    9e3c:	4c08006b 	stcmi	0, cr0, [r8], {107}	; 0x6b
    9e40:	0108006b 	tsteq	r8, fp, rrx
    9e44:	00005400 	andeq	r5, r0, r0, lsl #8
    9e48:	00000000 	andeq	r0, r0, r0
    9e4c:	6a020000 	bvs	89e54 <__Stack_Size+0x89654>
    9e50:	6a2e0800 	bvs	b8be58 <__Stack_Size+0xb8b658>
    9e54:	00010800 	andeq	r0, r1, r0, lsl #16
    9e58:	00000051 	andeq	r0, r0, r1, asr r0
    9e5c:	00000000 	andeq	r0, r0, r0
    9e60:	006a0200 	rsbeq	r0, sl, r0, lsl #4
    9e64:	006a2e08 	rsbeq	r2, sl, r8, lsl #28
    9e68:	73000908 	movwvc	r0, #2312	; 0x908
    9e6c:	1a700800 	bne	1c0be74 <__Stack_Size+0x1c0b674>
    9e70:	9f1aff08 	svcls	0x001aff08
	...
    9e7c:	0800697a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, sp, lr}
    9e80:	08006b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp, lr}
    9e84:	9f300002 	svcls	0x00300002
    9e88:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
    9e8c:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
    9e90:	9f300002 	svcls	0x00300002
	...
    9e9c:	08006a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, sp, lr}
    9ea0:	08006a2e 	stmdaeq	r0, {r1, r2, r3, r5, r9, fp, sp, lr}
    9ea4:	00520001 	subseq	r0, r2, r1
    9ea8:	00000000 	andeq	r0, r0, r0
    9eac:	86000000 	strhi	r0, [r0], -r0
    9eb0:	88080069 	stmdahi	r8, {r0, r3, r5, r6}
    9eb4:	02080069 	andeq	r0, r8, #105	; 0x69
    9eb8:	88037300 	stmdahi	r3, {r8, r9, ip, sp, lr}
    9ebc:	b0080069 	andlt	r0, r8, r9, rrx
    9ec0:	01080069 	tsteq	r8, r9, rrx
    9ec4:	6a6c5200 	bvs	1b1e6cc <__Stack_Size+0x1b1decc>
    9ec8:	6a6e0800 	bvs	1b8bed0 <__Stack_Size+0x1b8b6d0>
    9ecc:	00010800 	andeq	r0, r1, r0, lsl #16
    9ed0:	00000052 	andeq	r0, r0, r2, asr r0
    9ed4:	00000000 	andeq	r0, r0, r0
    9ed8:	006b5400 	rsbeq	r5, fp, r0, lsl #8
    9edc:	006b5e08 	rsbeq	r5, fp, r8, lsl #28
    9ee0:	53000108 	movwpl	r0, #264	; 0x108
    9ee4:	08006b5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
    9ee8:	08006b6f 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r8, r9, fp, sp, lr}
    9eec:	08740008 	ldmdaeq	r4!, {r3}^
    9ef0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    9ef4:	6bde9f1a 	blvs	ff7b1b64 <BootRAM+0xe722305>
    9ef8:	6be60800 	blvs	ff98bf00 <BootRAM+0xe8fc6a1>
    9efc:	00010800 	andeq	r0, r1, r0, lsl #16
    9f00:	006be653 	rsbeq	lr, fp, r3, asr r6
    9f04:	006beb08 	rsbeq	lr, fp, r8, lsl #22
    9f08:	74000808 	strvc	r0, [r0], #-2056	; 0x808
    9f0c:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    9f10:	ee9f1aff 	mrc	10, 4, r1, cr15, cr15, {7}
    9f14:	f608006b 			; <UNDEFINED> instruction: 0xf608006b
    9f18:	0108006b 	tsteq	r8, fp, rrx
    9f1c:	00005300 	andeq	r5, r0, r0, lsl #6
    9f20:	00000000 	andeq	r0, r0, r0
    9f24:	6b5c0000 	blvs	1709f2c <__Stack_Size+0x170972c>
    9f28:	6be00800 	blvs	ff80bf30 <BootRAM+0xe77c6d1>
    9f2c:	00030800 	andeq	r0, r3, r0, lsl #16
    9f30:	009f1074 	addseq	r1, pc, r4, ror r0	; <UNPREDICTABLE>
    9f34:	00000000 	andeq	r0, r0, r0
    9f38:	60000000 	andvs	r0, r0, r0
    9f3c:	6f08006b 	svcvs	0x0008006b
    9f40:	0108006b 	tsteq	r8, fp, rrx
    9f44:	00005200 	andeq	r5, r0, r0, lsl #4
    9f48:	00000000 	andeq	r0, r0, r0
    9f4c:	6b740000 	blvs	1d09f54 <__Stack_Size+0x1d09754>
    9f50:	6b7c0800 	blvs	1f0bf58 <__Stack_Size+0x1f0b758>
    9f54:	00010800 	andeq	r0, r1, r0, lsl #16
    9f58:	006b7c50 	rsbeq	r7, fp, r0, asr ip
    9f5c:	006b8e08 	rsbeq	r8, fp, r8, lsl #28
    9f60:	57000108 	strpl	r0, [r0, -r8, lsl #2]
	...
    9f6c:	08006b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp, sp, lr}
    9f70:	08006b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
    9f74:	00760016 	rsbseq	r0, r6, r6, lsl r0
    9f78:	244b4012 	strbcs	r4, [fp], #-18
    9f7c:	16007222 	strne	r7, [r0], -r2, lsr #4
    9f80:	244b4014 	strbcs	r4, [fp], #-20
    9f84:	01282d22 	teqeq	r8, r2, lsr #26
    9f88:	9f131600 	svcls	0x00131600
    9f8c:	08006b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
    9f90:	08006b8e 	stmdaeq	r0, {r1, r2, r3, r7, r8, r9, fp, sp, lr}
    9f94:	00560001 	subseq	r0, r6, r1
    9f98:	00000000 	andeq	r0, r0, r0
    9f9c:	14000000 	strne	r0, [r0], #-0
    9fa0:	4008006c 	andmi	r0, r8, ip, rrx
    9fa4:	0108006c 	tsteq	r8, ip, rrx
    9fa8:	6c405000 	marvs	acc0, r5, r0
    9fac:	6c4c0800 	mcrrvs	8, 0, r0, ip, cr0
    9fb0:	00040800 	andeq	r0, r4, r0, lsl #16
    9fb4:	9f5001f3 	svcls	0x005001f3
	...
    9fc0:	08006c1a 	stmdaeq	r0, {r1, r3, r4, sl, fp, sp, lr}
    9fc4:	08006c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp, lr}
    9fc8:	9f300002 	svcls	0x00300002
    9fcc:	08006c1c 	stmdaeq	r0, {r2, r3, r4, sl, fp, sp, lr}
    9fd0:	08006c3c 	stmdaeq	r0, {r2, r3, r4, r5, sl, fp, sp, lr}
    9fd4:	00530001 	subseq	r0, r3, r1
    9fd8:	00000000 	andeq	r0, r0, r0
    9fdc:	1a000000 	bne	9fe4 <__Stack_Size+0x97e4>
    9fe0:	4408006c 	strmi	r0, [r8], #-108	; 0x6c
    9fe4:	0108006c 	tsteq	r8, ip, rrx
    9fe8:	00005400 	andeq	r5, r0, r0, lsl #8
    9fec:	00000000 	andeq	r0, r0, r0
    9ff0:	6c540000 	mravs	r0, r4, acc0
    9ff4:	6c5f0800 	mrrcvs	8, 0, r0, pc, cr0	; <UNPREDICTABLE>
    9ff8:	00010800 	andeq	r0, r1, r0, lsl #16
    9ffc:	006c6452 	rsbeq	r6, ip, r2, asr r4
    a000:	006c6608 	rsbeq	r6, ip, r8, lsl #12
    a004:	53000108 	movwpl	r0, #264	; 0x108
    a008:	08006c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp, sp, lr}
    a00c:	08006c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
    a010:	6c520001 	mrrcvs	0, 0, r0, r2, cr1
    a014:	7b08006c 	blvc	20a1cc <__Stack_Size+0x2099cc>
    a018:	0808006c 	stmdaeq	r8, {r2, r3, r5, r6}
    a01c:	94087300 	strls	r7, [r8], #-768	; 0x300
    a020:	1aff0801 	bne	fffcc02c <BootRAM+0xef3c7cd>
    a024:	006c8e9f 	mlseq	ip, pc, lr, r8	; <UNPREDICTABLE>
    a028:	006c9908 	rsbeq	r9, ip, r8, lsl #18
    a02c:	53000108 	movwpl	r0, #264	; 0x108
	...
    a038:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
    a03c:	08006cc0 	stmdaeq	r0, {r6, r7, sl, fp, sp, lr}
    a040:	c0500001 	subsgt	r0, r0, r1
    a044:	c208006c 	andgt	r0, r8, #108	; 0x6c
    a048:	0308006c 	movweq	r0, #32876	; 0x806c
    a04c:	9f7e7000 	svcls	0x007e7000
    a050:	08006cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, sp, lr}
    a054:	08006cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, sp, lr}
    a058:	7f700003 	svcvc	0x00700003
    a05c:	006cd29f 	mlseq	ip, pc, r2, sp	; <UNPREDICTABLE>
    a060:	006cd608 	rsbeq	sp, ip, r8, lsl #12
    a064:	50000108 	andpl	r0, r0, r8, lsl #2
    a068:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    a06c:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    a070:	7e700003 	cdpvc	0, 7, cr0, cr0, cr3, {0}
    a074:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a078:	00000000 	andeq	r0, r0, r0
    a07c:	006ca800 	rsbeq	sl, ip, r0, lsl #16
    a080:	006cae08 	rsbeq	sl, ip, r8, lsl #28
    a084:	51000108 	tstpl	r0, r8, lsl #2
    a088:	08006cae 	stmdaeq	r0, {r1, r2, r3, r5, r7, sl, fp, sp, lr}
    a08c:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    a090:	01f30004 	mvnseq	r0, r4
    a094:	00009f51 	andeq	r9, r0, r1, asr pc
    a098:	00000000 	andeq	r0, r0, r0
    a09c:	6ca80000 	stcvs	0, cr0, [r8]
    a0a0:	6cb00800 	ldcvs	8, cr0, [r0]
    a0a4:	00010800 	andeq	r0, r1, r0, lsl #16
    a0a8:	006cb052 	rsbeq	fp, ip, r2, asr r0
    a0ac:	006cd808 	rsbeq	sp, ip, r8, lsl #16
    a0b0:	f3000408 	vshl.u8	d0, d8, d0
    a0b4:	009f5201 	addseq	r5, pc, r1, lsl #4
    a0b8:	00000000 	andeq	r0, r0, r0
    a0bc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a0c0:	ba08006c 	blt	20a278 <__Stack_Size+0x209a78>
    a0c4:	0108006c 	tsteq	r8, ip, rrx
    a0c8:	6cba5200 	lfmvs	f5, 4, [sl]
    a0cc:	6cd20800 	ldclvs	8, cr0, [r2], {0}
    a0d0:	000f0800 	andeq	r0, pc, r0, lsl #16
    a0d4:	0a5201f3 	beq	148a8a8 <__Stack_Size+0x148a0a8>
    a0d8:	231affff 	tstcs	sl, #1020	; 0x3fc
    a0dc:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    a0e0:	d29f1c00 	addsle	r1, pc, #0, 24
    a0e4:	d408006c 	strle	r0, [r8], #-108	; 0x6c
    a0e8:	1008006c 	andne	r0, r8, ip, rrx
    a0ec:	5201f300 	andpl	pc, r1, #0, 6
    a0f0:	1affff0a 	bne	9d20 <__Stack_Size+0x9520>
    a0f4:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    a0f8:	22200073 	eorcs	r0, r0, #115	; 0x73
    a0fc:	006cd49f 	mlseq	ip, pc, r4, sp	; <UNPREDICTABLE>
    a100:	006cd808 	rsbeq	sp, ip, r8, lsl #16
    a104:	f3000f08 	vpmax.f32	d0, d0, d8
    a108:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    a10c:	01231aff 	strdeq	r1, [r3, -pc]!
    a110:	00732631 	rsbseq	r2, r3, r1, lsr r6
    a114:	00009f1c 	andeq	r9, r0, ip, lsl pc
    a118:	00000000 	andeq	r0, r0, r0
    a11c:	6cc20000 	stclvs	0, cr0, [r2], {0}
    a120:	6cca0800 	stclvs	8, cr0, [sl], {0}
    a124:	00080800 	andeq	r0, r8, r0, lsl #16
    a128:	01947e70 	orrseq	r7, r4, r0, ror lr
    a12c:	9f1aff08 	svcls	0x001aff08
    a130:	08006cca 	stmdaeq	r0, {r1, r3, r6, r7, sl, fp, sp, lr}
    a134:	08006cce 	stmdaeq	r0, {r1, r2, r3, r6, r7, sl, fp, sp, lr}
    a138:	ce540001 	cdpgt	0, 5, cr0, cr4, cr1, {0}
    a13c:	d208006c 	andle	r0, r8, #108	; 0x6c
    a140:	0808006c 	stmdaeq	r8, {r2, r3, r5, r6}
    a144:	947e7000 	ldrbtls	r7, [lr], #-0
    a148:	1aff0801 	bne	fffcc154 <BootRAM+0xef3c8f5>
    a14c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a150:	00000000 	andeq	r0, r0, r0
    a154:	006cc200 	rsbeq	ip, ip, r0, lsl #4
    a158:	006cd208 	rsbeq	sp, ip, r8, lsl #4
    a15c:	70001208 	andvc	r1, r0, r8, lsl #4
    a160:	0801947f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, ip, pc}
    a164:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    a168:	01947e70 	orrseq	r7, r4, r0, ror lr
    a16c:	211aff08 	tstcs	sl, r8, lsl #30
    a170:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a174:	00000000 	andeq	r0, r0, r0
    a178:	006cb800 	rsbeq	fp, ip, r0, lsl #16
    a17c:	006cba08 	rsbeq	fp, ip, r8, lsl #20
    a180:	51000108 	tstpl	r0, r8, lsl #2
    a184:	08006cd2 	stmdaeq	r0, {r1, r4, r6, r7, sl, fp, sp, lr}
    a188:	08006cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp, lr}
    a18c:	0073000a 	rsbseq	r0, r3, sl
    a190:	00712432 	rsbseq	r2, r1, r2, lsr r4
    a194:	9f042322 	svcls	0x00042322
    a198:	08006cd4 	stmdaeq	r0, {r2, r4, r6, r7, sl, fp, sp, lr}
    a19c:	08006cd6 	stmdaeq	r0, {r1, r2, r4, r6, r7, sl, fp, sp, lr}
    a1a0:	7f73000a 	svcvc	0x0073000a
    a1a4:	00712432 	rsbseq	r2, r1, r2, lsr r4
    a1a8:	9f042322 	svcls	0x00042322
	...
    a1b4:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    a1b8:	08006cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, sp, lr}
    a1bc:	f6500001 			; <UNDEFINED> instruction: 0xf6500001
    a1c0:	f808006c 			; <UNDEFINED> instruction: 0xf808006c
    a1c4:	0a08006c 	beq	20a37c <__Stack_Size+0x209b7c>
    a1c8:	31007300 	mrscc	r7, LR_irq
    a1cc:	22007024 	andcs	r7, r0, #36	; 0x24
    a1d0:	f89f0223 			; <UNDEFINED> instruction: 0xf89f0223
    a1d4:	fa08006c 	blx	20a38c <__Stack_Size+0x209b8c>
    a1d8:	0a08006c 	beq	20a390 <__Stack_Size+0x209b90>
    a1dc:	317f7300 	cmncc	pc, r0, lsl #6
    a1e0:	22007024 	andcs	r7, r0, #36	; 0x24
    a1e4:	009f0223 	addseq	r0, pc, r3, lsr #4
    a1e8:	00000000 	andeq	r0, r0, r0
    a1ec:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    a1f0:	de08006c 	cdple	0, 0, cr0, cr8, cr12, {3}
    a1f4:	0108006c 	tsteq	r8, ip, rrx
    a1f8:	6cde5100 	ldfvse	f5, [lr], {0}
    a1fc:	6cfc0800 	ldclvs	8, cr0, [ip]
    a200:	00040800 	andeq	r0, r4, r0, lsl #16
    a204:	9f5101f3 	svcls	0x005101f3
	...
    a210:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
    a214:	08006ce0 	stmdaeq	r0, {r5, r6, r7, sl, fp, sp, lr}
    a218:	e0520001 	subs	r0, r2, r1
    a21c:	fc08006c 	stc2	0, cr0, [r8], {108}	; 0x6c
    a220:	0408006c 	streq	r0, [r8], #-108	; 0x6c
    a224:	5201f300 	andpl	pc, r1, #0, 6
    a228:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    a22c:	00000000 	andeq	r0, r0, r0
    a230:	006ce800 	rsbeq	lr, ip, r0, lsl #16
    a234:	006cea08 	rsbeq	lr, ip, r8, lsl #20
    a238:	52000108 	andpl	r0, r0, #8, 2
    a23c:	08006cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, sp, lr}
    a240:	08006cf6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, sl, fp, sp, lr}
    a244:	01f3000f 	mvnseq	r0, pc
    a248:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    a24c:	3101231a 	tstcc	r1, sl, lsl r3
    a250:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    a254:	006cf69f 	mlseq	ip, pc, r6, pc	; <UNPREDICTABLE>
    a258:	006cf808 	rsbeq	pc, ip, r8, lsl #16
    a25c:	f3001008 	vhadd.u8	d1, d0, d8
    a260:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    a264:	01231aff 	strdeq	r1, [r3, -pc]!
    a268:	00732631 	rsbseq	r2, r3, r1, lsr r6
    a26c:	f89f2220 			; <UNDEFINED> instruction: 0xf89f2220
    a270:	fc08006c 	stc2	0, cr0, [r8], {108}	; 0x6c
    a274:	0f08006c 	svceq	0x0008006c
    a278:	5201f300 	andpl	pc, r1, #0, 6
    a27c:	1affff0a 	bne	9eac <__Stack_Size+0x96ac>
    a280:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    a284:	9f1c0073 	svcls	0x001c0073
	...
    a290:	08006ce8 	stmdaeq	r0, {r3, r5, r6, r7, sl, fp, sp, lr}
    a294:	08006cea 	stmdaeq	r0, {r1, r3, r5, r6, r7, sl, fp, sp, lr}
    a298:	ee510001 	cdp	0, 5, cr0, cr1, cr1, {0}
    a29c:	f808006c 			; <UNDEFINED> instruction: 0xf808006c
    a2a0:	0a08006c 	beq	20a458 <__Stack_Size+0x209c58>
    a2a4:	32007300 	andcc	r7, r0, #0, 6
    a2a8:	22007124 	andcs	r7, r0, #36, 2
    a2ac:	f89f0423 			; <UNDEFINED> instruction: 0xf89f0423
    a2b0:	fa08006c 	blx	20a468 <__Stack_Size+0x209c68>
    a2b4:	0a08006c 	beq	20a46c <__Stack_Size+0x209c6c>
    a2b8:	327f7300 	rsbscc	r7, pc, #0, 6
    a2bc:	22007124 	andcs	r7, r0, #36, 2
    a2c0:	009f0423 	addseq	r0, pc, r3, lsr #8
    a2c4:	00000000 	andeq	r0, r0, r0
    a2c8:	Address 0x0000a2c8 is out of bounds.


Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	08000b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp}
   c:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	08000b94 	stmdaeq	r0, {r2, r4, r7, r8, r9, fp}
  14:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	08000b98 	stmdaeq	r0, {r3, r4, r7, r8, r9, fp}
  24:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
  28:	08000b9a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, fp}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	08000b9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, fp}
  34:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}
  38:	08000b9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, r9, fp}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	08000ba8 	stmdaeq	r0, {r3, r5, r7, r8, r9, fp}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	08000baa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, fp}
  48:	08000bac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, fp}
  4c:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	08000bc4 	stmdaeq	r0, {r2, r6, r7, r8, r9, fp}
  54:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  58:	08000bc6 	stmdaeq	r0, {r1, r2, r6, r7, r8, r9, fp}
  5c:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  60:	08000bc8 	stmdaeq	r0, {r3, r6, r7, r8, r9, fp}
  64:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  68:	08000bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp}
  6c:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  70:	08000bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp}
  74:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  78:	08000bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp}
  7c:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  80:	08000bd0 	stmdaeq	r0, {r4, r6, r7, r8, r9, fp}
  84:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
  88:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
  8c:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
  90:	08000c84 	stmdaeq	r0, {r2, r7, sl, fp}
  94:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
  98:	08000ce4 	stmdaeq	r0, {r2, r5, r6, r7, sl, fp}
  9c:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
  a0:	08000cf0 	stmdaeq	r0, {r4, r5, r6, r7, sl, fp}
  a4:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  a8:	08000cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp}
				{
					state_in->step = step_c;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ac:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
  b0:	08000d1c 	stmdaeq	r0, {r2, r3, r4, r8, sl, fp}
  b4:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
			*plainchar    = (fragment & 0x003) << 6;
  b8:	08000d28 	stmdaeq	r0, {r3, r5, r8, sl, fp}
  bc:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
	state_in->plainchar = 0;
}

int base64_decode_block(const char* code_in, const int length_in, char* plaintext_out, base64_decodestate* state_in)
{
	const char* codechar = code_in;
  c0:	08000d50 	stmdaeq	r0, {r4, r6, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++ |= (fragment & 0x03c) >> 2;
			*plainchar    = (fragment & 0x003) << 6;
	case step_d:
			do {
				if (codechar == code_in+length_in)
  c4:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
  c8:	00000001 	andeq	r0, r0, r1
				{
					state_in->step = step_d;
  cc:	00000001 	andeq	r0, r0, r1
					state_in->plainchar = *plainchar;
  d0:	08000db8 	stmdaeq	r0, {r3, r4, r5, r7, r8, sl, fp}
					return plainchar - plaintext_out;
  d4:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
  d8:	08000dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp}
				}
				fragment = (char)base64_decode_value(*codechar++);
  dc:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
  e0:	08000dec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  e4:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
  e8:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
				{
					state_in->step = step_d;
					state_in->plainchar = *plainchar;
					return plainchar - plaintext_out;
				}
				fragment = (char)base64_decode_value(*codechar++);
  ec:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
			} while (fragment < 0);
			*plainchar++   |= (fragment & 0x03f);
  f0:	08000eb8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, fp}
  f4:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
		}
  f8:	08000ef4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl, fp}
	}
	/* control should not reach here */
	return plainchar - plaintext_out;
}
  fc:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
	uint8_t x1z1[F25519_SIZE];
	uint8_t a[F25519_SIZE];

	f25519_mul__distinct(x1sq, x1, x1);
	f25519_mul__distinct(z1sq, z1, z1);
	f25519_mul__distinct(x1z1, x1, z1);
 100:	08000ef8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r9, sl, fp}
 104:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}

	f25519_sub(a, x1sq, z1sq);
 108:	08000f1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, fp}
 10c:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
	f25519_mul__distinct(x3, a, a);
 110:	08000f5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9, sl, fp}
 114:	08000f7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp}
 118:	08000f80 	stmdaeq	r0, {r7, r8, r9, sl, fp}

	f25519_mul_c(a, x1z1, 486662);
 11c:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 120:	00000001 	andeq	r0, r0, r1
	f25519_add(a, x1sq, a);
 124:	00000001 	andeq	r0, r0, r1
	...
	f25519_add(a, z1sq, a);
 130:	00000001 	andeq	r0, r0, r1
 134:	00000001 	andeq	r0, r0, r1
	f25519_mul__distinct(x1sq, x1z1, a);
 138:	08001034 	stmdaeq	r0, {r2, r4, r5, ip}
 13c:	08001062 	stmdaeq	r0, {r1, r5, r6, ip}
 140:	08001064 	stmdaeq	r0, {r2, r5, r6, ip}
	f25519_mul_c(z3, x1sq, 4);
 144:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
 148:	0800111c 	stmdaeq	r0, {r2, r3, r4, r8, ip}
	uint8_t da[F25519_SIZE];
	uint8_t cb[F25519_SIZE];
	uint8_t a[F25519_SIZE];
	uint8_t b[F25519_SIZE];

	f25519_add(a, x2, z2);
 14c:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
	...
	f25519_sub(b, x3, z3); /* D */
 158:	08001218 	stmdaeq	r0, {r3, r4, r9, ip}
 15c:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
	f25519_mul__distinct(da, a, b);
 160:	0800122e 	stmdaeq	r0, {r1, r2, r3, r5, r9, ip}
 164:	08001240 	stmdaeq	r0, {r6, r9, ip}
 168:	08001240 	stmdaeq	r0, {r6, r9, ip}

	f25519_sub(b, x2, z2);
 16c:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
 170:	08001290 	stmdaeq	r0, {r4, r7, r9, ip}
	f25519_add(a, x3, z3); /* C */
 174:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
 178:	0800129a 	stmdaeq	r0, {r1, r3, r4, r7, r9, ip}
 17c:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
	f25519_mul__distinct(cb, a, b);
 180:	080012b0 	stmdaeq	r0, {r4, r5, r7, r9, ip}
 184:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}

	f25519_add(a, da, cb);
 188:	080012d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip}
 18c:	080012f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, ip}
 190:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
	f25519_mul__distinct(b, a, a);
 194:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
 198:	08001390 	stmdaeq	r0, {r4, r7, r8, r9, ip}
	f25519_mul__distinct(x5, z1, b);
 19c:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
 1a0:	080013b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, ip}
 1a4:	08001440 	stmdaeq	r0, {r6, sl, ip}

	f25519_sub(a, da, cb);
 1a8:	08001440 	stmdaeq	r0, {r6, sl, ip}
 1ac:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
	f25519_mul__distinct(b, a, a);
 1b0:	08001488 	stmdaeq	r0, {r3, r7, sl, ip}
 1b4:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}
 1b8:	080014e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip}

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
		const int bit = (e[i >> 3] >> (i & 7)) & 1;
 1bc:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(x5, z1, b);

	f25519_sub(a, da, cb);
	f25519_mul__distinct(b, a, a);
	f25519_mul__distinct(z5, x1, b);
 1c0:	080014fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip}
 1c4:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}

		/* Select:
		 *   bit = 1 --> (P_(2m+1), P_(2m))
		 *   bit = 0 --> (P_(2m), P_(2m-1))
		 */
		f25519_select(xm1, xm1, xm, bit);
 1c8:	08001518 	stmdaeq	r0, {r3, r4, r8, sl, ip}
 1cc:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 1d0:	08001544 	stmdaeq	r0, {r2, r6, r8, sl, ip}
 1d4:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
		f25519_select(zm1, zm1, zm, bit);
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	00000001 	andeq	r0, r0, r1
		f25519_select(xm, xm, xms, bit);
 1e4:	00000001 	andeq	r0, r0, r1
 1e8:	0800155c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, ip}
 1ec:	080015c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip}
		f25519_select(zm, zm, zms, bit);
 1f0:	080015c8 	stmdaeq	r0, {r3, r6, r7, r8, sl, ip}
 1f4:	080015ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip}
 1f8:	080015ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, sl, ip}
	int i;

	/* Note: bit 254 is assumed to be 1 */
	f25519_copy(xm, q);

	for (i = 253; i >= 0; i--) {
 1fc:	0800160a 	stmdaeq	r0, {r1, r3, r9, sl, ip}
 200:	0800160c 	stmdaeq	r0, {r2, r3, r9, sl, ip}
		f25519_select(xm, xm, xms, bit);
		f25519_select(zm, zm, zms, bit);
	}

	/* Freeze out of projective coordinates */
	f25519_inv__distinct(zm1, zm);
 204:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
 208:	08001620 	stmdaeq	r0, {r5, r9, sl, ip}
	f25519_mul__distinct(result, zm1, xm);
 20c:	08001654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip}
 210:	00000001 	andeq	r0, r0, r1
	f25519_normalize(result);
 214:	00000001 	andeq	r0, r0, r1
 218:	08001654 	stmdaeq	r0, {r2, r4, r6, r9, sl, ip}
}
 21c:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
 220:	080016a0 	stmdaeq	r0, {r5, r7, r9, sl, ip}
 224:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
 228:	080016ac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, ip}
 22c:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 230:	080016c4 	stmdaeq	r0, {r2, r6, r7, r9, sl, ip}
 234:	080016d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, ip}
 238:	080016d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, sl, ip}
 23c:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 240:	080016e8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, ip}
 244:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
	...
 250:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
 254:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 258:	08001788 	stmdaeq	r0, {r3, r7, r8, r9, sl, ip}
 25c:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	080017cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, ip}
 26c:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
 270:	080017e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, r9, sl, ip}
 274:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 278:	080017fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, ip}
 27c:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 280:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 284:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
 288:	08001858 	stmdaeq	r0, {r3, r4, r6, fp, ip}
 28c:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 290:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 294:	08001b10 	stmdaeq	r0, {r4, r8, r9, fp, ip}
 298:	00000001 	andeq	r0, r0, r1
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	00000001 	andeq	r0, r0, r1
 2a4:	00000001 	andeq	r0, r0, r1
 2a8:	08001b10 	stmdaeq	r0, {r4, r8, r9, fp, ip}
 2ac:	08001b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip}
 2b0:	00000001 	andeq	r0, r0, r1
 2b4:	00000001 	andeq	r0, r0, r1
 2b8:	08001b1c 	stmdaeq	r0, {r2, r3, r4, r8, r9, fp, ip}
 2bc:	08001b1e 	stmdaeq	r0, {r1, r2, r3, r4, r8, r9, fp, ip}
	...
 2c8:	00000001 	andeq	r0, r0, r1
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
	...
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
 300:	00000001 	andeq	r0, r0, r1
 304:	00000001 	andeq	r0, r0, r1
	...
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
 318:	00000001 	andeq	r0, r0, r1
 31c:	00000001 	andeq	r0, r0, r1
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
	...
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
	...
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
	...
 358:	08001b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, ip}
 35c:	08001b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, ip}
 360:	08001b56 	stmdaeq	r0, {r1, r2, r4, r6, r8, r9, fp, ip}
 364:	08001b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp, ip}
 368:	08001b6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, fp, ip}
 36c:	08001b72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, fp, ip}
 370:	08001b74 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, fp, ip}
 374:	08001b7a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, r9, fp, ip}
	...
 380:	08001c30 	stmdaeq	r0, {r4, r5, sl, fp, ip}
 384:	08001c3a 	stmdaeq	r0, {r1, r3, r4, r5, sl, fp, ip}
 388:	08001c40 	stmdaeq	r0, {r6, sl, fp, ip}
 38c:	08001c54 	stmdaeq	r0, {r2, r4, r6, sl, fp, ip}
 390:	08001c5a 	stmdaeq	r0, {r1, r3, r4, r6, sl, fp, ip}
 394:	08001c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, ip}
 398:	08001c64 	stmdaeq	r0, {r2, r5, r6, sl, fp, ip}
 39c:	08001c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp, ip}
	...
 3a8:	08001ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip}
 3ac:	08001ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp, ip}
 3b0:	08001eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp, ip}
 3b4:	08001ef2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl, fp, ip}
	...
 3c0:	08001b20 	stmdaeq	r0, {r5, r8, r9, fp, ip}
 3c4:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
 3c8:	08001b90 	stmdaeq	r0, {r4, r7, r8, r9, fp, ip}
 3cc:	08001bca 	stmdaeq	r0, {r1, r3, r6, r7, r8, r9, fp, ip}
 3d0:	08001bcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, fp, ip}
 3d4:	08001c2a 	stmdaeq	r0, {r1, r3, r5, sl, fp, ip}
 3d8:	08001c2c 	stmdaeq	r0, {r2, r3, r5, sl, fp, ip}
 3dc:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
 3e0:	08001cf4 	stmdaeq	r0, {r2, r4, r5, r6, r7, sl, fp, ip}
 3e4:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
 3e8:	08001dd4 	stmdaeq	r0, {r2, r4, r6, r7, r8, sl, fp, ip}
 3ec:	08001e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip}
 3f0:	08001e88 	stmdaeq	r0, {r3, r7, r9, sl, fp, ip}
 3f4:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
	...
 400:	08001f0e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, fp, ip}
 404:	08001f10 	stmdaeq	r0, {r4, r8, r9, sl, fp, ip}
 408:	08001f12 	stmdaeq	r0, {r1, r4, r8, r9, sl, fp, ip}
 40c:	08001f14 	stmdaeq	r0, {r2, r4, r8, r9, sl, fp, ip}
 410:	08001f18 	stmdaeq	r0, {r3, r4, r8, r9, sl, fp, ip}
 414:	08001f2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, fp, ip}
	...
 420:	08001f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp, ip}
 424:	08001f66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, fp, ip}
 428:	08001f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp, ip}
 42c:	08001f6a 	stmdaeq	r0, {r1, r3, r5, r6, r8, r9, sl, fp, ip}
 430:	08001f72 	stmdaeq	r0, {r1, r4, r5, r6, r8, r9, sl, fp, ip}
 434:	08001f82 	stmdaeq	r0, {r1, r7, r8, r9, sl, fp, ip}
 438:	08001f84 	stmdaeq	r0, {r2, r7, r8, r9, sl, fp, ip}
 43c:	08001f88 	stmdaeq	r0, {r3, r7, r8, r9, sl, fp, ip}
	...
 448:	0800204e 	stmdaeq	r0, {r1, r2, r3, r6, sp}
 44c:	08002052 	stmdaeq	r0, {r1, r4, r6, sp}
 450:	0800205a 	stmdaeq	r0, {r1, r3, r4, r6, sp}
 454:	08002074 	stmdaeq	r0, {r2, r4, r5, r6, sp}
	...
 460:	08001f0c 	stmdaeq	r0, {r2, r3, r8, r9, sl, fp, ip}
 464:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
 468:	08001f60 	stmdaeq	r0, {r5, r6, r8, r9, sl, fp, ip}
 46c:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 470:	08001ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 474:	08002028 	stmdaeq	r0, {r3, r5, sp}
 478:	08002028 	stmdaeq	r0, {r3, r5, sp}
 47c:	08002040 	stmdaeq	r0, {r6, sp}
 480:	08002040 	stmdaeq	r0, {r6, sp}
 484:	08002100 	stmdaeq	r0, {r8, sp}
 488:	08002100 	stmdaeq	r0, {r8, sp}
 48c:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
	...
 498:	08002220 	stmdaeq	r0, {r5, r9, sp}
 49c:	08002222 	stmdaeq	r0, {r1, r5, r9, sp}
 4a0:	08002228 	stmdaeq	r0, {r3, r5, r9, sp}
 4a4:	0800222c 	stmdaeq	r0, {r2, r3, r5, r9, sp}
 4a8:	08002230 	stmdaeq	r0, {r4, r5, r9, sp}
 4ac:	08002246 	stmdaeq	r0, {r1, r2, r6, r9, sp}
	...
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
	...
 4d0:	08002518 	stmdaeq	r0, {r3, r4, r8, sl, sp}
 4d4:	0800251a 	stmdaeq	r0, {r1, r3, r4, r8, sl, sp}
 4d8:	0800251c 	stmdaeq	r0, {r2, r3, r4, r8, sl, sp}
 4dc:	080025a0 	stmdaeq	r0, {r5, r7, r8, sl, sp}
	...
 4e8:	080025a0 	stmdaeq	r0, {r5, r7, r8, sl, sp}
 4ec:	08002612 	stmdaeq	r0, {r1, r4, r9, sl, sp}
 4f0:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
 4f4:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
	...
 500:	08002612 	stmdaeq	r0, {r1, r4, r9, sl, sp}
 504:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
 508:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
 50c:	080026a0 	stmdaeq	r0, {r5, r7, r9, sl, sp}
	...
 518:	08002612 	stmdaeq	r0, {r1, r4, r9, sl, sp}
 51c:	08002618 	stmdaeq	r0, {r3, r4, r9, sl, sp}
 520:	0800261e 	stmdaeq	r0, {r1, r2, r3, r4, r9, sl, sp}
 524:	08002668 	stmdaeq	r0, {r3, r5, r6, r9, sl, sp}
	...
 530:	08002b04 	stmdaeq	r0, {r2, r8, r9, fp, sp}
 534:	08002b06 	stmdaeq	r0, {r1, r2, r8, r9, fp, sp}
 538:	08002b0c 	stmdaeq	r0, {r2, r3, r8, r9, fp, sp}
 53c:	08002b54 	stmdaeq	r0, {r2, r4, r6, r8, r9, fp, sp}
	...
 548:	08002bce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, fp, sp}
 54c:	08002c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, sp}
 550:	08002c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp}
 554:	08002c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, sp}
	...
 560:	08002c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, sp}
 564:	08002c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp}
 568:	08002c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, sp}
 56c:	08002ce2 	stmdaeq	r0, {r1, r5, r6, r7, sl, fp, sp}
	...
 578:	08002c52 	stmdaeq	r0, {r1, r4, r6, sl, fp, sp}
 57c:	08002c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, sp}
 580:	08002c5e 	stmdaeq	r0, {r1, r2, r3, r4, r6, sl, fp, sp}
 584:	08002ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp}
	...
 590:	08002fec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp}
 594:	08003036 	stmdaeq	r0, {r1, r2, r4, r5, ip, sp}
 598:	0800303a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp}
 59c:	08003040 	stmdaeq	r0, {r6, ip, sp}
	...
 5a8:	08003036 	stmdaeq	r0, {r1, r2, r4, r5, ip, sp}
 5ac:	0800303a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp}
 5b0:	08003040 	stmdaeq	r0, {r6, ip, sp}
 5b4:	080030bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip, sp}
	...
 5c0:	08003036 	stmdaeq	r0, {r1, r2, r4, r5, ip, sp}
 5c4:	0800303a 	stmdaeq	r0, {r1, r3, r4, r5, ip, sp}
 5c8:	08003040 	stmdaeq	r0, {r6, ip, sp}
 5cc:	08003086 	stmdaeq	r0, {r1, r2, r7, ip, sp}
	...
 5d8:	080021c0 	stmdaeq	r0, {r6, r7, r8, sp}
 5dc:	080021de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, sp}
 5e0:	080021e0 	stmdaeq	r0, {r5, r6, r7, r8, sp}
 5e4:	0800224e 	stmdaeq	r0, {r1, r2, r3, r6, r9, sp}
 5e8:	08002250 	stmdaeq	r0, {r4, r6, r9, sp}
 5ec:	080022ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sp}
 5f0:	080022ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, sp}
 5f4:	080023ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sp}
 5f8:	080023b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sp}
 5fc:	080023f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r8, r9, sp}
 600:	080023f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, r9, sp}
 604:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
 608:	08002444 	stmdaeq	r0, {r2, r6, sl, sp}
 60c:	0800248a 	stmdaeq	r0, {r1, r3, r7, sl, sp}
 610:	0800248c 	stmdaeq	r0, {r2, r3, r7, sl, sp}
 614:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
 618:	00000001 	andeq	r0, r0, r1
 61c:	00000001 	andeq	r0, r0, r1
 620:	00000001 	andeq	r0, r0, r1
 624:	00000001 	andeq	r0, r0, r1
 628:	08002514 	stmdaeq	r0, {r2, r4, r8, sl, sp}
 62c:	08002afe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r9, fp, sp}
 630:	00000001 	andeq	r0, r0, r1
 634:	00000001 	andeq	r0, r0, r1
 638:	08002b00 	stmdaeq	r0, {r8, r9, fp, sp}
 63c:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
	...
 648:	08003142 	stmdaeq	r0, {r1, r6, r8, ip, sp}
 64c:	08003160 	stmdaeq	r0, {r5, r6, r8, ip, sp}
 650:	080032b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, ip, sp}
 654:	080032c0 	stmdaeq	r0, {r6, r7, r9, ip, sp}
 658:	080032ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, ip, sp}
 65c:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
	...
 668:	08003252 	stmdaeq	r0, {r1, r4, r6, r9, ip, sp}
 66c:	08003254 	stmdaeq	r0, {r2, r4, r6, r9, ip, sp}
 670:	08003258 	stmdaeq	r0, {r3, r4, r6, r9, ip, sp}
 674:	0800326c 	stmdaeq	r0, {r2, r3, r5, r6, r9, ip, sp}
	...
 680:	0800326e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, ip, sp}
 684:	08003270 	stmdaeq	r0, {r4, r5, r6, r9, ip, sp}
 688:	08003274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip, sp}
 68c:	080032a8 	stmdaeq	r0, {r3, r5, r7, r9, ip, sp}
	...
 698:	080032d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, ip, sp}
 69c:	080032d8 	stmdaeq	r0, {r3, r4, r6, r7, r9, ip, sp}
 6a0:	080032da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r9, ip, sp}
 6a4:	080032f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip, sp}
	...
 6b0:	00000001 	andeq	r0, r0, r1
 6b4:	00000001 	andeq	r0, r0, r1
 6b8:	00000001 	andeq	r0, r0, r1
 6bc:	00000001 	andeq	r0, r0, r1
	...
 6c8:	08003342 	stmdaeq	r0, {r1, r6, r8, r9, ip, sp}
 6cc:	0800335e 	stmdaeq	r0, {r1, r2, r3, r4, r6, r8, r9, ip, sp}
 6d0:	0800345c 	stmdaeq	r0, {r2, r3, r4, r6, sl, ip, sp}
 6d4:	0800346a 	stmdaeq	r0, {r1, r3, r5, r6, sl, ip, sp}
	...
 6e0:	08003376 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, ip, sp}
 6e4:	08003378 	stmdaeq	r0, {r3, r4, r5, r6, r8, r9, ip, sp}
 6e8:	0800337c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip, sp}
 6ec:	08003394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip, sp}
	...
 6f8:	080033c2 	stmdaeq	r0, {r1, r6, r7, r8, r9, ip, sp}
 6fc:	080033d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, sp}
 700:	080033da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, ip, sp}
 704:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
	...
 710:	080033d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, sp}
 714:	080033da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, ip, sp}
 718:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
 71c:	08003430 	stmdaeq	r0, {r4, r5, sl, ip, sp}
	...
 728:	080033d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, ip, sp}
 72c:	080033da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, ip, sp}
 730:	080033dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, ip, sp}
 734:	080033fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
	...
 740:	00000001 	andeq	r0, r0, r1
 744:	00000001 	andeq	r0, r0, r1
 748:	00000001 	andeq	r0, r0, r1
 74c:	00000001 	andeq	r0, r0, r1
 750:	00000001 	andeq	r0, r0, r1
 754:	00000001 	andeq	r0, r0, r1
	...
 760:	00000001 	andeq	r0, r0, r1
 764:	00000001 	andeq	r0, r0, r1
 768:	00000001 	andeq	r0, r0, r1
 76c:	00000001 	andeq	r0, r0, r1
	...
 778:	00000001 	andeq	r0, r0, r1
 77c:	00000001 	andeq	r0, r0, r1
 780:	00000001 	andeq	r0, r0, r1
 784:	00000001 	andeq	r0, r0, r1
 788:	00000001 	andeq	r0, r0, r1
 78c:	00000001 	andeq	r0, r0, r1
	...
 798:	00000001 	andeq	r0, r0, r1
 79c:	00000001 	andeq	r0, r0, r1
 7a0:	00000001 	andeq	r0, r0, r1
 7a4:	00000001 	andeq	r0, r0, r1
	...
 7b0:	00000001 	andeq	r0, r0, r1
 7b4:	00000001 	andeq	r0, r0, r1
 7b8:	08003134 	stmdaeq	r0, {r2, r4, r5, r8, ip, sp}
 7bc:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
 7c0:	00000001 	andeq	r0, r0, r1
 7c4:	00000001 	andeq	r0, r0, r1
 7c8:	00000001 	andeq	r0, r0, r1
 7cc:	00000001 	andeq	r0, r0, r1
 7d0:	00000001 	andeq	r0, r0, r1
 7d4:	00000001 	andeq	r0, r0, r1
 7d8:	080032d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, ip, sp}
 7dc:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
 7e0:	00000001 	andeq	r0, r0, r1
 7e4:	00000001 	andeq	r0, r0, r1
 7e8:	0800332c 	stmdaeq	r0, {r2, r3, r5, r8, r9, ip, sp}
 7ec:	0800346a 	stmdaeq	r0, {r1, r3, r5, r6, sl, ip, sp}
 7f0:	00000001 	andeq	r0, r0, r1
 7f4:	00000001 	andeq	r0, r0, r1
	...
 800:	00000001 	andeq	r0, r0, r1
 804:	00000001 	andeq	r0, r0, r1
 808:	00000001 	andeq	r0, r0, r1
 80c:	00000001 	andeq	r0, r0, r1
 810:	00000001 	andeq	r0, r0, r1
 814:	00000001 	andeq	r0, r0, r1
	...
 820:	00000001 	andeq	r0, r0, r1
 824:	00000001 	andeq	r0, r0, r1
 828:	00000001 	andeq	r0, r0, r1
 82c:	00000001 	andeq	r0, r0, r1
	...
 838:	08005434 	stmdaeq	r0, {r2, r4, r5, sl, ip, lr}
 83c:	0800548c 	stmdaeq	r0, {r2, r3, r7, sl, ip, lr}
 840:	08005490 	stmdaeq	r0, {r4, r7, sl, ip, lr}
 844:	080054b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, ip, lr}
	...
 850:	080054e0 	stmdaeq	r0, {r5, r6, r7, sl, ip, lr}
 854:	080054e2 	stmdaeq	r0, {r1, r5, r6, r7, sl, ip, lr}
 858:	080054e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, sl, ip, lr}
 85c:	080054e8 	stmdaeq	r0, {r3, r5, r6, r7, sl, ip, lr}
 860:	080054fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, ip, lr}
 864:	08005500 	stmdaeq	r0, {r8, sl, ip, lr}
 868:	0800551e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl, ip, lr}
 86c:	08005546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, lr}
 870:	0800561a 	stmdaeq	r0, {r1, r3, r4, r9, sl, ip, lr}
 874:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
 878:	080056b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, lr}
 87c:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
	...
 888:	08005546 	stmdaeq	r0, {r1, r2, r6, r8, sl, ip, lr}
 88c:	08005580 	stmdaeq	r0, {r7, r8, sl, ip, lr}
 890:	08005672 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, ip, lr}
 894:	080056b8 	stmdaeq	r0, {r3, r4, r5, r7, r9, sl, ip, lr}
 898:	080056be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r9, sl, ip, lr}
 89c:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
	...
 8a8:	0800346c 	stmdaeq	r0, {r2, r3, r5, r6, sl, ip, sp}
 8ac:	080034c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, sp}
 8b0:	080034c4 	stmdaeq	r0, {r2, r6, r7, sl, ip, sp}
 8b4:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
 8b8:	08005428 	stmdaeq	r0, {r3, r5, sl, ip, lr}
 8bc:	080054b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, sl, ip, lr}
 8c0:	080054b8 	stmdaeq	r0, {r3, r4, r5, r7, sl, ip, lr}
 8c4:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
	...
 8d0:	080056e0 	stmdaeq	r0, {r5, r6, r7, r9, sl, ip, lr}
 8d4:	08005784 	stmdaeq	r0, {r2, r7, r8, r9, sl, ip, lr}
 8d8:	08005786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip, lr}
 8dc:	0800578a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, ip, lr}
	...
 8e8:	08005864 	stmdaeq	r0, {r2, r5, r6, fp, ip, lr}
 8ec:	0800586e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, lr}
 8f0:	08005878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, lr}
 8f4:	0800587c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp, ip, lr}
 8f8:	08005880 	stmdaeq	r0, {r7, fp, ip, lr}
 8fc:	08005884 	stmdaeq	r0, {r2, r7, fp, ip, lr}
 900:	08005888 	stmdaeq	r0, {r3, r7, fp, ip, lr}
 904:	0800588a 	stmdaeq	r0, {r1, r3, r7, fp, ip, lr}
	...
 910:	0800586e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp, ip, lr}
 914:	08005878 	stmdaeq	r0, {r3, r4, r5, r6, fp, ip, lr}
 918:	0800588a 	stmdaeq	r0, {r1, r3, r7, fp, ip, lr}
 91c:	0800588e 	stmdaeq	r0, {r1, r2, r3, r7, fp, ip, lr}
 920:	08005892 	stmdaeq	r0, {r1, r4, r7, fp, ip, lr}
 924:	08005896 	stmdaeq	r0, {r1, r2, r4, r7, fp, ip, lr}
 928:	0800589a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip, lr}
 92c:	0800589c 	stmdaeq	r0, {r2, r3, r4, r7, fp, ip, lr}
	...
 938:	080058a0 	stmdaeq	r0, {r5, r7, fp, ip, lr}
 93c:	080058a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, lr}
 940:	080058ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, ip, lr}
 944:	080058b6 	stmdaeq	r0, {r1, r2, r4, r5, r7, fp, ip, lr}
 948:	080058ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, lr}
 94c:	080058bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, lr}
 950:	080058c4 	stmdaeq	r0, {r2, r6, r7, fp, ip, lr}
 954:	080058c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, lr}
 958:	080058d2 	stmdaeq	r0, {r1, r4, r6, r7, fp, ip, lr}
 95c:	080058d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, ip, lr}
 960:	080058de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, ip, lr}
 964:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
	...
 970:	080058a4 	stmdaeq	r0, {r2, r5, r7, fp, ip, lr}
 974:	080058a6 	stmdaeq	r0, {r1, r2, r5, r7, fp, ip, lr}
 978:	080058aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, ip, lr}
 97c:	080058ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, ip, lr}
 980:	080058b8 	stmdaeq	r0, {r3, r4, r5, r7, fp, ip, lr}
 984:	080058ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip, lr}
 988:	080058cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, ip, lr}
 98c:	080058ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip, lr}
 990:	080058d8 	stmdaeq	r0, {r3, r4, r6, r7, fp, ip, lr}
 994:	080058dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, lr}
 998:	080058ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, fp, ip, lr}
 99c:	080058ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, lr}
	...
 9a8:	080058bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, fp, ip, lr}
 9ac:	080058be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, fp, ip, lr}
 9b0:	080058c8 	stmdaeq	r0, {r3, r6, r7, fp, ip, lr}
 9b4:	080058cc 	stmdaeq	r0, {r2, r3, r6, r7, fp, ip, lr}
 9b8:	080058dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, fp, ip, lr}
 9bc:	080058de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, fp, ip, lr}
 9c0:	080058e0 	stmdaeq	r0, {r5, r6, r7, fp, ip, lr}
 9c4:	080058e2 	stmdaeq	r0, {r1, r5, r6, r7, fp, ip, lr}
 9c8:	080058ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp, ip, lr}
 9cc:	080058f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip, lr}
	...
 9d8:	08005908 	stmdaeq	r0, {r3, r8, fp, ip, lr}
 9dc:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
 9e0:	08005974 	stmdaeq	r0, {r2, r4, r5, r6, r8, fp, ip, lr}
 9e4:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
	...
 9f0:	08005910 	stmdaeq	r0, {r4, r8, fp, ip, lr}
 9f4:	0800591a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, lr}
 9f8:	080059ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp, ip, lr}
 9fc:	080059d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp, ip, lr}
 a00:	080059d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp, ip, lr}
 a04:	080059da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
 a08:	080059e0 	stmdaeq	r0, {r5, r6, r7, r8, fp, ip, lr}
 a0c:	080059e2 	stmdaeq	r0, {r1, r5, r6, r7, r8, fp, ip, lr}
	...
 a18:	0800591a 	stmdaeq	r0, {r1, r3, r4, r8, fp, ip, lr}
 a1c:	08005924 	stmdaeq	r0, {r2, r5, r8, fp, ip, lr}
 a20:	080059f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, lr}
 a24:	080059f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, fp, ip, lr}
 a28:	080059fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 a2c:	08005a00 	stmdaeq	r0, {r9, fp, ip, lr}
 a30:	08005a12 	stmdaeq	r0, {r1, r4, r9, fp, ip, lr}
 a34:	08005a14 	stmdaeq	r0, {r2, r4, r9, fp, ip, lr}
	...
 a40:	0800597c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, fp, ip, lr}
 a44:	08005984 	stmdaeq	r0, {r2, r7, r8, fp, ip, lr}
 a48:	08005986 	stmdaeq	r0, {r1, r2, r7, r8, fp, ip, lr}
 a4c:	0800598a 	stmdaeq	r0, {r1, r3, r7, r8, fp, ip, lr}
 a50:	0800598e 	stmdaeq	r0, {r1, r2, r3, r7, r8, fp, ip, lr}
 a54:	08005992 	stmdaeq	r0, {r1, r4, r7, r8, fp, ip, lr}
	...
 a60:	080059e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8, fp, ip, lr}
 a64:	080059ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, fp, ip, lr}
 a68:	080059f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, fp, ip, lr}
 a6c:	080059f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, fp, ip, lr}
 a70:	08005a00 	stmdaeq	r0, {r9, fp, ip, lr}
 a74:	08005a02 	stmdaeq	r0, {r1, r9, fp, ip, lr}
 a78:	08005a0a 	stmdaeq	r0, {r1, r3, r9, fp, ip, lr}
 a7c:	08005a0e 	stmdaeq	r0, {r1, r2, r3, r9, fp, ip, lr}
 a80:	08005a14 	stmdaeq	r0, {r2, r4, r9, fp, ip, lr}
 a84:	08005a18 	stmdaeq	r0, {r3, r4, r9, fp, ip, lr}
 a88:	08005a1a 	stmdaeq	r0, {r1, r3, r4, r9, fp, ip, lr}
 a8c:	08005a20 	stmdaeq	r0, {r5, r9, fp, ip, lr}
	...
 a98:	08005b88 	stmdaeq	r0, {r3, r7, r8, r9, fp, ip, lr}
 a9c:	08005b92 	stmdaeq	r0, {r1, r4, r7, r8, r9, fp, ip, lr}
 aa0:	08005b96 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, fp, ip, lr}
 aa4:	08005bb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, fp, ip, lr}
	...
 ab0:	08005c46 	stmdaeq	r0, {r1, r2, r6, sl, fp, ip, lr}
 ab4:	08005c58 	stmdaeq	r0, {r3, r4, r6, sl, fp, ip, lr}
 ab8:	08005c5a 	stmdaeq	r0, {r1, r3, r4, r6, sl, fp, ip, lr}
 abc:	08005cc0 	stmdaeq	r0, {r6, r7, sl, fp, ip, lr}
 ac0:	08005cc2 	stmdaeq	r0, {r1, r6, r7, sl, fp, ip, lr}
 ac4:	08005cc6 	stmdaeq	r0, {r1, r2, r6, r7, sl, fp, ip, lr}
	...
 ad0:	08005d02 	stmdaeq	r0, {r1, r8, sl, fp, ip, lr}
 ad4:	08005d72 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, fp, ip, lr}
 ad8:	08005d76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, sl, fp, ip, lr}
 adc:	08005d98 	stmdaeq	r0, {r3, r4, r7, r8, sl, fp, ip, lr}
 ae0:	08005d9c 	stmdaeq	r0, {r2, r3, r4, r7, r8, sl, fp, ip, lr}
 ae4:	08005d9e 	stmdaeq	r0, {r1, r2, r3, r4, r7, r8, sl, fp, ip, lr}
 ae8:	08005da8 	stmdaeq	r0, {r3, r5, r7, r8, sl, fp, ip, lr}
 aec:	08005dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp, ip, lr}
 af0:	08005dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp, ip, lr}
 af4:	08005dc4 	stmdaeq	r0, {r2, r6, r7, r8, sl, fp, ip, lr}
	...
 b00:	08005dea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 b04:	08005e6c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
 b08:	08005e6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl, fp, ip, lr}
 b0c:	08005e72 	stmdaeq	r0, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
 b10:	08005e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp, ip, lr}
 b14:	08005e78 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, fp, ip, lr}
	...
 b20:	080056d0 	stmdaeq	r0, {r4, r6, r7, r9, sl, ip, lr}
 b24:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
 b28:	08005b64 	stmdaeq	r0, {r2, r5, r6, r8, r9, fp, ip, lr}
 b2c:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 b30:	08005bec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 b34:	08005e82 	stmdaeq	r0, {r1, r7, r9, sl, fp, ip, lr}
	...
 b40:	00000001 	andeq	r0, r0, r1
 b44:	00000001 	andeq	r0, r0, r1
 b48:	00000001 	andeq	r0, r0, r1
 b4c:	00000001 	andeq	r0, r0, r1
 b50:	00000001 	andeq	r0, r0, r1
 b54:	00000001 	andeq	r0, r0, r1
	...
 b60:	08005e84 	stmdaeq	r0, {r2, r7, r9, sl, fp, ip, lr}
 b64:	08005e8e 	stmdaeq	r0, {r1, r2, r3, r7, r9, sl, fp, ip, lr}
 b68:	08005e90 	stmdaeq	r0, {r4, r7, r9, sl, fp, ip, lr}
 b6c:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
 b70:	08005ea0 	stmdaeq	r0, {r5, r7, r9, sl, fp, ip, lr}
 b74:	08005f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 b78:	08005f76 	stmdaeq	r0, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 b7c:	08005fb6 	stmdaeq	r0, {r1, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
	...
 b88:	08005fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 b8c:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b90:	08005ffc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 b94:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
	...
 ba0:	00000001 	andeq	r0, r0, r1
 ba4:	00000001 	andeq	r0, r0, r1
 ba8:	00000001 	andeq	r0, r0, r1
 bac:	00000001 	andeq	r0, r0, r1
	...
 bb8:	080062d2 	stmdaeq	r0, {r1, r4, r6, r7, r9, sp, lr}
 bbc:	080062d4 	stmdaeq	r0, {r2, r4, r6, r7, r9, sp, lr}
 bc0:	080062e4 	stmdaeq	r0, {r2, r5, r6, r7, r9, sp, lr}
 bc4:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
	...
 bd0:	00000001 	andeq	r0, r0, r1
 bd4:	00000001 	andeq	r0, r0, r1
 bd8:	00000001 	andeq	r0, r0, r1
 bdc:	00000001 	andeq	r0, r0, r1
	...
 be8:	00000001 	andeq	r0, r0, r1
 bec:	00000001 	andeq	r0, r0, r1
 bf0:	00000001 	andeq	r0, r0, r1
 bf4:	00000001 	andeq	r0, r0, r1
	...
 c00:	00000001 	andeq	r0, r0, r1
 c04:	00000001 	andeq	r0, r0, r1
 c08:	00000001 	andeq	r0, r0, r1
 c0c:	00000001 	andeq	r0, r0, r1
 c10:	00000001 	andeq	r0, r0, r1
 c14:	00000001 	andeq	r0, r0, r1
	...
 c20:	00000001 	andeq	r0, r0, r1
 c24:	00000001 	andeq	r0, r0, r1
 c28:	00000001 	andeq	r0, r0, r1
 c2c:	00000001 	andeq	r0, r0, r1
	...
 c38:	00000001 	andeq	r0, r0, r1
 c3c:	00000001 	andeq	r0, r0, r1
 c40:	00000001 	andeq	r0, r0, r1
 c44:	00000001 	andeq	r0, r0, r1
	...
 c50:	00000001 	andeq	r0, r0, r1
 c54:	00000001 	andeq	r0, r0, r1
 c58:	00000001 	andeq	r0, r0, r1
 c5c:	00000001 	andeq	r0, r0, r1
 c60:	00000001 	andeq	r0, r0, r1
 c64:	00000001 	andeq	r0, r0, r1
 c68:	00000001 	andeq	r0, r0, r1
 c6c:	00000001 	andeq	r0, r0, r1
 c70:	00000001 	andeq	r0, r0, r1
 c74:	00000001 	andeq	r0, r0, r1
 c78:	00000001 	andeq	r0, r0, r1
 c7c:	00000001 	andeq	r0, r0, r1
 c80:	00000001 	andeq	r0, r0, r1
 c84:	00000001 	andeq	r0, r0, r1
 c88:	00000001 	andeq	r0, r0, r1
 c8c:	00000001 	andeq	r0, r0, r1
 c90:	00000001 	andeq	r0, r0, r1
 c94:	00000001 	andeq	r0, r0, r1
 c98:	00000001 	andeq	r0, r0, r1
 c9c:	00000001 	andeq	r0, r0, r1
 ca0:	00000001 	andeq	r0, r0, r1
 ca4:	00000001 	andeq	r0, r0, r1
 ca8:	00000001 	andeq	r0, r0, r1
 cac:	00000001 	andeq	r0, r0, r1
 cb0:	00000001 	andeq	r0, r0, r1
 cb4:	00000001 	andeq	r0, r0, r1
 cb8:	080061d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, sp, lr}
 cbc:	08006202 	stmdaeq	r0, {r1, r9, sp, lr}
 cc0:	00000001 	andeq	r0, r0, r1
 cc4:	00000001 	andeq	r0, r0, r1
 cc8:	00000001 	andeq	r0, r0, r1
 ccc:	00000001 	andeq	r0, r0, r1
 cd0:	00000001 	andeq	r0, r0, r1
 cd4:	00000001 	andeq	r0, r0, r1
 cd8:	00000001 	andeq	r0, r0, r1
 cdc:	00000001 	andeq	r0, r0, r1
 ce0:	00000001 	andeq	r0, r0, r1
 ce4:	00000001 	andeq	r0, r0, r1
 ce8:	08006202 	stmdaeq	r0, {r1, r9, sp, lr}
 cec:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
 cf0:	00000001 	andeq	r0, r0, r1
 cf4:	00000001 	andeq	r0, r0, r1
 cf8:	00000001 	andeq	r0, r0, r1
 cfc:	00000001 	andeq	r0, r0, r1
 d00:	08006220 	stmdaeq	r0, {r5, r9, sp, lr}
 d04:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
 d08:	00000001 	andeq	r0, r0, r1
 d0c:	00000001 	andeq	r0, r0, r1
 d10:	00000001 	andeq	r0, r0, r1
 d14:	00000001 	andeq	r0, r0, r1
 d18:	00000001 	andeq	r0, r0, r1
 d1c:	00000001 	andeq	r0, r0, r1
 d20:	00000001 	andeq	r0, r0, r1
 d24:	00000001 	andeq	r0, r0, r1
 d28:	00000001 	andeq	r0, r0, r1
 d2c:	00000001 	andeq	r0, r0, r1
 d30:	00000001 	andeq	r0, r0, r1
 d34:	00000001 	andeq	r0, r0, r1
 d38:	00000001 	andeq	r0, r0, r1
 d3c:	00000001 	andeq	r0, r0, r1
 d40:	00000001 	andeq	r0, r0, r1
 d44:	00000001 	andeq	r0, r0, r1
 d48:	00000001 	andeq	r0, r0, r1
 d4c:	00000001 	andeq	r0, r0, r1
 d50:	0800623c 	stmdaeq	r0, {r2, r3, r4, r5, r9, sp, lr}
 d54:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
 d58:	0800625c 	stmdaeq	r0, {r2, r3, r4, r6, r9, sp, lr}
 d5c:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
 d60:	00000001 	andeq	r0, r0, r1
 d64:	00000001 	andeq	r0, r0, r1
 d68:	00000001 	andeq	r0, r0, r1
 d6c:	00000001 	andeq	r0, r0, r1
 d70:	00000001 	andeq	r0, r0, r1
 d74:	00000001 	andeq	r0, r0, r1
 d78:	00000001 	andeq	r0, r0, r1
 d7c:	00000001 	andeq	r0, r0, r1
 d80:	0800627c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r9, sp, lr}
 d84:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 d88:	08006298 	stmdaeq	r0, {r3, r4, r7, r9, sp, lr}
 d8c:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 d90:	080062b4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sp, lr}
 d94:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
 d98:	00000001 	andeq	r0, r0, r1
 d9c:	00000001 	andeq	r0, r0, r1
 da0:	080062d0 	stmdaeq	r0, {r4, r6, r7, r9, sp, lr}
 da4:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
 da8:	00000001 	andeq	r0, r0, r1
 dac:	00000001 	andeq	r0, r0, r1
 db0:	00000001 	andeq	r0, r0, r1
 db4:	00000001 	andeq	r0, r0, r1
 db8:	00000001 	andeq	r0, r0, r1
 dbc:	00000001 	andeq	r0, r0, r1
 dc0:	00000001 	andeq	r0, r0, r1
 dc4:	00000001 	andeq	r0, r0, r1
 dc8:	00000001 	andeq	r0, r0, r1
 dcc:	00000001 	andeq	r0, r0, r1
 dd0:	00000001 	andeq	r0, r0, r1
 dd4:	00000001 	andeq	r0, r0, r1
 dd8:	00000001 	andeq	r0, r0, r1
 ddc:	00000001 	andeq	r0, r0, r1
 de0:	00000001 	andeq	r0, r0, r1
 de4:	00000001 	andeq	r0, r0, r1
 de8:	00000001 	andeq	r0, r0, r1
 dec:	00000001 	andeq	r0, r0, r1
 df0:	00000001 	andeq	r0, r0, r1
 df4:	00000001 	andeq	r0, r0, r1
 df8:	00000001 	andeq	r0, r0, r1
 dfc:	00000001 	andeq	r0, r0, r1
 e00:	00000001 	andeq	r0, r0, r1
 e04:	00000001 	andeq	r0, r0, r1
 e08:	00000001 	andeq	r0, r0, r1
 e0c:	00000001 	andeq	r0, r0, r1
 e10:	00000001 	andeq	r0, r0, r1
 e14:	00000001 	andeq	r0, r0, r1
 e18:	00000001 	andeq	r0, r0, r1
 e1c:	00000001 	andeq	r0, r0, r1
 e20:	00000001 	andeq	r0, r0, r1
 e24:	00000001 	andeq	r0, r0, r1
	...
 e30:	08006310 	stmdaeq	r0, {r4, r8, r9, sp, lr}
 e34:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
 e38:	00000001 	andeq	r0, r0, r1
 e3c:	00000001 	andeq	r0, r0, r1
	...
 e48:	08006464 	stmdaeq	r0, {r2, r5, r6, sl, sp, lr}
 e4c:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
	...
 e58:	080067a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, sl, sp, lr}
 e5c:	080067ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, sl, sp, lr}
 e60:	080067b0 	stmdaeq	r0, {r4, r5, r7, r8, r9, sl, sp, lr}
 e64:	080067b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, r9, sl, sp, lr}
 e68:	080067b4 	stmdaeq	r0, {r2, r4, r5, r7, r8, r9, sl, sp, lr}
 e6c:	080067c4 	stmdaeq	r0, {r2, r6, r7, r8, r9, sl, sp, lr}
	...
 e78:	0800697a 	stmdaeq	r0, {r1, r3, r4, r5, r6, r8, fp, sp, lr}
 e7c:	08006b24 	stmdaeq	r0, {r2, r5, r8, r9, fp, sp, lr}
 e80:	08006b2c 	stmdaeq	r0, {r2, r3, r5, r8, r9, fp, sp, lr}
 e84:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
	...
 e90:	0800649c 	stmdaeq	r0, {r2, r3, r4, r7, sl, sp, lr}
 e94:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 e98:	080064c0 	stmdaeq	r0, {r6, r7, sl, sp, lr}
 e9c:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
 ea0:	080064e4 	stmdaeq	r0, {r2, r5, r6, r7, sl, sp, lr}
 ea4:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 ea8:	08006574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 eac:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
 eb0:	0800661c 	stmdaeq	r0, {r2, r3, r4, r9, sl, sp, lr}
 eb4:	08006654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, lr}
 eb8:	08006654 	stmdaeq	r0, {r2, r4, r6, r9, sl, sp, lr}
 ebc:	0800669c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp, lr}
 ec0:	0800669c 	stmdaeq	r0, {r2, r3, r4, r7, r9, sl, sp, lr}
 ec4:	0800676c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, sp, lr}
 ec8:	0800676c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, sp, lr}
 ecc:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
 ed0:	080067f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl, sp, lr}
 ed4:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
 ed8:	08006814 	stmdaeq	r0, {r2, r4, fp, sp, lr}
 edc:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
 ee0:	08006830 	stmdaeq	r0, {r4, r5, fp, sp, lr}
 ee4:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 ee8:	08006870 	stmdaeq	r0, {r4, r5, r6, fp, sp, lr}
 eec:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
 ef0:	08006b4c 	stmdaeq	r0, {r2, r3, r6, r8, r9, fp, sp, lr}
 ef4:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
 ef8:	08006c14 	stmdaeq	r0, {r2, r4, sl, fp, sp, lr}
 efc:	08006c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, sp, lr}
 f00:	08006c4c 	stmdaeq	r0, {r2, r3, r6, sl, fp, sp, lr}
 f04:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
 f08:	00000001 	andeq	r0, r0, r1
 f0c:	00000001 	andeq	r0, r0, r1
	...
 f18:	08006ca8 	stmdaeq	r0, {r3, r5, r7, sl, fp, sp, lr}
 f1c:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
 f20:	08006cd8 	stmdaeq	r0, {r3, r4, r6, r7, sl, fp, sp, lr}
 f24:	08006cfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
	...
