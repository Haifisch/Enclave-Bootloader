   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.startup.main,"ax",%progbits
  19              		.align	1
  20              		.global	main
  21              		.thumb
  22              		.thumb_func
  24              	main:
  25              	.LFB0:
  26              		.file 1 "main.c"
   1:main.c        **** /* *****************************************************************************
   2:main.c        ****  * The MIT License
   3:main.c        ****  *
   4:main.c        ****  * Copyright (c) 2010 LeafLabs LLC.
   5:main.c        ****  *
   6:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   7:main.c        ****  * of this software and associated documentation files (the "Software"), to deal
   8:main.c        ****  * in the Software without restriction, including without limitation the rights
   9:main.c        ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:main.c        ****  * copies of the Software, and to permit persons to whom the Software is
  11:main.c        ****  * furnished to do so, subject to the following conditions:
  12:main.c        ****  *
  13:main.c        ****  * The above copyright notice and this permission notice shall be included in
  14:main.c        ****  * all copies or substantial portions of the Software.
  15:main.c        ****  *
  16:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:main.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:main.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:main.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:main.c        ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  22:main.c        ****  * THE SOFTWARE.
  23:main.c        ****  * ****************************************************************************/
  24:main.c        **** 
  25:main.c        **** /**
  26:main.c        ****  *  @file main.c
  27:main.c        ****  *
  28:main.c        ****  *  @brief main loop and calling any hardware init stuff. timing hacks for EEPROM
  29:main.c        ****  *  writes not to block usb interrupts. logic to handle 2 second timeout then
  30:main.c        ****  *  jump to user code.
  31:main.c        ****  *
  32:main.c        ****  */
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdint.h>
  35:main.c        **** #include <string.h>
  36:main.c        **** #include <limits.h>
  37:main.c        **** #include <unistd.h>
  38:main.c        **** #include <errno.h>
  39:main.c        **** #include <stdarg.h>
  40:main.c        **** 
  41:main.c        **** #include "common.h"
  42:main.c        **** #include "dfu.h"
  43:main.c        **** #include "image.h"
  44:main.c        **** #include "sha256.h"
  45:main.c        **** 
  46:main.c        **** #define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias regi
  47:main.c        **** 
  48:main.c        **** #define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band r
  49:main.c        **** 
  50:main.c        **** #define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address */
  51:main.c        **** 
  52:main.c        **** /*!< Peripheral memory map */
  53:main.c        **** #define APB1PERIPH_BASE       PERIPH_BASE
  54:main.c        **** #define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)
  55:main.c        **** 
  56:main.c        **** #define USART1_BASE           (APB2PERIPH_BASE + 0x3800)
  57:main.c        **** #define USART1              ((USART_TypeDef *) USART1_BASE)
  58:main.c        **** 
  59:main.c        **** extern volatile dfuUploadTypes_t userUploadType;
  60:main.c        **** 
  61:main.c        **** int main() 
  62:main.c        **** {
  27              		.loc 1 62 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 85B0     		sub	sp, sp, #20
  38              		.cfi_def_cfa_offset 32
  63:main.c        **** 	bool no_user_jump = FALSE;
  64:main.c        **** 	bool dont_wait=FALSE;
  65:main.c        **** 	
  66:main.c        ****     systemReset(); // peripherals but not PC
  39              		.loc 1 66 0
  40 0004 FFF7FEFF 		bl	systemReset
  41              	.LVL1:
  67:main.c        ****     setupCLK();
  42              		.loc 1 67 0
  43 0008 FFF7FEFF 		bl	setupCLK
  44              	.LVL2:
  68:main.c        ****     setupLEDAndButton();
  45              		.loc 1 68 0
  46 000c FFF7FEFF 		bl	setupLEDAndButton
  47              	.LVL3:
  69:main.c        ****     setupUSB();
  48              		.loc 1 69 0
  49 0010 FFF7FEFF 		bl	setupUSB
  50              	.LVL4:
  70:main.c        ****     setupFLASH();
  51              		.loc 1 70 0
  52 0014 FFF7FEFF 		bl	setupFLASH
  53              	.LVL5:
  71:main.c        ****     uartInit();
  54              		.loc 1 71 0
  55 0018 FFF7FEFF 		bl	uartInit
  56              	.LVL6:
  72:main.c        ****     usbReset();
  57              		.loc 1 72 0
  58 001c FFF7FEFF 		bl	usbReset
  59              	.LVL7:
  73:main.c        **** 	uart_printf("\nBootloader init...\n");
  60              		.loc 1 73 0
  61 0020 2B48     		ldr	r0, .L18
  62 0022 FFF7FEFF 		bl	uart_printf
  63              	.LVL8:
  74:main.c        **** 
  75:main.c        ****     if (readPin(GPIOB, 15) == 0x0)
  64              		.loc 1 75 0
  65 0026 0F21     		movs	r1, #15
  66 0028 2A48     		ldr	r0, .L18+4
  67 002a FFF7FEFF 		bl	readPin
  68              	.LVL9:
  69 002e 0446     		mov	r4, r0
  70              	.LVL10:
  76:main.c        **** 	{
  77:main.c        **** 		no_user_jump = TRUE;
  78:main.c        **** 	} 
  79:main.c        **** 
  80:main.c        **** 	uart_printf("checking chain...\n");
  71              		.loc 1 80 0
  72 0030 2948     		ldr	r0, .L18+8
  73              	.LVL11:
  74 0032 FFF7FEFF 		bl	uart_printf
  75              	.LVL12:
  81:main.c        **** 	ImageObjectHandle imageHandle;
  82:main.c        **** 
  83:main.c        ****     int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
  76              		.loc 1 83 0
  77 0036 2949     		ldr	r1, .L18+12
  78 0038 0022     		movs	r2, #0
  79 003a 03A8     		add	r0, sp, #12
  80 003c FFF7FEFF 		bl	imageCheckFromAddress
  81              	.LVL13:
  82 0040 0546     		mov	r5, r0
  83              	.LVL14:
  84:main.c        ****     
  85:main.c        ****     debug_print("image check ret: %X\n", ret);
  84              		.loc 1 85 0
  85 0042 2946     		mov	r1, r5
  86 0044 2648     		ldr	r0, .L18+16
  87              	.LVL15:
  86:main.c        **** 	switch (ret)
  88              		.loc 1 86 0
  89 0046 023D     		subs	r5, r5, #2
  85:main.c        ****     debug_print("image check ret: %X\n", ret);
  90              		.loc 1 85 0
  91 0048 FFF7FEFF 		bl	uart_printf
  92              	.LVL16:
  93              		.loc 1 86 0
  94 004c 032D     		cmp	r5, #3
  95 004e 03D8     		bhi	.L2
  96 0050 DFE805F0 		tbb	[pc, r5]
  97              	.L4:
  98 0054 0E       		.byte	(.L3-.L4)/2
  99 0055 07       		.byte	(.L5-.L4)/2
 100 0056 0C       		.byte	(.L6-.L4)/2
 101 0057 10       		.byte	(.L7-.L4)/2
 102              		.p2align 1
 103              	.L2:
  63:main.c        **** 	bool no_user_jump = FALSE;
 104              		.loc 1 63 0
 105 0058 D4F10104 		rsbs	r4, r4, #1
 106              	.LVL17:
 107 005c 38BF     		it	cc
 108 005e 0024     		movcc	r4, #0
 109 0060 0CE0     		b	.L8
 110              	.LVL18:
 111              	.L5:
  87:main.c        **** 	{
  88:main.c        **** 		case kImageImageIsTrusted:
  89:main.c        **** 			uart_printf("Boot OK\n");
 112              		.loc 1 89 0
 113 0062 2048     		ldr	r0, .L18+20
 114 0064 FFF7FEFF 		bl	uart_printf
 115              	.LVL19:
  90:main.c        **** 			no_user_jump = FALSE;
 116              		.loc 1 90 0
 117 0068 0024     		movs	r4, #0
  91:main.c        **** 			break;
 118              		.loc 1 91 0
 119 006a 07E0     		b	.L8
 120              	.LVL20:
 121              	.L6:
  92:main.c        **** 
  93:main.c        **** 		case kImageImageMissingMagic:
  94:main.c        **** 			uart_printf("Firmware missing... waiting in DFU\n");
 122              		.loc 1 94 0
 123 006c 1E48     		ldr	r0, .L18+24
 124 006e 02E0     		b	.L15
 125              	.L3:
  95:main.c        **** 			no_user_jump = TRUE;
  96:main.c        **** 			break;
  97:main.c        **** 
  98:main.c        **** 		case kImageImageRejectSignature:
  99:main.c        **** 			uart_printf("Signature unverified... waiting in DFU\n");
 126              		.loc 1 99 0
 127 0070 1E48     		ldr	r0, .L18+28
 128 0072 00E0     		b	.L15
 129              	.L7:
 100:main.c        **** 			no_user_jump = TRUE;
 101:main.c        **** 			break;
 102:main.c        **** 
 103:main.c        **** 		case kImageImageHashCalcFailed:
 104:main.c        **** 			uart_printf("Hash calculation failed... waiting in DFU\n");
 130              		.loc 1 104 0
 131 0074 1E48     		ldr	r0, .L18+32
 132              	.L15:
 133 0076 FFF7FEFF 		bl	uart_printf
 134              	.LVL21:
 105:main.c        **** 			no_user_jump = TRUE;
 135              		.loc 1 105 0
 136 007a 0124     		movs	r4, #1
 137              	.LVL22:
 138              	.L8:
 106:main.c        **** 			break;
 107:main.c        **** 			
 108:main.c        **** 		default:
 109:main.c        **** 			break;
 110:main.c        **** 	}
 111:main.c        **** 	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 139              		.loc 1 111 0
 140 007c 0023     		movs	r3, #0
 141 007e 0093     		str	r3, [sp]
 142 0080 1C48     		ldr	r0, .L18+36
 143 0082 0D21     		movs	r1, #13
 144 0084 0522     		movs	r2, #5
 145 0086 4FF4A023 		mov	r3, #327680
 146 008a FFF7FEFF 		bl	strobePin
 147              	.LVL23:
 112:main.c        **** 
 113:main.c        **** 	int delay_count = 0;
 114:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 148              		.loc 1 114 0
 149 008e 0025     		movs	r5, #0
 150              	.LVL24:
 151              	.L9:
 152              		.loc 1 114 0 is_stmt 0 discriminator 1
 153 0090 052D     		cmp	r5, #5
 154 0092 12DC     		bgt	.L17
 155              	.L11:
 115:main.c        **** 	{
 116:main.c        **** 
 117:main.c        **** 		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 156              		.loc 1 117 0 is_stmt 1
 157 0094 0023     		movs	r3, #0
 158 0096 0093     		str	r3, [sp]
 159 0098 1648     		ldr	r0, .L18+36
 160 009a 0D21     		movs	r1, #13
 161 009c 0122     		movs	r2, #1
 162 009e 4FF48013 		mov	r3, #1048576
 163 00a2 FFF7FEFF 		bl	strobePin
 164              	.LVL25:
 118:main.c        **** 
 119:main.c        **** 		if (dfuUploadStarted()) 
 165              		.loc 1 119 0
 166 00a6 FFF7FEFF 		bl	dfuUploadStarted
 167              	.LVL26:
 168 00aa 20B1     		cbz	r0, .L10
 120:main.c        **** 		{
 121:main.c        **** 			uart_printf("DFU finished upload\n");
 169              		.loc 1 121 0
 170 00ac 1248     		ldr	r0, .L18+40
 171 00ae FFF7FEFF 		bl	uart_printf
 172              	.LVL27:
 122:main.c        **** 			dfuFinishUpload(); // systemHardReset from DFU once done
 173              		.loc 1 122 0
 174 00b2 FFF7FEFF 		bl	dfuFinishUpload
 175              	.LVL28:
 176              	.L10:
 177 00b6 0135     		adds	r5, r5, #1
 178              	.LVL29:
 179 00b8 EAE7     		b	.L9
 180              	.LVL30:
 181              	.L17:
 114:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 182              		.loc 1 114 0 discriminator 2
 183 00ba 002C     		cmp	r4, #0
 184 00bc EAD1     		bne	.L11
 123:main.c        **** 		}
 124:main.c        **** 	}
 125:main.c        **** 
 126:main.c        **** 	if (no_user_jump == FALSE)
 127:main.c        **** 	{
 128:main.c        **** 		uart_printf("Jumping to OS.\n");
 185              		.loc 1 128 0
 186 00be 0F48     		ldr	r0, .L18+44
 187 00c0 FFF7FEFF 		bl	uart_printf
 188              	.LVL31:
 129:main.c        **** 		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 189              		.loc 1 129 0
 190 00c4 0E48     		ldr	r0, .L18+48
 191 00c6 FFF7FEFF 		bl	jumpToUser
 192              	.LVL32:
 130:main.c        **** 	}
 131:main.c        **** 	
 132:main.c        **** 	return 0;// Added to please the compiler
 133:main.c        **** }...
 193              		.loc 1 133 0
 194 00ca 2046     		mov	r0, r4
 195 00cc 05B0     		add	sp, sp, #20
 196              		@ sp needed
 197 00ce 30BD     		pop	{r4, r5, pc}
 198              	.LVL33:
 199              	.L19:
 200              		.align	2
 201              	.L18:
 202 00d0 00000000 		.word	.LC0
 203 00d4 000C0140 		.word	1073810432
 204 00d8 15000000 		.word	.LC1
 205 00dc 00800008 		.word	134250496
 206 00e0 28000000 		.word	.LC2
 207 00e4 3D000000 		.word	.LC3
 208 00e8 46000000 		.word	.LC4
 209 00ec 6A000000 		.word	.LC5
 210 00f0 92000000 		.word	.LC6
 211 00f4 00100140 		.word	1073811456
 212 00f8 BD000000 		.word	.LC7
 213 00fc D2000000 		.word	.LC8
 214 0100 84800008 		.word	134250628
 215              		.cfi_endproc
 216              	.LFE0:
 218              		.comm	wTransferSize,4,4
 219              		.section	.rodata.str1.1,"aMS",%progbits,1
 220              	.LC0:
 221 0000 0A426F6F 		.ascii	"\012Bootloader init...\012\000"
 221      746C6F61 
 221      64657220 
 221      696E6974 
 221      2E2E2E0A 
 222              	.LC1:
 223 0015 63686563 		.ascii	"checking chain...\012\000"
 223      6B696E67 
 223      20636861 
 223      696E2E2E 
 223      2E0A00
 224              	.LC2:
 225 0028 696D6167 		.ascii	"image check ret: %X\012\000"
 225      65206368 
 225      65636B20 
 225      7265743A 
 225      2025580A 
 226              	.LC3:
 227 003d 426F6F74 		.ascii	"Boot OK\012\000"
 227      204F4B0A 
 227      00
 228              	.LC4:
 229 0046 4669726D 		.ascii	"Firmware missing... waiting in DFU\012\000"
 229      77617265 
 229      206D6973 
 229      73696E67 
 229      2E2E2E20 
 230              	.LC5:
 231 006a 5369676E 		.ascii	"Signature unverified... waiting in DFU\012\000"
 231      61747572 
 231      6520756E 
 231      76657269 
 231      66696564 
 232              	.LC6:
 233 0092 48617368 		.ascii	"Hash calculation failed... waiting in DFU\012\000"
 233      2063616C 
 233      63756C61 
 233      74696F6E 
 233      20666169 
 234              	.LC7:
 235 00bd 44465520 		.ascii	"DFU finished upload\012\000"
 235      66696E69 
 235      73686564 
 235      2075706C 
 235      6F61640A 
 236              	.LC8:
 237 00d2 4A756D70 		.ascii	"Jumping to OS.\012\000"
 237      696E6720 
 237      746F204F 
 237      532E0A00 
 238              		.text
 239              	.Letext0:
 240              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\lib\\gcc\\arm-none-eabi\\4.8
 241              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\mach
 242              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\stdi
 243              		.file 5 "./stm32_lib/stm32f10x_type.h"
 244              		.file 6 "image.h"
 245              		.file 7 "hardware.h"
 246              		.file 8 "usb.h"
 247              		.file 9 "dfu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\haifisch\AppData\Local\Temp\cc2ThMie.s:19     .text.startup.main:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\cc2ThMie.s:24     .text.startup.main:00000000 main
C:\Users\haifisch\AppData\Local\Temp\cc2ThMie.s:98     .text.startup.main:00000054 $d
C:\Users\haifisch\AppData\Local\Temp\cc2ThMie.s:102    .text.startup.main:00000058 $t
C:\Users\haifisch\AppData\Local\Temp\cc2ThMie.s:202    .text.startup.main:000000d0 $d
                            *COM*:00000004 wTransferSize
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
systemReset
setupCLK
setupLEDAndButton
setupUSB
setupFLASH
uartInit
usbReset
uart_printf
readPin
imageCheckFromAddress
strobePin
dfuUploadStarted
dfuFinishUpload
jumpToUser
