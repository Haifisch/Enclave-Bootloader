   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.print_hash,"ax",%progbits
  19              		.align	1
  20              		.global	print_hash
  21              		.thumb
  22              		.thumb_func
  24              	print_hash:
  25              	.LFB0:
  26              		.file 1 "main.c"
   1:main.c        **** /* *****************************************************************************
   2:main.c        ****  * The MIT License
   3:main.c        ****  *
   4:main.c        ****  * Copyright (c) 2010 LeafLabs LLC.
   5:main.c        ****  *
   6:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   7:main.c        ****  * of this software and associated documentation files (the "Software"), to deal
   8:main.c        ****  * in the Software without restriction, including without limitation the rights
   9:main.c        ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:main.c        ****  * copies of the Software, and to permit persons to whom the Software is
  11:main.c        ****  * furnished to do so, subject to the following conditions:
  12:main.c        ****  *
  13:main.c        ****  * The above copyright notice and this permission notice shall be included in
  14:main.c        ****  * all copies or substantial portions of the Software.
  15:main.c        ****  *
  16:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:main.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:main.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:main.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:main.c        ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  22:main.c        ****  * THE SOFTWARE.
  23:main.c        ****  * ****************************************************************************/
  24:main.c        **** 
  25:main.c        **** /**
  26:main.c        ****  *  @file main.c
  27:main.c        ****  *
  28:main.c        ****  *  @brief main loop and calling any hardware init stuff. timing hacks for EEPROM
  29:main.c        ****  *  writes not to block usb interrupts. logic to handle 2 second timeout then
  30:main.c        ****  *  jump to user code.
  31:main.c        ****  *
  32:main.c        ****  */
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdint.h>
  35:main.c        **** #include <string.h>
  36:main.c        **** #include <limits.h>
  37:main.c        **** #include <unistd.h>
  38:main.c        **** #include <errno.h>
  39:main.c        **** #include <stdarg.h>
  40:main.c        **** 
  41:main.c        **** #include "common.h"
  42:main.c        **** #include "dfu.h"
  43:main.c        **** #include "image.h"
  44:main.c        **** #include "sha256.h"
  45:main.c        **** 
  46:main.c        **** #define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias regi
  47:main.c        **** 
  48:main.c        **** #define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band r
  49:main.c        **** 
  50:main.c        **** #define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address */
  51:main.c        **** 
  52:main.c        **** /*!< Peripheral memory map */
  53:main.c        **** #define APB1PERIPH_BASE       PERIPH_BASE
  54:main.c        **** #define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)
  55:main.c        **** 
  56:main.c        **** #define USART1_BASE           (APB2PERIPH_BASE + 0x3800)
  57:main.c        **** #define USART1              ((USART_TypeDef *) USART1_BASE)
  58:main.c        **** 
  59:main.c        **** extern volatile dfuUploadTypes_t userUploadType;
  60:main.c        **** 
  61:main.c        **** void print_hash(unsigned char hash[])
  62:main.c        **** {
  27              		.loc 1 62 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE0:
  37              		.section	.text.startup.main,"ax",%progbits
  38              		.align	1
  39              		.global	main
  40              		.thumb
  41              		.thumb_func
  43              	main:
  44              	.LFB1:
  63:main.c        ****    int idx;
  64:main.c        ****    for (idx=0; idx < 32; idx++)
  65:main.c        ****       debug_print("%02x",hash[idx]);
  66:main.c        ****    debug_print("\n", 0);
  67:main.c        **** }
  68:main.c        **** 
  69:main.c        **** int main() 
  70:main.c        **** {
  45              		.loc 1 70 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 8
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              	.LVL1:
  50              		.loc 1 70 0
  51 0000 30B5     		push	{r4, r5, lr}
  52              		.cfi_def_cfa_offset 12
  53              		.cfi_offset 4, -12
  54              		.cfi_offset 5, -8
  55              		.cfi_offset 14, -4
  56 0002 85B0     		sub	sp, sp, #20
  57              		.cfi_def_cfa_offset 32
  71:main.c        **** 	bool no_user_jump = FALSE;
  72:main.c        **** 	bool dont_wait=FALSE;
  73:main.c        **** 	
  74:main.c        ****     systemReset(); // peripherals but not PC
  58              		.loc 1 74 0
  59 0004 FFF7FEFF 		bl	systemReset
  60              	.LVL2:
  75:main.c        ****     setupCLK();
  61              		.loc 1 75 0
  62 0008 FFF7FEFF 		bl	setupCLK
  63              	.LVL3:
  76:main.c        ****     setupLEDAndButton();
  64              		.loc 1 76 0
  65 000c FFF7FEFF 		bl	setupLEDAndButton
  66              	.LVL4:
  77:main.c        ****     setupUSB();
  67              		.loc 1 77 0
  68 0010 FFF7FEFF 		bl	setupUSB
  69              	.LVL5:
  78:main.c        ****     setupFLASH();
  70              		.loc 1 78 0
  71 0014 FFF7FEFF 		bl	setupFLASH
  72              	.LVL6:
  79:main.c        ****     uartInit();
  73              		.loc 1 79 0
  74 0018 FFF7FEFF 		bl	uartInit
  75              	.LVL7:
  80:main.c        ****     usbReset();
  76              		.loc 1 80 0
  77 001c FFF7FEFF 		bl	usbReset
  78              	.LVL8:
  81:main.c        **** 	uart_printf("\nBootloader init...\n");
  79              		.loc 1 81 0
  80 0020 2748     		ldr	r0, .L17
  81 0022 FFF7FEFF 		bl	uart_printf
  82              	.LVL9:
  82:main.c        **** 
  83:main.c        ****     if (readPin(GPIOB, 15) == 0x0)
  83              		.loc 1 83 0
  84 0026 0F21     		movs	r1, #15
  85 0028 2648     		ldr	r0, .L17+4
  86 002a FFF7FEFF 		bl	readPin
  87              	.LVL10:
  88 002e 0446     		mov	r4, r0
  89              	.LVL11:
  84:main.c        **** 	{
  85:main.c        **** 		no_user_jump = TRUE;
  86:main.c        **** 	} 
  87:main.c        **** 
  88:main.c        **** 	uart_printf("checking chain...\n");
  90              		.loc 1 88 0
  91 0030 2548     		ldr	r0, .L17+8
  92              	.LVL12:
  93 0032 FFF7FEFF 		bl	uart_printf
  94              	.LVL13:
  89:main.c        **** 	ImageObjectHandle imageHandle;
  90:main.c        **** 
  91:main.c        ****     int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
  95              		.loc 1 91 0
  96 0036 03A8     		add	r0, sp, #12
  97 0038 2449     		ldr	r1, .L17+12
  98 003a 0022     		movs	r2, #0
  99 003c FFF7FEFF 		bl	imageCheckFromAddress
 100              	.LVL14:
  92:main.c        ****     
  93:main.c        ****     debug_print("image check ret: %X\n", ret);
  94:main.c        **** 	switch (ret)
 101              		.loc 1 94 0
 102 0040 0328     		cmp	r0, #3
 103 0042 08D0     		beq	.L4
 104 0044 0428     		cmp	r0, #4
 105 0046 0BD0     		beq	.L5
 106 0048 0228     		cmp	r0, #2
 107 004a 0BD0     		beq	.L6
  71:main.c        **** 	bool no_user_jump = FALSE;
 108              		.loc 1 71 0
 109 004c D4F10104 		rsbs	r4, r4, #1
 110              	.LVL15:
 111 0050 38BF     		it	cc
 112 0052 0024     		movcc	r4, #0
 113 0054 0AE0     		b	.L7
 114              	.LVL16:
 115              	.L4:
  95:main.c        **** 	{
  96:main.c        **** 		case kImageImageIsTrusted:
  97:main.c        **** 			uart_printf("Boot OK\n");
 116              		.loc 1 97 0
 117 0056 1E48     		ldr	r0, .L17+16
 118              	.LVL17:
 119 0058 FFF7FEFF 		bl	uart_printf
 120              	.LVL18:
  98:main.c        **** 			no_user_jump = FALSE;
 121              		.loc 1 98 0
 122 005c 0024     		movs	r4, #0
  99:main.c        **** 			break;
 123              		.loc 1 99 0
 124 005e 05E0     		b	.L7
 125              	.LVL19:
 126              	.L5:
 100:main.c        **** 
 101:main.c        **** 		case kImageImageMissingMagic:
 102:main.c        **** 			uart_printf("Firmware missing... waiting in DFU\n");
 127              		.loc 1 102 0
 128 0060 1C48     		ldr	r0, .L17+20
 129              	.LVL20:
 130 0062 00E0     		b	.L14
 131              	.LVL21:
 132              	.L6:
 103:main.c        **** 			no_user_jump = TRUE;
 104:main.c        **** 			break;
 105:main.c        **** 
 106:main.c        **** 		case kImageImageRejectSignature:
 107:main.c        **** 			uart_printf("Signature unverified... waiting in DFU\n");
 133              		.loc 1 107 0
 134 0064 1C48     		ldr	r0, .L17+24
 135              	.LVL22:
 136              	.L14:
 137 0066 FFF7FEFF 		bl	uart_printf
 138              	.LVL23:
 108:main.c        **** 			no_user_jump = TRUE;
 139              		.loc 1 108 0
 140 006a 0124     		movs	r4, #1
 141              	.LVL24:
 142              	.L7:
 109:main.c        **** 			break;
 110:main.c        **** 
 111:main.c        **** 		default:
 112:main.c        **** 			break;
 113:main.c        **** 	}
 114:main.c        **** 	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 143              		.loc 1 114 0
 144 006c 0025     		movs	r5, #0
 145 006e 0095     		str	r5, [sp]
 146 0070 1A48     		ldr	r0, .L17+28
 147 0072 0D21     		movs	r1, #13
 148 0074 0522     		movs	r2, #5
 149 0076 4FF4A023 		mov	r3, #327680
 150 007a FFF7FEFF 		bl	strobePin
 151              	.LVL25:
 152              	.L8:
 115:main.c        **** 
 116:main.c        **** 	int delay_count = 0;
 117:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 153              		.loc 1 117 0 discriminator 1
 154 007e 052D     		cmp	r5, #5
 155 0080 12DC     		bgt	.L16
 156              	.L10:
 118:main.c        **** 	{
 119:main.c        **** 
 120:main.c        **** 		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 157              		.loc 1 120 0
 158 0082 0023     		movs	r3, #0
 159 0084 0093     		str	r3, [sp]
 160 0086 1548     		ldr	r0, .L17+28
 161 0088 0D21     		movs	r1, #13
 162 008a 0122     		movs	r2, #1
 163 008c 4FF48013 		mov	r3, #1048576
 164 0090 FFF7FEFF 		bl	strobePin
 165              	.LVL26:
 121:main.c        **** 
 122:main.c        **** 		if (dfuUploadStarted()) 
 166              		.loc 1 122 0
 167 0094 FFF7FEFF 		bl	dfuUploadStarted
 168              	.LVL27:
 169 0098 20B1     		cbz	r0, .L9
 123:main.c        **** 		{
 124:main.c        **** 			uart_printf("DFU finished upload\n");
 170              		.loc 1 124 0
 171 009a 1148     		ldr	r0, .L17+32
 172 009c FFF7FEFF 		bl	uart_printf
 173              	.LVL28:
 125:main.c        **** 			dfuFinishUpload(); // systemHardReset from DFU once done
 174              		.loc 1 125 0
 175 00a0 FFF7FEFF 		bl	dfuFinishUpload
 176              	.LVL29:
 177              	.L9:
 178 00a4 0135     		adds	r5, r5, #1
 179              	.LVL30:
 180 00a6 EAE7     		b	.L8
 181              	.LVL31:
 182              	.L16:
 117:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 183              		.loc 1 117 0 discriminator 2
 184 00a8 002C     		cmp	r4, #0
 185 00aa EAD1     		bne	.L10
 126:main.c        **** 		}
 127:main.c        **** 	}
 128:main.c        **** 
 129:main.c        **** 	if (no_user_jump == FALSE)
 130:main.c        **** 	{
 131:main.c        **** 		uart_printf("Jumping to OS.\n");
 186              		.loc 1 131 0
 187 00ac 0D48     		ldr	r0, .L17+36
 188 00ae FFF7FEFF 		bl	uart_printf
 189              	.LVL32:
 132:main.c        **** 		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 190              		.loc 1 132 0
 191 00b2 0D48     		ldr	r0, .L17+40
 192 00b4 FFF7FEFF 		bl	jumpToUser
 193              	.LVL33:
 133:main.c        **** 	}
 134:main.c        **** 	
 135:main.c        **** 	return 0;// Added to please the compiler
 136:main.c        **** }...
 194              		.loc 1 136 0
 195 00b8 2046     		mov	r0, r4
 196 00ba 05B0     		add	sp, sp, #20
 197              		@ sp needed
 198 00bc 30BD     		pop	{r4, r5, pc}
 199              	.LVL34:
 200              	.L18:
 201 00be 00BF     		.align	2
 202              	.L17:
 203 00c0 00000000 		.word	.LC0
 204 00c4 000C0140 		.word	1073810432
 205 00c8 15000000 		.word	.LC1
 206 00cc 00800008 		.word	134250496
 207 00d0 28000000 		.word	.LC2
 208 00d4 31000000 		.word	.LC3
 209 00d8 55000000 		.word	.LC4
 210 00dc 00100140 		.word	1073811456
 211 00e0 7D000000 		.word	.LC5
 212 00e4 92000000 		.word	.LC6
 213 00e8 84800008 		.word	134250628
 214              		.cfi_endproc
 215              	.LFE1:
 217              		.comm	wTransferSize,4,4
 218              		.section	.rodata.str1.1,"aMS",%progbits,1
 219              	.LC0:
 220 0000 0A426F6F 		.ascii	"\012Bootloader init...\012\000"
 220      746C6F61 
 220      64657220 
 220      696E6974 
 220      2E2E2E0A 
 221              	.LC1:
 222 0015 63686563 		.ascii	"checking chain...\012\000"
 222      6B696E67 
 222      20636861 
 222      696E2E2E 
 222      2E0A00
 223              	.LC2:
 224 0028 426F6F74 		.ascii	"Boot OK\012\000"
 224      204F4B0A 
 224      00
 225              	.LC3:
 226 0031 4669726D 		.ascii	"Firmware missing... waiting in DFU\012\000"
 226      77617265 
 226      206D6973 
 226      73696E67 
 226      2E2E2E20 
 227              	.LC4:
 228 0055 5369676E 		.ascii	"Signature unverified... waiting in DFU\012\000"
 228      61747572 
 228      6520756E 
 228      76657269 
 228      66696564 
 229              	.LC5:
 230 007d 44465520 		.ascii	"DFU finished upload\012\000"
 230      66696E69 
 230      73686564 
 230      2075706C 
 230      6F61640A 
 231              	.LC6:
 232 0092 4A756D70 		.ascii	"Jumping to OS.\012\000"
 232      696E6720 
 232      746F204F 
 232      532E0A00 
 233              		.text
 234              	.Letext0:
 235              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\lib\\gcc\\arm-none-eabi\\4.8
 236              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\mach
 237              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\stdi
 238              		.file 5 "./stm32_lib/stm32f10x_type.h"
 239              		.file 6 "image.h"
 240              		.file 7 "hardware.h"
 241              		.file 8 "usb.h"
 242              		.file 9 "dfu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\haifisch\AppData\Local\Temp\ccrv34PA.s:19     .text.print_hash:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccrv34PA.s:24     .text.print_hash:00000000 print_hash
C:\Users\haifisch\AppData\Local\Temp\ccrv34PA.s:38     .text.startup.main:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccrv34PA.s:43     .text.startup.main:00000000 main
C:\Users\haifisch\AppData\Local\Temp\ccrv34PA.s:203    .text.startup.main:000000c0 $d
                            *COM*:00000004 wTransferSize
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
systemReset
setupCLK
setupLEDAndButton
setupUSB
setupFLASH
uartInit
usbReset
uart_printf
readPin
imageCheckFromAddress
strobePin
dfuUploadStarted
dfuFinishUpload
jumpToUser
