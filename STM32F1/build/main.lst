   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.print_hash,"ax",%progbits
  19              		.align	2
  20              		.global	print_hash
  21              		.thumb
  22              		.thumb_func
  24              	print_hash:
  25              	.LFB0:
  26              		.file 1 "main.c"
   1:main.c        **** /* *****************************************************************************
   2:main.c        ****  * The MIT License
   3:main.c        ****  *
   4:main.c        ****  * Copyright (c) 2010 LeafLabs LLC.
   5:main.c        ****  *
   6:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   7:main.c        ****  * of this software and associated documentation files (the "Software"), to deal
   8:main.c        ****  * in the Software without restriction, including without limitation the rights
   9:main.c        ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  10:main.c        ****  * copies of the Software, and to permit persons to whom the Software is
  11:main.c        ****  * furnished to do so, subject to the following conditions:
  12:main.c        ****  *
  13:main.c        ****  * The above copyright notice and this permission notice shall be included in
  14:main.c        ****  * all copies or substantial portions of the Software.
  15:main.c        ****  *
  16:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  17:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  18:main.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  19:main.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  20:main.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  21:main.c        ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  22:main.c        ****  * THE SOFTWARE.
  23:main.c        ****  * ****************************************************************************/
  24:main.c        **** 
  25:main.c        **** /**
  26:main.c        ****  *  @file main.c
  27:main.c        ****  *
  28:main.c        ****  *  @brief main loop and calling any hardware init stuff. timing hacks for EEPROM
  29:main.c        ****  *  writes not to block usb interrupts. logic to handle 2 second timeout then
  30:main.c        ****  *  jump to user code.
  31:main.c        ****  *
  32:main.c        ****  */
  33:main.c        **** #include <stdio.h>
  34:main.c        **** #include <stdint.h>
  35:main.c        **** #include <string.h>
  36:main.c        **** #include <limits.h>
  37:main.c        **** #include <unistd.h>
  38:main.c        **** #include <errno.h>
  39:main.c        **** #include <stdarg.h>
  40:main.c        **** 
  41:main.c        **** #include "common.h"
  42:main.c        **** #include "dfu.h"
  43:main.c        **** #include "image.h"
  44:main.c        **** #include "sha256.h"
  45:main.c        **** 
  46:main.c        **** #define PERIPH_BASE           ((uint32_t)0x40000000) /*!< Peripheral base address in the alias regi
  47:main.c        **** 
  48:main.c        **** #define PERIPH_BB_BASE        ((uint32_t)0x42000000) /*!< Peripheral base address in the bit-band r
  49:main.c        **** 
  50:main.c        **** #define FSMC_R_BASE           ((uint32_t)0xA0000000) /*!< FSMC registers base address */
  51:main.c        **** 
  52:main.c        **** /*!< Peripheral memory map */
  53:main.c        **** #define APB1PERIPH_BASE       PERIPH_BASE
  54:main.c        **** #define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)
  55:main.c        **** 
  56:main.c        **** #define USART1_BASE           (APB2PERIPH_BASE + 0x3800)
  57:main.c        **** #define USART1              ((USART_TypeDef *) USART1_BASE)
  58:main.c        **** 
  59:main.c        **** extern volatile dfuUploadTypes_t userUploadType;
  60:main.c        **** 
  61:main.c        **** void print_hash(unsigned char hash[])
  62:main.c        **** {
  27              		.loc 1 62 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 3, -16
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38              		.loc 1 62 0
  39 0002 0546     		mov	r5, r0
  63:main.c        ****    int idx;
  64:main.c        ****    for (idx=0; idx < 32; idx++)
  40              		.loc 1 64 0
  41 0004 0024     		movs	r4, #0
  42              	.LVL1:
  43              	.L3:
  65:main.c        ****       uart_printf("%02x",hash[idx]);
  44              		.loc 1 65 0 discriminator 2
  45 0006 295D     		ldrb	r1, [r5, r4]	@ zero_extendqisi2
  46 0008 0548     		ldr	r0, .L5
  64:main.c        ****    for (idx=0; idx < 32; idx++)
  47              		.loc 1 64 0 discriminator 2
  48 000a 0134     		adds	r4, r4, #1
  49              	.LVL2:
  50              		.loc 1 65 0 discriminator 2
  51 000c FFF7FEFF 		bl	uart_printf
  52              	.LVL3:
  64:main.c        ****    for (idx=0; idx < 32; idx++)
  53              		.loc 1 64 0 discriminator 2
  54 0010 202C     		cmp	r4, #32
  55 0012 F8D1     		bne	.L3
  66:main.c        ****    uart_printf("\n");
  56              		.loc 1 66 0
  57 0014 0348     		ldr	r0, .L5+4
  67:main.c        **** }
  58              		.loc 1 67 0
  59 0016 BDE83840 		pop	{r3, r4, r5, lr}
  60              	.LVL4:
  66:main.c        ****    uart_printf("\n");
  61              		.loc 1 66 0
  62 001a FFF7FEBF 		b	uart_printf
  63              	.LVL5:
  64              	.L6:
  65 001e 00BF     		.align	2
  66              	.L5:
  67 0020 00000000 		.word	.LC0
  68 0024 08000000 		.word	.LC1
  69              		.cfi_endproc
  70              	.LFE0:
  72              		.section	.text.startup.main,"ax",%progbits
  73              		.align	2
  74              		.global	main
  75              		.thumb
  76              		.thumb_func
  78              	main:
  79              	.LFB1:
  68:main.c        **** 
  69:main.c        **** int main() 
  70:main.c        **** {
  80              		.loc 1 70 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              	.LVL6:
  85 0000 30B5     		push	{r4, r5, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 5, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  71:main.c        **** 	bool no_user_jump = FALSE;
  72:main.c        **** 	bool dont_wait=FALSE;
  73:main.c        **** 	
  74:main.c        ****     systemReset(); // peripherals but not PC
  92              		.loc 1 74 0
  93 0004 FFF7FEFF 		bl	systemReset
  94              	.LVL7:
  75:main.c        ****     setupCLK();
  95              		.loc 1 75 0
  96 0008 FFF7FEFF 		bl	setupCLK
  97              	.LVL8:
  76:main.c        ****     setupLEDAndButton();
  98              		.loc 1 76 0
  99 000c FFF7FEFF 		bl	setupLEDAndButton
 100              	.LVL9:
  77:main.c        ****     setupUSB();
 101              		.loc 1 77 0
 102 0010 FFF7FEFF 		bl	setupUSB
 103              	.LVL10:
  78:main.c        ****     setupFLASH();
 104              		.loc 1 78 0
 105 0014 FFF7FEFF 		bl	setupFLASH
 106              	.LVL11:
  79:main.c        ****     uartInit();
 107              		.loc 1 79 0
 108 0018 FFF7FEFF 		bl	uartInit
 109              	.LVL12:
  80:main.c        ****     usbReset();
 110              		.loc 1 80 0
 111 001c FFF7FEFF 		bl	usbReset
 112              	.LVL13:
  81:main.c        **** 	uart_printf("\nBootloader init...\n");
 113              		.loc 1 81 0
 114 0020 3A48     		ldr	r0, .L29
 115 0022 FFF7FEFF 		bl	uart_printf
 116              	.LVL14:
  82:main.c        **** 
  83:main.c        ****     if (readPin(GPIOB, 15) == 0x0)
 117              		.loc 1 83 0
 118 0026 0F21     		movs	r1, #15
 119 0028 3948     		ldr	r0, .L29+4
 120 002a FFF7FEFF 		bl	readPin
 121              	.LVL15:
 122 002e 0546     		mov	r5, r0
 123              	.LVL16:
  84:main.c        **** 	{
  85:main.c        **** 		no_user_jump = TRUE;
  86:main.c        **** 	} 
  87:main.c        **** 
  88:main.c        **** 	uart_printf("checking chain...\n");
 124              		.loc 1 88 0
 125 0030 3848     		ldr	r0, .L29+8
 126              	.LVL17:
 127 0032 FFF7FEFF 		bl	uart_printf
 128              	.LVL18:
  89:main.c        **** 	ImageObjectHandle imageHandle;
  90:main.c        **** 
  91:main.c        ****     int ret = imageCheckFromAddress(&imageHandle, USER_CODE_FLASH0X8008000, 0);
 129              		.loc 1 91 0
 130 0036 3849     		ldr	r1, .L29+12
 131 0038 0022     		movs	r2, #0
 132 003a 03A8     		add	r0, sp, #12
 133 003c FFF7FEFF 		bl	imageCheckFromAddress
 134              	.LVL19:
 135 0040 0446     		mov	r4, r0
 136              	.LVL20:
  92:main.c        ****     
  93:main.c        ****     uart_printf("image check ret: %X\n", ret);
 137              		.loc 1 93 0
 138 0042 0146     		mov	r1, r0
 139 0044 3548     		ldr	r0, .L29+16
 140              	.LVL21:
 141 0046 FFF7FEFF 		bl	uart_printf
 142              	.LVL22:
  94:main.c        **** 	switch (ret)
 143              		.loc 1 94 0
 144 004a 032C     		cmp	r4, #3
 145 004c 20D0     		beq	.L9
 146 004e 042C     		cmp	r4, #4
 147 0050 4BD0     		beq	.L10
 148 0052 022C     		cmp	r4, #2
 149 0054 56D0     		beq	.L11
  95:main.c        **** 	{
  96:main.c        **** 		case kImageImageIsTrusted:
  97:main.c        **** 			uart_printf("Boot OK\n");
  98:main.c        **** 			no_user_jump = FALSE;
  99:main.c        **** 			break;
 100:main.c        **** 
 101:main.c        **** 		case kImageImageMissingMagic:
 102:main.c        **** 			uart_printf("Firmware missing... waiting in DFU\n");
 103:main.c        **** 			no_user_jump = TRUE;
 104:main.c        **** 			break;
 105:main.c        **** 
 106:main.c        **** 		case kImageImageRejectSignature:
 107:main.c        **** 			uart_printf("Signature unverified... waiting in DFU\n");
 108:main.c        **** 			no_user_jump = TRUE;
 109:main.c        **** 			break;
 110:main.c        **** 
 111:main.c        **** 		default:
 112:main.c        **** 			break;
 113:main.c        **** 	}
 114:main.c        **** 	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 150              		.loc 1 114 0
 151 0056 0023     		movs	r3, #0
 152 0058 0093     		str	r3, [sp]
 153 005a 3148     		ldr	r0, .L29+20
 154 005c 0D21     		movs	r1, #13
 155 005e 0522     		movs	r2, #5
 156 0060 4FF4A023 		mov	r3, #327680
 157 0064 FFF7FEFF 		bl	strobePin
 158              	.LVL23:
 159 0068 F5B9     		cbnz	r5, .L13
 160              	.LVL24:
 161              	.L12:
 115:main.c        **** 
 116:main.c        **** 	int delay_count = 0;
 117:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 118:main.c        **** 	{
 119:main.c        **** 
 120:main.c        **** 		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 162              		.loc 1 120 0
 163 006a 0024     		movs	r4, #0
 164              	.LVL25:
 165              	.L15:
 166 006c 2C48     		ldr	r0, .L29+20
 167 006e 0D21     		movs	r1, #13
 168 0070 0122     		movs	r2, #1
 169 0072 4FF48013 		mov	r3, #1048576
 170 0076 0094     		str	r4, [sp]
 171 0078 FFF7FEFF 		bl	strobePin
 172              	.LVL26:
 121:main.c        **** 
 122:main.c        **** 		if (dfuUploadStarted()) 
 173              		.loc 1 122 0
 174 007c FFF7FEFF 		bl	dfuUploadStarted
 175              	.LVL27:
 176 0080 0028     		cmp	r0, #0
 177 0082 F3D0     		beq	.L15
 123:main.c        **** 		{
 124:main.c        **** 			uart_printf("DFU finished upload\n");
 178              		.loc 1 124 0
 179 0084 2748     		ldr	r0, .L29+24
 180 0086 FFF7FEFF 		bl	uart_printf
 181              	.LVL28:
 125:main.c        **** 			dfuFinishUpload(); // systemHardReset from DFU once done
 182              		.loc 1 125 0
 183 008a FFF7FEFF 		bl	dfuFinishUpload
 184              	.LVL29:
 185 008e EDE7     		b	.L15
 186              	.LVL30:
 187              	.L9:
  97:main.c        **** 			uart_printf("Boot OK\n");
 188              		.loc 1 97 0
 189 0090 2548     		ldr	r0, .L29+28
 190 0092 FFF7FEFF 		bl	uart_printf
 191              	.LVL31:
 114:main.c        **** 	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 192              		.loc 1 114 0
 193 0096 0023     		movs	r3, #0
 194 0098 0093     		str	r3, [sp]
 195 009a 2148     		ldr	r0, .L29+20
 196 009c 0D21     		movs	r1, #13
 197 009e 0522     		movs	r2, #5
 198 00a0 4FF4A023 		mov	r3, #327680
 199 00a4 FFF7FEFF 		bl	strobePin
 200              	.LVL32:
 201              	.L13:
  70:main.c        **** {
 202              		.loc 1 70 0
 203 00a8 0624     		movs	r4, #6
 204              	.LVL33:
 120:main.c        **** 		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 205              		.loc 1 120 0
 206 00aa 0025     		movs	r5, #0
 207 00ac 01E0     		b	.L18
 208              	.LVL34:
 209              	.L16:
 117:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 210              		.loc 1 117 0
 211 00ae 013C     		subs	r4, r4, #1
 212 00b0 12D0     		beq	.L28
 213              	.L18:
 120:main.c        **** 		strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 214              		.loc 1 120 0
 215 00b2 1B48     		ldr	r0, .L29+20
 216 00b4 0D21     		movs	r1, #13
 217 00b6 0122     		movs	r2, #1
 218 00b8 4FF48013 		mov	r3, #1048576
 219 00bc 0095     		str	r5, [sp]
 220 00be FFF7FEFF 		bl	strobePin
 221              	.LVL35:
 122:main.c        **** 		if (dfuUploadStarted()) 
 222              		.loc 1 122 0
 223 00c2 FFF7FEFF 		bl	dfuUploadStarted
 224              	.LVL36:
 225 00c6 0028     		cmp	r0, #0
 226 00c8 F1D0     		beq	.L16
 124:main.c        **** 			uart_printf("DFU finished upload\n");
 227              		.loc 1 124 0
 228 00ca 1648     		ldr	r0, .L29+24
 229 00cc FFF7FEFF 		bl	uart_printf
 230              	.LVL37:
 231              		.loc 1 125 0
 232 00d0 FFF7FEFF 		bl	dfuFinishUpload
 233              	.LVL38:
 117:main.c        **** 	while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 234              		.loc 1 117 0
 235 00d4 013C     		subs	r4, r4, #1
 236 00d6 ECD1     		bne	.L18
 237              	.L28:
 126:main.c        **** 		}
 127:main.c        **** 	}
 128:main.c        **** 
 129:main.c        **** 	if (no_user_jump == FALSE)
 130:main.c        **** 	{
 131:main.c        **** 		uart_printf("Jumping to OS.\n");
 238              		.loc 1 131 0
 239 00d8 1448     		ldr	r0, .L29+32
 240 00da FFF7FEFF 		bl	uart_printf
 241              	.LVL39:
 132:main.c        **** 		jumpToUser((USER_CODE_FLASH0X8008000+0x84));	
 242              		.loc 1 132 0
 243 00de 1448     		ldr	r0, .L29+36
 244 00e0 FFF7FEFF 		bl	jumpToUser
 245              	.LVL40:
 133:main.c        **** 	}
 134:main.c        **** 	
 135:main.c        **** 	return 0;// Added to please the compiler
 136:main.c        **** }...
 246              		.loc 1 136 0
 247 00e4 2046     		mov	r0, r4
 248 00e6 05B0     		add	sp, sp, #20
 249              		@ sp needed
 250 00e8 30BD     		pop	{r4, r5, pc}
 251              	.LVL41:
 252              	.L10:
 102:main.c        **** 			uart_printf("Firmware missing... waiting in DFU\n");
 253              		.loc 1 102 0
 254 00ea 1248     		ldr	r0, .L29+40
 255 00ec FFF7FEFF 		bl	uart_printf
 256              	.LVL42:
 257              	.L14:
 114:main.c        **** 	strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 258              		.loc 1 114 0
 259 00f0 0023     		movs	r3, #0
 260 00f2 0093     		str	r3, [sp]
 261 00f4 0A48     		ldr	r0, .L29+20
 262 00f6 0D21     		movs	r1, #13
 263 00f8 0522     		movs	r2, #5
 264 00fa 4FF4A023 		mov	r3, #327680
 265 00fe FFF7FEFF 		bl	strobePin
 266              	.LVL43:
 267 0102 B2E7     		b	.L12
 268              	.LVL44:
 269              	.L11:
 107:main.c        **** 			uart_printf("Signature unverified... waiting in DFU\n");
 270              		.loc 1 107 0
 271 0104 0C48     		ldr	r0, .L29+44
 272 0106 FFF7FEFF 		bl	uart_printf
 273              	.LVL45:
 109:main.c        **** 			break;
 274              		.loc 1 109 0
 275 010a F1E7     		b	.L14
 276              	.L30:
 277              		.align	2
 278              	.L29:
 279 010c 0C000000 		.word	.LC2
 280 0110 000C0140 		.word	1073810432
 281 0114 24000000 		.word	.LC3
 282 0118 00800008 		.word	134250496
 283 011c 38000000 		.word	.LC4
 284 0120 00100140 		.word	1073811456
 285 0124 A8000000 		.word	.LC8
 286 0128 50000000 		.word	.LC5
 287 012c C0000000 		.word	.LC9
 288 0130 84800008 		.word	134250628
 289 0134 5C000000 		.word	.LC6
 290 0138 80000000 		.word	.LC7
 291              		.cfi_endproc
 292              	.LFE1:
 294              		.comm	wTransferSize,4,4
 295              		.section	.rodata.str1.4,"aMS",%progbits,1
 296              		.align	2
 297              	.LC0:
 298 0000 25303278 		.ascii	"%02x\000"
 298      00
 299 0005 000000   		.space	3
 300              	.LC1:
 301 0008 0A00     		.ascii	"\012\000"
 302 000a 0000     		.space	2
 303              	.LC2:
 304 000c 0A426F6F 		.ascii	"\012Bootloader init...\012\000"
 304      746C6F61 
 304      64657220 
 304      696E6974 
 304      2E2E2E0A 
 305 0021 000000   		.space	3
 306              	.LC3:
 307 0024 63686563 		.ascii	"checking chain...\012\000"
 307      6B696E67 
 307      20636861 
 307      696E2E2E 
 307      2E0A00
 308 0037 00       		.space	1
 309              	.LC4:
 310 0038 696D6167 		.ascii	"image check ret: %X\012\000"
 310      65206368 
 310      65636B20 
 310      7265743A 
 310      2025580A 
 311 004d 000000   		.space	3
 312              	.LC5:
 313 0050 426F6F74 		.ascii	"Boot OK\012\000"
 313      204F4B0A 
 313      00
 314 0059 000000   		.space	3
 315              	.LC6:
 316 005c 4669726D 		.ascii	"Firmware missing... waiting in DFU\012\000"
 316      77617265 
 316      206D6973 
 316      73696E67 
 316      2E2E2E20 
 317              	.LC7:
 318 0080 5369676E 		.ascii	"Signature unverified... waiting in DFU\012\000"
 318      61747572 
 318      6520756E 
 318      76657269 
 318      66696564 
 319              	.LC8:
 320 00a8 44465520 		.ascii	"DFU finished upload\012\000"
 320      66696E69 
 320      73686564 
 320      2075706C 
 320      6F61640A 
 321 00bd 000000   		.space	3
 322              	.LC9:
 323 00c0 4A756D70 		.ascii	"Jumping to OS.\012\000"
 323      696E6720 
 323      746F204F 
 323      532E0A00 
 324              		.text
 325              	.Letext0:
 326              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\lib\\gcc\\arm-none-eabi\\4.8
 327              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\mach
 328              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.8 2014q3\\arm-none-eabi\\include\\stdi
 329              		.file 5 "./stm32_lib/stm32f10x_type.h"
 330              		.file 6 "image.h"
 331              		.file 7 "hardware.h"
 332              		.file 8 "usb.h"
 333              		.file 9 "dfu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:19     .text.print_hash:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:24     .text.print_hash:00000000 print_hash
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:67     .text.print_hash:00000020 $d
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:73     .text.startup.main:00000000 $t
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:78     .text.startup.main:00000000 main
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:279    .text.startup.main:0000010c $d
                            *COM*:00000004 wTransferSize
C:\Users\haifisch\AppData\Local\Temp\ccbC2FXl.s:296    .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
uart_printf
systemReset
setupCLK
setupLEDAndButton
setupUSB
setupFLASH
uartInit
usbReset
readPin
imageCheckFromAddress
strobePin
dfuUploadStarted
dfuFinishUpload
jumpToUser
